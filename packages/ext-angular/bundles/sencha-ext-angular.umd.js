(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@sencha/ext-angular', ['exports', '@angular/core'], factory) :
    (global = global || self, factory((global.sencha = global.sencha || {}, global.sencha['ext-angular'] = {}), global.ng.core));
}(this, function (exports, core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    var Ext_Base = /** @class */ (function () {
        function Ext_Base() {
        }
        Ext_Base.getProperties = function (properties) {
            return properties.concat(Ext_Base.PROPERTIES);
        };
        Ext_Base.getEvents = function (events) {
            return events.concat(Ext_Base.EVENTS);
        };
        Ext_Base.PROPERTIES = [
            'eng',
            'viewport',
            'align',
            'plugins',
            'responsiveConfig',
            'responsiveFormulas',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Base.EVENTS = [
            { name: 'ready', parameters: '' }
        ];
        return Ext_Base;
    }());
    //public static XTYPE: string = '';
    //public static PROPERTIESOBJECT: any = {
    //[object Object]
    //"ext": ["string"],
    //"ewc": ["string"],
    //"viewport":["boolean"],
    //"plugins":["Array","Ext.enums.Plugin","Object","Ext.plugin.Abstract"],
    //"responsiveFormulas":["Object"]
    //};
    //static METHODS: any[] = [];
    //public static EVENTNAMES: string[] = [];

    var Ext_Evented = /** @class */ (function (_super) {
        __extends(Ext_Evented, _super);
        function Ext_Evented() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Evented.getProperties = function (properties) {
            properties = properties.concat(Ext_Evented.PROPERTIES);
            return Ext_Base.getProperties(properties);
        };
        Ext_Evented.getEvents = function (events) {
            events = events.concat(Ext_Evented.EVENTS);
            return Ext_Base.getEvents(events);
        };
        Ext_Evented.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Evented.EVENTS = [
            { name: 'ready', parameters: '' }
        ];
        return Ext_Evented;
    }(Ext_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Evented.EVENTNAMES);
    //    return Ext_Base.getEventNames(eventnames);
    //}

    var Ext_Widget = /** @class */ (function (_super) {
        __extends(Ext_Widget, _super);
        function Ext_Widget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Widget.getProperties = function (properties) {
            properties = properties.concat(Ext_Widget.PROPERTIES);
            return Ext_Evented.getProperties(properties);
        };
        Ext_Widget.getEvents = function (events) {
            events = events.concat(Ext_Widget.EVENTS);
            return Ext_Evented.getEvents(events);
        };
        Ext_Widget.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'border',
            'cls',
            'constrainAlign',
            'disabled',
            'flex',
            'floated',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'margin',
            'name',
            'relative',
            'renderTo',
            'ripple',
            'shadow',
            'shim',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'ui',
            'userCls',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Widget.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'widget' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'widget,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'widget,event' },
            { name: 'focusenter', parameters: 'widget,event' },
            { name: 'focusleave', parameters: 'widget,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'widget' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Widget;
    }(Ext_Evented));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Widget.EVENTNAMES);
    //    return Ext_Evented.getEventNames(eventnames);
    //}

    var Ext_Component = /** @class */ (function (_super) {
        __extends(Ext_Component, _super);
        function Ext_Component() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Component.getProperties = function (properties) {
            properties = properties.concat(Ext_Component.PROPERTIES);
            return Ext_Widget.getProperties(properties);
        };
        Ext_Component.getEvents = function (events) {
            events = events.concat(Ext_Component.EVENTS);
            return Ext_Widget.getEvents(events);
        };
        Ext_Component.PROPERTIES = [
            'axisLock',
            'bottom',
            'centered',
            'contentEl',
            'data',
            'displayed',
            'docked',
            'draggable',
            'fullscreen',
            'hideAnimation',
            'hideOnMaskTap',
            'html',
            'left',
            'maxHeight',
            'maxWidth',
            'minHeight',
            'minWidth',
            'modal',
            'modelValidation',
            'padding',
            'record',
            'right',
            'scrollable',
            'showAnimation',
            'tabIndex',
            'tooltip',
            'top',
            'tpl',
            'tplWriteMode',
            'userSelectable',
            'weight',
            'xtype',
            'zIndex',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Component.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'component' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'component,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'component,event' },
            { name: 'focusenter', parameters: 'component,event' },
            { name: 'focusleave', parameters: 'component,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'component' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Component;
    }(Ext_Widget));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Component.EVENTNAMES);
    //    return Ext_Widget.getEventNames(eventnames);
    //}

    var Ext_Container = /** @class */ (function (_super) {
        __extends(Ext_Container, _super);
        function Ext_Container() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Container.getProperties = function (properties) {
            properties = properties.concat(Ext_Container.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_Container.getEvents = function (events) {
            events = events.concat(Ext_Container.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_Container.PROPERTIES = [
            'activeItem',
            'autoDestroy',
            'autoSize',
            'bodyCls',
            'cardSwitchAnimation',
            'control',
            'defaultFocus',
            'defaults',
            'defaultType',
            'innerCls',
            'items',
            'layout',
            'manageBorders',
            'masked',
            'weighted',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Container.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,container,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'container,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'container' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'container,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,container,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'container,event' },
            { name: 'focusenter', parameters: 'container,event' },
            { name: 'focusleave', parameters: 'container,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'container,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'container,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'container,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'container' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Container;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Container.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var Ext_Panel = /** @class */ (function (_super) {
        __extends(Ext_Panel, _super);
        function Ext_Panel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Panel.getProperties = function (properties) {
            properties = properties.concat(Ext_Panel.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_Panel.getEvents = function (events) {
            events = events.concat(Ext_Panel.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_Panel.PROPERTIES = [
            'anchor',
            'anchorPosition',
            'bbar',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'buttons',
            'buttonToolbar',
            'closable',
            'closeAction',
            'closeToolText',
            'collapsed',
            'collapsible',
            'header',
            'headerPosition',
            'icon',
            'iconAlign',
            'iconCls',
            'lbar',
            'manageBorders',
            'rbar',
            'resizable',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Panel.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,panel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'panel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'panel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'panel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'panel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'panel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'panel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'panel' },
            { name: 'deactivate', parameters: 'oldActiveItem,panel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'panel' },
            { name: 'drawershow', parameters: 'panel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'panel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'panel,event' },
            { name: 'focusenter', parameters: 'panel,event' },
            { name: 'focusleave', parameters: 'panel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'panel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'panel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'panel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'panel,context' },
            { name: 'resizedragcancel', parameters: 'panel,context' },
            { name: 'resizedragend', parameters: 'panel,context' },
            { name: 'resizedragstart', parameters: 'panel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'panel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Panel;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Panel.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var Ext_Sheet = /** @class */ (function (_super) {
        __extends(Ext_Sheet, _super);
        function Ext_Sheet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Sheet.getProperties = function (properties) {
            properties = properties.concat(Ext_Sheet.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_Sheet.getEvents = function (events) {
            events = events.concat(Ext_Sheet.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_Sheet.PROPERTIES = [
            'centered',
            'cover',
            'enter',
            'exit',
            'reveal',
            'side',
            'stretchX',
            'stretchY',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Sheet.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,sheet,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'sheet,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'sheet' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'sheet' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'sheet,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sheet' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sheet,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'sheet' },
            { name: 'deactivate', parameters: 'oldActiveItem,sheet,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'sheet' },
            { name: 'drawershow', parameters: 'sheet' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'sheet' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sheet,event' },
            { name: 'focusenter', parameters: 'sheet,event' },
            { name: 'focusleave', parameters: 'sheet,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'sheet,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'sheet,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'sheet,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'sheet,context' },
            { name: 'resizedragcancel', parameters: 'sheet,context' },
            { name: 'resizedragend', parameters: 'sheet,context' },
            { name: 'resizedragstart', parameters: 'sheet,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sheet' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Sheet;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Sheet.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var Ext_ActionSheet = /** @class */ (function (_super) {
        __extends(Ext_ActionSheet, _super);
        function Ext_ActionSheet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_ActionSheet.getProperties = function (properties) {
            properties = properties.concat(Ext_ActionSheet.PROPERTIES);
            return Ext_Sheet.getProperties(properties);
        };
        Ext_ActionSheet.getEvents = function (events) {
            events = events.concat(Ext_ActionSheet.EVENTS);
            return Ext_Sheet.getEvents(events);
        };
        Ext_ActionSheet.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_ActionSheet.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,actionsheet,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'actionsheet,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'actionsheet' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'actionsheet' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'actionsheet,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'actionsheet' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'actionsheet,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'actionsheet' },
            { name: 'deactivate', parameters: 'oldActiveItem,actionsheet,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'actionsheet' },
            { name: 'drawershow', parameters: 'actionsheet' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'actionsheet' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'actionsheet,event' },
            { name: 'focusenter', parameters: 'actionsheet,event' },
            { name: 'focusleave', parameters: 'actionsheet,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'actionsheet,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'actionsheet,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'actionsheet,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'actionsheet,context' },
            { name: 'resizedragcancel', parameters: 'actionsheet,context' },
            { name: 'resizedragend', parameters: 'actionsheet,context' },
            { name: 'resizedragstart', parameters: 'actionsheet,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'actionsheet' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_ActionSheet;
    }(Ext_Sheet));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_ActionSheet.EVENTNAMES);
    //    return Ext_Sheet.getEventNames(eventnames);
    //}

    var EngBase = /** @class */ (function () {
        function EngBase(eRef, hostComponent, properties, events) {
            var _this = this;
            this.node = eRef.nativeElement;
            this.parentNode = hostComponent;
            this.properties = properties;
            this.events = events;
            this.events.forEach(function (event, n) {
                if (event.name != 'fullscreen') {
                    _this[event.name] = new core.EventEmitter();
                }
                else {
                    _this[event.name + 'event'] = new core.EventEmitter();
                }
            });
            this.newDiv = document.createElement('div');
            //var t = document.createTextNode("newDiv");
            //this.newDiv.appendChild(t);
            this.node.insertAdjacentElement('beforebegin', this.newDiv);
            this.base = EngBase;
        }
        Object.defineProperty(EngBase.prototype, "childComponents", {
            get: function () {
                var _this = this;
                return this._childComponents.filter(function (item) { return item !== _this; });
            },
            enumerable: true,
            configurable: true
        });
        EngBase.prototype.baseOnInit = function () { };
        EngBase.prototype.baseAfterViewInit = function () {
            this.initMe();
        };
        //******* base start */
        EngBase.prototype.initMe = function () {
            //console.log('');console.log('*** initMe for ' + this.currentElName);
            this.createRawChildren();
            this.setParentType();
            this.setDirection();
            this.figureOutA();
            this.createProps(this.properties, this.events);
            this.createExtComponent();
        };
        EngBase.prototype.createRawChildren = function () {
            if (this.currentEl.isAngular) {
                this.currentEl.rawChildren = this.currentEl.childComponents;
            }
            else {
                this.currentEl.ewcChildren = Array.from(this.currentEl.children);
                this.currentEl.rawChildren = [];
                var num = 0;
                for (var i = 0; i < this.currentEl.ewcChildren.length; i++) {
                    if (this.currentEl.ewcChildren[i].xtype != undefined) {
                        this.currentEl.rawChildren[num] = this.currentEl.ewcChildren[i];
                        num++;
                    }
                    else {
                        //do something with div (add an Ext.widget...)
                    }
                }
            }
        };
        EngBase.prototype.setParentType = function () {
            // if (this.parentEl == null) {
            //     this.hasParent = false;
            // }
            // else {
            //     if (this.parentElName.substring(0, 4) == 'EXT-') {
            //         this.hasParent = true;
            //     }
            //     else {
            //         this.hasParent = false;
            //     }
            // }
            if (this.parentNode == null) {
                this.parentType = 'html';
            }
            else {
                if (this.parentElName.substring(0, 4) == 'EXT-') {
                    this.parentType = 'ext';
                }
                else {
                    this.parentType = 'html';
                }
            }
        };
        EngBase.prototype.setDirection = function () {
            if (this.base.count == 0) {
                this.base.count++;
                //        if (this.hasParent == false) {
                if (this.parentType != 'ext') {
                    this.base.DIRECTION = 'TopToBottom';
                }
                else {
                    //if (this.parentElName.substring(0, 4) == 'EXT-') {
                    this.base.DIRECTION = 'BottomToTop';
                    //}
                    //else {
                    //    this.base.DIRECTION = 'TopToBottom';
                    //}
                }
            }
            //console.log(this.base.DIRECTION);
        };
        EngBase.prototype.figureOutA = function () {
            if (this.parentType == 'ext' &&
                this.parentEl.A == undefined &&
                this.parentEl.nodeName.substring(0, 4) == 'EXT-') {
                this.init(this.parentEl);
            }
            if (this.currentEl.A == undefined) {
                this.init(this.currentEl);
            }
        };
        EngBase.prototype.init = function (component) {
            component.A = {};
            component.A.props = {};
            component.A.xtype = component.xtype;
            component.A.CHILDRENCOMPONENTS = Array.from(this.currentEl.rawChildren);
            component.A.CHILDRENCOMPONENTSCOUNT = this.currentEl.rawChildren.length;
            component.A.CHILDRENCOMPONENTSADDED = component.A.CHILDRENCOMPONENTSCOUNT;
            component.A.CHILDRENCOMPONENTSLEFT = component.A.CHILDRENCOMPONENTSCOUNT;
        };
        EngBase.prototype.createExtComponent = function () {
            var A = this.currentEl.A;
            //console.dir(A)
            var meA = A;
            var methis = this;
            if (methis.base.DIRECTION == 'BottomToTop') {
                if (A.props['viewport'] == true) {
                    //this.newDiv.parentNode.removeChild(this.newDiv);
                    if (this.parentType == 'html') {
                        Ext.onReady(function () {
                            methis.currentEl.A.ext = Ext.create(meA.props);
                            //console.log('0-Ext.application: ' + meA.props.xtype);
                            methis.assessChildren(methis.base, methis.xtype);
                            Ext.application({
                                name: 'MyEWCApp',
                                launch: function () {
                                    Ext.Viewport.add([methis.currentEl.A.ext]);
                                    if (window['router']) {
                                        window['router'].init();
                                    }
                                    methis.sendReadyEvent(methis);
                                }
                            });
                        });
                    }
                    else {
                        console.error('error: viewport not allowed on this element');
                    }
                }
                else {
                    if (this.parentType == 'html') {
                        meA.props.renderTo = this.newDiv;
                    }
                    Ext.onReady(function () {
                        //console.log(methis.parentType + ' - Ext.create: ' + methis.currentElName + ' HTML parent: ' + methis.currentElName);
                        methis.currentEl.A.ext = Ext.create(meA.props);
                        methis.assessChildren(methis.base, methis.xtype);
                    });
                }
            }
            else {
                console.log('TopToBottom');
                if (A.props['viewport'] == true) {
                    //this.newDiv.parentNode.removeChild(this.newDiv);
                    if (this.parentType == 'html') {
                        Ext.onReady(function () {
                            methis.currentEl.A.ext = Ext.create(meA.props);
                            //console.log('0-Ext.application: ' + meA.props.xtype);
                            methis.assessChildren(methis.base, methis.xtype);
                            Ext.application({
                                name: 'MyEWCApp',
                                launch: function () {
                                    Ext.Viewport.add([methis.currentEl.A.ext]);
                                    if (window['router']) {
                                        window['router'].init();
                                    }
                                    methis.sendReadyEvent(methis);
                                }
                            });
                        });
                    }
                    else {
                        console.error('error: viewport not allowed on this element');
                    }
                }
                else {
                    if (this.parentType == 'html') {
                        meA.props.renderTo = this.newDiv;
                    }
                    Ext.onReady(function () {
                        //console.log(this.parentType + ' - Ext.create: ' + methis.currentElName + ' HTML parent: ' + methis.currentElName);
                        methis.currentEl.A.ext = Ext.create(meA.props);
                        methis.assessChildren(methis.base, methis.xtype);
                    });
                }
            }
        };
        EngBase.prototype.assessAngularChildren = function (base, xtype, A) {
            if (this._extitems != undefined) {
                if (this._extitems.length == 1) {
                    var el = Ext.get(this._extitem.nativeElement);
                    var w = Ext.create({ xtype: 'widget', element: el });
                    this.addTheChild(A.ext, w, null);
                }
            }
            // if (this._extitems != undefined) {
            //     if (this._extroutes.length == 1) {
            //         A.ext.setHtml(this._extroute.nativeElement);
            //     }
            // }
        };
        EngBase.prototype.assessChildren = function (base, xtype) {
            //console.log('assessChildren for: ' + xtype);
            var A = this.currentEl.A;
            this.assessAngularChildren(base, xtype, A);
            if (base.DIRECTION == 'BottomToTop') {
                if (A.CHILDRENCOMPONENTSCOUNT == 0 &&
                    A.CHILDRENCOMPONENTS.length == 0 &&
                    this.parentType == 'html') {
                    //console.log('Solo');
                    //console.log('1- ready event for ' + this.currentElName);
                    this.sendReadyEvent(this);
                }
                else if (A.CHILDRENCOMPONENTSADDED > 0) {
                    this.addChildren(this, A.CHILDRENCOMPONENTS);
                    //this.node.remove(); ?? is this needed??
                }
                if (this.parentType != 'ext') {
                    if (base.DIRECTION == 'BottomToTop') {
                        //console.log('5- ready event for ' + this.currentElName);
                        this.sendReadyEvent(this);
                    }
                }
                if (this.parentType == 'ext') {
                    if (base.DIRECTION == 'BottomToTop') {
                        this.parentEl.A.CHILDRENCOMPONENTS.push(this.currentEl);
                        this.parentEl.A.CHILDRENCOMPONENTSADDED++;
                        //console.log('4- ready event for ' + this.currentElName);
                        this.sendReadyEvent(this);
                    }
                    else {
                        this.parentEl.A.CHILDRENCOMPONENTSLEFT--;
                        if (this.parentEl.A.CHILDRENCOMPONENTSLEFT == 0) {
                            this.addChildren(this.parentEl, this.parentEl.A.CHILDRENCOMPONENTS);
                            //console.log('3- ready event for ' + this.parentElName + '(parent)');
                            this.sendReadyEvent(this.parentEl);
                        }
                    }
                }
            }
            else { //base.DIRECTION == 'TopToBottom'
                if (this.parentType == 'ext') {
                    //console.log('this: ' + A.xtype + ' ' + A.props.title + ' parent: ' + this.parentEl.A.xtype)
                    //console.log('length=0, send ready for ' + this.xtype)
                    this.sendReadyEvent(this);
                }
                // else {
                //     //console.log(A.props)
                //     //console.log('this: ' + A.xtype + ' ' + A.props.title + ' root: ')
                // }
                if (A.CHILDRENCOMPONENTS.length == 0) {
                    this.checkParent(this.parentEl, base, this);
                }
                // else {
                //     //base.COMPONENTCOUNT = base.COMPONENTCOUNT + A.CHILDRENCOMPONENTS.length;
                // }
            }
        };
        EngBase.prototype.checkParent = function (component, base, me) {
            //if (component.A == null) {
            if (component == null) {
                me.sendReadyEvent(me);
            }
            else {
                component.A.CHILDRENCOMPONENTSLEFT--;
                //base.COMPONENTLEFTCOUNT = base.COMPONENTLEFTCOUNT + 1;
                if (component.A.CHILDRENCOMPONENTSLEFT == 0) {
                    this.addChildren(component, component.A.CHILDRENCOMPONENTS);
                    this.checkParent(component.parentEl, base, component);
                }
            }
        };
        EngBase.prototype.addChildren = function (child, children) {
            for (var i = 0; i < children.length; i++) {
                //why is this created as an object??
                var childItem = { parentCmp: {}, childCmp: {} };
                childItem.parentCmp = child.currentEl.A.ext;
                var A2;
                if (children[i]._extitems != undefined) {
                    A2 = children[i].node.A;
                }
                else {
                    A2 = children[i].A;
                }
                childItem.childCmp = A2.ext;
                this.addTheChild(childItem.parentCmp, childItem.childCmp, null);
            }
        };
        EngBase.prototype.addTheChild = function (parentCmp, childCmp, location) {
            var parentxtype = parentCmp.xtype;
            var childxtype = childCmp.xtype;
            //console.log('addTheChild: ' + parentxtype + '(' + parentCmp.ext + ')' + ' - ' + childxtype + '(' + childCmp.ext + ')');
            //if (childxtype == 'widget')
            if (this.currentEl.A.ext.initialConfig.align != undefined) {
                if (parentxtype != 'tooltip' && parentxtype != 'titlebar' && parentxtype != 'grid' && parentxtype != 'lockedgrid' && parentxtype != 'button') {
                    console.error('Can only use align property if parent is a Titlebar or Grid or Button');
                    return;
                }
            }
            var defaultparent = false;
            var defaultchild = false;
            switch (parentxtype) {
                case 'button':
                    switch (childxtype) {
                        case 'menu':
                            parentCmp.setMenu(childCmp);
                            break;
                        default:
                            defaultparent = true;
                            break;
                    }
                    break;
                case 'booleancolumn':
                case 'checkcolumn':
                case 'gridcolumn':
                case 'column':
                case 'templatecolumn':
                case 'gridcolumn':
                case 'column':
                case 'templatecolumn':
                case 'datecolumn':
                case 'dragcolumn':
                case 'numbercolumn':
                case 'selectioncolumn':
                case 'textcolumn':
                case 'treecolumn':
                case 'rownumberer':
                    switch (childxtype) {
                        case 'renderercell':
                            parentCmp.setCell(childCmp);
                            break;
                        case 'column':
                        case 'gridcolumn':
                            parentCmp.add(childCmp);
                            break;
                        default:
                            defaultparent = true;
                            break;
                    }
                    break;
                case 'grid':
                case 'lockedgrid':
                    switch (childxtype) {
                        case 'gridcolumn':
                        case 'column':
                        case 'treecolumn':
                        case 'textcolumn':
                        case 'checkcolumn':
                        case 'datecolumn':
                        case 'rownumberer':
                        case 'numbercolumn':
                        case 'booleancolumn':
                            if (location == null) {
                                if (parentxtype == 'grid') {
                                    parentCmp.addColumn(childCmp);
                                }
                                else {
                                    parentCmp.add(childCmp);
                                }
                            }
                            else {
                                var regCols = 0;
                                if (parentCmp.registeredColumns != undefined) {
                                    regCols = parentCmp.registeredColumns.length;
                                }
                                if (parentxtype == 'grid') {
                                    //mjg console.log(parentCmp)
                                    parentCmp.insertColumn(location + regCols, childCmp);
                                }
                                else {
                                    parentCmp.insert(location + regCols, childCmp);
                                }
                            }
                            break;
                        default:
                            defaultparent = true;
                            break;
                    }
                    break;
                default:
                    defaultparent = true;
                    break;
            }
            ;
            switch (childxtype) {
                case 'toolbar':
                case 'titlebar':
                    if (parentCmp.getHideHeaders != undefined) {
                        if (parentCmp.getHideHeaders() === false) {
                            parentCmp.insert(1, childCmp);
                        }
                        else {
                            parentCmp.add(childCmp);
                        }
                    }
                    else {
                        if (parentCmp.add != undefined) {
                            if (location == null) {
                                parentCmp.add(childCmp);
                            }
                            else {
                                parentCmp.insert(location, childCmp);
                            }
                        }
                        else {
                            parentCmp.add(childCmp);
                        }
                    }
                    break;
                case 'tooltip':
                    parentCmp.setTooltip(childCmp);
                    break;
                case 'plugin':
                    parentCmp.setPlugin(childCmp);
                    break;
                default:
                    defaultchild = true;
                    break;
            }
            if (defaultparent == true && defaultchild == true) {
                //console.log(parentxtype + '.add(' + childxtype + ')')
                parentCmp.add(childCmp);
            }
            // if (this.parentNode.childrenYetToBeDefined > 0) {
            //     this.parentNode.childrenYetToBeDefined--
            // }
            // //console.log('childrenYetToBeDefined(after) '  + this.parentNode.childrenYetToBeDefined)
            // if (this.parentNode.childrenYetToBeDefined == 0) {
            //     this.parentNode.dispatchEvent(new CustomEvent('ready',{detail:{cmp: this.parentNode.ext}}))
            // }
        };
        EngBase.prototype.atEnd = function () {
            //console.log('*** at end');
            //console.log('this - ' + this.currentElName);
            //console.dir(this.currentEl.A);
            if (this.parentEl != null) {
                //console.log('parent - ' + this.parentElName);
                //console.dir(this.parentEl.A);
            }
            else {
                //console.log('No EXT parent');
            }
        };
        Object.defineProperty(EngBase.prototype, "currentEl", {
            get: function () {
                if (this._extitems != undefined) {
                    return this.node;
                }
                else {
                    return this;
                }
            },
            enumerable: true,
            configurable: true
        });
        EngBase.prototype.getCurrentElName = function (component) {
            if (component._extitems != undefined) {
                return component.node.nodeName;
            }
            else {
                return component.nodeName;
            }
        };
        Object.defineProperty(EngBase.prototype, "currentElName", {
            get: function () {
                if (this._extitems != undefined) {
                    return this.node.nodeName;
                }
                else {
                    return this.nodeName;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EngBase.prototype, "isAngular", {
            get: function () {
                if (this._extitems != undefined) {
                    return true;
                }
                else {
                    return false;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EngBase.prototype, "parentEl", {
            get: function () {
                if (this.isAngular) {
                    if (this.parentNode == null) {
                        return null;
                    }
                    return this.parentNode.node;
                }
                else {
                    return this.parentNode;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EngBase.prototype, "parentElName", {
            get: function () {
                if (this.isAngular) {
                    if (this.parentNode == null) {
                        return null;
                    }
                    return this.parentNode.node.nodeName;
                }
                else {
                    return this.parentNode.nodeName;
                }
            },
            enumerable: true,
            configurable: true
        });
        EngBase.prototype.sendReadyEvent = function (component) {
            var cmp = component.currentEl.A.ext;
            if (component._extitems != undefined) {
                component['ready'].emit({ detail: { cmp: cmp } });
            }
            else {
                component.dispatchEvent(new CustomEvent('ready', { detail: { cmp: cmp } }));
            }
        };
        //******* base end */
        //******* props start */
        //createProps(properties, propertiesobject, events, eventnames) {
        EngBase.prototype.createProps = function (properties, events) {
            var _this = this;
            var props = this.currentEl.A.props;
            props.xtype = this.xtype;
            var listenersProvided = false;
            for (var i = 0; i < properties.length; i++) {
                var prop = properties[i];
                if (prop == 'handler') {
                    if (this[prop] != undefined) {
                        props[prop] = this[prop];
                    }
                }
                //need to handle listeners coming in here
                if ((props.xtype === 'cartesian' || props.xtype === 'polar') && prop === 'layout') {
                }
                else if (prop == 'listeners' && this[prop] != undefined) {
                    props[prop] = this[prop];
                    listenersProvided = true;
                }
                else {
                    if (this[prop] != undefined &&
                        prop != 'listeners' &&
                        prop != 'config' &&
                        prop != 'handler' &&
                        prop != 'fitToParent') {
                        props[prop] = this[prop];
                    }
                }
            }
            if (true === this['fitToParent']) {
                props.top = 0,
                    props.left = 0,
                    props.width = '100%',
                    props.height = '100%';
            }
            if (this['config'] !== {}) {
                Ext.apply(props, this['config']);
            }
            if (!listenersProvided) {
                props.listeners = {};
                var me = this;
                events.forEach(function (event) {
                    var eventname = event.name;
                    var eventparameters = event.parameters;
                    me.currentEl.A.props.listeners[eventname] = function () {
                        //console.log('in the event ' + eventname)
                        var parameters = eventparameters;
                        var parms = parameters.split(',');
                        var args = Array.prototype.slice.call(arguments);
                        var emitparms = {};
                        if (me._extitems != undefined) {
                            for (var i_1 = 0, j = parms.length; i_1 < j; i_1++) {
                                emitparms[parms[i_1]] = args[i_1];
                            }
                            me[eventname].emit(emitparms);
                        }
                        else {
                        }
                    };
                });
            }
            //dup??
            if (this._extitems != undefined) {
                events.forEach(function (event, n) {
                    if (event != 'fullscreen') {
                        _this[event] = new core.EventEmitter();
                    }
                    else {
                        _this[event + 'event'] = new core.EventEmitter();
                    }
                });
            }
        };
        //******* props end */
        EngBase.prototype.baseOnChanges = function (changes) {
            //console.log(`ngOnChanges`)
            //console.log(changes)
            var changesMsgs = [];
            for (var propName in changes) {
                var verb = '';
                if (changes[propName].firstChange === true) {
                    verb = 'initialized';
                }
                else {
                    verb = 'changed';
                }
                var val = changes[propName].currentValue;
                if (this.currentEl.A != undefined) {
                    //console.dir(this.currentEl.A.ext)
                    var capPropName = propName.charAt(0).toUpperCase() + propName.slice(1);
                    var setFunction = 'set' + capPropName;
                    //console.log(setFunction)
                    if (this.currentEl.A.ext[setFunction] != undefined) {
                        this.currentEl.A.ext[setFunction](val);
                    }
                    else {
                        console.error(setFunction + ' not found for ' + this.currentEl.A.ext.xtype);
                    }
                }
                else {
                    if (verb == 'changed') {
                        //mjg console.log('change needed and ext not defined')
                    }
                }
                changesMsgs.push("$ $ to \"$\"");
            }
            //console.log(`OnChanges: ${changesMsgs.join('; ')}`)
        };
        EngBase.prototype.baseOnDestroy = function () {
            var childCmp;
            var parentCmp;
            if (childCmp == undefined || parentCmp == undefined) {
                return;
            }
            try {
                childCmp = this.currentEl.A.ext;
                if (this.parentEl != null) {
                    parentCmp = this.parentEl.A.ext;
                    //console.log(childCmp)
                    //console.log(parentCmp)
                    if (childCmp == undefined || parentCmp == undefined)
                        if (parentCmp.xtype == 'button' && childCmp.xtype == 'menu') {
                            //console.log('button/menu not deleted')
                        }
                        else if (parentCmp.xtype == 'carousel') {
                            //console.log('carousel parent not deleted')
                        }
                        else if (parentCmp.xtype == 'grid' && childCmp.xtype == 'column') {
                            //console.log('grid/column not deleted')
                            //console.log(childCmp)
                        }
                        else if (parentCmp.xtype == 'segmentedbutton' && childCmp.xtype == 'button') {
                            //console.log('segmentedbutton/button not deleted')
                        }
                        else if (parentCmp.xtype == 'button' && childCmp.xtype == 'tooltip') {
                            //console.log('button/tooltip not deleted')
                        }
                        else if (parentCmp.xtype == 'titlebar' && childCmp.xtype == 'button') {
                            //console.log('titlebar/button not deleted')
                        }
                        else if (parentCmp.xtype == 'titlebar' && childCmp.xtype == 'searchfield') {
                            //console.log('titlebar/searchfield not deleted')
                        }
                        else {
                            parentCmp.remove([childCmp]);
                            childCmp.destroy();
                        }
                }
                else {
                    if (childCmp != undefined) {
                        childCmp.destroy();
                    }
                    else {
                        console.log('no destroy');
                    }
                }
            }
            catch (e) {
                console.error(e);
                //mjg console.log('*****')
                //mjg console.log(parentCmp)
                //mjg console.log(childCmp)
                //mjg console.log('*****')
            }
        };
        EngBase.count = 0;
        EngBase.DIRECTION = '';
        __decorate([
            core.ContentChild('extroute', { static: false }),
            __metadata("design:type", Object)
        ], EngBase.prototype, "_extroute", void 0);
        __decorate([
            core.ContentChildren('extroute'),
            __metadata("design:type", core.QueryList)
        ], EngBase.prototype, "_extroutes", void 0);
        __decorate([
            core.ContentChild('extitem', { static: false }),
            __metadata("design:type", Object)
        ], EngBase.prototype, "_extitem", void 0);
        __decorate([
            core.ContentChildren('extitem'),
            __metadata("design:type", core.QueryList)
        ], EngBase.prototype, "_extitems", void 0);
        __decorate([
            core.ContentChildren(EngBase),
            __metadata("design:type", core.QueryList)
        ], EngBase.prototype, "_childComponents", void 0);
        return EngBase;
    }());

    var ExtActionsheetMetaData = /** @class */ (function (_super) {
        __extends(ExtActionsheetMetaData, _super);
        function ExtActionsheetMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtActionsheetMetaData.getAll = function () {
            ExtActionsheetMetaData.PROPERTIES = Ext_ActionSheet.getProperties(ExtActionsheetMetaData.PROPERTIES);
            ExtActionsheetMetaData.EVENTS = Ext_ActionSheet.getEvents(ExtActionsheetMetaData.EVENTS);
            ExtActionsheetMetaData.EVENTS.forEach(function (event) {
                ExtActionsheetMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtActionsheetMetaData.PROPERTIES = [];
        ExtActionsheetMetaData.EVENTS = [];
        ExtActionsheetMetaData.EVENTNAMES = [];
        return ExtActionsheetMetaData;
    }(Ext_ActionSheet));
    (function () { ExtActionsheetMetaData.getAll(); })();
    var ExtActionsheetComponent = /** @class */ (function (_super) {
        __extends(ExtActionsheetComponent, _super);
        function ExtActionsheetComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtActionsheetMetaData.PROPERTIES, ExtActionsheetMetaData.EVENTS) || this;
            _this.xtype = 'actionsheet';
            return _this;
        }
        ExtActionsheetComponent_1 = ExtActionsheetComponent;
        ExtActionsheetComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtActionsheetComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtActionsheetComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtActionsheetComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtActionsheetComponent_1;
        ExtActionsheetComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtActionsheetComponent = ExtActionsheetComponent_1 = __decorate([
            core.Component({
                selector: 'ext-actionsheet',
                inputs: ExtActionsheetMetaData.PROPERTIES,
                outputs: ExtActionsheetMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtActionsheetComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtActionsheetComponent);
        return ExtActionsheetComponent;
    }(EngBase));

    var Ext_Media = /** @class */ (function (_super) {
        __extends(Ext_Media, _super);
        function Ext_Media() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Media.getProperties = function (properties) {
            properties = properties.concat(Ext_Media.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_Media.getEvents = function (events) {
            events = events.concat(Ext_Media.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_Media.PROPERTIES = [
            'autoPause',
            'autoResume',
            'controls',
            'loop',
            'media',
            'muted',
            'preload',
            'url',
            'volume',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Media.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'media' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'media,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'ended', parameters: 'media,time' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'media,event' },
            { name: 'focusenter', parameters: 'media,event' },
            { name: 'focusleave', parameters: 'media,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'mutedchange', parameters: 'media,muted' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pause', parameters: 'media,time' },
            { name: 'play', parameters: 'media' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'stop', parameters: 'media' },
            { name: 'timeupdate', parameters: 'media,time' },
            { name: 'tofront', parameters: 'media' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'volumechange', parameters: 'media,volume' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Media;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Media.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var Ext_Audio = /** @class */ (function (_super) {
        __extends(Ext_Audio, _super);
        function Ext_Audio() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Audio.getProperties = function (properties) {
            properties = properties.concat(Ext_Audio.PROPERTIES);
            return Ext_Media.getProperties(properties);
        };
        Ext_Audio.getEvents = function (events) {
            events = events.concat(Ext_Audio.EVENTS);
            return Ext_Media.getEvents(events);
        };
        Ext_Audio.PROPERTIES = [
            'cls',
            'url',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Audio.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'audio' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'audio,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'ended', parameters: 'audio,time' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'audio,event' },
            { name: 'focusenter', parameters: 'audio,event' },
            { name: 'focusleave', parameters: 'audio,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'mutedchange', parameters: 'audio,muted' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pause', parameters: 'audio,time' },
            { name: 'play', parameters: 'audio' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'stop', parameters: 'audio' },
            { name: 'timeupdate', parameters: 'audio,time' },
            { name: 'tofront', parameters: 'audio' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'volumechange', parameters: 'audio,volume' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Audio;
    }(Ext_Media));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Audio.EVENTNAMES);
    //    return Ext_Media.getEventNames(eventnames);
    //}

    var ExtAudioMetaData = /** @class */ (function (_super) {
        __extends(ExtAudioMetaData, _super);
        function ExtAudioMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtAudioMetaData.getAll = function () {
            ExtAudioMetaData.PROPERTIES = Ext_Audio.getProperties(ExtAudioMetaData.PROPERTIES);
            ExtAudioMetaData.EVENTS = Ext_Audio.getEvents(ExtAudioMetaData.EVENTS);
            ExtAudioMetaData.EVENTS.forEach(function (event) {
                ExtAudioMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtAudioMetaData.PROPERTIES = [];
        ExtAudioMetaData.EVENTS = [];
        ExtAudioMetaData.EVENTNAMES = [];
        return ExtAudioMetaData;
    }(Ext_Audio));
    (function () { ExtAudioMetaData.getAll(); })();
    var ExtAudioComponent = /** @class */ (function (_super) {
        __extends(ExtAudioComponent, _super);
        function ExtAudioComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtAudioMetaData.PROPERTIES, ExtAudioMetaData.EVENTS) || this;
            _this.xtype = 'audio';
            return _this;
        }
        ExtAudioComponent_1 = ExtAudioComponent;
        ExtAudioComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtAudioComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtAudioComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtAudioComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtAudioComponent_1;
        ExtAudioComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtAudioComponent = ExtAudioComponent_1 = __decorate([
            core.Component({
                selector: 'ext-audio',
                inputs: ExtAudioMetaData.PROPERTIES,
                outputs: ExtAudioMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtAudioComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtAudioComponent);
        return ExtAudioComponent;
    }(EngBase));

    var Ext_Toolbar = /** @class */ (function (_super) {
        __extends(Ext_Toolbar, _super);
        function Ext_Toolbar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Toolbar.getProperties = function (properties) {
            properties = properties.concat(Ext_Toolbar.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_Toolbar.getEvents = function (events) {
            events = events.concat(Ext_Toolbar.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_Toolbar.PROPERTIES = [
            'defaultButtonUI',
            'defaultType',
            'docked',
            'layout',
            'minHeight',
            'title',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Toolbar.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,toolbar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'toolbar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'toolbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'toolbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,toolbar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'toolbar,event' },
            { name: 'focusenter', parameters: 'toolbar,event' },
            { name: 'focusleave', parameters: 'toolbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'toolbar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'toolbar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'toolbar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'toolbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Toolbar;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Toolbar.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var Ext_BreadcrumbBar = /** @class */ (function (_super) {
        __extends(Ext_BreadcrumbBar, _super);
        function Ext_BreadcrumbBar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_BreadcrumbBar.getProperties = function (properties) {
            properties = properties.concat(Ext_BreadcrumbBar.PROPERTIES);
            return Ext_Toolbar.getProperties(properties);
        };
        Ext_BreadcrumbBar.getEvents = function (events) {
            events = events.concat(Ext_BreadcrumbBar.EVENTS);
            return Ext_Toolbar.getEvents(events);
        };
        Ext_BreadcrumbBar.PROPERTIES = [
            'btnCls',
            'buttonConfig',
            'buttonUI',
            'displayField',
            'menu',
            'publishes',
            'selection',
            'showIcons',
            'showMenuIcons',
            'store',
            'twoWayBindable',
            'useSplitButtons',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_BreadcrumbBar.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,breadcrumbbar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'breadcrumbbar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'breadcrumbbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'breadcrumbbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'breadcrumbbar,node,prevNode' },
            { name: 'deactivate', parameters: 'oldActiveItem,breadcrumbbar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'breadcrumbbar,event' },
            { name: 'focusenter', parameters: 'breadcrumbbar,event' },
            { name: 'focusleave', parameters: 'breadcrumbbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'breadcrumbbar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'breadcrumbbar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'breadcrumbbar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'selectionchange', parameters: 'breadcrumbbar,node,prevNode' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'breadcrumbbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_BreadcrumbBar;
    }(Ext_Toolbar));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_BreadcrumbBar.EVENTNAMES);
    //    return Ext_Toolbar.getEventNames(eventnames);
    //}

    var ExtBreadcrumbbarMetaData = /** @class */ (function (_super) {
        __extends(ExtBreadcrumbbarMetaData, _super);
        function ExtBreadcrumbbarMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtBreadcrumbbarMetaData.getAll = function () {
            ExtBreadcrumbbarMetaData.PROPERTIES = Ext_BreadcrumbBar.getProperties(ExtBreadcrumbbarMetaData.PROPERTIES);
            ExtBreadcrumbbarMetaData.EVENTS = Ext_BreadcrumbBar.getEvents(ExtBreadcrumbbarMetaData.EVENTS);
            ExtBreadcrumbbarMetaData.EVENTS.forEach(function (event) {
                ExtBreadcrumbbarMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtBreadcrumbbarMetaData.PROPERTIES = [];
        ExtBreadcrumbbarMetaData.EVENTS = [];
        ExtBreadcrumbbarMetaData.EVENTNAMES = [];
        return ExtBreadcrumbbarMetaData;
    }(Ext_BreadcrumbBar));
    (function () { ExtBreadcrumbbarMetaData.getAll(); })();
    var ExtBreadcrumbbarComponent = /** @class */ (function (_super) {
        __extends(ExtBreadcrumbbarComponent, _super);
        function ExtBreadcrumbbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtBreadcrumbbarMetaData.PROPERTIES, ExtBreadcrumbbarMetaData.EVENTS) || this;
            _this.xtype = 'breadcrumbbar';
            return _this;
        }
        ExtBreadcrumbbarComponent_1 = ExtBreadcrumbbarComponent;
        ExtBreadcrumbbarComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtBreadcrumbbarComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtBreadcrumbbarComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtBreadcrumbbarComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtBreadcrumbbarComponent_1;
        ExtBreadcrumbbarComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtBreadcrumbbarComponent = ExtBreadcrumbbarComponent_1 = __decorate([
            core.Component({
                selector: 'ext-breadcrumbbar',
                inputs: ExtBreadcrumbbarMetaData.PROPERTIES,
                outputs: ExtBreadcrumbbarMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtBreadcrumbbarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtBreadcrumbbarComponent);
        return ExtBreadcrumbbarComponent;
    }(EngBase));

    var Ext_Button = /** @class */ (function (_super) {
        __extends(Ext_Button, _super);
        function Ext_Button() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Button.getProperties = function (properties) {
            properties = properties.concat(Ext_Button.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_Button.getEvents = function (events) {
            events = events.concat(Ext_Button.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_Button.PROPERTIES = [
            'allowDepress',
            'arrow',
            'arrowAlign',
            'autoEvent',
            'badgeText',
            'buttonType',
            'destroyMenu',
            'enableToggle',
            'handler',
            'html',
            'icon',
            'iconAlign',
            'iconCls',
            'menu',
            'menuAlign',
            'pressed',
            'pressedDelay',
            'publishes',
            'scope',
            'stretchMenu',
            'text',
            'textAlign',
            'toggleHandler',
            'ui',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Button.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'button' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'button,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'button,event' },
            { name: 'focusenter', parameters: 'button,event' },
            { name: 'focusleave', parameters: 'button,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'pressedchange', parameters: 'sender,value,oldValue' },
            { name: 'release', parameters: 'button,e' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'button,e' },
            { name: 'tofront', parameters: 'button' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Button;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Button.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtButtonMetaData = /** @class */ (function (_super) {
        __extends(ExtButtonMetaData, _super);
        function ExtButtonMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtButtonMetaData.getAll = function () {
            ExtButtonMetaData.PROPERTIES = Ext_Button.getProperties(ExtButtonMetaData.PROPERTIES);
            ExtButtonMetaData.EVENTS = Ext_Button.getEvents(ExtButtonMetaData.EVENTS);
            ExtButtonMetaData.EVENTS.forEach(function (event) {
                ExtButtonMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtButtonMetaData.PROPERTIES = [];
        ExtButtonMetaData.EVENTS = [];
        ExtButtonMetaData.EVENTNAMES = [];
        return ExtButtonMetaData;
    }(Ext_Button));
    (function () { ExtButtonMetaData.getAll(); })();
    var ExtButtonComponent = /** @class */ (function (_super) {
        __extends(ExtButtonComponent, _super);
        function ExtButtonComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtButtonMetaData.PROPERTIES, ExtButtonMetaData.EVENTS) || this;
            _this.xtype = 'button';
            return _this;
        }
        ExtButtonComponent_1 = ExtButtonComponent;
        ExtButtonComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtButtonComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtButtonComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtButtonComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtButtonComponent_1;
        ExtButtonComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtButtonComponent = ExtButtonComponent_1 = __decorate([
            core.Component({
                selector: 'ext-button',
                inputs: ExtButtonMetaData.PROPERTIES,
                outputs: ExtButtonMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtButtonComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtButtonComponent);
        return ExtButtonComponent;
    }(EngBase));

    var Ext_Gadget = /** @class */ (function (_super) {
        __extends(Ext_Gadget, _super);
        function Ext_Gadget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Gadget.getProperties = function (properties) {
            properties = properties.concat(Ext_Gadget.PROPERTIES);
            return Ext_Evented.getProperties(properties);
        };
        Ext_Gadget.getEvents = function (events) {
            events = events.concat(Ext_Gadget.EVENTS);
            return Ext_Evented.getEvents(events);
        };
        Ext_Gadget.PROPERTIES = [
            'alignSelf',
            'alwaysOnTop',
            'border',
            'cls',
            'constrainAlign',
            'disabled',
            'flex',
            'floated',
            'height',
            'hidden',
            'hideMode',
            'id',
            'instanceCls',
            'itemId',
            'margin',
            'name',
            'relative',
            'renderTo',
            'ripple',
            'shadow',
            'shim',
            'style',
            'toFrontOnShow',
            'touchAction',
            'translatable',
            'ui',
            'userCls',
            'width',
            'x',
            'y',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Gadget.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'widget' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'widget,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'widget,event' },
            { name: 'focusenter', parameters: 'widget,event' },
            { name: 'focusleave', parameters: 'widget,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'widget' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Gadget;
    }(Ext_Evented));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Gadget.EVENTNAMES);
    //    return Ext_Evented.getEventNames(eventnames);
    //}

    var Ext_calendar_EventBase = /** @class */ (function (_super) {
        __extends(Ext_calendar_EventBase, _super);
        function Ext_calendar_EventBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_EventBase.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_EventBase.PROPERTIES);
            return Ext_Gadget.getProperties(properties);
        };
        Ext_calendar_EventBase.getEvents = function (events) {
            events = events.concat(Ext_calendar_EventBase.EVENTS);
            return Ext_Gadget.getEvents(events);
        };
        Ext_calendar_EventBase.PROPERTIES = [
            'defaultTitle',
            'endDate',
            'mode',
            'model',
            'palette',
            'resize',
            'startDate',
            'title',
            'touchAction',
            'view',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_EventBase.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_EventBase;
    }(Ext_Gadget));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_EventBase.EVENTNAMES);
    //    return Ext_Gadget.getEventNames(eventnames);
    //}

    var Ext_calendar_Event = /** @class */ (function (_super) {
        __extends(Ext_calendar_Event, _super);
        function Ext_calendar_Event() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_Event.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_Event.PROPERTIES);
            return Ext_calendar_EventBase.getProperties(properties);
        };
        Ext_calendar_Event.getEvents = function (events) {
            events = events.concat(Ext_calendar_Event.EVENTS);
            return Ext_calendar_EventBase.getEvents(events);
        };
        Ext_calendar_Event.PROPERTIES = [
            'timeFormat',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_Event.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-event' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-event,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-event,event' },
            { name: 'focusenter', parameters: 'calendar-event,event' },
            { name: 'focusleave', parameters: 'calendar-event,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-event' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_Event;
    }(Ext_calendar_EventBase));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_Event.EVENTNAMES);
    //    return Ext_calendar_EventBase.getEventNames(eventnames);
    //}

    var ExtCalendar_eventMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_eventMetaData, _super);
        function ExtCalendar_eventMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_eventMetaData.getAll = function () {
            ExtCalendar_eventMetaData.PROPERTIES = Ext_calendar_Event.getProperties(ExtCalendar_eventMetaData.PROPERTIES);
            ExtCalendar_eventMetaData.EVENTS = Ext_calendar_Event.getEvents(ExtCalendar_eventMetaData.EVENTS);
            ExtCalendar_eventMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_eventMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_eventMetaData.PROPERTIES = [];
        ExtCalendar_eventMetaData.EVENTS = [];
        ExtCalendar_eventMetaData.EVENTNAMES = [];
        return ExtCalendar_eventMetaData;
    }(Ext_calendar_Event));
    (function () { ExtCalendar_eventMetaData.getAll(); })();
    var ExtCalendar_eventComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_eventComponent, _super);
        function ExtCalendar_eventComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_eventMetaData.PROPERTIES, ExtCalendar_eventMetaData.EVENTS) || this;
            _this.xtype = 'calendar-event';
            return _this;
        }
        ExtCalendar_eventComponent_1 = ExtCalendar_eventComponent;
        ExtCalendar_eventComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_eventComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_eventComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_eventComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_eventComponent_1;
        ExtCalendar_eventComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_eventComponent = ExtCalendar_eventComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-event',
                inputs: ExtCalendar_eventMetaData.PROPERTIES,
                outputs: ExtCalendar_eventMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_eventComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_eventComponent);
        return ExtCalendar_eventComponent;
    }(EngBase));

    var Ext_field_Panel = /** @class */ (function (_super) {
        __extends(Ext_field_Panel, _super);
        function Ext_field_Panel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_Panel.getProperties = function (properties) {
            properties = properties.concat(Ext_field_Panel.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_field_Panel.getEvents = function (events) {
            events = events.concat(Ext_field_Panel.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_field_Panel.PROPERTIES = [
            'api',
            'baseParams',
            'nameable',
            'nameHolder',
            'paramOrder',
            'paramsAsHash',
            'scrollable',
            'shareableName',
            'timeout',
            'url',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_Panel.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,fieldpanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'fieldpanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'fieldpanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'fieldpanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'fieldpanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'fieldpanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'fieldpanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'fieldpanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,fieldpanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'fieldpanel,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'fieldpanel' },
            { name: 'drawershow', parameters: 'fieldpanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'fieldpanel,result' },
            { name: 'expand', parameters: 'fieldpanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'fieldpanel,event' },
            { name: 'focusenter', parameters: 'fieldpanel,event' },
            { name: 'focusleave', parameters: 'fieldpanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'fieldpanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'fieldpanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'fieldpanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'fieldpanel,context' },
            { name: 'resizedragcancel', parameters: 'fieldpanel,context' },
            { name: 'resizedragend', parameters: 'fieldpanel,context' },
            { name: 'resizedragstart', parameters: 'fieldpanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'fieldpanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_Panel;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_Panel.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var Ext_form_Panel = /** @class */ (function (_super) {
        __extends(Ext_form_Panel, _super);
        function Ext_form_Panel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Panel.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Panel.PROPERTIES);
            return Ext_field_Panel.getProperties(properties);
        };
        Ext_form_Panel.getEvents = function (events) {
            events = events.concat(Ext_form_Panel.EVENTS);
            return Ext_field_Panel.getEvents(events);
        };
        Ext_form_Panel.PROPERTIES = [
            'enableSubmissionForm',
            'enctype',
            'fieldDefaults',
            'jsonSubmit',
            'method',
            'multipartDetection',
            'standardSubmit',
            'submitOnAction',
            'trackResetOnLoad',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Panel.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,formpanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'formpanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'formpanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'formpanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'formpanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'formpanel,values,options,e' },
            { name: 'beforetofront', parameters: 'formpanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'formpanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'formpanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,formpanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'formpanel,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'formpanel' },
            { name: 'drawershow', parameters: 'formpanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'formpanel,result' },
            { name: 'expand', parameters: 'formpanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'formpanel,event' },
            { name: 'focusenter', parameters: 'formpanel,event' },
            { name: 'focusleave', parameters: 'formpanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'formpanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'formpanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'formpanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'formpanel,context' },
            { name: 'resizedragcancel', parameters: 'formpanel,context' },
            { name: 'resizedragend', parameters: 'formpanel,context' },
            { name: 'resizedragstart', parameters: 'formpanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'formpanel,result,e' },
            { name: 'tofront', parameters: 'formpanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Panel;
    }(Ext_field_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Panel.EVENTNAMES);
    //    return Ext_field_Panel.getEventNames(eventnames);
    //}

    var Ext_calendar_form_AbstractForm = /** @class */ (function (_super) {
        __extends(Ext_calendar_form_AbstractForm, _super);
        function Ext_calendar_form_AbstractForm() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_form_AbstractForm.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_form_AbstractForm.PROPERTIES);
            return Ext_form_Panel.getProperties(properties);
        };
        Ext_calendar_form_AbstractForm.getEvents = function (events) {
            events = events.concat(Ext_calendar_form_AbstractForm.EVENTS);
            return Ext_form_Panel.getEvents(events);
        };
        Ext_calendar_form_AbstractForm.PROPERTIES = [
            'allDayField',
            'calendarField',
            'cancelButton',
            'descriptionField',
            'dropButton',
            'endDateField',
            'endTimeField',
            'saveButton',
            'startDateField',
            'startTimeField',
            'titleField',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_form_AbstractForm.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'undefined,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'undefined,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'undefined,values,options,e' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'undefined' },
            { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'undefined,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'undefined' },
            { name: 'drawershow', parameters: 'undefined' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'undefined,result' },
            { name: 'expand', parameters: 'undefined' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'undefined,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'undefined,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'undefined,context' },
            { name: 'resizedragcancel', parameters: 'undefined,context' },
            { name: 'resizedragend', parameters: 'undefined,context' },
            { name: 'resizedragstart', parameters: 'undefined,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'undefined,result,e' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_form_AbstractForm;
    }(Ext_form_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_form_AbstractForm.EVENTNAMES);
    //    return Ext_form_Panel.getEventNames(eventnames);
    //}

    var Ext_calendar_form_Form = /** @class */ (function (_super) {
        __extends(Ext_calendar_form_Form, _super);
        function Ext_calendar_form_Form() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_form_Form.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_form_Form.PROPERTIES);
            return Ext_calendar_form_AbstractForm.getProperties(properties);
        };
        Ext_calendar_form_Form.getEvents = function (events) {
            events = events.concat(Ext_calendar_form_Form.EVENTS);
            return Ext_calendar_form_AbstractForm.getEvents(events);
        };
        Ext_calendar_form_Form.PROPERTIES = [
            'defaultEndTime',
            'defaultStartTime',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_form_Form.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'undefined,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'undefined,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'undefined,values,options,e' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'undefined' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'undefined' },
            { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'undefined,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'undefined' },
            { name: 'drawershow', parameters: 'undefined' },
            { name: 'drop', parameters: 'undefined' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'undefined,result' },
            { name: 'expand', parameters: 'undefined' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'undefined,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'undefined,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'undefined,context' },
            { name: 'resizedragcancel', parameters: 'undefined,context' },
            { name: 'resizedragend', parameters: 'undefined,context' },
            { name: 'resizedragstart', parameters: 'undefined,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'save', parameters: 'undefined,context' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'undefined,result,e' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_form_Form;
    }(Ext_calendar_form_AbstractForm));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_form_Form.EVENTNAMES);
    //    return Ext_calendar_form_AbstractForm.getEventNames(eventnames);
    //}

    var Ext_calendar_form_Add = /** @class */ (function (_super) {
        __extends(Ext_calendar_form_Add, _super);
        function Ext_calendar_form_Add() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_form_Add.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_form_Add.PROPERTIES);
            return Ext_calendar_form_Form.getProperties(properties);
        };
        Ext_calendar_form_Add.getEvents = function (events) {
            events = events.concat(Ext_calendar_form_Add.EVENTS);
            return Ext_calendar_form_Form.getEvents(events);
        };
        Ext_calendar_form_Add.PROPERTIES = [
            'title',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_form_Add.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-form-add,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-form-add,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-form-add' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'calendar-form-add' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-form-add,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'calendar-form-add,values,options,e' },
            { name: 'beforetofront', parameters: 'calendar-form-add' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-form-add,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'calendar-form-add' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-form-add' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-form-add,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'calendar-form-add,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-form-add' },
            { name: 'drawershow', parameters: 'calendar-form-add' },
            { name: 'drop', parameters: 'calendar-form-add' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'calendar-form-add,result' },
            { name: 'expand', parameters: 'calendar-form-add' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-form-add,event' },
            { name: 'focusenter', parameters: 'calendar-form-add,event' },
            { name: 'focusleave', parameters: 'calendar-form-add,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-form-add,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-form-add,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-form-add,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-form-add,context' },
            { name: 'resizedragcancel', parameters: 'calendar-form-add,context' },
            { name: 'resizedragend', parameters: 'calendar-form-add,context' },
            { name: 'resizedragstart', parameters: 'calendar-form-add,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'save', parameters: 'calendar-form-add,context' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'calendar-form-add,result,e' },
            { name: 'tofront', parameters: 'calendar-form-add' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_form_Add;
    }(Ext_calendar_form_Form));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_form_Add.EVENTNAMES);
    //    return Ext_calendar_form_Form.getEventNames(eventnames);
    //}

    var ExtCalendar_form_addMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_form_addMetaData, _super);
        function ExtCalendar_form_addMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_form_addMetaData.getAll = function () {
            ExtCalendar_form_addMetaData.PROPERTIES = Ext_calendar_form_Add.getProperties(ExtCalendar_form_addMetaData.PROPERTIES);
            ExtCalendar_form_addMetaData.EVENTS = Ext_calendar_form_Add.getEvents(ExtCalendar_form_addMetaData.EVENTS);
            ExtCalendar_form_addMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_form_addMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_form_addMetaData.PROPERTIES = [];
        ExtCalendar_form_addMetaData.EVENTS = [];
        ExtCalendar_form_addMetaData.EVENTNAMES = [];
        return ExtCalendar_form_addMetaData;
    }(Ext_calendar_form_Add));
    (function () { ExtCalendar_form_addMetaData.getAll(); })();
    var ExtCalendar_form_addComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_form_addComponent, _super);
        function ExtCalendar_form_addComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_form_addMetaData.PROPERTIES, ExtCalendar_form_addMetaData.EVENTS) || this;
            _this.xtype = 'calendar-form-add';
            return _this;
        }
        ExtCalendar_form_addComponent_1 = ExtCalendar_form_addComponent;
        ExtCalendar_form_addComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_form_addComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_form_addComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_form_addComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_form_addComponent_1;
        ExtCalendar_form_addComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_form_addComponent = ExtCalendar_form_addComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-form-add',
                inputs: ExtCalendar_form_addMetaData.PROPERTIES,
                outputs: ExtCalendar_form_addMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_form_addComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_form_addComponent);
        return ExtCalendar_form_addComponent;
    }(EngBase));

    var Ext_field_Field = /** @class */ (function (_super) {
        __extends(Ext_field_Field, _super);
        function Ext_field_Field() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_Field.getProperties = function (properties) {
            properties = properties.concat(Ext_field_Field.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_field_Field.getEvents = function (events) {
            events = events.concat(Ext_field_Field.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_field_Field.PROPERTIES = [
            'autoFitErrors',
            'bodyAlign',
            'dataType',
            'disabled',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'fullscreen',
            'inline',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'name',
            'required',
            'requiredMessage',
            'sideError',
            'tipError',
            'titleError',
            'underError',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_Field.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'field' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'field,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'field,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'field,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'field,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'field,event' },
            { name: 'focusenter', parameters: 'field,event' },
            { name: 'focusleave', parameters: 'field,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'field' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_Field;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_Field.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var Ext_field_Input = /** @class */ (function (_super) {
        __extends(Ext_field_Input, _super);
        function Ext_field_Input() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_Input.getProperties = function (properties) {
            properties = properties.concat(Ext_field_Input.PROPERTIES);
            return Ext_field_Field.getProperties(properties);
        };
        Ext_field_Input.getEvents = function (events) {
            events = events.concat(Ext_field_Input.EVENTS);
            return Ext_field_Field.getEvents(events);
        };
        Ext_field_Input.PROPERTIES = [
            'inputType',
            'inputValue',
            'readOnly',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_Input.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'inputfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'inputfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'inputfield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'inputfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'inputfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'inputfield,event' },
            { name: 'focusenter', parameters: 'inputfield,event' },
            { name: 'focusleave', parameters: 'inputfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'inputfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_Input;
    }(Ext_field_Field));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_Input.EVENTNAMES);
    //    return Ext_field_Field.getEventNames(eventnames);
    //}

    var Ext_field_Text = /** @class */ (function (_super) {
        __extends(Ext_field_Text, _super);
        function Ext_field_Text() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_Text.getProperties = function (properties) {
            properties = properties.concat(Ext_field_Text.PROPERTIES);
            return Ext_field_Input.getProperties(properties);
        };
        Ext_field_Text.getEvents = function (events) {
            events = events.concat(Ext_field_Text.EVENTS);
            return Ext_field_Input.getEvents(events);
        };
        Ext_field_Text.PROPERTIES = [
            'animateUnderline',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoHideInputMask',
            'badFormatMessage',
            'bodyAlign',
            'clearable',
            'editable',
            'inputMask',
            'inputType',
            'labelAlign',
            'labelInPlaceholder',
            'maxLength',
            'parseValidator',
            'pattern',
            'placeholder',
            'publishes',
            'stripCharsRe',
            'textAlign',
            'triggers',
            'twoWayBindable',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_Text.EVENTS = [
            { name: 'action', parameters: 'textfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'textfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'textfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'textfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'textfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'textfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'textfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'textfield,e' },
            { name: 'focusenter', parameters: 'textfield,event' },
            { name: 'focusleave', parameters: 'textfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'textfield,e' },
            { name: 'keyup', parameters: 'textfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'textfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'textfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'textfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_Text;
    }(Ext_field_Input));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_Text.EVENTNAMES);
    //    return Ext_field_Input.getEventNames(eventnames);
    //}

    var Ext_field_Picker = /** @class */ (function (_super) {
        __extends(Ext_field_Picker, _super);
        function Ext_field_Picker() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_Picker.getProperties = function (properties) {
            properties = properties.concat(Ext_field_Picker.PROPERTIES);
            return Ext_field_Text.getProperties(properties);
        };
        Ext_field_Picker.getEvents = function (events) {
            events = events.concat(Ext_field_Picker.EVENTS);
            return Ext_field_Text.getEvents(events);
        };
        Ext_field_Picker.PROPERTIES = [
            'alignTarget',
            'autoComplete',
            'edgePicker',
            'floatedPicker',
            'floatedPickerAlign',
            'focusTrap',
            'hideTrigger',
            'matchFieldWidth',
            'picker',
            'pickerSlotAlign',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_Picker.EVENTS = [
            { name: 'action', parameters: 'pickerfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pickerfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pickerfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'pickerfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'pickerfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'pickerfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'pickerfield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pickerfield,e' },
            { name: 'focusenter', parameters: 'pickerfield,event' },
            { name: 'focusleave', parameters: 'pickerfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'pickerfield,e' },
            { name: 'keyup', parameters: 'pickerfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'pickerfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'pickerfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pickerfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_Picker;
    }(Ext_field_Text));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_Picker.EVENTNAMES);
    //    return Ext_field_Text.getEventNames(eventnames);
    //}

    var Ext_field_Select = /** @class */ (function (_super) {
        __extends(Ext_field_Select, _super);
        function Ext_field_Select() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_Select.getProperties = function (properties) {
            properties = properties.concat(Ext_field_Select.PROPERTIES);
            return Ext_field_Picker.getProperties(properties);
        };
        Ext_field_Select.getEvents = function (events) {
            events = events.concat(Ext_field_Select.EVENTS);
            return Ext_field_Picker.getEvents(events);
        };
        Ext_field_Select.PROPERTIES = [
            'autoFocus',
            'autoFocusLast',
            'autoLoadOnValue',
            'autoSelect',
            'chipView',
            'collapseOnSelect',
            'delimiter',
            'displayField',
            'displayTpl',
            'edgePicker',
            'editable',
            'floatedPicker',
            'forceSelection',
            'hiddenName',
            'itemCls',
            'itemTpl',
            'multiSelect',
            'options',
            'publishes',
            'recordCreator',
            'recordCreatorScope',
            'selection',
            'selectOnTab',
            'store',
            'twoWayBindable',
            'valueCollection',
            'valueField',
            'valueNotFoundText',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_Select.EVENTS = [
            { name: 'action', parameters: 'selectfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'selectfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'selectfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'selectfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'selectfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'selectfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'selectfield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'selectfield,e' },
            { name: 'focusenter', parameters: 'selectfield,event' },
            { name: 'focusleave', parameters: 'selectfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'selectfield,e' },
            { name: 'keyup', parameters: 'selectfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'selectfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'selectfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'selectfield,newValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'selectfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_Select;
    }(Ext_field_Picker));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_Select.EVENTNAMES);
    //    return Ext_field_Picker.getEventNames(eventnames);
    //}

    var Ext_calendar_form_CalendarPicker = /** @class */ (function (_super) {
        __extends(Ext_calendar_form_CalendarPicker, _super);
        function Ext_calendar_form_CalendarPicker() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_form_CalendarPicker.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_form_CalendarPicker.PROPERTIES);
            return Ext_field_Select.getProperties(properties);
        };
        Ext_calendar_form_CalendarPicker.getEvents = function (events) {
            events = events.concat(Ext_calendar_form_CalendarPicker.EVENTS);
            return Ext_field_Select.getEvents(events);
        };
        Ext_calendar_form_CalendarPicker.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_form_CalendarPicker.EVENTS = [
            { name: 'action', parameters: 'calendar-calendar-picker,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-calendar-picker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-calendar-picker,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'calendar-calendar-picker,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'calendar-calendar-picker,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'calendar-calendar-picker,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'calendar-calendar-picker,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-calendar-picker,e' },
            { name: 'focusenter', parameters: 'calendar-calendar-picker,event' },
            { name: 'focusleave', parameters: 'calendar-calendar-picker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'calendar-calendar-picker,e' },
            { name: 'keyup', parameters: 'calendar-calendar-picker,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'calendar-calendar-picker,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'calendar-calendar-picker,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'calendar-calendar-picker,newValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-calendar-picker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_form_CalendarPicker;
    }(Ext_field_Select));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_form_CalendarPicker.EVENTNAMES);
    //    return Ext_field_Select.getEventNames(eventnames);
    //}

    var ExtCalendar_calendar_pickerMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_calendar_pickerMetaData, _super);
        function ExtCalendar_calendar_pickerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_calendar_pickerMetaData.getAll = function () {
            ExtCalendar_calendar_pickerMetaData.PROPERTIES = Ext_calendar_form_CalendarPicker.getProperties(ExtCalendar_calendar_pickerMetaData.PROPERTIES);
            ExtCalendar_calendar_pickerMetaData.EVENTS = Ext_calendar_form_CalendarPicker.getEvents(ExtCalendar_calendar_pickerMetaData.EVENTS);
            ExtCalendar_calendar_pickerMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_calendar_pickerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_calendar_pickerMetaData.PROPERTIES = [];
        ExtCalendar_calendar_pickerMetaData.EVENTS = [];
        ExtCalendar_calendar_pickerMetaData.EVENTNAMES = [];
        return ExtCalendar_calendar_pickerMetaData;
    }(Ext_calendar_form_CalendarPicker));
    (function () { ExtCalendar_calendar_pickerMetaData.getAll(); })();
    var ExtCalendar_calendar_pickerComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_calendar_pickerComponent, _super);
        function ExtCalendar_calendar_pickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_calendar_pickerMetaData.PROPERTIES, ExtCalendar_calendar_pickerMetaData.EVENTS) || this;
            _this.xtype = 'calendar-calendar-picker';
            return _this;
        }
        ExtCalendar_calendar_pickerComponent_1 = ExtCalendar_calendar_pickerComponent;
        ExtCalendar_calendar_pickerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_calendar_pickerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_calendar_pickerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_calendar_pickerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_calendar_pickerComponent_1;
        ExtCalendar_calendar_pickerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_calendar_pickerComponent = ExtCalendar_calendar_pickerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-calendar-picker',
                inputs: ExtCalendar_calendar_pickerMetaData.PROPERTIES,
                outputs: ExtCalendar_calendar_pickerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_calendar_pickerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_calendar_pickerComponent);
        return ExtCalendar_calendar_pickerComponent;
    }(EngBase));

    var Ext_calendar_form_Edit = /** @class */ (function (_super) {
        __extends(Ext_calendar_form_Edit, _super);
        function Ext_calendar_form_Edit() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_form_Edit.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_form_Edit.PROPERTIES);
            return Ext_calendar_form_Form.getProperties(properties);
        };
        Ext_calendar_form_Edit.getEvents = function (events) {
            events = events.concat(Ext_calendar_form_Edit.EVENTS);
            return Ext_calendar_form_Form.getEvents(events);
        };
        Ext_calendar_form_Edit.PROPERTIES = [
            'title',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_form_Edit.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-form-edit,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-form-edit,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-form-edit' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'calendar-form-edit' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-form-edit,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'calendar-form-edit,values,options,e' },
            { name: 'beforetofront', parameters: 'calendar-form-edit' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-form-edit,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'calendar-form-edit' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-form-edit' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-form-edit,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'calendar-form-edit,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-form-edit' },
            { name: 'drawershow', parameters: 'calendar-form-edit' },
            { name: 'drop', parameters: 'calendar-form-edit' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'calendar-form-edit,result' },
            { name: 'expand', parameters: 'calendar-form-edit' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-form-edit,event' },
            { name: 'focusenter', parameters: 'calendar-form-edit,event' },
            { name: 'focusleave', parameters: 'calendar-form-edit,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-form-edit,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-form-edit,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-form-edit,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-form-edit,context' },
            { name: 'resizedragcancel', parameters: 'calendar-form-edit,context' },
            { name: 'resizedragend', parameters: 'calendar-form-edit,context' },
            { name: 'resizedragstart', parameters: 'calendar-form-edit,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'save', parameters: 'calendar-form-edit,context' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'calendar-form-edit,result,e' },
            { name: 'tofront', parameters: 'calendar-form-edit' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_form_Edit;
    }(Ext_calendar_form_Form));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_form_Edit.EVENTNAMES);
    //    return Ext_calendar_form_Form.getEventNames(eventnames);
    //}

    var ExtCalendar_form_editMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_form_editMetaData, _super);
        function ExtCalendar_form_editMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_form_editMetaData.getAll = function () {
            ExtCalendar_form_editMetaData.PROPERTIES = Ext_calendar_form_Edit.getProperties(ExtCalendar_form_editMetaData.PROPERTIES);
            ExtCalendar_form_editMetaData.EVENTS = Ext_calendar_form_Edit.getEvents(ExtCalendar_form_editMetaData.EVENTS);
            ExtCalendar_form_editMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_form_editMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_form_editMetaData.PROPERTIES = [];
        ExtCalendar_form_editMetaData.EVENTS = [];
        ExtCalendar_form_editMetaData.EVENTNAMES = [];
        return ExtCalendar_form_editMetaData;
    }(Ext_calendar_form_Edit));
    (function () { ExtCalendar_form_editMetaData.getAll(); })();
    var ExtCalendar_form_editComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_form_editComponent, _super);
        function ExtCalendar_form_editComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_form_editMetaData.PROPERTIES, ExtCalendar_form_editMetaData.EVENTS) || this;
            _this.xtype = 'calendar-form-edit';
            return _this;
        }
        ExtCalendar_form_editComponent_1 = ExtCalendar_form_editComponent;
        ExtCalendar_form_editComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_form_editComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_form_editComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_form_editComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_form_editComponent_1;
        ExtCalendar_form_editComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_form_editComponent = ExtCalendar_form_editComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-form-edit',
                inputs: ExtCalendar_form_editMetaData.PROPERTIES,
                outputs: ExtCalendar_form_editMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_form_editComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_form_editComponent);
        return ExtCalendar_form_editComponent;
    }(EngBase));

    var Ext_calendar_form_TimeField = /** @class */ (function (_super) {
        __extends(Ext_calendar_form_TimeField, _super);
        function Ext_calendar_form_TimeField() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_form_TimeField.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_form_TimeField.PROPERTIES);
            return Ext_field_Select.getProperties(properties);
        };
        Ext_calendar_form_TimeField.getEvents = function (events) {
            events = events.concat(Ext_calendar_form_TimeField.EVENTS);
            return Ext_field_Select.getEvents(events);
        };
        Ext_calendar_form_TimeField.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_form_TimeField.EVENTS = [
            { name: 'action', parameters: 'calendar-timefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-timefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-timefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'calendar-timefield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'calendar-timefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'calendar-timefield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'calendar-timefield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-timefield,e' },
            { name: 'focusenter', parameters: 'calendar-timefield,event' },
            { name: 'focusleave', parameters: 'calendar-timefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'calendar-timefield,e' },
            { name: 'keyup', parameters: 'calendar-timefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'calendar-timefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'calendar-timefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'calendar-timefield,newValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-timefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_form_TimeField;
    }(Ext_field_Select));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_form_TimeField.EVENTNAMES);
    //    return Ext_field_Select.getEventNames(eventnames);
    //}

    var ExtCalendar_timefieldMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_timefieldMetaData, _super);
        function ExtCalendar_timefieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_timefieldMetaData.getAll = function () {
            ExtCalendar_timefieldMetaData.PROPERTIES = Ext_calendar_form_TimeField.getProperties(ExtCalendar_timefieldMetaData.PROPERTIES);
            ExtCalendar_timefieldMetaData.EVENTS = Ext_calendar_form_TimeField.getEvents(ExtCalendar_timefieldMetaData.EVENTS);
            ExtCalendar_timefieldMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_timefieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_timefieldMetaData.PROPERTIES = [];
        ExtCalendar_timefieldMetaData.EVENTS = [];
        ExtCalendar_timefieldMetaData.EVENTNAMES = [];
        return ExtCalendar_timefieldMetaData;
    }(Ext_calendar_form_TimeField));
    (function () { ExtCalendar_timefieldMetaData.getAll(); })();
    var ExtCalendar_timefieldComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_timefieldComponent, _super);
        function ExtCalendar_timefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_timefieldMetaData.PROPERTIES, ExtCalendar_timefieldMetaData.EVENTS) || this;
            _this.xtype = 'calendar-timefield';
            return _this;
        }
        ExtCalendar_timefieldComponent_1 = ExtCalendar_timefieldComponent;
        ExtCalendar_timefieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_timefieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_timefieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_timefieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_timefieldComponent_1;
        ExtCalendar_timefieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_timefieldComponent = ExtCalendar_timefieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-timefield',
                inputs: ExtCalendar_timefieldMetaData.PROPERTIES,
                outputs: ExtCalendar_timefieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_timefieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_timefieldComponent);
        return ExtCalendar_timefieldComponent;
    }(EngBase));

    var Ext_calendar_header_Base = /** @class */ (function (_super) {
        __extends(Ext_calendar_header_Base, _super);
        function Ext_calendar_header_Base() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_header_Base.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_header_Base.PROPERTIES);
            return Ext_Gadget.getProperties(properties);
        };
        Ext_calendar_header_Base.getEvents = function (events) {
            events = events.concat(Ext_calendar_header_Base.EVENTS);
            return Ext_Gadget.getEvents(events);
        };
        Ext_calendar_header_Base.PROPERTIES = [
            'cellCls',
            'compact',
            'compactOptions',
            'format',
            'value',
            'visibleDays',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_header_Base.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_header_Base;
    }(Ext_Gadget));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_header_Base.EVENTNAMES);
    //    return Ext_Gadget.getEventNames(eventnames);
    //}

    var Ext_calendar_header_Days = /** @class */ (function (_super) {
        __extends(Ext_calendar_header_Days, _super);
        function Ext_calendar_header_Days() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_header_Days.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_header_Days.PROPERTIES);
            return Ext_calendar_header_Base.getProperties(properties);
        };
        Ext_calendar_header_Days.getEvents = function (events) {
            events = events.concat(Ext_calendar_header_Days.EVENTS);
            return Ext_calendar_header_Base.getEvents(events);
        };
        Ext_calendar_header_Days.PROPERTIES = [
            'compactOptions',
            'format',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_header_Days.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-daysheader' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-daysheader,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-daysheader,event' },
            { name: 'focusenter', parameters: 'calendar-daysheader,event' },
            { name: 'focusleave', parameters: 'calendar-daysheader,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-daysheader' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_header_Days;
    }(Ext_calendar_header_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_header_Days.EVENTNAMES);
    //    return Ext_calendar_header_Base.getEventNames(eventnames);
    //}

    var ExtCalendar_daysheaderMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_daysheaderMetaData, _super);
        function ExtCalendar_daysheaderMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_daysheaderMetaData.getAll = function () {
            ExtCalendar_daysheaderMetaData.PROPERTIES = Ext_calendar_header_Days.getProperties(ExtCalendar_daysheaderMetaData.PROPERTIES);
            ExtCalendar_daysheaderMetaData.EVENTS = Ext_calendar_header_Days.getEvents(ExtCalendar_daysheaderMetaData.EVENTS);
            ExtCalendar_daysheaderMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_daysheaderMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_daysheaderMetaData.PROPERTIES = [];
        ExtCalendar_daysheaderMetaData.EVENTS = [];
        ExtCalendar_daysheaderMetaData.EVENTNAMES = [];
        return ExtCalendar_daysheaderMetaData;
    }(Ext_calendar_header_Days));
    (function () { ExtCalendar_daysheaderMetaData.getAll(); })();
    var ExtCalendar_daysheaderComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_daysheaderComponent, _super);
        function ExtCalendar_daysheaderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_daysheaderMetaData.PROPERTIES, ExtCalendar_daysheaderMetaData.EVENTS) || this;
            _this.xtype = 'calendar-daysheader';
            return _this;
        }
        ExtCalendar_daysheaderComponent_1 = ExtCalendar_daysheaderComponent;
        ExtCalendar_daysheaderComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_daysheaderComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_daysheaderComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_daysheaderComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_daysheaderComponent_1;
        ExtCalendar_daysheaderComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_daysheaderComponent = ExtCalendar_daysheaderComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-daysheader',
                inputs: ExtCalendar_daysheaderMetaData.PROPERTIES,
                outputs: ExtCalendar_daysheaderMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_daysheaderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_daysheaderComponent);
        return ExtCalendar_daysheaderComponent;
    }(EngBase));

    var Ext_calendar_header_Weeks = /** @class */ (function (_super) {
        __extends(Ext_calendar_header_Weeks, _super);
        function Ext_calendar_header_Weeks() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_header_Weeks.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_header_Weeks.PROPERTIES);
            return Ext_calendar_header_Base.getProperties(properties);
        };
        Ext_calendar_header_Weeks.getEvents = function (events) {
            events = events.concat(Ext_calendar_header_Weeks.EVENTS);
            return Ext_calendar_header_Base.getEvents(events);
        };
        Ext_calendar_header_Weeks.PROPERTIES = [
            'format',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_header_Weeks.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-weeksheader' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-weeksheader,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-weeksheader,event' },
            { name: 'focusenter', parameters: 'calendar-weeksheader,event' },
            { name: 'focusleave', parameters: 'calendar-weeksheader,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-weeksheader' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_header_Weeks;
    }(Ext_calendar_header_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_header_Weeks.EVENTNAMES);
    //    return Ext_calendar_header_Base.getEventNames(eventnames);
    //}

    var ExtCalendar_weeksheaderMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_weeksheaderMetaData, _super);
        function ExtCalendar_weeksheaderMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_weeksheaderMetaData.getAll = function () {
            ExtCalendar_weeksheaderMetaData.PROPERTIES = Ext_calendar_header_Weeks.getProperties(ExtCalendar_weeksheaderMetaData.PROPERTIES);
            ExtCalendar_weeksheaderMetaData.EVENTS = Ext_calendar_header_Weeks.getEvents(ExtCalendar_weeksheaderMetaData.EVENTS);
            ExtCalendar_weeksheaderMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_weeksheaderMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_weeksheaderMetaData.PROPERTIES = [];
        ExtCalendar_weeksheaderMetaData.EVENTS = [];
        ExtCalendar_weeksheaderMetaData.EVENTNAMES = [];
        return ExtCalendar_weeksheaderMetaData;
    }(Ext_calendar_header_Weeks));
    (function () { ExtCalendar_weeksheaderMetaData.getAll(); })();
    var ExtCalendar_weeksheaderComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_weeksheaderComponent, _super);
        function ExtCalendar_weeksheaderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_weeksheaderMetaData.PROPERTIES, ExtCalendar_weeksheaderMetaData.EVENTS) || this;
            _this.xtype = 'calendar-weeksheader';
            return _this;
        }
        ExtCalendar_weeksheaderComponent_1 = ExtCalendar_weeksheaderComponent;
        ExtCalendar_weeksheaderComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_weeksheaderComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_weeksheaderComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_weeksheaderComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_weeksheaderComponent_1;
        ExtCalendar_weeksheaderComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_weeksheaderComponent = ExtCalendar_weeksheaderComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-weeksheader',
                inputs: ExtCalendar_weeksheaderMetaData.PROPERTIES,
                outputs: ExtCalendar_weeksheaderMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_weeksheaderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_weeksheaderComponent);
        return ExtCalendar_weeksheaderComponent;
    }(EngBase));

    var Ext_dataview_Abstract = /** @class */ (function (_super) {
        __extends(Ext_dataview_Abstract, _super);
        function Ext_dataview_Abstract() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_Abstract.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_Abstract.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_dataview_Abstract.getEvents = function (events) {
            events = events.concat(Ext_dataview_Abstract.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_dataview_Abstract.PROPERTIES = [
            'associatedData',
            'autoSize',
            'data',
            'deferEmptyText',
            'deselectOnContainerClick',
            'disableSelection',
            'emptyItemText',
            'emptyState',
            'emptyText',
            'emptyTextDefaults',
            'emptyTextProperty',
            'inline',
            'itemButtonMode',
            'itemCls',
            'itemsFocusable',
            'itemTpl',
            'loadingHeight',
            'loadingText',
            'markDirty',
            'pressedDelay',
            'publishes',
            'scrollable',
            'scrollDock',
            'scrollToTopOnRefresh',
            'selectable',
            'selection',
            'store',
            'tabIndex',
            'triggerCtEvent',
            'triggerEvent',
            'twoWayBindable',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_Abstract.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
            { name: 'deselect', parameters: 'undefined,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'undefined,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'undefined,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'undefined,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'undefined,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'undefined,index,target,record,e' },
            { name: 'itemswipe', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtap', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'undefined,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'undefined,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'undefined' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'undefined,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'undefined,selected' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_Abstract;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_Abstract.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var Ext_dataview_DataView = /** @class */ (function (_super) {
        __extends(Ext_dataview_DataView, _super);
        function Ext_dataview_DataView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_DataView.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_DataView.PROPERTIES);
            return Ext_dataview_Abstract.getProperties(properties);
        };
        Ext_dataview_DataView.getEvents = function (events) {
            events = events.concat(Ext_dataview_DataView.EVENTS);
            return Ext_dataview_Abstract.getEvents(events);
        };
        Ext_dataview_DataView.PROPERTIES = [
            'lastSelected',
            'selected',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_DataView.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dataview,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'dataview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dataview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'dataview,location' },
            { name: 'childlongpress', parameters: 'dataview,location' },
            { name: 'childmouseenter', parameters: 'dataview,location' },
            { name: 'childmouseleave', parameters: 'dataview,location' },
            { name: 'childsingletap', parameters: 'dataview,location' },
            { name: 'childtap', parameters: 'dataview,location' },
            { name: 'childtaphold', parameters: 'dataview,location' },
            { name: 'childtouchcancel', parameters: 'dataview,location' },
            { name: 'childtouchend', parameters: 'dataview,location' },
            { name: 'childtouchmove', parameters: 'dataview,location' },
            { name: 'childtouchstart', parameters: 'dataview,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,dataview,newActiveItem' },
            { name: 'deselect', parameters: 'dataview,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dataview,event' },
            { name: 'focusenter', parameters: 'dataview,event' },
            { name: 'focusleave', parameters: 'dataview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'dataview,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'dataview,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'dataview,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'dataview,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'dataview,index,target,record,e' },
            { name: 'itemswipe', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtap', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'dataview,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'dataview,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'dataview' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dataview,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'dataview,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'dataview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_DataView;
    }(Ext_dataview_Abstract));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_DataView.EVENTNAMES);
    //    return Ext_dataview_Abstract.getEventNames(eventnames);
    //}

    var Ext_calendar_AbstractList = /** @class */ (function (_super) {
        __extends(Ext_calendar_AbstractList, _super);
        function Ext_calendar_AbstractList() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_AbstractList.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_AbstractList.PROPERTIES);
            return Ext_dataview_DataView.getProperties(properties);
        };
        Ext_calendar_AbstractList.getEvents = function (events) {
            events = events.concat(Ext_calendar_AbstractList.EVENTS);
            return Ext_dataview_DataView.getEvents(events);
        };
        Ext_calendar_AbstractList.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_AbstractList.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'undefined,location' },
            { name: 'childlongpress', parameters: 'undefined,location' },
            { name: 'childmouseenter', parameters: 'undefined,location' },
            { name: 'childmouseleave', parameters: 'undefined,location' },
            { name: 'childsingletap', parameters: 'undefined,location' },
            { name: 'childtap', parameters: 'undefined,location' },
            { name: 'childtaphold', parameters: 'undefined,location' },
            { name: 'childtouchcancel', parameters: 'undefined,location' },
            { name: 'childtouchend', parameters: 'undefined,location' },
            { name: 'childtouchmove', parameters: 'undefined,location' },
            { name: 'childtouchstart', parameters: 'undefined,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
            { name: 'deselect', parameters: 'undefined,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'undefined,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'undefined,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'undefined,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'undefined,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'undefined,index,target,record,e' },
            { name: 'itemswipe', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtap', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'undefined,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'undefined,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'undefined' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'undefined,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'undefined,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_AbstractList;
    }(Ext_dataview_DataView));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_AbstractList.EVENTNAMES);
    //    return Ext_dataview_DataView.getEventNames(eventnames);
    //}

    var Ext_calendar_List = /** @class */ (function (_super) {
        __extends(Ext_calendar_List, _super);
        function Ext_calendar_List() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_List.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_List.PROPERTIES);
            return Ext_calendar_AbstractList.getProperties(properties);
        };
        Ext_calendar_List.getEvents = function (events) {
            events = events.concat(Ext_calendar_List.EVENTS);
            return Ext_calendar_AbstractList.getEvents(events);
        };
        Ext_calendar_List.PROPERTIES = [
            'enableToggle',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_List.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-list,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'calendar-list' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-list,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'calendar-list,location' },
            { name: 'childlongpress', parameters: 'calendar-list,location' },
            { name: 'childmouseenter', parameters: 'calendar-list,location' },
            { name: 'childmouseleave', parameters: 'calendar-list,location' },
            { name: 'childsingletap', parameters: 'calendar-list,location' },
            { name: 'childtap', parameters: 'calendar-list,location' },
            { name: 'childtaphold', parameters: 'calendar-list,location' },
            { name: 'childtouchcancel', parameters: 'calendar-list,location' },
            { name: 'childtouchend', parameters: 'calendar-list,location' },
            { name: 'childtouchmove', parameters: 'calendar-list,location' },
            { name: 'childtouchstart', parameters: 'calendar-list,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-list,newActiveItem' },
            { name: 'deselect', parameters: 'calendar-list,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-list,event' },
            { name: 'focusenter', parameters: 'calendar-list,event' },
            { name: 'focusleave', parameters: 'calendar-list,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemswipe', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtap', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'calendar-list,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'calendar-list,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'calendar-list,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'calendar-list' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-list,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'calendar-list,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'calendar-list' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_List;
    }(Ext_calendar_AbstractList));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_List.EVENTNAMES);
    //    return Ext_calendar_AbstractList.getEventNames(eventnames);
    //}

    var ExtCalendar_listMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_listMetaData, _super);
        function ExtCalendar_listMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_listMetaData.getAll = function () {
            ExtCalendar_listMetaData.PROPERTIES = Ext_calendar_List.getProperties(ExtCalendar_listMetaData.PROPERTIES);
            ExtCalendar_listMetaData.EVENTS = Ext_calendar_List.getEvents(ExtCalendar_listMetaData.EVENTS);
            ExtCalendar_listMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_listMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_listMetaData.PROPERTIES = [];
        ExtCalendar_listMetaData.EVENTS = [];
        ExtCalendar_listMetaData.EVENTNAMES = [];
        return ExtCalendar_listMetaData;
    }(Ext_calendar_List));
    (function () { ExtCalendar_listMetaData.getAll(); })();
    var ExtCalendar_listComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_listComponent, _super);
        function ExtCalendar_listComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_listMetaData.PROPERTIES, ExtCalendar_listMetaData.EVENTS) || this;
            _this.xtype = 'calendar-list';
            return _this;
        }
        ExtCalendar_listComponent_1 = ExtCalendar_listComponent;
        ExtCalendar_listComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_listComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_listComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_listComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_listComponent_1;
        ExtCalendar_listComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_listComponent = ExtCalendar_listComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-list',
                inputs: ExtCalendar_listMetaData.PROPERTIES,
                outputs: ExtCalendar_listMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_listComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_listComponent);
        return ExtCalendar_listComponent;
    }(EngBase));

    var Ext_calendar_panel_AbstractBase = /** @class */ (function (_super) {
        __extends(Ext_calendar_panel_AbstractBase, _super);
        function Ext_calendar_panel_AbstractBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_panel_AbstractBase.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_panel_AbstractBase.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_calendar_panel_AbstractBase.getEvents = function (events) {
            events = events.concat(Ext_calendar_panel_AbstractBase.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_calendar_panel_AbstractBase.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_panel_AbstractBase.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'undefined,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'undefined,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'undefined' },
            { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'undefined' },
            { name: 'drawershow', parameters: 'undefined' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'undefined' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'undefined,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'undefined,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'undefined,context' },
            { name: 'resizedragcancel', parameters: 'undefined,context' },
            { name: 'resizedragend', parameters: 'undefined,context' },
            { name: 'resizedragstart', parameters: 'undefined,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_panel_AbstractBase;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_panel_AbstractBase.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var Ext_calendar_panel_Base = /** @class */ (function (_super) {
        __extends(Ext_calendar_panel_Base, _super);
        function Ext_calendar_panel_Base() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_panel_Base.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_panel_Base.PROPERTIES);
            return Ext_calendar_panel_AbstractBase.getProperties(properties);
        };
        Ext_calendar_panel_Base.getEvents = function (events) {
            events = events.concat(Ext_calendar_panel_Base.EVENTS);
            return Ext_calendar_panel_AbstractBase.getEvents(events);
        };
        Ext_calendar_panel_Base.PROPERTIES = [
            'addForm',
            'cls',
            'compact',
            'compactOptions',
            'controlStoreRange',
            'dayHeader',
            'editForm',
            'eventDefaults',
            'eventRelayers',
            'gestureNavigation',
            'store',
            'timezoneOffset',
            'twoWayBindable',
            'value',
            'view',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_panel_Base.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'undefined,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'undefined,context' },
            { name: 'beforeeventedit', parameters: 'undefined,context' },
            { name: 'beforeexpand', parameters: 'undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'undefined,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'undefined' },
            { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'undefined' },
            { name: 'drawershow', parameters: 'undefined' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'undefined,context' },
            { name: 'eventdrop', parameters: 'undefined,context' },
            { name: 'eventedit', parameters: 'undefined,context' },
            { name: 'eventtap', parameters: 'undefined,context' },
            { name: 'expand', parameters: 'undefined' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'undefined,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'undefined,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'undefined,context' },
            { name: 'resizedragcancel', parameters: 'undefined,context' },
            { name: 'resizedragend', parameters: 'undefined,context' },
            { name: 'resizedragstart', parameters: 'undefined,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'undefined,context' },
            { name: 'validateeventdrop', parameters: 'undefined,context' },
            { name: 'validateeventedit', parameters: 'undefined,context' },
            { name: 'valuechange', parameters: 'undefined,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_panel_Base;
    }(Ext_calendar_panel_AbstractBase));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_panel_Base.EVENTNAMES);
    //    return Ext_calendar_panel_AbstractBase.getEventNames(eventnames);
    //}

    var Ext_calendar_panel_Days = /** @class */ (function (_super) {
        __extends(Ext_calendar_panel_Days, _super);
        function Ext_calendar_panel_Days() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_panel_Days.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_panel_Days.PROPERTIES);
            return Ext_calendar_panel_Base.getProperties(properties);
        };
        Ext_calendar_panel_Days.getEvents = function (events) {
            events = events.concat(Ext_calendar_panel_Days.EVENTS);
            return Ext_calendar_panel_Base.getEvents(events);
        };
        Ext_calendar_panel_Days.PROPERTIES = [
            'allowSelection',
            'dayHeader',
            'dayHeaderFormat',
            'displayOverlap',
            'draggable',
            'droppable',
            'endTime',
            'eventRelayers',
            'highlightToday',
            'resizeEvents',
            'showNowMarker',
            'startTime',
            'timeFormat',
            'view',
            'visibleDays',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_panel_Days.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-days,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-days,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-days' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-days,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-days,context' },
            { name: 'beforeeventedit', parameters: 'calendar-days,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-days,context' },
            { name: 'beforeexpand', parameters: 'calendar-days' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-days,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-days' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-days,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-days' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-days,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-days' },
            { name: 'drawershow', parameters: 'calendar-days' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-days,context' },
            { name: 'eventdrop', parameters: 'calendar-days,context' },
            { name: 'eventedit', parameters: 'calendar-days,context' },
            { name: 'eventresize', parameters: 'calendar-days,context' },
            { name: 'eventtap', parameters: 'calendar-days,context' },
            { name: 'expand', parameters: 'calendar-days' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-days,event' },
            { name: 'focusenter', parameters: 'calendar-days,event' },
            { name: 'focusleave', parameters: 'calendar-days,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-days,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-days,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-days,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-days,context' },
            { name: 'resizedragcancel', parameters: 'calendar-days,context' },
            { name: 'resizedragend', parameters: 'calendar-days,context' },
            { name: 'resizedragstart', parameters: 'calendar-days,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-days' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-days,context' },
            { name: 'validateeventdrop', parameters: 'calendar-days,context' },
            { name: 'validateeventedit', parameters: 'calendar-days,context' },
            { name: 'validateeventresize', parameters: 'calendar-days,context' },
            { name: 'valuechange', parameters: 'calendar-days,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_panel_Days;
    }(Ext_calendar_panel_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_panel_Days.EVENTNAMES);
    //    return Ext_calendar_panel_Base.getEventNames(eventnames);
    //}

    var Ext_calendar_panel_Day = /** @class */ (function (_super) {
        __extends(Ext_calendar_panel_Day, _super);
        function Ext_calendar_panel_Day() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_panel_Day.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_panel_Day.PROPERTIES);
            return Ext_calendar_panel_Days.getProperties(properties);
        };
        Ext_calendar_panel_Day.getEvents = function (events) {
            events = events.concat(Ext_calendar_panel_Day.EVENTS);
            return Ext_calendar_panel_Days.getEvents(events);
        };
        Ext_calendar_panel_Day.PROPERTIES = [
            'view',
            'visibleDays',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_panel_Day.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-day,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-day,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-day' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-day,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-day,context' },
            { name: 'beforeeventedit', parameters: 'calendar-day,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-day,context' },
            { name: 'beforeexpand', parameters: 'calendar-day' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-day,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-day' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-day,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-day' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-day,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-day' },
            { name: 'drawershow', parameters: 'calendar-day' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-day,context' },
            { name: 'eventdrop', parameters: 'calendar-day,context' },
            { name: 'eventedit', parameters: 'calendar-day,context' },
            { name: 'eventresize', parameters: 'calendar-day,context' },
            { name: 'eventtap', parameters: 'calendar-day,context' },
            { name: 'expand', parameters: 'calendar-day' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-day,event' },
            { name: 'focusenter', parameters: 'calendar-day,event' },
            { name: 'focusleave', parameters: 'calendar-day,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-day,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-day,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-day,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-day,context' },
            { name: 'resizedragcancel', parameters: 'calendar-day,context' },
            { name: 'resizedragend', parameters: 'calendar-day,context' },
            { name: 'resizedragstart', parameters: 'calendar-day,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-day' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-day,context' },
            { name: 'validateeventdrop', parameters: 'calendar-day,context' },
            { name: 'validateeventedit', parameters: 'calendar-day,context' },
            { name: 'validateeventresize', parameters: 'calendar-day,context' },
            { name: 'valuechange', parameters: 'calendar-day,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_panel_Day;
    }(Ext_calendar_panel_Days));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_panel_Day.EVENTNAMES);
    //    return Ext_calendar_panel_Days.getEventNames(eventnames);
    //}

    var ExtCalendar_dayMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_dayMetaData, _super);
        function ExtCalendar_dayMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_dayMetaData.getAll = function () {
            ExtCalendar_dayMetaData.PROPERTIES = Ext_calendar_panel_Day.getProperties(ExtCalendar_dayMetaData.PROPERTIES);
            ExtCalendar_dayMetaData.EVENTS = Ext_calendar_panel_Day.getEvents(ExtCalendar_dayMetaData.EVENTS);
            ExtCalendar_dayMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_dayMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_dayMetaData.PROPERTIES = [];
        ExtCalendar_dayMetaData.EVENTS = [];
        ExtCalendar_dayMetaData.EVENTNAMES = [];
        return ExtCalendar_dayMetaData;
    }(Ext_calendar_panel_Day));
    (function () { ExtCalendar_dayMetaData.getAll(); })();
    var ExtCalendar_dayComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_dayComponent, _super);
        function ExtCalendar_dayComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_dayMetaData.PROPERTIES, ExtCalendar_dayMetaData.EVENTS) || this;
            _this.xtype = 'calendar-day';
            return _this;
        }
        ExtCalendar_dayComponent_1 = ExtCalendar_dayComponent;
        ExtCalendar_dayComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_dayComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_dayComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_dayComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_dayComponent_1;
        ExtCalendar_dayComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_dayComponent = ExtCalendar_dayComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-day',
                inputs: ExtCalendar_dayMetaData.PROPERTIES,
                outputs: ExtCalendar_dayMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_dayComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_dayComponent);
        return ExtCalendar_dayComponent;
    }(EngBase));

    var ExtCalendar_daysMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_daysMetaData, _super);
        function ExtCalendar_daysMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_daysMetaData.getAll = function () {
            ExtCalendar_daysMetaData.PROPERTIES = Ext_calendar_panel_Days.getProperties(ExtCalendar_daysMetaData.PROPERTIES);
            ExtCalendar_daysMetaData.EVENTS = Ext_calendar_panel_Days.getEvents(ExtCalendar_daysMetaData.EVENTS);
            ExtCalendar_daysMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_daysMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_daysMetaData.PROPERTIES = [];
        ExtCalendar_daysMetaData.EVENTS = [];
        ExtCalendar_daysMetaData.EVENTNAMES = [];
        return ExtCalendar_daysMetaData;
    }(Ext_calendar_panel_Days));
    (function () { ExtCalendar_daysMetaData.getAll(); })();
    var ExtCalendar_daysComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_daysComponent, _super);
        function ExtCalendar_daysComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_daysMetaData.PROPERTIES, ExtCalendar_daysMetaData.EVENTS) || this;
            _this.xtype = 'calendar-days';
            return _this;
        }
        ExtCalendar_daysComponent_1 = ExtCalendar_daysComponent;
        ExtCalendar_daysComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_daysComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_daysComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_daysComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_daysComponent_1;
        ExtCalendar_daysComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_daysComponent = ExtCalendar_daysComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-days',
                inputs: ExtCalendar_daysMetaData.PROPERTIES,
                outputs: ExtCalendar_daysMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_daysComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_daysComponent);
        return ExtCalendar_daysComponent;
    }(EngBase));

    var Ext_calendar_panel_Weeks = /** @class */ (function (_super) {
        __extends(Ext_calendar_panel_Weeks, _super);
        function Ext_calendar_panel_Weeks() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_panel_Weeks.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_panel_Weeks.PROPERTIES);
            return Ext_calendar_panel_Base.getProperties(properties);
        };
        Ext_calendar_panel_Weeks.getEvents = function (events) {
            events = events.concat(Ext_calendar_panel_Weeks.EVENTS);
            return Ext_calendar_panel_Base.getEvents(events);
        };
        Ext_calendar_panel_Weeks.PROPERTIES = [
            'addOnSelect',
            'allowSelection',
            'dayFormat',
            'dayHeader',
            'dayHeaderFormat',
            'draggable',
            'droppable',
            'eventRelayers',
            'firstDayOfWeek',
            'highlightToday',
            'overflowText',
            'showOverflow',
            'view',
            'visibleDays',
            'visibleWeeks',
            'weekendDays',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_panel_Weeks.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-weeks,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-weeks,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-weeks' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-weeks,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-weeks,context' },
            { name: 'beforeeventedit', parameters: 'calendar-weeks,context' },
            { name: 'beforeexpand', parameters: 'calendar-weeks' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-weeks,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-weeks' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-weeks,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-weeks' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-weeks,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-weeks' },
            { name: 'drawershow', parameters: 'calendar-weeks' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-weeks,context' },
            { name: 'eventdrop', parameters: 'calendar-weeks,context' },
            { name: 'eventedit', parameters: 'calendar-weeks,context' },
            { name: 'eventtap', parameters: 'calendar-weeks,context' },
            { name: 'expand', parameters: 'calendar-weeks' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-weeks,event' },
            { name: 'focusenter', parameters: 'calendar-weeks,event' },
            { name: 'focusleave', parameters: 'calendar-weeks,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-weeks,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-weeks,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-weeks,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-weeks,context' },
            { name: 'resizedragcancel', parameters: 'calendar-weeks,context' },
            { name: 'resizedragend', parameters: 'calendar-weeks,context' },
            { name: 'resizedragstart', parameters: 'calendar-weeks,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-weeks' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-weeks,context' },
            { name: 'validateeventdrop', parameters: 'calendar-weeks,context' },
            { name: 'validateeventedit', parameters: 'calendar-weeks,context' },
            { name: 'valuechange', parameters: 'calendar-weeks,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_panel_Weeks;
    }(Ext_calendar_panel_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_panel_Weeks.EVENTNAMES);
    //    return Ext_calendar_panel_Base.getEventNames(eventnames);
    //}

    var Ext_calendar_panel_Month = /** @class */ (function (_super) {
        __extends(Ext_calendar_panel_Month, _super);
        function Ext_calendar_panel_Month() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_panel_Month.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_panel_Month.PROPERTIES);
            return Ext_calendar_panel_Weeks.getProperties(properties);
        };
        Ext_calendar_panel_Month.getEvents = function (events) {
            events = events.concat(Ext_calendar_panel_Month.EVENTS);
            return Ext_calendar_panel_Weeks.getEvents(events);
        };
        Ext_calendar_panel_Month.PROPERTIES = [
            'value',
            'view',
            'visibleWeeks',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_panel_Month.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-month,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-month,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-month' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-month,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-month,context' },
            { name: 'beforeeventedit', parameters: 'calendar-month,context' },
            { name: 'beforeexpand', parameters: 'calendar-month' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-month,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-month' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-month,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-month' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-month,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-month' },
            { name: 'drawershow', parameters: 'calendar-month' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-month,context' },
            { name: 'eventdrop', parameters: 'calendar-month,context' },
            { name: 'eventedit', parameters: 'calendar-month,context' },
            { name: 'eventtap', parameters: 'calendar-month,context' },
            { name: 'expand', parameters: 'calendar-month' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-month,event' },
            { name: 'focusenter', parameters: 'calendar-month,event' },
            { name: 'focusleave', parameters: 'calendar-month,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-month,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-month,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-month,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-month,context' },
            { name: 'resizedragcancel', parameters: 'calendar-month,context' },
            { name: 'resizedragend', parameters: 'calendar-month,context' },
            { name: 'resizedragstart', parameters: 'calendar-month,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-month' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-month,context' },
            { name: 'validateeventdrop', parameters: 'calendar-month,context' },
            { name: 'validateeventedit', parameters: 'calendar-month,context' },
            { name: 'valuechange', parameters: 'calendar-month,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_panel_Month;
    }(Ext_calendar_panel_Weeks));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_panel_Month.EVENTNAMES);
    //    return Ext_calendar_panel_Weeks.getEventNames(eventnames);
    //}

    var ExtCalendar_monthMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_monthMetaData, _super);
        function ExtCalendar_monthMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_monthMetaData.getAll = function () {
            ExtCalendar_monthMetaData.PROPERTIES = Ext_calendar_panel_Month.getProperties(ExtCalendar_monthMetaData.PROPERTIES);
            ExtCalendar_monthMetaData.EVENTS = Ext_calendar_panel_Month.getEvents(ExtCalendar_monthMetaData.EVENTS);
            ExtCalendar_monthMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_monthMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_monthMetaData.PROPERTIES = [];
        ExtCalendar_monthMetaData.EVENTS = [];
        ExtCalendar_monthMetaData.EVENTNAMES = [];
        return ExtCalendar_monthMetaData;
    }(Ext_calendar_panel_Month));
    (function () { ExtCalendar_monthMetaData.getAll(); })();
    var ExtCalendar_monthComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_monthComponent, _super);
        function ExtCalendar_monthComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_monthMetaData.PROPERTIES, ExtCalendar_monthMetaData.EVENTS) || this;
            _this.xtype = 'calendar-month';
            return _this;
        }
        ExtCalendar_monthComponent_1 = ExtCalendar_monthComponent;
        ExtCalendar_monthComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_monthComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_monthComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_monthComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_monthComponent_1;
        ExtCalendar_monthComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_monthComponent = ExtCalendar_monthComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-month',
                inputs: ExtCalendar_monthMetaData.PROPERTIES,
                outputs: ExtCalendar_monthMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_monthComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_monthComponent);
        return ExtCalendar_monthComponent;
    }(EngBase));

    var Ext_calendar_panel_AbstractPanel = /** @class */ (function (_super) {
        __extends(Ext_calendar_panel_AbstractPanel, _super);
        function Ext_calendar_panel_AbstractPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_panel_AbstractPanel.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_panel_AbstractPanel.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_calendar_panel_AbstractPanel.getEvents = function (events) {
            events = events.concat(Ext_calendar_panel_AbstractPanel.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_calendar_panel_AbstractPanel.PROPERTIES = [
            'menuButton',
            'sheet',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_panel_AbstractPanel.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'undefined,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'undefined,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'undefined' },
            { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'undefined' },
            { name: 'drawershow', parameters: 'undefined' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'undefined' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'undefined,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'undefined,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'undefined,context' },
            { name: 'resizedragcancel', parameters: 'undefined,context' },
            { name: 'resizedragend', parameters: 'undefined,context' },
            { name: 'resizedragstart', parameters: 'undefined,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_panel_AbstractPanel;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_panel_AbstractPanel.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var Ext_calendar_panel_Panel = /** @class */ (function (_super) {
        __extends(Ext_calendar_panel_Panel, _super);
        function Ext_calendar_panel_Panel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_panel_Panel.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_panel_Panel.PROPERTIES);
            return Ext_calendar_panel_AbstractPanel.getProperties(properties);
        };
        Ext_calendar_panel_Panel.getEvents = function (events) {
            events = events.concat(Ext_calendar_panel_Panel.EVENTS);
            return Ext_calendar_panel_AbstractPanel.getEvents(events);
        };
        Ext_calendar_panel_Panel.PROPERTIES = [
            'calendarList',
            'cls',
            'compact',
            'compactOptions',
            'createButton',
            'createButtonPosition',
            'dateTitle',
            'defaultView',
            'highlightToday',
            'nextButton',
            'previousButton',
            'referenceHolder',
            'sideBar',
            'store',
            'switcher',
            'switcherPosition',
            'timezoneOffset',
            'titleBar',
            'todayButton',
            'value',
            'views',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_panel_Panel.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'calendar' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar' },
            { name: 'drawershow', parameters: 'calendar' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'calendar' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar,event' },
            { name: 'focusenter', parameters: 'calendar,event' },
            { name: 'focusleave', parameters: 'calendar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar,context' },
            { name: 'resizedragcancel', parameters: 'calendar,context' },
            { name: 'resizedragend', parameters: 'calendar,context' },
            { name: 'resizedragstart', parameters: 'calendar,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_panel_Panel;
    }(Ext_calendar_panel_AbstractPanel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_panel_Panel.EVENTNAMES);
    //    return Ext_calendar_panel_AbstractPanel.getEventNames(eventnames);
    //}

    var ExtCalendarMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendarMetaData, _super);
        function ExtCalendarMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendarMetaData.getAll = function () {
            ExtCalendarMetaData.PROPERTIES = Ext_calendar_panel_Panel.getProperties(ExtCalendarMetaData.PROPERTIES);
            ExtCalendarMetaData.EVENTS = Ext_calendar_panel_Panel.getEvents(ExtCalendarMetaData.EVENTS);
            ExtCalendarMetaData.EVENTS.forEach(function (event) {
                ExtCalendarMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendarMetaData.PROPERTIES = [];
        ExtCalendarMetaData.EVENTS = [];
        ExtCalendarMetaData.EVENTNAMES = [];
        return ExtCalendarMetaData;
    }(Ext_calendar_panel_Panel));
    (function () { ExtCalendarMetaData.getAll(); })();
    var ExtCalendarComponent = /** @class */ (function (_super) {
        __extends(ExtCalendarComponent, _super);
        function ExtCalendarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendarMetaData.PROPERTIES, ExtCalendarMetaData.EVENTS) || this;
            _this.xtype = 'calendar';
            return _this;
        }
        ExtCalendarComponent_1 = ExtCalendarComponent;
        ExtCalendarComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendarComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendarComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendarComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendarComponent_1;
        ExtCalendarComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendarComponent = ExtCalendarComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar',
                inputs: ExtCalendarMetaData.PROPERTIES,
                outputs: ExtCalendarMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendarComponent);
        return ExtCalendarComponent;
    }(EngBase));

    var Ext_calendar_panel_Week = /** @class */ (function (_super) {
        __extends(Ext_calendar_panel_Week, _super);
        function Ext_calendar_panel_Week() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_panel_Week.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_panel_Week.PROPERTIES);
            return Ext_calendar_panel_Days.getProperties(properties);
        };
        Ext_calendar_panel_Week.getEvents = function (events) {
            events = events.concat(Ext_calendar_panel_Week.EVENTS);
            return Ext_calendar_panel_Days.getEvents(events);
        };
        Ext_calendar_panel_Week.PROPERTIES = [
            'firstDayOfWeek',
            'value',
            'view',
            'visibleDays',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_panel_Week.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,calendar-week,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'calendar-week,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'calendar-week' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-week,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-week,context' },
            { name: 'beforeeventedit', parameters: 'calendar-week,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-week,context' },
            { name: 'beforeexpand', parameters: 'calendar-week' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'calendar-week,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-week' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-week,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'calendar-week' },
            { name: 'deactivate', parameters: 'oldActiveItem,calendar-week,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'calendar-week' },
            { name: 'drawershow', parameters: 'calendar-week' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-week,context' },
            { name: 'eventdrop', parameters: 'calendar-week,context' },
            { name: 'eventedit', parameters: 'calendar-week,context' },
            { name: 'eventresize', parameters: 'calendar-week,context' },
            { name: 'eventtap', parameters: 'calendar-week,context' },
            { name: 'expand', parameters: 'calendar-week' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-week,event' },
            { name: 'focusenter', parameters: 'calendar-week,event' },
            { name: 'focusleave', parameters: 'calendar-week,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'calendar-week,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'calendar-week,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'calendar-week,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'calendar-week,context' },
            { name: 'resizedragcancel', parameters: 'calendar-week,context' },
            { name: 'resizedragend', parameters: 'calendar-week,context' },
            { name: 'resizedragstart', parameters: 'calendar-week,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-week' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-week,context' },
            { name: 'validateeventdrop', parameters: 'calendar-week,context' },
            { name: 'validateeventedit', parameters: 'calendar-week,context' },
            { name: 'validateeventresize', parameters: 'calendar-week,context' },
            { name: 'valuechange', parameters: 'calendar-week,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_panel_Week;
    }(Ext_calendar_panel_Days));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_panel_Week.EVENTNAMES);
    //    return Ext_calendar_panel_Days.getEventNames(eventnames);
    //}

    var ExtCalendar_weekMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_weekMetaData, _super);
        function ExtCalendar_weekMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_weekMetaData.getAll = function () {
            ExtCalendar_weekMetaData.PROPERTIES = Ext_calendar_panel_Week.getProperties(ExtCalendar_weekMetaData.PROPERTIES);
            ExtCalendar_weekMetaData.EVENTS = Ext_calendar_panel_Week.getEvents(ExtCalendar_weekMetaData.EVENTS);
            ExtCalendar_weekMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_weekMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_weekMetaData.PROPERTIES = [];
        ExtCalendar_weekMetaData.EVENTS = [];
        ExtCalendar_weekMetaData.EVENTNAMES = [];
        return ExtCalendar_weekMetaData;
    }(Ext_calendar_panel_Week));
    (function () { ExtCalendar_weekMetaData.getAll(); })();
    var ExtCalendar_weekComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_weekComponent, _super);
        function ExtCalendar_weekComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_weekMetaData.PROPERTIES, ExtCalendar_weekMetaData.EVENTS) || this;
            _this.xtype = 'calendar-week';
            return _this;
        }
        ExtCalendar_weekComponent_1 = ExtCalendar_weekComponent;
        ExtCalendar_weekComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_weekComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_weekComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_weekComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_weekComponent_1;
        ExtCalendar_weekComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_weekComponent = ExtCalendar_weekComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-week',
                inputs: ExtCalendar_weekMetaData.PROPERTIES,
                outputs: ExtCalendar_weekMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_weekComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_weekComponent);
        return ExtCalendar_weekComponent;
    }(EngBase));

    var ExtCalendar_weeksMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_weeksMetaData, _super);
        function ExtCalendar_weeksMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_weeksMetaData.getAll = function () {
            ExtCalendar_weeksMetaData.PROPERTIES = Ext_calendar_panel_Weeks.getProperties(ExtCalendar_weeksMetaData.PROPERTIES);
            ExtCalendar_weeksMetaData.EVENTS = Ext_calendar_panel_Weeks.getEvents(ExtCalendar_weeksMetaData.EVENTS);
            ExtCalendar_weeksMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_weeksMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_weeksMetaData.PROPERTIES = [];
        ExtCalendar_weeksMetaData.EVENTS = [];
        ExtCalendar_weeksMetaData.EVENTNAMES = [];
        return ExtCalendar_weeksMetaData;
    }(Ext_calendar_panel_Weeks));
    (function () { ExtCalendar_weeksMetaData.getAll(); })();
    var ExtCalendar_weeksComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_weeksComponent, _super);
        function ExtCalendar_weeksComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_weeksMetaData.PROPERTIES, ExtCalendar_weeksMetaData.EVENTS) || this;
            _this.xtype = 'calendar-weeks';
            return _this;
        }
        ExtCalendar_weeksComponent_1 = ExtCalendar_weeksComponent;
        ExtCalendar_weeksComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_weeksComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_weeksComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_weeksComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_weeksComponent_1;
        ExtCalendar_weeksComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_weeksComponent = ExtCalendar_weeksComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-weeks',
                inputs: ExtCalendar_weeksMetaData.PROPERTIES,
                outputs: ExtCalendar_weeksMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_weeksComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_weeksComponent);
        return ExtCalendar_weeksComponent;
    }(EngBase));

    var Ext_calendar_view_Base = /** @class */ (function (_super) {
        __extends(Ext_calendar_view_Base, _super);
        function Ext_calendar_view_Base() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_view_Base.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_view_Base.PROPERTIES);
            return Ext_Gadget.getProperties(properties);
        };
        Ext_calendar_view_Base.getEvents = function (events) {
            events = events.concat(Ext_calendar_view_Base.EVENTS);
            return Ext_Gadget.getEvents(events);
        };
        Ext_calendar_view_Base.PROPERTIES = [
            'addForm',
            'compact',
            'compactOptions',
            'controlStoreRange',
            'editForm',
            'eventDefaults',
            'gestureNavigation',
            'header',
            'store',
            'timezoneOffset',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_view_Base.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'undefined,context' },
            { name: 'beforeeventedit', parameters: 'undefined,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'undefined,context' },
            { name: 'eventdrop', parameters: 'undefined,context' },
            { name: 'eventedit', parameters: 'undefined,context' },
            { name: 'eventtap', parameters: 'undefined,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'undefined,context' },
            { name: 'validateeventdrop', parameters: 'undefined,context' },
            { name: 'validateeventedit', parameters: 'undefined,context' },
            { name: 'valuechange', parameters: 'undefined,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_view_Base;
    }(Ext_Gadget));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_view_Base.EVENTNAMES);
    //    return Ext_Gadget.getEventNames(eventnames);
    //}

    var Ext_calendar_view_Days = /** @class */ (function (_super) {
        __extends(Ext_calendar_view_Days, _super);
        function Ext_calendar_view_Days() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_view_Days.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_view_Days.PROPERTIES);
            return Ext_calendar_view_Base.getProperties(properties);
        };
        Ext_calendar_view_Days.getEvents = function (events) {
            events = events.concat(Ext_calendar_view_Days.EVENTS);
            return Ext_calendar_view_Base.getEvents(events);
        };
        Ext_calendar_view_Days.PROPERTIES = [
            'allowSelection',
            'displayOverlap',
            'draggable',
            'droppable',
            'endTime',
            'resizeEvents',
            'showNowMarker',
            'startTime',
            'timeFormat',
            'timeRenderer',
            'value',
            'visibleDays',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_view_Days.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-daysview,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-daysview,context' },
            { name: 'beforeeventedit', parameters: 'calendar-daysview,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-daysview,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-daysview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-daysview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-daysview,context' },
            { name: 'eventdrop', parameters: 'calendar-daysview,context' },
            { name: 'eventedit', parameters: 'calendar-daysview,context' },
            { name: 'eventresize', parameters: 'calendar-daysview,context' },
            { name: 'eventtap', parameters: 'calendar-daysview,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-daysview,event' },
            { name: 'focusenter', parameters: 'calendar-daysview,event' },
            { name: 'focusleave', parameters: 'calendar-daysview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-daysview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-daysview,context' },
            { name: 'validateeventdrop', parameters: 'calendar-daysview,context' },
            { name: 'validateeventedit', parameters: 'calendar-daysview,context' },
            { name: 'validateeventresize', parameters: 'calendar-daysview,context' },
            { name: 'valuechange', parameters: 'calendar-daysview,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_view_Days;
    }(Ext_calendar_view_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_view_Days.EVENTNAMES);
    //    return Ext_calendar_view_Base.getEventNames(eventnames);
    //}

    var Ext_calendar_view_Day = /** @class */ (function (_super) {
        __extends(Ext_calendar_view_Day, _super);
        function Ext_calendar_view_Day() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_view_Day.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_view_Day.PROPERTIES);
            return Ext_calendar_view_Days.getProperties(properties);
        };
        Ext_calendar_view_Day.getEvents = function (events) {
            events = events.concat(Ext_calendar_view_Day.EVENTS);
            return Ext_calendar_view_Days.getEvents(events);
        };
        Ext_calendar_view_Day.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_view_Day.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-dayview,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-dayview,context' },
            { name: 'beforeeventedit', parameters: 'calendar-dayview,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-dayview,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-dayview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-dayview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-dayview,context' },
            { name: 'eventdrop', parameters: 'calendar-dayview,context' },
            { name: 'eventedit', parameters: 'calendar-dayview,context' },
            { name: 'eventresize', parameters: 'calendar-dayview,context' },
            { name: 'eventtap', parameters: 'calendar-dayview,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-dayview,event' },
            { name: 'focusenter', parameters: 'calendar-dayview,event' },
            { name: 'focusleave', parameters: 'calendar-dayview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-dayview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-dayview,context' },
            { name: 'validateeventdrop', parameters: 'calendar-dayview,context' },
            { name: 'validateeventedit', parameters: 'calendar-dayview,context' },
            { name: 'validateeventresize', parameters: 'calendar-dayview,context' },
            { name: 'valuechange', parameters: 'calendar-dayview,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_view_Day;
    }(Ext_calendar_view_Days));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_view_Day.EVENTNAMES);
    //    return Ext_calendar_view_Days.getEventNames(eventnames);
    //}

    var ExtCalendar_dayviewMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_dayviewMetaData, _super);
        function ExtCalendar_dayviewMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_dayviewMetaData.getAll = function () {
            ExtCalendar_dayviewMetaData.PROPERTIES = Ext_calendar_view_Day.getProperties(ExtCalendar_dayviewMetaData.PROPERTIES);
            ExtCalendar_dayviewMetaData.EVENTS = Ext_calendar_view_Day.getEvents(ExtCalendar_dayviewMetaData.EVENTS);
            ExtCalendar_dayviewMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_dayviewMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_dayviewMetaData.PROPERTIES = [];
        ExtCalendar_dayviewMetaData.EVENTS = [];
        ExtCalendar_dayviewMetaData.EVENTNAMES = [];
        return ExtCalendar_dayviewMetaData;
    }(Ext_calendar_view_Day));
    (function () { ExtCalendar_dayviewMetaData.getAll(); })();
    var ExtCalendar_dayviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_dayviewComponent, _super);
        function ExtCalendar_dayviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_dayviewMetaData.PROPERTIES, ExtCalendar_dayviewMetaData.EVENTS) || this;
            _this.xtype = 'calendar-dayview';
            return _this;
        }
        ExtCalendar_dayviewComponent_1 = ExtCalendar_dayviewComponent;
        ExtCalendar_dayviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_dayviewComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_dayviewComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_dayviewComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_dayviewComponent_1;
        ExtCalendar_dayviewComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_dayviewComponent = ExtCalendar_dayviewComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-dayview',
                inputs: ExtCalendar_dayviewMetaData.PROPERTIES,
                outputs: ExtCalendar_dayviewMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_dayviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_dayviewComponent);
        return ExtCalendar_dayviewComponent;
    }(EngBase));

    var ExtCalendar_daysviewMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_daysviewMetaData, _super);
        function ExtCalendar_daysviewMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_daysviewMetaData.getAll = function () {
            ExtCalendar_daysviewMetaData.PROPERTIES = Ext_calendar_view_Days.getProperties(ExtCalendar_daysviewMetaData.PROPERTIES);
            ExtCalendar_daysviewMetaData.EVENTS = Ext_calendar_view_Days.getEvents(ExtCalendar_daysviewMetaData.EVENTS);
            ExtCalendar_daysviewMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_daysviewMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_daysviewMetaData.PROPERTIES = [];
        ExtCalendar_daysviewMetaData.EVENTS = [];
        ExtCalendar_daysviewMetaData.EVENTNAMES = [];
        return ExtCalendar_daysviewMetaData;
    }(Ext_calendar_view_Days));
    (function () { ExtCalendar_daysviewMetaData.getAll(); })();
    var ExtCalendar_daysviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_daysviewComponent, _super);
        function ExtCalendar_daysviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_daysviewMetaData.PROPERTIES, ExtCalendar_daysviewMetaData.EVENTS) || this;
            _this.xtype = 'calendar-daysview';
            return _this;
        }
        ExtCalendar_daysviewComponent_1 = ExtCalendar_daysviewComponent;
        ExtCalendar_daysviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_daysviewComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_daysviewComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_daysviewComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_daysviewComponent_1;
        ExtCalendar_daysviewComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_daysviewComponent = ExtCalendar_daysviewComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-daysview',
                inputs: ExtCalendar_daysviewMetaData.PROPERTIES,
                outputs: ExtCalendar_daysviewMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_daysviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_daysviewComponent);
        return ExtCalendar_daysviewComponent;
    }(EngBase));

    var Ext_calendar_view_Weeks = /** @class */ (function (_super) {
        __extends(Ext_calendar_view_Weeks, _super);
        function Ext_calendar_view_Weeks() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_view_Weeks.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_view_Weeks.PROPERTIES);
            return Ext_calendar_view_Base.getProperties(properties);
        };
        Ext_calendar_view_Weeks.getEvents = function (events) {
            events = events.concat(Ext_calendar_view_Weeks.EVENTS);
            return Ext_calendar_view_Base.getEvents(events);
        };
        Ext_calendar_view_Weeks.PROPERTIES = [
            'addOnSelect',
            'allowSelection',
            'compactOptions',
            'dayFormat',
            'draggable',
            'droppable',
            'firstDayOfWeek',
            'overflowText',
            'showOverflow',
            'value',
            'visibleDays',
            'visibleWeeks',
            'weekendDays',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_view_Weeks.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-weeksview,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-weeksview,context' },
            { name: 'beforeeventedit', parameters: 'calendar-weeksview,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-weeksview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-weeksview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-weeksview,context' },
            { name: 'eventdrop', parameters: 'calendar-weeksview,context' },
            { name: 'eventedit', parameters: 'calendar-weeksview,context' },
            { name: 'eventtap', parameters: 'calendar-weeksview,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-weeksview,event' },
            { name: 'focusenter', parameters: 'calendar-weeksview,event' },
            { name: 'focusleave', parameters: 'calendar-weeksview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'calendar-weeksview,context' },
            { name: 'selectrange', parameters: 'calendar-weeksview,context' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-weeksview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-weeksview,context' },
            { name: 'validateeventdrop', parameters: 'calendar-weeksview,context' },
            { name: 'validateeventedit', parameters: 'calendar-weeksview,context' },
            { name: 'valuechange', parameters: 'calendar-weeksview,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_view_Weeks;
    }(Ext_calendar_view_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_view_Weeks.EVENTNAMES);
    //    return Ext_calendar_view_Base.getEventNames(eventnames);
    //}

    var Ext_calendar_view_Month = /** @class */ (function (_super) {
        __extends(Ext_calendar_view_Month, _super);
        function Ext_calendar_view_Month() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_view_Month.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_view_Month.PROPERTIES);
            return Ext_calendar_view_Weeks.getProperties(properties);
        };
        Ext_calendar_view_Month.getEvents = function (events) {
            events = events.concat(Ext_calendar_view_Month.EVENTS);
            return Ext_calendar_view_Weeks.getEvents(events);
        };
        Ext_calendar_view_Month.PROPERTIES = [
            'value',
            'visibleWeeks',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_view_Month.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-monthview,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-monthview,context' },
            { name: 'beforeeventedit', parameters: 'calendar-monthview,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-monthview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-monthview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-monthview,context' },
            { name: 'eventdrop', parameters: 'calendar-monthview,context' },
            { name: 'eventedit', parameters: 'calendar-monthview,context' },
            { name: 'eventtap', parameters: 'calendar-monthview,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-monthview,event' },
            { name: 'focusenter', parameters: 'calendar-monthview,event' },
            { name: 'focusleave', parameters: 'calendar-monthview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'calendar-monthview,context' },
            { name: 'selectrange', parameters: 'calendar-monthview,context' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-monthview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-monthview,context' },
            { name: 'validateeventdrop', parameters: 'calendar-monthview,context' },
            { name: 'validateeventedit', parameters: 'calendar-monthview,context' },
            { name: 'valuechange', parameters: 'calendar-monthview,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_view_Month;
    }(Ext_calendar_view_Weeks));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_view_Month.EVENTNAMES);
    //    return Ext_calendar_view_Weeks.getEventNames(eventnames);
    //}

    var ExtCalendar_monthviewMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_monthviewMetaData, _super);
        function ExtCalendar_monthviewMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_monthviewMetaData.getAll = function () {
            ExtCalendar_monthviewMetaData.PROPERTIES = Ext_calendar_view_Month.getProperties(ExtCalendar_monthviewMetaData.PROPERTIES);
            ExtCalendar_monthviewMetaData.EVENTS = Ext_calendar_view_Month.getEvents(ExtCalendar_monthviewMetaData.EVENTS);
            ExtCalendar_monthviewMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_monthviewMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_monthviewMetaData.PROPERTIES = [];
        ExtCalendar_monthviewMetaData.EVENTS = [];
        ExtCalendar_monthviewMetaData.EVENTNAMES = [];
        return ExtCalendar_monthviewMetaData;
    }(Ext_calendar_view_Month));
    (function () { ExtCalendar_monthviewMetaData.getAll(); })();
    var ExtCalendar_monthviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_monthviewComponent, _super);
        function ExtCalendar_monthviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_monthviewMetaData.PROPERTIES, ExtCalendar_monthviewMetaData.EVENTS) || this;
            _this.xtype = 'calendar-monthview';
            return _this;
        }
        ExtCalendar_monthviewComponent_1 = ExtCalendar_monthviewComponent;
        ExtCalendar_monthviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_monthviewComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_monthviewComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_monthviewComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_monthviewComponent_1;
        ExtCalendar_monthviewComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_monthviewComponent = ExtCalendar_monthviewComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-monthview',
                inputs: ExtCalendar_monthviewMetaData.PROPERTIES,
                outputs: ExtCalendar_monthviewMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_monthviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_monthviewComponent);
        return ExtCalendar_monthviewComponent;
    }(EngBase));

    var Ext_container_Container = /** @class */ (function (_super) {
        __extends(Ext_container_Container, _super);
        function Ext_container_Container() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_container_Container.getProperties = function (properties) {
            properties = properties.concat(Ext_container_Container.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_container_Container.getEvents = function (events) {
            events = events.concat(Ext_container_Container.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_container_Container.PROPERTIES = [
            'activeItem',
            'autoDestroy',
            'autoSize',
            'bodyCls',
            'cardSwitchAnimation',
            'control',
            'defaultFocus',
            'defaults',
            'defaultType',
            'innerCls',
            'items',
            'layout',
            'manageBorders',
            'masked',
            'weighted',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_container_Container.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,container,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'container,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'container' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'container,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,container,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'container,event' },
            { name: 'focusenter', parameters: 'container,event' },
            { name: 'focusleave', parameters: 'container,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'container,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'container,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'container,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'container' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_container_Container;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_container_Container.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var Ext_calendar_view_Multi = /** @class */ (function (_super) {
        __extends(Ext_calendar_view_Multi, _super);
        function Ext_calendar_view_Multi() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_view_Multi.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_view_Multi.PROPERTIES);
            return Ext_container_Container.getProperties(properties);
        };
        Ext_calendar_view_Multi.getEvents = function (events) {
            events = events.concat(Ext_calendar_view_Multi.EVENTS);
            return Ext_container_Container.getEvents(events);
        };
        Ext_calendar_view_Multi.PROPERTIES = [
            'compact',
            'compactOptions',
            'defaultView',
            'layout',
            'store',
            'timezoneOffset',
            'value',
            'views',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_view_Multi.EVENTS = [
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_view_Multi;
    }(Ext_container_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_view_Multi.EVENTNAMES);
    //    return Ext_container_Container.getEventNames(eventnames);
    //}

    var ExtCalendar_multiviewMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_multiviewMetaData, _super);
        function ExtCalendar_multiviewMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_multiviewMetaData.getAll = function () {
            ExtCalendar_multiviewMetaData.PROPERTIES = Ext_calendar_view_Multi.getProperties(ExtCalendar_multiviewMetaData.PROPERTIES);
            ExtCalendar_multiviewMetaData.EVENTS = Ext_calendar_view_Multi.getEvents(ExtCalendar_multiviewMetaData.EVENTS);
            ExtCalendar_multiviewMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_multiviewMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_multiviewMetaData.PROPERTIES = [];
        ExtCalendar_multiviewMetaData.EVENTS = [];
        ExtCalendar_multiviewMetaData.EVENTNAMES = [];
        return ExtCalendar_multiviewMetaData;
    }(Ext_calendar_view_Multi));
    (function () { ExtCalendar_multiviewMetaData.getAll(); })();
    var ExtCalendar_multiviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_multiviewComponent, _super);
        function ExtCalendar_multiviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_multiviewMetaData.PROPERTIES, ExtCalendar_multiviewMetaData.EVENTS) || this;
            _this.xtype = 'calendar-multiview';
            return _this;
        }
        ExtCalendar_multiviewComponent_1 = ExtCalendar_multiviewComponent;
        ExtCalendar_multiviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_multiviewComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_multiviewComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_multiviewComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_multiviewComponent_1;
        ExtCalendar_multiviewComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_multiviewComponent = ExtCalendar_multiviewComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-multiview',
                inputs: ExtCalendar_multiviewMetaData.PROPERTIES,
                outputs: ExtCalendar_multiviewMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_multiviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_multiviewComponent);
        return ExtCalendar_multiviewComponent;
    }(EngBase));

    var Ext_calendar_view_Week = /** @class */ (function (_super) {
        __extends(Ext_calendar_view_Week, _super);
        function Ext_calendar_view_Week() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_calendar_view_Week.getProperties = function (properties) {
            properties = properties.concat(Ext_calendar_view_Week.PROPERTIES);
            return Ext_calendar_view_Days.getProperties(properties);
        };
        Ext_calendar_view_Week.getEvents = function (events) {
            events = events.concat(Ext_calendar_view_Week.EVENTS);
            return Ext_calendar_view_Days.getEvents(events);
        };
        Ext_calendar_view_Week.PROPERTIES = [
            'firstDayOfWeek',
            'value',
            'visibleDays',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_calendar_view_Week.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeeventadd', parameters: 'calendar-weekview,context' },
            { name: 'beforeeventdragstart', parameters: 'calendar-weekview,context' },
            { name: 'beforeeventedit', parameters: 'calendar-weekview,context' },
            { name: 'beforeeventresizestart', parameters: 'calendar-weekview,context' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'calendar-weekview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'calendar-weekview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'eventadd', parameters: 'calendar-weekview,context' },
            { name: 'eventdrop', parameters: 'calendar-weekview,context' },
            { name: 'eventedit', parameters: 'calendar-weekview,context' },
            { name: 'eventresize', parameters: 'calendar-weekview,context' },
            { name: 'eventtap', parameters: 'calendar-weekview,context' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'calendar-weekview,event' },
            { name: 'focusenter', parameters: 'calendar-weekview,event' },
            { name: 'focusleave', parameters: 'calendar-weekview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'calendar-weekview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateeventadd', parameters: 'calendar-weekview,context' },
            { name: 'validateeventdrop', parameters: 'calendar-weekview,context' },
            { name: 'validateeventedit', parameters: 'calendar-weekview,context' },
            { name: 'validateeventresize', parameters: 'calendar-weekview,context' },
            { name: 'valuechange', parameters: 'calendar-weekview,context' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_calendar_view_Week;
    }(Ext_calendar_view_Days));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_calendar_view_Week.EVENTNAMES);
    //    return Ext_calendar_view_Days.getEventNames(eventnames);
    //}

    var ExtCalendar_weekviewMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_weekviewMetaData, _super);
        function ExtCalendar_weekviewMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_weekviewMetaData.getAll = function () {
            ExtCalendar_weekviewMetaData.PROPERTIES = Ext_calendar_view_Week.getProperties(ExtCalendar_weekviewMetaData.PROPERTIES);
            ExtCalendar_weekviewMetaData.EVENTS = Ext_calendar_view_Week.getEvents(ExtCalendar_weekviewMetaData.EVENTS);
            ExtCalendar_weekviewMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_weekviewMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_weekviewMetaData.PROPERTIES = [];
        ExtCalendar_weekviewMetaData.EVENTS = [];
        ExtCalendar_weekviewMetaData.EVENTNAMES = [];
        return ExtCalendar_weekviewMetaData;
    }(Ext_calendar_view_Week));
    (function () { ExtCalendar_weekviewMetaData.getAll(); })();
    var ExtCalendar_weekviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_weekviewComponent, _super);
        function ExtCalendar_weekviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_weekviewMetaData.PROPERTIES, ExtCalendar_weekviewMetaData.EVENTS) || this;
            _this.xtype = 'calendar-weekview';
            return _this;
        }
        ExtCalendar_weekviewComponent_1 = ExtCalendar_weekviewComponent;
        ExtCalendar_weekviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_weekviewComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_weekviewComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_weekviewComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_weekviewComponent_1;
        ExtCalendar_weekviewComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_weekviewComponent = ExtCalendar_weekviewComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-weekview',
                inputs: ExtCalendar_weekviewMetaData.PROPERTIES,
                outputs: ExtCalendar_weekviewMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_weekviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_weekviewComponent);
        return ExtCalendar_weekviewComponent;
    }(EngBase));

    var ExtCalendar_weeksviewMetaData = /** @class */ (function (_super) {
        __extends(ExtCalendar_weeksviewMetaData, _super);
        function ExtCalendar_weeksviewMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCalendar_weeksviewMetaData.getAll = function () {
            ExtCalendar_weeksviewMetaData.PROPERTIES = Ext_calendar_view_Weeks.getProperties(ExtCalendar_weeksviewMetaData.PROPERTIES);
            ExtCalendar_weeksviewMetaData.EVENTS = Ext_calendar_view_Weeks.getEvents(ExtCalendar_weeksviewMetaData.EVENTS);
            ExtCalendar_weeksviewMetaData.EVENTS.forEach(function (event) {
                ExtCalendar_weeksviewMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCalendar_weeksviewMetaData.PROPERTIES = [];
        ExtCalendar_weeksviewMetaData.EVENTS = [];
        ExtCalendar_weeksviewMetaData.EVENTNAMES = [];
        return ExtCalendar_weeksviewMetaData;
    }(Ext_calendar_view_Weeks));
    (function () { ExtCalendar_weeksviewMetaData.getAll(); })();
    var ExtCalendar_weeksviewComponent = /** @class */ (function (_super) {
        __extends(ExtCalendar_weeksviewComponent, _super);
        function ExtCalendar_weeksviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCalendar_weeksviewMetaData.PROPERTIES, ExtCalendar_weeksviewMetaData.EVENTS) || this;
            _this.xtype = 'calendar-weeksview';
            return _this;
        }
        ExtCalendar_weeksviewComponent_1 = ExtCalendar_weeksviewComponent;
        ExtCalendar_weeksviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCalendar_weeksviewComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCalendar_weeksviewComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCalendar_weeksviewComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCalendar_weeksviewComponent_1;
        ExtCalendar_weeksviewComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCalendar_weeksviewComponent = ExtCalendar_weeksviewComponent_1 = __decorate([
            core.Component({
                selector: 'ext-calendar-weeksview',
                inputs: ExtCalendar_weeksviewMetaData.PROPERTIES,
                outputs: ExtCalendar_weeksviewMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCalendar_weeksviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCalendar_weeksviewComponent);
        return ExtCalendar_weeksviewComponent;
    }(EngBase));

    var Ext_Carousel = /** @class */ (function (_super) {
        __extends(Ext_Carousel, _super);
        function Ext_Carousel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Carousel.getProperties = function (properties) {
            properties = properties.concat(Ext_Carousel.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_Carousel.getEvents = function (events) {
            events = events.concat(Ext_Carousel.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_Carousel.PROPERTIES = [
            'direction',
            'draggable',
            'indicator',
            'layout',
            'ui',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Carousel.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,carousel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'carousel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'carousel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'carousel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,carousel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'carousel,event' },
            { name: 'focusenter', parameters: 'carousel,event' },
            { name: 'focusleave', parameters: 'carousel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'carousel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'carousel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'carousel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'carousel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Carousel;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Carousel.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var ExtCarouselMetaData = /** @class */ (function (_super) {
        __extends(ExtCarouselMetaData, _super);
        function ExtCarouselMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCarouselMetaData.getAll = function () {
            ExtCarouselMetaData.PROPERTIES = Ext_Carousel.getProperties(ExtCarouselMetaData.PROPERTIES);
            ExtCarouselMetaData.EVENTS = Ext_Carousel.getEvents(ExtCarouselMetaData.EVENTS);
            ExtCarouselMetaData.EVENTS.forEach(function (event) {
                ExtCarouselMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCarouselMetaData.PROPERTIES = [];
        ExtCarouselMetaData.EVENTS = [];
        ExtCarouselMetaData.EVENTNAMES = [];
        return ExtCarouselMetaData;
    }(Ext_Carousel));
    (function () { ExtCarouselMetaData.getAll(); })();
    var ExtCarouselComponent = /** @class */ (function (_super) {
        __extends(ExtCarouselComponent, _super);
        function ExtCarouselComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCarouselMetaData.PROPERTIES, ExtCarouselMetaData.EVENTS) || this;
            _this.xtype = 'carousel';
            return _this;
        }
        ExtCarouselComponent_1 = ExtCarouselComponent;
        ExtCarouselComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCarouselComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCarouselComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCarouselComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCarouselComponent_1;
        ExtCarouselComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCarouselComponent = ExtCarouselComponent_1 = __decorate([
            core.Component({
                selector: 'ext-carousel',
                inputs: ExtCarouselMetaData.PROPERTIES,
                outputs: ExtCarouselMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCarouselComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCarouselComponent);
        return ExtCarouselComponent;
    }(EngBase));

    var Ext_draw_ContainerBase = /** @class */ (function (_super) {
        __extends(Ext_draw_ContainerBase, _super);
        function Ext_draw_ContainerBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_draw_ContainerBase.getProperties = function (properties) {
            properties = properties.concat(Ext_draw_ContainerBase.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_draw_ContainerBase.getEvents = function (events) {
            events = events.concat(Ext_draw_ContainerBase.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_draw_ContainerBase.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_draw_ContainerBase.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'undefined,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'undefined,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'undefined,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_draw_ContainerBase;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_draw_ContainerBase.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var Ext_draw_Container = /** @class */ (function (_super) {
        __extends(Ext_draw_Container, _super);
        function Ext_draw_Container() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_draw_Container.getProperties = function (properties) {
            properties = properties.concat(Ext_draw_Container.PROPERTIES);
            return Ext_draw_ContainerBase.getProperties(properties);
        };
        Ext_draw_Container.getEvents = function (events) {
            events = events.concat(Ext_draw_Container.EVENTS);
            return Ext_draw_ContainerBase.getEvents(events);
        };
        Ext_draw_Container.PROPERTIES = [
            'downloadServerUrl',
            'engine',
            'gradients',
            'resizeHandler',
            'sprites',
            'surfaceZIndexes',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_draw_Container.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,draw,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'draw,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'draw' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'draw,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,draw,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'draw,event' },
            { name: 'focusenter', parameters: 'draw,event' },
            { name: 'focusleave', parameters: 'draw,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'draw,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'draw,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'draw,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'tofront', parameters: 'draw' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_draw_Container;
    }(Ext_draw_ContainerBase));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_draw_Container.EVENTNAMES);
    //    return Ext_draw_ContainerBase.getEventNames(eventnames);
    //}

    var Ext_chart_AbstractChart = /** @class */ (function (_super) {
        __extends(Ext_chart_AbstractChart, _super);
        function Ext_chart_AbstractChart() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_chart_AbstractChart.getProperties = function (properties) {
            properties = properties.concat(Ext_chart_AbstractChart.PROPERTIES);
            return Ext_draw_Container.getProperties(properties);
        };
        Ext_chart_AbstractChart.getEvents = function (events) {
            events = events.concat(Ext_chart_AbstractChart.EVENTS);
            return Ext_draw_Container.getEvents(events);
        };
        Ext_chart_AbstractChart.PROPERTIES = [
            'animation',
            'axes',
            'background',
            'captions',
            'colors',
            'highlightItem',
            'insetPadding',
            'interactions',
            'legend',
            'mainRect',
            'resizeHandler',
            'series',
            'store',
            'style',
            'theme',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_chart_AbstractChart.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'undefined,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerefresh', parameters: 'undefined' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemclick', parameters: 'chart,item,event' },
            { name: 'itemdblclick', parameters: 'chart,item,event' },
            { name: 'itemhighlight', parameters: 'undefined,newItem,oldItem' },
            { name: 'itemhighlightchange', parameters: 'undefined,newItem,oldItem' },
            { name: 'itemmousedown', parameters: 'chart,item,event' },
            { name: 'itemmousemove', parameters: 'chart,item,event' },
            { name: 'itemmouseout', parameters: 'chart,item,event' },
            { name: 'itemmouseover', parameters: 'chart,item,event' },
            { name: 'itemmouseup', parameters: 'chart,item,event' },
            { name: 'itemtap', parameters: 'chart,item,event' },
            { name: 'layout', parameters: 'undefined' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'redraw', parameters: 'undefined' },
            { name: 'refresh', parameters: 'undefined' },
            { name: 'remove', parameters: 'undefined,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'undefined,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'storechange', parameters: 'chart,newStore,oldStore' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_chart_AbstractChart;
    }(Ext_draw_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_chart_AbstractChart.EVENTNAMES);
    //    return Ext_draw_Container.getEventNames(eventnames);
    //}

    var Ext_chart_Chart = /** @class */ (function (_super) {
        __extends(Ext_chart_Chart, _super);
        function Ext_chart_Chart() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_chart_Chart.getProperties = function (properties) {
            properties = properties.concat(Ext_chart_Chart.PROPERTIES);
            return Ext_chart_AbstractChart.getProperties(properties);
        };
        Ext_chart_Chart.getEvents = function (events) {
            events = events.concat(Ext_chart_Chart.EVENTS);
            return Ext_chart_AbstractChart.getEvents(events);
        };
        Ext_chart_Chart.PROPERTIES = [
            'flipXY',
            'innerPadding',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_chart_Chart.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,cartesian,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'cartesian,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerefresh', parameters: 'cartesian' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'cartesian' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'cartesian,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,cartesian,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'cartesian,event' },
            { name: 'focusenter', parameters: 'cartesian,event' },
            { name: 'focusleave', parameters: 'cartesian,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemclick', parameters: 'chart,item,event' },
            { name: 'itemdblclick', parameters: 'chart,item,event' },
            { name: 'itemhighlight', parameters: 'cartesian,newItem,oldItem' },
            { name: 'itemhighlightchange', parameters: 'cartesian,newItem,oldItem' },
            { name: 'itemmousedown', parameters: 'chart,item,event' },
            { name: 'itemmousemove', parameters: 'chart,item,event' },
            { name: 'itemmouseout', parameters: 'chart,item,event' },
            { name: 'itemmouseover', parameters: 'chart,item,event' },
            { name: 'itemmouseup', parameters: 'chart,item,event' },
            { name: 'itemtap', parameters: 'chart,item,event' },
            { name: 'layout', parameters: 'cartesian' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'cartesian,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'redraw', parameters: 'cartesian' },
            { name: 'refresh', parameters: 'cartesian' },
            { name: 'remove', parameters: 'cartesian,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'cartesian,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'storechange', parameters: 'chart,newStore,oldStore' },
            { name: 'tofront', parameters: 'cartesian' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_chart_Chart;
    }(Ext_chart_AbstractChart));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_chart_Chart.EVENTNAMES);
    //    return Ext_chart_AbstractChart.getEventNames(eventnames);
    //}

    var ExtCartesianMetaData = /** @class */ (function (_super) {
        __extends(ExtCartesianMetaData, _super);
        function ExtCartesianMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCartesianMetaData.getAll = function () {
            ExtCartesianMetaData.PROPERTIES = Ext_chart_Chart.getProperties(ExtCartesianMetaData.PROPERTIES);
            ExtCartesianMetaData.EVENTS = Ext_chart_Chart.getEvents(ExtCartesianMetaData.EVENTS);
            ExtCartesianMetaData.EVENTS.forEach(function (event) {
                ExtCartesianMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCartesianMetaData.PROPERTIES = [];
        ExtCartesianMetaData.EVENTS = [];
        ExtCartesianMetaData.EVENTNAMES = [];
        return ExtCartesianMetaData;
    }(Ext_chart_Chart));
    (function () { ExtCartesianMetaData.getAll(); })();
    var ExtCartesianComponent = /** @class */ (function (_super) {
        __extends(ExtCartesianComponent, _super);
        function ExtCartesianComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCartesianMetaData.PROPERTIES, ExtCartesianMetaData.EVENTS) || this;
            _this.xtype = 'cartesian';
            return _this;
        }
        ExtCartesianComponent_1 = ExtCartesianComponent;
        ExtCartesianComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCartesianComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCartesianComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCartesianComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCartesianComponent_1;
        ExtCartesianComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCartesianComponent = ExtCartesianComponent_1 = __decorate([
            core.Component({
                selector: 'ext-cartesian',
                inputs: ExtCartesianMetaData.PROPERTIES,
                outputs: ExtCartesianMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCartesianComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCartesianComponent);
        return ExtCartesianComponent;
    }(EngBase));

    var Ext_chart_legend_LegendBase = /** @class */ (function (_super) {
        __extends(Ext_chart_legend_LegendBase, _super);
        function Ext_chart_legend_LegendBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_chart_legend_LegendBase.getProperties = function (properties) {
            properties = properties.concat(Ext_chart_legend_LegendBase.PROPERTIES);
            return Ext_dataview_DataView.getProperties(properties);
        };
        Ext_chart_legend_LegendBase.getEvents = function (events) {
            events = events.concat(Ext_chart_legend_LegendBase.EVENTS);
            return Ext_dataview_DataView.getEvents(events);
        };
        Ext_chart_legend_LegendBase.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_chart_legend_LegendBase.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'undefined,location' },
            { name: 'childlongpress', parameters: 'undefined,location' },
            { name: 'childmouseenter', parameters: 'undefined,location' },
            { name: 'childmouseleave', parameters: 'undefined,location' },
            { name: 'childsingletap', parameters: 'undefined,location' },
            { name: 'childtap', parameters: 'undefined,location' },
            { name: 'childtaphold', parameters: 'undefined,location' },
            { name: 'childtouchcancel', parameters: 'undefined,location' },
            { name: 'childtouchend', parameters: 'undefined,location' },
            { name: 'childtouchmove', parameters: 'undefined,location' },
            { name: 'childtouchstart', parameters: 'undefined,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
            { name: 'deselect', parameters: 'undefined,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'undefined,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'undefined,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'undefined,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'undefined,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'undefined,index,target,record,e' },
            { name: 'itemswipe', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtap', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'undefined,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'undefined,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'undefined,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'undefined' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'undefined,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'undefined,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_chart_legend_LegendBase;
    }(Ext_dataview_DataView));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_chart_legend_LegendBase.EVENTNAMES);
    //    return Ext_dataview_DataView.getEventNames(eventnames);
    //}

    var Ext_chart_Legend = /** @class */ (function (_super) {
        __extends(Ext_chart_Legend, _super);
        function Ext_chart_Legend() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_chart_Legend.getProperties = function (properties) {
            properties = properties.concat(Ext_chart_Legend.PROPERTIES);
            return Ext_chart_legend_LegendBase.getProperties(properties);
        };
        Ext_chart_Legend.getEvents = function (events) {
            events = events.concat(Ext_chart_Legend.EVENTS);
            return Ext_chart_legend_LegendBase.getEvents(events);
        };
        Ext_chart_Legend.PROPERTIES = [
            'rect',
            'store',
            'toggleable',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_chart_Legend.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,legend,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'legend' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'legend,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'legend,location' },
            { name: 'childlongpress', parameters: 'legend,location' },
            { name: 'childmouseenter', parameters: 'legend,location' },
            { name: 'childmouseleave', parameters: 'legend,location' },
            { name: 'childsingletap', parameters: 'legend,location' },
            { name: 'childtap', parameters: 'legend,location' },
            { name: 'childtaphold', parameters: 'legend,location' },
            { name: 'childtouchcancel', parameters: 'legend,location' },
            { name: 'childtouchend', parameters: 'legend,location' },
            { name: 'childtouchmove', parameters: 'legend,location' },
            { name: 'childtouchstart', parameters: 'legend,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,legend,newActiveItem' },
            { name: 'deselect', parameters: 'legend,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'legend,event' },
            { name: 'focusenter', parameters: 'legend,event' },
            { name: 'focusleave', parameters: 'legend,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'legend,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'legend,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'legend,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'legend,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'legend,index,target,record,e' },
            { name: 'itemswipe', parameters: 'legend,index,target,record,e' },
            { name: 'itemtap', parameters: 'legend,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'legend,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'legend,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'legend,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'legend,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'legend,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'legend,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'legend' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'legend,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'legend,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'legend' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_chart_Legend;
    }(Ext_chart_legend_LegendBase));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_chart_Legend.EVENTNAMES);
    //    return Ext_chart_legend_LegendBase.getEventNames(eventnames);
    //}

    var ExtLegendMetaData = /** @class */ (function (_super) {
        __extends(ExtLegendMetaData, _super);
        function ExtLegendMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtLegendMetaData.getAll = function () {
            ExtLegendMetaData.PROPERTIES = Ext_chart_Legend.getProperties(ExtLegendMetaData.PROPERTIES);
            ExtLegendMetaData.EVENTS = Ext_chart_Legend.getEvents(ExtLegendMetaData.EVENTS);
            ExtLegendMetaData.EVENTS.forEach(function (event) {
                ExtLegendMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtLegendMetaData.PROPERTIES = [];
        ExtLegendMetaData.EVENTS = [];
        ExtLegendMetaData.EVENTNAMES = [];
        return ExtLegendMetaData;
    }(Ext_chart_Legend));
    (function () { ExtLegendMetaData.getAll(); })();
    var ExtLegendComponent = /** @class */ (function (_super) {
        __extends(ExtLegendComponent, _super);
        function ExtLegendComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtLegendMetaData.PROPERTIES, ExtLegendMetaData.EVENTS) || this;
            _this.xtype = 'legend';
            return _this;
        }
        ExtLegendComponent_1 = ExtLegendComponent;
        ExtLegendComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtLegendComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtLegendComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtLegendComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtLegendComponent_1;
        ExtLegendComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtLegendComponent = ExtLegendComponent_1 = __decorate([
            core.Component({
                selector: 'ext-legend',
                inputs: ExtLegendMetaData.PROPERTIES,
                outputs: ExtLegendMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtLegendComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtLegendComponent);
        return ExtLegendComponent;
    }(EngBase));

    var Ext_chart_navigator_ContainerBase = /** @class */ (function (_super) {
        __extends(Ext_chart_navigator_ContainerBase, _super);
        function Ext_chart_navigator_ContainerBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_chart_navigator_ContainerBase.getProperties = function (properties) {
            properties = properties.concat(Ext_chart_navigator_ContainerBase.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_chart_navigator_ContainerBase.getEvents = function (events) {
            events = events.concat(Ext_chart_navigator_ContainerBase.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_chart_navigator_ContainerBase.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_chart_navigator_ContainerBase.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'undefined,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'undefined,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'undefined,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_chart_navigator_ContainerBase;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_chart_navigator_ContainerBase.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var Ext_chart_navigator_Container = /** @class */ (function (_super) {
        __extends(Ext_chart_navigator_Container, _super);
        function Ext_chart_navigator_Container() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_chart_navigator_Container.getProperties = function (properties) {
            properties = properties.concat(Ext_chart_navigator_Container.PROPERTIES);
            return Ext_chart_navigator_ContainerBase.getProperties(properties);
        };
        Ext_chart_navigator_Container.getEvents = function (events) {
            events = events.concat(Ext_chart_navigator_Container.EVENTS);
            return Ext_chart_navigator_ContainerBase.getEvents(events);
        };
        Ext_chart_navigator_Container.PROPERTIES = [
            'chart',
            'navigator',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_chart_navigator_Container.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,chartnavigator,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'chartnavigator,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'chartnavigator' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'chartnavigator,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,chartnavigator,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'chartnavigator,event' },
            { name: 'focusenter', parameters: 'chartnavigator,event' },
            { name: 'focusleave', parameters: 'chartnavigator,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'chartnavigator,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'chartnavigator,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'chartnavigator,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'chartnavigator' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_chart_navigator_Container;
    }(Ext_chart_navigator_ContainerBase));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_chart_navigator_Container.EVENTNAMES);
    //    return Ext_chart_navigator_ContainerBase.getEventNames(eventnames);
    //}

    var ExtChartnavigatorMetaData = /** @class */ (function (_super) {
        __extends(ExtChartnavigatorMetaData, _super);
        function ExtChartnavigatorMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtChartnavigatorMetaData.getAll = function () {
            ExtChartnavigatorMetaData.PROPERTIES = Ext_chart_navigator_Container.getProperties(ExtChartnavigatorMetaData.PROPERTIES);
            ExtChartnavigatorMetaData.EVENTS = Ext_chart_navigator_Container.getEvents(ExtChartnavigatorMetaData.EVENTS);
            ExtChartnavigatorMetaData.EVENTS.forEach(function (event) {
                ExtChartnavigatorMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtChartnavigatorMetaData.PROPERTIES = [];
        ExtChartnavigatorMetaData.EVENTS = [];
        ExtChartnavigatorMetaData.EVENTNAMES = [];
        return ExtChartnavigatorMetaData;
    }(Ext_chart_navigator_Container));
    (function () { ExtChartnavigatorMetaData.getAll(); })();
    var ExtChartnavigatorComponent = /** @class */ (function (_super) {
        __extends(ExtChartnavigatorComponent, _super);
        function ExtChartnavigatorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtChartnavigatorMetaData.PROPERTIES, ExtChartnavigatorMetaData.EVENTS) || this;
            _this.xtype = 'chartnavigator';
            return _this;
        }
        ExtChartnavigatorComponent_1 = ExtChartnavigatorComponent;
        ExtChartnavigatorComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtChartnavigatorComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtChartnavigatorComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtChartnavigatorComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtChartnavigatorComponent_1;
        ExtChartnavigatorComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtChartnavigatorComponent = ExtChartnavigatorComponent_1 = __decorate([
            core.Component({
                selector: 'ext-chartnavigator',
                inputs: ExtChartnavigatorMetaData.PROPERTIES,
                outputs: ExtChartnavigatorMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtChartnavigatorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtChartnavigatorComponent);
        return ExtChartnavigatorComponent;
    }(EngBase));

    var Ext_chart_PolarChart = /** @class */ (function (_super) {
        __extends(Ext_chart_PolarChart, _super);
        function Ext_chart_PolarChart() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_chart_PolarChart.getProperties = function (properties) {
            properties = properties.concat(Ext_chart_PolarChart.PROPERTIES);
            return Ext_chart_AbstractChart.getProperties(properties);
        };
        Ext_chart_PolarChart.getEvents = function (events) {
            events = events.concat(Ext_chart_PolarChart.EVENTS);
            return Ext_chart_AbstractChart.getEvents(events);
        };
        Ext_chart_PolarChart.PROPERTIES = [
            'center',
            'innerPadding',
            'radius',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_chart_PolarChart.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,polar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'polar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerefresh', parameters: 'polar' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'polar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'polar,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,polar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'polar,event' },
            { name: 'focusenter', parameters: 'polar,event' },
            { name: 'focusleave', parameters: 'polar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemclick', parameters: 'chart,item,event' },
            { name: 'itemdblclick', parameters: 'chart,item,event' },
            { name: 'itemhighlight', parameters: 'polar,newItem,oldItem' },
            { name: 'itemhighlightchange', parameters: 'polar,newItem,oldItem' },
            { name: 'itemmousedown', parameters: 'chart,item,event' },
            { name: 'itemmousemove', parameters: 'chart,item,event' },
            { name: 'itemmouseout', parameters: 'chart,item,event' },
            { name: 'itemmouseover', parameters: 'chart,item,event' },
            { name: 'itemmouseup', parameters: 'chart,item,event' },
            { name: 'itemtap', parameters: 'chart,item,event' },
            { name: 'layout', parameters: 'polar' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'polar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'redraw', parameters: 'polar' },
            { name: 'refresh', parameters: 'polar' },
            { name: 'remove', parameters: 'polar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'polar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'storechange', parameters: 'chart,newStore,oldStore' },
            { name: 'tofront', parameters: 'polar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_chart_PolarChart;
    }(Ext_chart_AbstractChart));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_chart_PolarChart.EVENTNAMES);
    //    return Ext_chart_AbstractChart.getEventNames(eventnames);
    //}

    var ExtPolarMetaData = /** @class */ (function (_super) {
        __extends(ExtPolarMetaData, _super);
        function ExtPolarMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPolarMetaData.getAll = function () {
            ExtPolarMetaData.PROPERTIES = Ext_chart_PolarChart.getProperties(ExtPolarMetaData.PROPERTIES);
            ExtPolarMetaData.EVENTS = Ext_chart_PolarChart.getEvents(ExtPolarMetaData.EVENTS);
            ExtPolarMetaData.EVENTS.forEach(function (event) {
                ExtPolarMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPolarMetaData.PROPERTIES = [];
        ExtPolarMetaData.EVENTS = [];
        ExtPolarMetaData.EVENTNAMES = [];
        return ExtPolarMetaData;
    }(Ext_chart_PolarChart));
    (function () { ExtPolarMetaData.getAll(); })();
    var ExtPolarComponent = /** @class */ (function (_super) {
        __extends(ExtPolarComponent, _super);
        function ExtPolarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPolarMetaData.PROPERTIES, ExtPolarMetaData.EVENTS) || this;
            _this.xtype = 'polar';
            return _this;
        }
        ExtPolarComponent_1 = ExtPolarComponent;
        ExtPolarComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPolarComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPolarComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPolarComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPolarComponent_1;
        ExtPolarComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPolarComponent = ExtPolarComponent_1 = __decorate([
            core.Component({
                selector: 'ext-polar',
                inputs: ExtPolarMetaData.PROPERTIES,
                outputs: ExtPolarMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPolarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPolarComponent);
        return ExtPolarComponent;
    }(EngBase));

    var Ext_chart_SpaceFillingChart = /** @class */ (function (_super) {
        __extends(Ext_chart_SpaceFillingChart, _super);
        function Ext_chart_SpaceFillingChart() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_chart_SpaceFillingChart.getProperties = function (properties) {
            properties = properties.concat(Ext_chart_SpaceFillingChart.PROPERTIES);
            return Ext_chart_AbstractChart.getProperties(properties);
        };
        Ext_chart_SpaceFillingChart.getEvents = function (events) {
            events = events.concat(Ext_chart_SpaceFillingChart.EVENTS);
            return Ext_chart_AbstractChart.getEvents(events);
        };
        Ext_chart_SpaceFillingChart.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_chart_SpaceFillingChart.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,spacefilling,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'spacefilling,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerefresh', parameters: 'spacefilling' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'spacefilling' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'spacefilling,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,spacefilling,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'spacefilling,event' },
            { name: 'focusenter', parameters: 'spacefilling,event' },
            { name: 'focusleave', parameters: 'spacefilling,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemclick', parameters: 'chart,item,event' },
            { name: 'itemdblclick', parameters: 'chart,item,event' },
            { name: 'itemhighlight', parameters: 'spacefilling,newItem,oldItem' },
            { name: 'itemhighlightchange', parameters: 'spacefilling,newItem,oldItem' },
            { name: 'itemmousedown', parameters: 'chart,item,event' },
            { name: 'itemmousemove', parameters: 'chart,item,event' },
            { name: 'itemmouseout', parameters: 'chart,item,event' },
            { name: 'itemmouseover', parameters: 'chart,item,event' },
            { name: 'itemmouseup', parameters: 'chart,item,event' },
            { name: 'itemtap', parameters: 'chart,item,event' },
            { name: 'layout', parameters: 'spacefilling' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'spacefilling,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'redraw', parameters: 'spacefilling' },
            { name: 'refresh', parameters: 'spacefilling' },
            { name: 'remove', parameters: 'spacefilling,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'spacefilling,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'storechange', parameters: 'chart,newStore,oldStore' },
            { name: 'tofront', parameters: 'spacefilling' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_chart_SpaceFillingChart;
    }(Ext_chart_AbstractChart));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_chart_SpaceFillingChart.EVENTNAMES);
    //    return Ext_chart_AbstractChart.getEventNames(eventnames);
    //}

    var ExtSpacefillingMetaData = /** @class */ (function (_super) {
        __extends(ExtSpacefillingMetaData, _super);
        function ExtSpacefillingMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSpacefillingMetaData.getAll = function () {
            ExtSpacefillingMetaData.PROPERTIES = Ext_chart_SpaceFillingChart.getProperties(ExtSpacefillingMetaData.PROPERTIES);
            ExtSpacefillingMetaData.EVENTS = Ext_chart_SpaceFillingChart.getEvents(ExtSpacefillingMetaData.EVENTS);
            ExtSpacefillingMetaData.EVENTS.forEach(function (event) {
                ExtSpacefillingMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSpacefillingMetaData.PROPERTIES = [];
        ExtSpacefillingMetaData.EVENTS = [];
        ExtSpacefillingMetaData.EVENTNAMES = [];
        return ExtSpacefillingMetaData;
    }(Ext_chart_SpaceFillingChart));
    (function () { ExtSpacefillingMetaData.getAll(); })();
    var ExtSpacefillingComponent = /** @class */ (function (_super) {
        __extends(ExtSpacefillingComponent, _super);
        function ExtSpacefillingComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSpacefillingMetaData.PROPERTIES, ExtSpacefillingMetaData.EVENTS) || this;
            _this.xtype = 'spacefilling';
            return _this;
        }
        ExtSpacefillingComponent_1 = ExtSpacefillingComponent;
        ExtSpacefillingComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSpacefillingComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSpacefillingComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSpacefillingComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSpacefillingComponent_1;
        ExtSpacefillingComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSpacefillingComponent = ExtSpacefillingComponent_1 = __decorate([
            core.Component({
                selector: 'ext-spacefilling',
                inputs: ExtSpacefillingMetaData.PROPERTIES,
                outputs: ExtSpacefillingMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSpacefillingComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSpacefillingComponent);
        return ExtSpacefillingComponent;
    }(EngBase));

    var Ext_Chip = /** @class */ (function (_super) {
        __extends(Ext_Chip, _super);
        function Ext_Chip() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Chip.getProperties = function (properties) {
            properties = properties.concat(Ext_Chip.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_Chip.getEvents = function (events) {
            events = events.concat(Ext_Chip.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_Chip.PROPERTIES = [
            'closable',
            'closeHandler',
            'icon',
            'iconCls',
            'scope',
            'text',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Chip.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'chip' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'chip,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'chip,event' },
            { name: 'focusenter', parameters: 'chip,event' },
            { name: 'focusleave', parameters: 'chip,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'chip' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Chip;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Chip.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtChipMetaData = /** @class */ (function (_super) {
        __extends(ExtChipMetaData, _super);
        function ExtChipMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtChipMetaData.getAll = function () {
            ExtChipMetaData.PROPERTIES = Ext_Chip.getProperties(ExtChipMetaData.PROPERTIES);
            ExtChipMetaData.EVENTS = Ext_Chip.getEvents(ExtChipMetaData.EVENTS);
            ExtChipMetaData.EVENTS.forEach(function (event) {
                ExtChipMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtChipMetaData.PROPERTIES = [];
        ExtChipMetaData.EVENTS = [];
        ExtChipMetaData.EVENTNAMES = [];
        return ExtChipMetaData;
    }(Ext_Chip));
    (function () { ExtChipMetaData.getAll(); })();
    var ExtChipComponent = /** @class */ (function (_super) {
        __extends(ExtChipComponent, _super);
        function ExtChipComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtChipMetaData.PROPERTIES, ExtChipMetaData.EVENTS) || this;
            _this.xtype = 'chip';
            return _this;
        }
        ExtChipComponent_1 = ExtChipComponent;
        ExtChipComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtChipComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtChipComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtChipComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtChipComponent_1;
        ExtChipComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtChipComponent = ExtChipComponent_1 = __decorate([
            core.Component({
                selector: 'ext-chip',
                inputs: ExtChipMetaData.PROPERTIES,
                outputs: ExtChipMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtChipComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtChipComponent);
        return ExtChipComponent;
    }(EngBase));

    var ExtComponentMetaData = /** @class */ (function (_super) {
        __extends(ExtComponentMetaData, _super);
        function ExtComponentMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtComponentMetaData.getAll = function () {
            ExtComponentMetaData.PROPERTIES = Ext_Gadget.getProperties(ExtComponentMetaData.PROPERTIES);
            ExtComponentMetaData.EVENTS = Ext_Gadget.getEvents(ExtComponentMetaData.EVENTS);
            ExtComponentMetaData.EVENTS.forEach(function (event) {
                ExtComponentMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtComponentMetaData.PROPERTIES = [];
        ExtComponentMetaData.EVENTS = [];
        ExtComponentMetaData.EVENTNAMES = [];
        return ExtComponentMetaData;
    }(Ext_Gadget));
    (function () { ExtComponentMetaData.getAll(); })();
    var ExtComponentComponent = /** @class */ (function (_super) {
        __extends(ExtComponentComponent, _super);
        function ExtComponentComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtComponentMetaData.PROPERTIES, ExtComponentMetaData.EVENTS) || this;
            _this.xtype = 'component';
            return _this;
        }
        ExtComponentComponent_1 = ExtComponentComponent;
        ExtComponentComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtComponentComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtComponentComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtComponentComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtComponentComponent_1;
        ExtComponentComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtComponentComponent = ExtComponentComponent_1 = __decorate([
            core.Component({
                selector: 'ext-component',
                inputs: ExtComponentMetaData.PROPERTIES,
                outputs: ExtComponentMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtComponentComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtComponentComponent);
        return ExtComponentComponent;
    }(EngBase));

    var ExtContainerMetaData = /** @class */ (function (_super) {
        __extends(ExtContainerMetaData, _super);
        function ExtContainerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtContainerMetaData.getAll = function () {
            ExtContainerMetaData.PROPERTIES = Ext_container_Container.getProperties(ExtContainerMetaData.PROPERTIES);
            ExtContainerMetaData.EVENTS = Ext_container_Container.getEvents(ExtContainerMetaData.EVENTS);
            ExtContainerMetaData.EVENTS.forEach(function (event) {
                ExtContainerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtContainerMetaData.PROPERTIES = [];
        ExtContainerMetaData.EVENTS = [];
        ExtContainerMetaData.EVENTNAMES = [];
        return ExtContainerMetaData;
    }(Ext_container_Container));
    (function () { ExtContainerMetaData.getAll(); })();
    var ExtContainerComponent = /** @class */ (function (_super) {
        __extends(ExtContainerComponent, _super);
        function ExtContainerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtContainerMetaData.PROPERTIES, ExtContainerMetaData.EVENTS) || this;
            _this.xtype = 'container';
            return _this;
        }
        ExtContainerComponent_1 = ExtContainerComponent;
        ExtContainerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtContainerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtContainerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtContainerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtContainerComponent_1;
        ExtContainerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtContainerComponent = ExtContainerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-container',
                inputs: ExtContainerMetaData.PROPERTIES,
                outputs: ExtContainerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtContainerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtContainerComponent);
        return ExtContainerComponent;
    }(EngBase));

    var Ext_d3_ComponentBase = /** @class */ (function (_super) {
        __extends(Ext_d3_ComponentBase, _super);
        function Ext_d3_ComponentBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_d3_ComponentBase.getProperties = function (properties) {
            properties = properties.concat(Ext_d3_ComponentBase.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_d3_ComponentBase.getEvents = function (events) {
            events = events.concat(Ext_d3_ComponentBase.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_d3_ComponentBase.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_d3_ComponentBase.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_d3_ComponentBase;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_d3_ComponentBase.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var Ext_d3_Component = /** @class */ (function (_super) {
        __extends(Ext_d3_Component, _super);
        function Ext_d3_Component() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_d3_Component.getProperties = function (properties) {
            properties = properties.concat(Ext_d3_Component.PROPERTIES);
            return Ext_d3_ComponentBase.getProperties(properties);
        };
        Ext_d3_Component.getEvents = function (events) {
            events = events.concat(Ext_d3_Component.EVENTS);
            return Ext_d3_ComponentBase.getEvents(events);
        };
        Ext_d3_Component.PROPERTIES = [
            'componentCls',
            'interactions',
            'store',
            'transitions',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_d3_Component.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_d3_Component;
    }(Ext_d3_ComponentBase));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_d3_Component.EVENTNAMES);
    //    return Ext_d3_ComponentBase.getEventNames(eventnames);
    //}

    var Ext_d3_canvas_Canvas = /** @class */ (function (_super) {
        __extends(Ext_d3_canvas_Canvas, _super);
        function Ext_d3_canvas_Canvas() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_d3_canvas_Canvas.getProperties = function (properties) {
            properties = properties.concat(Ext_d3_canvas_Canvas.PROPERTIES);
            return Ext_d3_Component.getProperties(properties);
        };
        Ext_d3_canvas_Canvas.getEvents = function (events) {
            events = events.concat(Ext_d3_canvas_Canvas.EVENTS);
            return Ext_d3_Component.getEvents(events);
        };
        Ext_d3_canvas_Canvas.PROPERTIES = [
            'hdpi',
            'size',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_d3_canvas_Canvas.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-canvas' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-canvas,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-canvas,event' },
            { name: 'focusenter', parameters: 'd3-canvas,event' },
            { name: 'focusleave', parameters: 'd3-canvas,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,canvas,size' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-canvas' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_d3_canvas_Canvas;
    }(Ext_d3_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_d3_canvas_Canvas.EVENTNAMES);
    //    return Ext_d3_Component.getEventNames(eventnames);
    //}

    var ExtD3_canvasMetaData = /** @class */ (function (_super) {
        __extends(ExtD3_canvasMetaData, _super);
        function ExtD3_canvasMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtD3_canvasMetaData.getAll = function () {
            ExtD3_canvasMetaData.PROPERTIES = Ext_d3_canvas_Canvas.getProperties(ExtD3_canvasMetaData.PROPERTIES);
            ExtD3_canvasMetaData.EVENTS = Ext_d3_canvas_Canvas.getEvents(ExtD3_canvasMetaData.EVENTS);
            ExtD3_canvasMetaData.EVENTS.forEach(function (event) {
                ExtD3_canvasMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtD3_canvasMetaData.PROPERTIES = [];
        ExtD3_canvasMetaData.EVENTS = [];
        ExtD3_canvasMetaData.EVENTNAMES = [];
        return ExtD3_canvasMetaData;
    }(Ext_d3_canvas_Canvas));
    (function () { ExtD3_canvasMetaData.getAll(); })();
    var ExtD3_canvasComponent = /** @class */ (function (_super) {
        __extends(ExtD3_canvasComponent, _super);
        function ExtD3_canvasComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtD3_canvasMetaData.PROPERTIES, ExtD3_canvasMetaData.EVENTS) || this;
            _this.xtype = 'd3-canvas';
            return _this;
        }
        ExtD3_canvasComponent_1 = ExtD3_canvasComponent;
        ExtD3_canvasComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtD3_canvasComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtD3_canvasComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtD3_canvasComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtD3_canvasComponent_1;
        ExtD3_canvasComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtD3_canvasComponent = ExtD3_canvasComponent_1 = __decorate([
            core.Component({
                selector: 'ext-d3-canvas',
                inputs: ExtD3_canvasMetaData.PROPERTIES,
                outputs: ExtD3_canvasMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtD3_canvasComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtD3_canvasComponent);
        return ExtD3_canvasComponent;
    }(EngBase));

    var Ext_d3_svg_Svg = /** @class */ (function (_super) {
        __extends(Ext_d3_svg_Svg, _super);
        function Ext_d3_svg_Svg() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_d3_svg_Svg.getProperties = function (properties) {
            properties = properties.concat(Ext_d3_svg_Svg.PROPERTIES);
            return Ext_d3_Component.getProperties(properties);
        };
        Ext_d3_svg_Svg.getEvents = function (events) {
            events = events.concat(Ext_d3_svg_Svg.EVENTS);
            return Ext_d3_Component.getEvents(events);
        };
        Ext_d3_svg_Svg.PROPERTIES = [
            'clipScene',
            'padding',
            'size',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_d3_svg_Svg.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-svg' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-svg,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-svg,event' },
            { name: 'focusenter', parameters: 'd3-svg,event' },
            { name: 'focusleave', parameters: 'd3-svg,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-svg' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_d3_svg_Svg;
    }(Ext_d3_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_d3_svg_Svg.EVENTNAMES);
    //    return Ext_d3_Component.getEventNames(eventnames);
    //}

    var Ext_d3_HeatMap = /** @class */ (function (_super) {
        __extends(Ext_d3_HeatMap, _super);
        function Ext_d3_HeatMap() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_d3_HeatMap.getProperties = function (properties) {
            properties = properties.concat(Ext_d3_HeatMap.PROPERTIES);
            return Ext_d3_svg_Svg.getProperties(properties);
        };
        Ext_d3_HeatMap.getEvents = function (events) {
            events = events.concat(Ext_d3_HeatMap.EVENTS);
            return Ext_d3_svg_Svg.getEvents(events);
        };
        Ext_d3_HeatMap.PROPERTIES = [
            'colorAxis',
            'labels',
            'legend',
            'tiles',
            'xAxis',
            'yAxis',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_d3_HeatMap.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-heatmap' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-heatmap,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-heatmap,event' },
            { name: 'focusenter', parameters: 'd3-heatmap,event' },
            { name: 'focusleave', parameters: 'd3-heatmap,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-heatmap' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_d3_HeatMap;
    }(Ext_d3_svg_Svg));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_d3_HeatMap.EVENTNAMES);
    //    return Ext_d3_svg_Svg.getEventNames(eventnames);
    //}

    var ExtD3_heatmapMetaData = /** @class */ (function (_super) {
        __extends(ExtD3_heatmapMetaData, _super);
        function ExtD3_heatmapMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtD3_heatmapMetaData.getAll = function () {
            ExtD3_heatmapMetaData.PROPERTIES = Ext_d3_HeatMap.getProperties(ExtD3_heatmapMetaData.PROPERTIES);
            ExtD3_heatmapMetaData.EVENTS = Ext_d3_HeatMap.getEvents(ExtD3_heatmapMetaData.EVENTS);
            ExtD3_heatmapMetaData.EVENTS.forEach(function (event) {
                ExtD3_heatmapMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtD3_heatmapMetaData.PROPERTIES = [];
        ExtD3_heatmapMetaData.EVENTS = [];
        ExtD3_heatmapMetaData.EVENTNAMES = [];
        return ExtD3_heatmapMetaData;
    }(Ext_d3_HeatMap));
    (function () { ExtD3_heatmapMetaData.getAll(); })();
    var ExtD3_heatmapComponent = /** @class */ (function (_super) {
        __extends(ExtD3_heatmapComponent, _super);
        function ExtD3_heatmapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtD3_heatmapMetaData.PROPERTIES, ExtD3_heatmapMetaData.EVENTS) || this;
            _this.xtype = 'd3-heatmap';
            return _this;
        }
        ExtD3_heatmapComponent_1 = ExtD3_heatmapComponent;
        ExtD3_heatmapComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtD3_heatmapComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtD3_heatmapComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtD3_heatmapComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtD3_heatmapComponent_1;
        ExtD3_heatmapComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtD3_heatmapComponent = ExtD3_heatmapComponent_1 = __decorate([
            core.Component({
                selector: 'ext-d3-heatmap',
                inputs: ExtD3_heatmapMetaData.PROPERTIES,
                outputs: ExtD3_heatmapMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtD3_heatmapComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtD3_heatmapComponent);
        return ExtD3_heatmapComponent;
    }(EngBase));

    var Ext_d3_hierarchy_Hierarchy = /** @class */ (function (_super) {
        __extends(Ext_d3_hierarchy_Hierarchy, _super);
        function Ext_d3_hierarchy_Hierarchy() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_d3_hierarchy_Hierarchy.getProperties = function (properties) {
            properties = properties.concat(Ext_d3_hierarchy_Hierarchy.PROPERTIES);
            return Ext_d3_svg_Svg.getProperties(properties);
        };
        Ext_d3_hierarchy_Hierarchy.getEvents = function (events) {
            events = events.concat(Ext_d3_hierarchy_Hierarchy.EVENTS);
            return Ext_d3_svg_Svg.getEvents(events);
        };
        Ext_d3_hierarchy_Hierarchy.PROPERTIES = [
            'colorAxis',
            'expandEventName',
            'hierarchyCls',
            'layout',
            'linkKey',
            'nodeChildren',
            'nodeClass',
            'nodeKey',
            'nodeText',
            'nodeTransform',
            'nodeValue',
            'noParentValue',
            'noSizeLayout',
            'publishes',
            'renderLinks',
            'rootVisible',
            'selectEventName',
            'selection',
            'sorter',
            'transitions',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_d3_hierarchy_Hierarchy.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_d3_hierarchy_Hierarchy;
    }(Ext_d3_svg_Svg));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_d3_hierarchy_Hierarchy.EVENTNAMES);
    //    return Ext_d3_svg_Svg.getEventNames(eventnames);
    //}

    var Ext_d3_hierarchy_Pack = /** @class */ (function (_super) {
        __extends(Ext_d3_hierarchy_Pack, _super);
        function Ext_d3_hierarchy_Pack() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_d3_hierarchy_Pack.getProperties = function (properties) {
            properties = properties.concat(Ext_d3_hierarchy_Pack.PROPERTIES);
            return Ext_d3_hierarchy_Hierarchy.getProperties(properties);
        };
        Ext_d3_hierarchy_Pack.getEvents = function (events) {
            events = events.concat(Ext_d3_hierarchy_Pack.EVENTS);
            return Ext_d3_hierarchy_Hierarchy.getEvents(events);
        };
        Ext_d3_hierarchy_Pack.PROPERTIES = [
            'clipText',
            'nodeValue',
            'noSizeLayout',
            'textPadding',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_d3_hierarchy_Pack.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-pack' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-pack,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-pack,event' },
            { name: 'focusenter', parameters: 'd3-pack,event' },
            { name: 'focusleave', parameters: 'd3-pack,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-pack' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_d3_hierarchy_Pack;
    }(Ext_d3_hierarchy_Hierarchy));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_d3_hierarchy_Pack.EVENTNAMES);
    //    return Ext_d3_hierarchy_Hierarchy.getEventNames(eventnames);
    //}

    var ExtD3_packMetaData = /** @class */ (function (_super) {
        __extends(ExtD3_packMetaData, _super);
        function ExtD3_packMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtD3_packMetaData.getAll = function () {
            ExtD3_packMetaData.PROPERTIES = Ext_d3_hierarchy_Pack.getProperties(ExtD3_packMetaData.PROPERTIES);
            ExtD3_packMetaData.EVENTS = Ext_d3_hierarchy_Pack.getEvents(ExtD3_packMetaData.EVENTS);
            ExtD3_packMetaData.EVENTS.forEach(function (event) {
                ExtD3_packMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtD3_packMetaData.PROPERTIES = [];
        ExtD3_packMetaData.EVENTS = [];
        ExtD3_packMetaData.EVENTNAMES = [];
        return ExtD3_packMetaData;
    }(Ext_d3_hierarchy_Pack));
    (function () { ExtD3_packMetaData.getAll(); })();
    var ExtD3_packComponent = /** @class */ (function (_super) {
        __extends(ExtD3_packComponent, _super);
        function ExtD3_packComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtD3_packMetaData.PROPERTIES, ExtD3_packMetaData.EVENTS) || this;
            _this.xtype = 'd3-pack';
            return _this;
        }
        ExtD3_packComponent_1 = ExtD3_packComponent;
        ExtD3_packComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtD3_packComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtD3_packComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtD3_packComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtD3_packComponent_1;
        ExtD3_packComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtD3_packComponent = ExtD3_packComponent_1 = __decorate([
            core.Component({
                selector: 'ext-d3-pack',
                inputs: ExtD3_packMetaData.PROPERTIES,
                outputs: ExtD3_packMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtD3_packComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtD3_packComponent);
        return ExtD3_packComponent;
    }(EngBase));

    var Ext_d3_hierarchy_partition_Partition = /** @class */ (function (_super) {
        __extends(Ext_d3_hierarchy_partition_Partition, _super);
        function Ext_d3_hierarchy_partition_Partition() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_d3_hierarchy_partition_Partition.getProperties = function (properties) {
            properties = properties.concat(Ext_d3_hierarchy_partition_Partition.PROPERTIES);
            return Ext_d3_hierarchy_Hierarchy.getProperties(properties);
        };
        Ext_d3_hierarchy_partition_Partition.getEvents = function (events) {
            events = events.concat(Ext_d3_hierarchy_partition_Partition.EVENTS);
            return Ext_d3_hierarchy_Hierarchy.getEvents(events);
        };
        Ext_d3_hierarchy_partition_Partition.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_d3_hierarchy_partition_Partition.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-partition' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-partition,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-partition,event' },
            { name: 'focusenter', parameters: 'd3-partition,event' },
            { name: 'focusleave', parameters: 'd3-partition,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-partition' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_d3_hierarchy_partition_Partition;
    }(Ext_d3_hierarchy_Hierarchy));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_d3_hierarchy_partition_Partition.EVENTNAMES);
    //    return Ext_d3_hierarchy_Hierarchy.getEventNames(eventnames);
    //}

    var ExtD3_partitionMetaData = /** @class */ (function (_super) {
        __extends(ExtD3_partitionMetaData, _super);
        function ExtD3_partitionMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtD3_partitionMetaData.getAll = function () {
            ExtD3_partitionMetaData.PROPERTIES = Ext_d3_hierarchy_partition_Partition.getProperties(ExtD3_partitionMetaData.PROPERTIES);
            ExtD3_partitionMetaData.EVENTS = Ext_d3_hierarchy_partition_Partition.getEvents(ExtD3_partitionMetaData.EVENTS);
            ExtD3_partitionMetaData.EVENTS.forEach(function (event) {
                ExtD3_partitionMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtD3_partitionMetaData.PROPERTIES = [];
        ExtD3_partitionMetaData.EVENTS = [];
        ExtD3_partitionMetaData.EVENTNAMES = [];
        return ExtD3_partitionMetaData;
    }(Ext_d3_hierarchy_partition_Partition));
    (function () { ExtD3_partitionMetaData.getAll(); })();
    var ExtD3_partitionComponent = /** @class */ (function (_super) {
        __extends(ExtD3_partitionComponent, _super);
        function ExtD3_partitionComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtD3_partitionMetaData.PROPERTIES, ExtD3_partitionMetaData.EVENTS) || this;
            _this.xtype = 'd3-partition';
            return _this;
        }
        ExtD3_partitionComponent_1 = ExtD3_partitionComponent;
        ExtD3_partitionComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtD3_partitionComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtD3_partitionComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtD3_partitionComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtD3_partitionComponent_1;
        ExtD3_partitionComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtD3_partitionComponent = ExtD3_partitionComponent_1 = __decorate([
            core.Component({
                selector: 'ext-d3-partition',
                inputs: ExtD3_partitionMetaData.PROPERTIES,
                outputs: ExtD3_partitionMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtD3_partitionComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtD3_partitionComponent);
        return ExtD3_partitionComponent;
    }(EngBase));

    var Ext_d3_hierarchy_partition_Sunburst = /** @class */ (function (_super) {
        __extends(Ext_d3_hierarchy_partition_Sunburst, _super);
        function Ext_d3_hierarchy_partition_Sunburst() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_d3_hierarchy_partition_Sunburst.getProperties = function (properties) {
            properties = properties.concat(Ext_d3_hierarchy_partition_Sunburst.PROPERTIES);
            return Ext_d3_hierarchy_partition_Partition.getProperties(properties);
        };
        Ext_d3_hierarchy_partition_Sunburst.getEvents = function (events) {
            events = events.concat(Ext_d3_hierarchy_partition_Sunburst.EVENTS);
            return Ext_d3_hierarchy_partition_Partition.getEvents(events);
        };
        Ext_d3_hierarchy_partition_Sunburst.PROPERTIES = [
            'textPadding',
            'zoomParentDotRadius',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_d3_hierarchy_partition_Sunburst.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-sunburst' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-sunburst,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-sunburst,event' },
            { name: 'focusenter', parameters: 'd3-sunburst,event' },
            { name: 'focusleave', parameters: 'd3-sunburst,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-sunburst' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_d3_hierarchy_partition_Sunburst;
    }(Ext_d3_hierarchy_partition_Partition));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_d3_hierarchy_partition_Sunburst.EVENTNAMES);
    //    return Ext_d3_hierarchy_partition_Partition.getEventNames(eventnames);
    //}

    var ExtD3_sunburstMetaData = /** @class */ (function (_super) {
        __extends(ExtD3_sunburstMetaData, _super);
        function ExtD3_sunburstMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtD3_sunburstMetaData.getAll = function () {
            ExtD3_sunburstMetaData.PROPERTIES = Ext_d3_hierarchy_partition_Sunburst.getProperties(ExtD3_sunburstMetaData.PROPERTIES);
            ExtD3_sunburstMetaData.EVENTS = Ext_d3_hierarchy_partition_Sunburst.getEvents(ExtD3_sunburstMetaData.EVENTS);
            ExtD3_sunburstMetaData.EVENTS.forEach(function (event) {
                ExtD3_sunburstMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtD3_sunburstMetaData.PROPERTIES = [];
        ExtD3_sunburstMetaData.EVENTS = [];
        ExtD3_sunburstMetaData.EVENTNAMES = [];
        return ExtD3_sunburstMetaData;
    }(Ext_d3_hierarchy_partition_Sunburst));
    (function () { ExtD3_sunburstMetaData.getAll(); })();
    var ExtD3_sunburstComponent = /** @class */ (function (_super) {
        __extends(ExtD3_sunburstComponent, _super);
        function ExtD3_sunburstComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtD3_sunburstMetaData.PROPERTIES, ExtD3_sunburstMetaData.EVENTS) || this;
            _this.xtype = 'd3-sunburst';
            return _this;
        }
        ExtD3_sunburstComponent_1 = ExtD3_sunburstComponent;
        ExtD3_sunburstComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtD3_sunburstComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtD3_sunburstComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtD3_sunburstComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtD3_sunburstComponent_1;
        ExtD3_sunburstComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtD3_sunburstComponent = ExtD3_sunburstComponent_1 = __decorate([
            core.Component({
                selector: 'ext-d3-sunburst',
                inputs: ExtD3_sunburstMetaData.PROPERTIES,
                outputs: ExtD3_sunburstMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtD3_sunburstComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtD3_sunburstComponent);
        return ExtD3_sunburstComponent;
    }(EngBase));

    var Ext_d3_hierarchy_tree_Tree = /** @class */ (function (_super) {
        __extends(Ext_d3_hierarchy_tree_Tree, _super);
        function Ext_d3_hierarchy_tree_Tree() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_d3_hierarchy_tree_Tree.getProperties = function (properties) {
            properties = properties.concat(Ext_d3_hierarchy_tree_Tree.PROPERTIES);
            return Ext_d3_hierarchy_Hierarchy.getProperties(properties);
        };
        Ext_d3_hierarchy_tree_Tree.getEvents = function (events) {
            events = events.concat(Ext_d3_hierarchy_tree_Tree.EVENTS);
            return Ext_d3_hierarchy_Hierarchy.getEvents(events);
        };
        Ext_d3_hierarchy_tree_Tree.PROPERTIES = [
            'depth',
            'nodeRadius',
            'nodeSize',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_d3_hierarchy_tree_Tree.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_d3_hierarchy_tree_Tree;
    }(Ext_d3_hierarchy_Hierarchy));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_d3_hierarchy_tree_Tree.EVENTNAMES);
    //    return Ext_d3_hierarchy_Hierarchy.getEventNames(eventnames);
    //}

    var Ext_d3_hierarchy_tree_HorizontalTree = /** @class */ (function (_super) {
        __extends(Ext_d3_hierarchy_tree_HorizontalTree, _super);
        function Ext_d3_hierarchy_tree_HorizontalTree() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_d3_hierarchy_tree_HorizontalTree.getProperties = function (properties) {
            properties = properties.concat(Ext_d3_hierarchy_tree_HorizontalTree.PROPERTIES);
            return Ext_d3_hierarchy_tree_Tree.getProperties(properties);
        };
        Ext_d3_hierarchy_tree_HorizontalTree.getEvents = function (events) {
            events = events.concat(Ext_d3_hierarchy_tree_HorizontalTree.EVENTS);
            return Ext_d3_hierarchy_tree_Tree.getEvents(events);
        };
        Ext_d3_hierarchy_tree_HorizontalTree.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_d3_hierarchy_tree_HorizontalTree.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-tree' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-tree,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-tree,event' },
            { name: 'focusenter', parameters: 'd3-tree,event' },
            { name: 'focusleave', parameters: 'd3-tree,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-tree' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_d3_hierarchy_tree_HorizontalTree;
    }(Ext_d3_hierarchy_tree_Tree));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_d3_hierarchy_tree_HorizontalTree.EVENTNAMES);
    //    return Ext_d3_hierarchy_tree_Tree.getEventNames(eventnames);
    //}

    var ExtD3_treeMetaData = /** @class */ (function (_super) {
        __extends(ExtD3_treeMetaData, _super);
        function ExtD3_treeMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtD3_treeMetaData.getAll = function () {
            ExtD3_treeMetaData.PROPERTIES = Ext_d3_hierarchy_tree_HorizontalTree.getProperties(ExtD3_treeMetaData.PROPERTIES);
            ExtD3_treeMetaData.EVENTS = Ext_d3_hierarchy_tree_HorizontalTree.getEvents(ExtD3_treeMetaData.EVENTS);
            ExtD3_treeMetaData.EVENTS.forEach(function (event) {
                ExtD3_treeMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtD3_treeMetaData.PROPERTIES = [];
        ExtD3_treeMetaData.EVENTS = [];
        ExtD3_treeMetaData.EVENTNAMES = [];
        return ExtD3_treeMetaData;
    }(Ext_d3_hierarchy_tree_HorizontalTree));
    (function () { ExtD3_treeMetaData.getAll(); })();
    var ExtD3_treeComponent = /** @class */ (function (_super) {
        __extends(ExtD3_treeComponent, _super);
        function ExtD3_treeComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtD3_treeMetaData.PROPERTIES, ExtD3_treeMetaData.EVENTS) || this;
            _this.xtype = 'd3-tree';
            return _this;
        }
        ExtD3_treeComponent_1 = ExtD3_treeComponent;
        ExtD3_treeComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtD3_treeComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtD3_treeComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtD3_treeComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtD3_treeComponent_1;
        ExtD3_treeComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtD3_treeComponent = ExtD3_treeComponent_1 = __decorate([
            core.Component({
                selector: 'ext-d3-tree',
                inputs: ExtD3_treeMetaData.PROPERTIES,
                outputs: ExtD3_treeMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtD3_treeComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtD3_treeComponent);
        return ExtD3_treeComponent;
    }(EngBase));

    var Ext_d3_hierarchy_TreeMap = /** @class */ (function (_super) {
        __extends(Ext_d3_hierarchy_TreeMap, _super);
        function Ext_d3_hierarchy_TreeMap() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_d3_hierarchy_TreeMap.getProperties = function (properties) {
            properties = properties.concat(Ext_d3_hierarchy_TreeMap.PROPERTIES);
            return Ext_d3_hierarchy_Hierarchy.getProperties(properties);
        };
        Ext_d3_hierarchy_TreeMap.getEvents = function (events) {
            events = events.concat(Ext_d3_hierarchy_TreeMap.EVENTS);
            return Ext_d3_hierarchy_Hierarchy.getEvents(events);
        };
        Ext_d3_hierarchy_TreeMap.PROPERTIES = [
            'busyLayoutText',
            'leafTile',
            'parentTile',
            'scaleLabels',
            'tiling',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_d3_hierarchy_TreeMap.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'd3-treemap' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'd3-treemap,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'd3-treemap,event' },
            { name: 'focusenter', parameters: 'd3-treemap,event' },
            { name: 'focusleave', parameters: 'd3-treemap,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'd3-treemap' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_d3_hierarchy_TreeMap;
    }(Ext_d3_hierarchy_Hierarchy));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_d3_hierarchy_TreeMap.EVENTNAMES);
    //    return Ext_d3_hierarchy_Hierarchy.getEventNames(eventnames);
    //}

    var ExtD3_treemapMetaData = /** @class */ (function (_super) {
        __extends(ExtD3_treemapMetaData, _super);
        function ExtD3_treemapMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtD3_treemapMetaData.getAll = function () {
            ExtD3_treemapMetaData.PROPERTIES = Ext_d3_hierarchy_TreeMap.getProperties(ExtD3_treemapMetaData.PROPERTIES);
            ExtD3_treemapMetaData.EVENTS = Ext_d3_hierarchy_TreeMap.getEvents(ExtD3_treemapMetaData.EVENTS);
            ExtD3_treemapMetaData.EVENTS.forEach(function (event) {
                ExtD3_treemapMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtD3_treemapMetaData.PROPERTIES = [];
        ExtD3_treemapMetaData.EVENTS = [];
        ExtD3_treemapMetaData.EVENTNAMES = [];
        return ExtD3_treemapMetaData;
    }(Ext_d3_hierarchy_TreeMap));
    (function () { ExtD3_treemapMetaData.getAll(); })();
    var ExtD3_treemapComponent = /** @class */ (function (_super) {
        __extends(ExtD3_treemapComponent, _super);
        function ExtD3_treemapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtD3_treemapMetaData.PROPERTIES, ExtD3_treemapMetaData.EVENTS) || this;
            _this.xtype = 'd3-treemap';
            return _this;
        }
        ExtD3_treemapComponent_1 = ExtD3_treemapComponent;
        ExtD3_treemapComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtD3_treemapComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtD3_treemapComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtD3_treemapComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtD3_treemapComponent_1;
        ExtD3_treemapComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtD3_treemapComponent = ExtD3_treemapComponent_1 = __decorate([
            core.Component({
                selector: 'ext-d3-treemap',
                inputs: ExtD3_treemapMetaData.PROPERTIES,
                outputs: ExtD3_treemapMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtD3_treemapComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtD3_treemapComponent);
        return ExtD3_treemapComponent;
    }(EngBase));

    var ExtD3_svgMetaData = /** @class */ (function (_super) {
        __extends(ExtD3_svgMetaData, _super);
        function ExtD3_svgMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtD3_svgMetaData.getAll = function () {
            ExtD3_svgMetaData.PROPERTIES = Ext_d3_svg_Svg.getProperties(ExtD3_svgMetaData.PROPERTIES);
            ExtD3_svgMetaData.EVENTS = Ext_d3_svg_Svg.getEvents(ExtD3_svgMetaData.EVENTS);
            ExtD3_svgMetaData.EVENTS.forEach(function (event) {
                ExtD3_svgMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtD3_svgMetaData.PROPERTIES = [];
        ExtD3_svgMetaData.EVENTS = [];
        ExtD3_svgMetaData.EVENTNAMES = [];
        return ExtD3_svgMetaData;
    }(Ext_d3_svg_Svg));
    (function () { ExtD3_svgMetaData.getAll(); })();
    var ExtD3_svgComponent = /** @class */ (function (_super) {
        __extends(ExtD3_svgComponent, _super);
        function ExtD3_svgComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtD3_svgMetaData.PROPERTIES, ExtD3_svgMetaData.EVENTS) || this;
            _this.xtype = 'd3-svg';
            return _this;
        }
        ExtD3_svgComponent_1 = ExtD3_svgComponent;
        ExtD3_svgComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtD3_svgComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtD3_svgComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtD3_svgComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtD3_svgComponent_1;
        ExtD3_svgComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtD3_svgComponent = ExtD3_svgComponent_1 = __decorate([
            core.Component({
                selector: 'ext-d3-svg',
                inputs: ExtD3_svgMetaData.PROPERTIES,
                outputs: ExtD3_svgMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtD3_svgComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtD3_svgComponent);
        return ExtD3_svgComponent;
    }(EngBase));

    var Ext_dataview_Component = /** @class */ (function (_super) {
        __extends(Ext_dataview_Component, _super);
        function Ext_dataview_Component() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_Component.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_Component.PROPERTIES);
            return Ext_dataview_Abstract.getProperties(properties);
        };
        Ext_dataview_Component.getEvents = function (events) {
            events = events.concat(Ext_dataview_Component.EVENTS);
            return Ext_dataview_Abstract.getEvents(events);
        };
        Ext_dataview_Component.PROPERTIES = [
            'defaultType',
            'itemConfig',
            'itemContentCls',
            'itemDataMap',
            'itemInnerCls',
            'maxItemCache',
            'striped',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_Component.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,componentdataview,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'componentdataview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'componentdataview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'componentdataview,location' },
            { name: 'childlongpress', parameters: 'componentdataview,location' },
            { name: 'childmouseenter', parameters: 'componentdataview,location' },
            { name: 'childmouseleave', parameters: 'componentdataview,location' },
            { name: 'childsingletap', parameters: 'componentdataview,location' },
            { name: 'childtap', parameters: 'componentdataview,location' },
            { name: 'childtaphold', parameters: 'componentdataview,location' },
            { name: 'childtouchcancel', parameters: 'componentdataview,location' },
            { name: 'childtouchend', parameters: 'componentdataview,location' },
            { name: 'childtouchmove', parameters: 'componentdataview,location' },
            { name: 'childtouchstart', parameters: 'componentdataview,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,componentdataview,newActiveItem' },
            { name: 'deselect', parameters: 'componentdataview,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'componentdataview,event' },
            { name: 'focusenter', parameters: 'componentdataview,event' },
            { name: 'focusleave', parameters: 'componentdataview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemswipe', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtap', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'componentdataview,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'componentdataview,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'componentdataview,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'componentdataview' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'componentdataview,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'componentdataview,selected' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'componentdataview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_Component;
    }(Ext_dataview_Abstract));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_Component.EVENTNAMES);
    //    return Ext_dataview_Abstract.getEventNames(eventnames);
    //}

    var Ext_dataview_List = /** @class */ (function (_super) {
        __extends(Ext_dataview_List, _super);
        function Ext_dataview_List() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_List.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_List.PROPERTIES);
            return Ext_dataview_Component.getProperties(properties);
        };
        Ext_dataview_List.getEvents = function (events) {
            events = events.concat(Ext_dataview_List.EVENTS);
            return Ext_dataview_Component.getEvents(events);
        };
        Ext_dataview_List.PROPERTIES = [
            'bufferSize',
            'collapseDefaults',
            'collapsible',
            'disclosureProperty',
            'grouped',
            'groupFooter',
            'groupHeader',
            'grouping',
            'groupPlaceholder',
            'horizontalOverflow',
            'indexBar',
            'infinite',
            'innerCtHeight',
            'innerWidth',
            'itemConfig',
            'maintainChildNodes',
            'minimumBufferDistance',
            'onItemDisclosure',
            'pinFooters',
            'pinHeaders',
            'pinnedFooter',
            'pinnedFooterHeight',
            'pinnedHeader',
            'pinnedHeaderHeight',
            'preventSelectionOnDisclose',
            'preventSelectionOnTool',
            'rowLines',
            'scrollable',
            'topRenderedIndex',
            'variableHeights',
            'verticalOverflow',
            'visibleHeight',
            'visibleLeft',
            'visibleTop',
            'visibleWidth',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_List.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,list,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforegroupcollapse', parameters: 'list,group' },
            { name: 'beforegroupexpand', parameters: 'list,group' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'list' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'list,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'list,location' },
            { name: 'childlongpress', parameters: 'list,location' },
            { name: 'childmouseenter', parameters: 'list,location' },
            { name: 'childmouseleave', parameters: 'list,location' },
            { name: 'childsingletap', parameters: 'list,location' },
            { name: 'childtap', parameters: 'list,location' },
            { name: 'childtaphold', parameters: 'list,location' },
            { name: 'childtouchcancel', parameters: 'list,location' },
            { name: 'childtouchend', parameters: 'list,location' },
            { name: 'childtouchmove', parameters: 'list,location' },
            { name: 'childtouchstart', parameters: 'list,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,list,newActiveItem' },
            { name: 'deselect', parameters: 'list,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'list,event' },
            { name: 'focusenter', parameters: 'list,event' },
            { name: 'focusleave', parameters: 'list,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupcollapse', parameters: 'list,group' },
            { name: 'groupexpand', parameters: 'list,group' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'list,index,record,action' },
            { name: 'itemdoubletap', parameters: 'list,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'list,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'list,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'list,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'list,index,target,record,e' },
            { name: 'itemswipe', parameters: 'list,index,target,record,e' },
            { name: 'itemtap', parameters: 'list,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'list,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'list,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'list' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'list,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'list,selected' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'list' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_List;
    }(Ext_dataview_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_List.EVENTNAMES);
    //    return Ext_dataview_Component.getEventNames(eventnames);
    //}

    var Ext_dataview_BoundList = /** @class */ (function (_super) {
        __extends(Ext_dataview_BoundList, _super);
        function Ext_dataview_BoundList() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_BoundList.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_BoundList.PROPERTIES);
            return Ext_dataview_List.getProperties(properties);
        };
        Ext_dataview_BoundList.getEvents = function (events) {
            events = events.concat(Ext_dataview_BoundList.EVENTS);
            return Ext_dataview_List.getEvents(events);
        };
        Ext_dataview_BoundList.PROPERTIES = [
            'triggerEvent',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_BoundList.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,boundlist,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforegroupcollapse', parameters: 'boundlist,group' },
            { name: 'beforegroupexpand', parameters: 'boundlist,group' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'boundlist' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'boundlist,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'boundlist,location' },
            { name: 'childlongpress', parameters: 'boundlist,location' },
            { name: 'childmouseenter', parameters: 'boundlist,location' },
            { name: 'childmouseleave', parameters: 'boundlist,location' },
            { name: 'childsingletap', parameters: 'boundlist,location' },
            { name: 'childtap', parameters: 'boundlist,location' },
            { name: 'childtaphold', parameters: 'boundlist,location' },
            { name: 'childtouchcancel', parameters: 'boundlist,location' },
            { name: 'childtouchend', parameters: 'boundlist,location' },
            { name: 'childtouchmove', parameters: 'boundlist,location' },
            { name: 'childtouchstart', parameters: 'boundlist,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,boundlist,newActiveItem' },
            { name: 'deselect', parameters: 'boundlist,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'boundlist,event' },
            { name: 'focusenter', parameters: 'boundlist,event' },
            { name: 'focusleave', parameters: 'boundlist,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupcollapse', parameters: 'boundlist,group' },
            { name: 'groupexpand', parameters: 'boundlist,group' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'boundlist,index,record,action' },
            { name: 'itemdoubletap', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemswipe', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtap', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'boundlist,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'boundlist,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'boundlist,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'boundlist' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'boundlist,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'boundlist,selected' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'boundlist' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_BoundList;
    }(Ext_dataview_List));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_BoundList.EVENTNAMES);
    //    return Ext_dataview_List.getEventNames(eventnames);
    //}

    var ExtBoundlistMetaData = /** @class */ (function (_super) {
        __extends(ExtBoundlistMetaData, _super);
        function ExtBoundlistMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtBoundlistMetaData.getAll = function () {
            ExtBoundlistMetaData.PROPERTIES = Ext_dataview_BoundList.getProperties(ExtBoundlistMetaData.PROPERTIES);
            ExtBoundlistMetaData.EVENTS = Ext_dataview_BoundList.getEvents(ExtBoundlistMetaData.EVENTS);
            ExtBoundlistMetaData.EVENTS.forEach(function (event) {
                ExtBoundlistMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtBoundlistMetaData.PROPERTIES = [];
        ExtBoundlistMetaData.EVENTS = [];
        ExtBoundlistMetaData.EVENTNAMES = [];
        return ExtBoundlistMetaData;
    }(Ext_dataview_BoundList));
    (function () { ExtBoundlistMetaData.getAll(); })();
    var ExtBoundlistComponent = /** @class */ (function (_super) {
        __extends(ExtBoundlistComponent, _super);
        function ExtBoundlistComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtBoundlistMetaData.PROPERTIES, ExtBoundlistMetaData.EVENTS) || this;
            _this.xtype = 'boundlist';
            return _this;
        }
        ExtBoundlistComponent_1 = ExtBoundlistComponent;
        ExtBoundlistComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtBoundlistComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtBoundlistComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtBoundlistComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtBoundlistComponent_1;
        ExtBoundlistComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtBoundlistComponent = ExtBoundlistComponent_1 = __decorate([
            core.Component({
                selector: 'ext-boundlist',
                inputs: ExtBoundlistMetaData.PROPERTIES,
                outputs: ExtBoundlistMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtBoundlistComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtBoundlistComponent);
        return ExtBoundlistComponent;
    }(EngBase));

    var Ext_dataview_ChipView = /** @class */ (function (_super) {
        __extends(Ext_dataview_ChipView, _super);
        function Ext_dataview_ChipView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_ChipView.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_ChipView.PROPERTIES);
            return Ext_dataview_DataView.getProperties(properties);
        };
        Ext_dataview_ChipView.getEvents = function (events) {
            events = events.concat(Ext_dataview_ChipView.EVENTS);
            return Ext_dataview_DataView.getEvents(events);
        };
        Ext_dataview_ChipView.PROPERTIES = [
            'closable',
            'closableField',
            'closeHandler',
            'displayField',
            'displayTpl',
            'iconClsField',
            'iconField',
            'itemTpl',
            'scope',
            'ui',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_ChipView.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,chipview,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'chipview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'chipview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'chipview,location' },
            { name: 'childlongpress', parameters: 'chipview,location' },
            { name: 'childmouseenter', parameters: 'chipview,location' },
            { name: 'childmouseleave', parameters: 'chipview,location' },
            { name: 'childsingletap', parameters: 'chipview,location' },
            { name: 'childtap', parameters: 'chipview,location' },
            { name: 'childtaphold', parameters: 'chipview,location' },
            { name: 'childtouchcancel', parameters: 'chipview,location' },
            { name: 'childtouchend', parameters: 'chipview,location' },
            { name: 'childtouchmove', parameters: 'chipview,location' },
            { name: 'childtouchstart', parameters: 'chipview,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,chipview,newActiveItem' },
            { name: 'deselect', parameters: 'chipview,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'chipview,event' },
            { name: 'focusenter', parameters: 'chipview,event' },
            { name: 'focusleave', parameters: 'chipview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'chipview,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'chipview,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'chipview,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'chipview,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'chipview,index,target,record,e' },
            { name: 'itemswipe', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtap', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'chipview,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'chipview,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'chipview,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'chipview' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'chipview,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'chipview,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'chipview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_ChipView;
    }(Ext_dataview_DataView));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_ChipView.EVENTNAMES);
    //    return Ext_dataview_DataView.getEventNames(eventnames);
    //}

    var ExtChipviewMetaData = /** @class */ (function (_super) {
        __extends(ExtChipviewMetaData, _super);
        function ExtChipviewMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtChipviewMetaData.getAll = function () {
            ExtChipviewMetaData.PROPERTIES = Ext_dataview_ChipView.getProperties(ExtChipviewMetaData.PROPERTIES);
            ExtChipviewMetaData.EVENTS = Ext_dataview_ChipView.getEvents(ExtChipviewMetaData.EVENTS);
            ExtChipviewMetaData.EVENTS.forEach(function (event) {
                ExtChipviewMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtChipviewMetaData.PROPERTIES = [];
        ExtChipviewMetaData.EVENTS = [];
        ExtChipviewMetaData.EVENTNAMES = [];
        return ExtChipviewMetaData;
    }(Ext_dataview_ChipView));
    (function () { ExtChipviewMetaData.getAll(); })();
    var ExtChipviewComponent = /** @class */ (function (_super) {
        __extends(ExtChipviewComponent, _super);
        function ExtChipviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtChipviewMetaData.PROPERTIES, ExtChipviewMetaData.EVENTS) || this;
            _this.xtype = 'chipview';
            return _this;
        }
        ExtChipviewComponent_1 = ExtChipviewComponent;
        ExtChipviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtChipviewComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtChipviewComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtChipviewComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtChipviewComponent_1;
        ExtChipviewComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtChipviewComponent = ExtChipviewComponent_1 = __decorate([
            core.Component({
                selector: 'ext-chipview',
                inputs: ExtChipviewMetaData.PROPERTIES,
                outputs: ExtChipviewMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtChipviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtChipviewComponent);
        return ExtChipviewComponent;
    }(EngBase));

    var ExtComponentdataviewMetaData = /** @class */ (function (_super) {
        __extends(ExtComponentdataviewMetaData, _super);
        function ExtComponentdataviewMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtComponentdataviewMetaData.getAll = function () {
            ExtComponentdataviewMetaData.PROPERTIES = Ext_dataview_Component.getProperties(ExtComponentdataviewMetaData.PROPERTIES);
            ExtComponentdataviewMetaData.EVENTS = Ext_dataview_Component.getEvents(ExtComponentdataviewMetaData.EVENTS);
            ExtComponentdataviewMetaData.EVENTS.forEach(function (event) {
                ExtComponentdataviewMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtComponentdataviewMetaData.PROPERTIES = [];
        ExtComponentdataviewMetaData.EVENTS = [];
        ExtComponentdataviewMetaData.EVENTNAMES = [];
        return ExtComponentdataviewMetaData;
    }(Ext_dataview_Component));
    (function () { ExtComponentdataviewMetaData.getAll(); })();
    var ExtComponentdataviewComponent = /** @class */ (function (_super) {
        __extends(ExtComponentdataviewComponent, _super);
        function ExtComponentdataviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtComponentdataviewMetaData.PROPERTIES, ExtComponentdataviewMetaData.EVENTS) || this;
            _this.xtype = 'componentdataview';
            return _this;
        }
        ExtComponentdataviewComponent_1 = ExtComponentdataviewComponent;
        ExtComponentdataviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtComponentdataviewComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtComponentdataviewComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtComponentdataviewComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtComponentdataviewComponent_1;
        ExtComponentdataviewComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtComponentdataviewComponent = ExtComponentdataviewComponent_1 = __decorate([
            core.Component({
                selector: 'ext-componentdataview',
                inputs: ExtComponentdataviewMetaData.PROPERTIES,
                outputs: ExtComponentdataviewMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtComponentdataviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtComponentdataviewComponent);
        return ExtComponentdataviewComponent;
    }(EngBase));

    var Ext_dataview_component_DataItem = /** @class */ (function (_super) {
        __extends(Ext_dataview_component_DataItem, _super);
        function Ext_dataview_component_DataItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_component_DataItem.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_component_DataItem.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_dataview_component_DataItem.getEvents = function (events) {
            events = events.concat(Ext_dataview_component_DataItem.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_dataview_component_DataItem.PROPERTIES = [
            'dataMap',
            'itemCls',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_component_DataItem.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dataitem,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'dataitem,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'dataitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dataitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,dataitem,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dataitem,event' },
            { name: 'focusenter', parameters: 'dataitem,event' },
            { name: 'focusleave', parameters: 'dataitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'dataitem,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'dataitem,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dataitem,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'dataitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'dataItem,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_component_DataItem;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_component_DataItem.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var ExtDataitemMetaData = /** @class */ (function (_super) {
        __extends(ExtDataitemMetaData, _super);
        function ExtDataitemMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtDataitemMetaData.getAll = function () {
            ExtDataitemMetaData.PROPERTIES = Ext_dataview_component_DataItem.getProperties(ExtDataitemMetaData.PROPERTIES);
            ExtDataitemMetaData.EVENTS = Ext_dataview_component_DataItem.getEvents(ExtDataitemMetaData.EVENTS);
            ExtDataitemMetaData.EVENTS.forEach(function (event) {
                ExtDataitemMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtDataitemMetaData.PROPERTIES = [];
        ExtDataitemMetaData.EVENTS = [];
        ExtDataitemMetaData.EVENTNAMES = [];
        return ExtDataitemMetaData;
    }(Ext_dataview_component_DataItem));
    (function () { ExtDataitemMetaData.getAll(); })();
    var ExtDataitemComponent = /** @class */ (function (_super) {
        __extends(ExtDataitemComponent, _super);
        function ExtDataitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtDataitemMetaData.PROPERTIES, ExtDataitemMetaData.EVENTS) || this;
            _this.xtype = 'dataitem';
            return _this;
        }
        ExtDataitemComponent_1 = ExtDataitemComponent;
        ExtDataitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtDataitemComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtDataitemComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtDataitemComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtDataitemComponent_1;
        ExtDataitemComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtDataitemComponent = ExtDataitemComponent_1 = __decorate([
            core.Component({
                selector: 'ext-dataitem',
                inputs: ExtDataitemMetaData.PROPERTIES,
                outputs: ExtDataitemMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtDataitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtDataitemComponent);
        return ExtDataitemComponent;
    }(EngBase));

    var Ext_DataView = /** @class */ (function (_super) {
        __extends(Ext_DataView, _super);
        function Ext_DataView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_DataView.getProperties = function (properties) {
            properties = properties.concat(Ext_DataView.PROPERTIES);
            return Ext_dataview_Abstract.getProperties(properties);
        };
        Ext_DataView.getEvents = function (events) {
            events = events.concat(Ext_DataView.EVENTS);
            return Ext_dataview_Abstract.getEvents(events);
        };
        Ext_DataView.PROPERTIES = [
            'lastSelected',
            'selected',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_DataView.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dataview,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'dataview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dataview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'dataview,location' },
            { name: 'childlongpress', parameters: 'dataview,location' },
            { name: 'childmouseenter', parameters: 'dataview,location' },
            { name: 'childmouseleave', parameters: 'dataview,location' },
            { name: 'childsingletap', parameters: 'dataview,location' },
            { name: 'childtap', parameters: 'dataview,location' },
            { name: 'childtaphold', parameters: 'dataview,location' },
            { name: 'childtouchcancel', parameters: 'dataview,location' },
            { name: 'childtouchend', parameters: 'dataview,location' },
            { name: 'childtouchmove', parameters: 'dataview,location' },
            { name: 'childtouchstart', parameters: 'dataview,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,dataview,newActiveItem' },
            { name: 'deselect', parameters: 'dataview,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dataview,event' },
            { name: 'focusenter', parameters: 'dataview,event' },
            { name: 'focusleave', parameters: 'dataview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'dataview,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'dataview,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'dataview,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'dataview,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'dataview,index,target,record,e' },
            { name: 'itemswipe', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtap', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'dataview,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'dataview,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'dataview,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'dataview' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dataview,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'dataview,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'dataview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_DataView;
    }(Ext_dataview_Abstract));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_DataView.EVENTNAMES);
    //    return Ext_dataview_Abstract.getEventNames(eventnames);
    //}

    var ExtDataviewMetaData = /** @class */ (function (_super) {
        __extends(ExtDataviewMetaData, _super);
        function ExtDataviewMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtDataviewMetaData.getAll = function () {
            ExtDataviewMetaData.PROPERTIES = Ext_DataView.getProperties(ExtDataviewMetaData.PROPERTIES);
            ExtDataviewMetaData.EVENTS = Ext_DataView.getEvents(ExtDataviewMetaData.EVENTS);
            ExtDataviewMetaData.EVENTS.forEach(function (event) {
                ExtDataviewMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtDataviewMetaData.PROPERTIES = [];
        ExtDataviewMetaData.EVENTS = [];
        ExtDataviewMetaData.EVENTNAMES = [];
        return ExtDataviewMetaData;
    }(Ext_DataView));
    (function () { ExtDataviewMetaData.getAll(); })();
    var ExtDataviewComponent = /** @class */ (function (_super) {
        __extends(ExtDataviewComponent, _super);
        function ExtDataviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtDataviewMetaData.PROPERTIES, ExtDataviewMetaData.EVENTS) || this;
            _this.xtype = 'dataview';
            return _this;
        }
        ExtDataviewComponent_1 = ExtDataviewComponent;
        ExtDataviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtDataviewComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtDataviewComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtDataviewComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtDataviewComponent_1;
        ExtDataviewComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtDataviewComponent = ExtDataviewComponent_1 = __decorate([
            core.Component({
                selector: 'ext-dataview',
                inputs: ExtDataviewMetaData.PROPERTIES,
                outputs: ExtDataviewMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtDataviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtDataviewComponent);
        return ExtDataviewComponent;
    }(EngBase));

    var Ext_dataview_EmptyText = /** @class */ (function (_super) {
        __extends(Ext_dataview_EmptyText, _super);
        function Ext_dataview_EmptyText() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_EmptyText.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_EmptyText.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_dataview_EmptyText.getEvents = function (events) {
            events = events.concat(Ext_dataview_EmptyText.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_dataview_EmptyText.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_EmptyText.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'emptytext' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'emptytext,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'emptytext,event' },
            { name: 'focusenter', parameters: 'emptytext,event' },
            { name: 'focusleave', parameters: 'emptytext,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'emptytext' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_EmptyText;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_EmptyText.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtEmptytextMetaData = /** @class */ (function (_super) {
        __extends(ExtEmptytextMetaData, _super);
        function ExtEmptytextMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtEmptytextMetaData.getAll = function () {
            ExtEmptytextMetaData.PROPERTIES = Ext_dataview_EmptyText.getProperties(ExtEmptytextMetaData.PROPERTIES);
            ExtEmptytextMetaData.EVENTS = Ext_dataview_EmptyText.getEvents(ExtEmptytextMetaData.EVENTS);
            ExtEmptytextMetaData.EVENTS.forEach(function (event) {
                ExtEmptytextMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtEmptytextMetaData.PROPERTIES = [];
        ExtEmptytextMetaData.EVENTS = [];
        ExtEmptytextMetaData.EVENTNAMES = [];
        return ExtEmptytextMetaData;
    }(Ext_dataview_EmptyText));
    (function () { ExtEmptytextMetaData.getAll(); })();
    var ExtEmptytextComponent = /** @class */ (function (_super) {
        __extends(ExtEmptytextComponent, _super);
        function ExtEmptytextComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtEmptytextMetaData.PROPERTIES, ExtEmptytextMetaData.EVENTS) || this;
            _this.xtype = 'emptytext';
            return _this;
        }
        ExtEmptytextComponent_1 = ExtEmptytextComponent;
        ExtEmptytextComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtEmptytextComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtEmptytextComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtEmptytextComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtEmptytextComponent_1;
        ExtEmptytextComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtEmptytextComponent = ExtEmptytextComponent_1 = __decorate([
            core.Component({
                selector: 'ext-emptytext',
                inputs: ExtEmptytextMetaData.PROPERTIES,
                outputs: ExtEmptytextMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtEmptytextComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtEmptytextComponent);
        return ExtEmptytextComponent;
    }(EngBase));

    var Ext_IndexBar = /** @class */ (function (_super) {
        __extends(Ext_IndexBar, _super);
        function Ext_IndexBar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_IndexBar.getProperties = function (properties) {
            properties = properties.concat(Ext_IndexBar.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_IndexBar.getEvents = function (events) {
            events = events.concat(Ext_IndexBar.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_IndexBar.PROPERTIES = [
            'animation',
            'autoHide',
            'direction',
            'dynamic',
            'indicator',
            'letters',
            'listPrefix',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_IndexBar.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedirectionchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'indexbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'indexbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'directionchange', parameters: 'sender,value,oldValue' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'indexbar,event' },
            { name: 'focusenter', parameters: 'indexbar,event' },
            { name: 'focusleave', parameters: 'indexbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'index', parameters: 'indexbar,html,target' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'indexbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_IndexBar;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_IndexBar.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtIndexbarMetaData = /** @class */ (function (_super) {
        __extends(ExtIndexbarMetaData, _super);
        function ExtIndexbarMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtIndexbarMetaData.getAll = function () {
            ExtIndexbarMetaData.PROPERTIES = Ext_IndexBar.getProperties(ExtIndexbarMetaData.PROPERTIES);
            ExtIndexbarMetaData.EVENTS = Ext_IndexBar.getEvents(ExtIndexbarMetaData.EVENTS);
            ExtIndexbarMetaData.EVENTS.forEach(function (event) {
                ExtIndexbarMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtIndexbarMetaData.PROPERTIES = [];
        ExtIndexbarMetaData.EVENTS = [];
        ExtIndexbarMetaData.EVENTNAMES = [];
        return ExtIndexbarMetaData;
    }(Ext_IndexBar));
    (function () { ExtIndexbarMetaData.getAll(); })();
    var ExtIndexbarComponent = /** @class */ (function (_super) {
        __extends(ExtIndexbarComponent, _super);
        function ExtIndexbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtIndexbarMetaData.PROPERTIES, ExtIndexbarMetaData.EVENTS) || this;
            _this.xtype = 'indexbar';
            return _this;
        }
        ExtIndexbarComponent_1 = ExtIndexbarComponent;
        ExtIndexbarComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtIndexbarComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtIndexbarComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtIndexbarComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtIndexbarComponent_1;
        ExtIndexbarComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtIndexbarComponent = ExtIndexbarComponent_1 = __decorate([
            core.Component({
                selector: 'ext-indexbar',
                inputs: ExtIndexbarMetaData.PROPERTIES,
                outputs: ExtIndexbarMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtIndexbarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtIndexbarComponent);
        return ExtIndexbarComponent;
    }(EngBase));

    var Ext_dataview_ItemHeader = /** @class */ (function (_super) {
        __extends(Ext_dataview_ItemHeader, _super);
        function Ext_dataview_ItemHeader() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_ItemHeader.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_ItemHeader.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_dataview_ItemHeader.getEvents = function (events) {
            events = events.concat(Ext_dataview_ItemHeader.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_dataview_ItemHeader.PROPERTIES = [
            'group',
            'tpl',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_ItemHeader.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'itemheader' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'itemheader,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'itemheader,event' },
            { name: 'focusenter', parameters: 'itemheader,event' },
            { name: 'focusleave', parameters: 'itemheader,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'itemheader' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_ItemHeader;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_ItemHeader.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtItemheaderMetaData = /** @class */ (function (_super) {
        __extends(ExtItemheaderMetaData, _super);
        function ExtItemheaderMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtItemheaderMetaData.getAll = function () {
            ExtItemheaderMetaData.PROPERTIES = Ext_dataview_ItemHeader.getProperties(ExtItemheaderMetaData.PROPERTIES);
            ExtItemheaderMetaData.EVENTS = Ext_dataview_ItemHeader.getEvents(ExtItemheaderMetaData.EVENTS);
            ExtItemheaderMetaData.EVENTS.forEach(function (event) {
                ExtItemheaderMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtItemheaderMetaData.PROPERTIES = [];
        ExtItemheaderMetaData.EVENTS = [];
        ExtItemheaderMetaData.EVENTNAMES = [];
        return ExtItemheaderMetaData;
    }(Ext_dataview_ItemHeader));
    (function () { ExtItemheaderMetaData.getAll(); })();
    var ExtItemheaderComponent = /** @class */ (function (_super) {
        __extends(ExtItemheaderComponent, _super);
        function ExtItemheaderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtItemheaderMetaData.PROPERTIES, ExtItemheaderMetaData.EVENTS) || this;
            _this.xtype = 'itemheader';
            return _this;
        }
        ExtItemheaderComponent_1 = ExtItemheaderComponent;
        ExtItemheaderComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtItemheaderComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtItemheaderComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtItemheaderComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtItemheaderComponent_1;
        ExtItemheaderComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtItemheaderComponent = ExtItemheaderComponent_1 = __decorate([
            core.Component({
                selector: 'ext-itemheader',
                inputs: ExtItemheaderMetaData.PROPERTIES,
                outputs: ExtItemheaderMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtItemheaderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtItemheaderComponent);
        return ExtItemheaderComponent;
    }(EngBase));

    var Ext_List = /** @class */ (function (_super) {
        __extends(Ext_List, _super);
        function Ext_List() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_List.getProperties = function (properties) {
            properties = properties.concat(Ext_List.PROPERTIES);
            return Ext_dataview_Component.getProperties(properties);
        };
        Ext_List.getEvents = function (events) {
            events = events.concat(Ext_List.EVENTS);
            return Ext_dataview_Component.getEvents(events);
        };
        Ext_List.PROPERTIES = [
            'bufferSize',
            'collapseDefaults',
            'collapsible',
            'disclosureProperty',
            'grouped',
            'groupFooter',
            'groupHeader',
            'grouping',
            'groupPlaceholder',
            'horizontalOverflow',
            'indexBar',
            'infinite',
            'innerCtHeight',
            'innerWidth',
            'itemConfig',
            'maintainChildNodes',
            'minimumBufferDistance',
            'onItemDisclosure',
            'pinFooters',
            'pinHeaders',
            'pinnedFooter',
            'pinnedFooterHeight',
            'pinnedHeader',
            'pinnedHeaderHeight',
            'preventSelectionOnDisclose',
            'preventSelectionOnTool',
            'rowLines',
            'scrollable',
            'topRenderedIndex',
            'variableHeights',
            'verticalOverflow',
            'visibleHeight',
            'visibleLeft',
            'visibleTop',
            'visibleWidth',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_List.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,list,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforegroupcollapse', parameters: 'list,group' },
            { name: 'beforegroupexpand', parameters: 'list,group' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'list' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'list,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'list,location' },
            { name: 'childlongpress', parameters: 'list,location' },
            { name: 'childmouseenter', parameters: 'list,location' },
            { name: 'childmouseleave', parameters: 'list,location' },
            { name: 'childsingletap', parameters: 'list,location' },
            { name: 'childtap', parameters: 'list,location' },
            { name: 'childtaphold', parameters: 'list,location' },
            { name: 'childtouchcancel', parameters: 'list,location' },
            { name: 'childtouchend', parameters: 'list,location' },
            { name: 'childtouchmove', parameters: 'list,location' },
            { name: 'childtouchstart', parameters: 'list,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,list,newActiveItem' },
            { name: 'deselect', parameters: 'list,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'list,event' },
            { name: 'focusenter', parameters: 'list,event' },
            { name: 'focusleave', parameters: 'list,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupcollapse', parameters: 'list,group' },
            { name: 'groupexpand', parameters: 'list,group' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'list,index,record,action' },
            { name: 'itemdoubletap', parameters: 'list,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'list,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'list,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'list,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'list,index,target,record,e' },
            { name: 'itemswipe', parameters: 'list,index,target,record,e' },
            { name: 'itemtap', parameters: 'list,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'list,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'list,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'list,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'list' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'list,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'list,selected' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'list' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_List;
    }(Ext_dataview_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_List.EVENTNAMES);
    //    return Ext_dataview_Component.getEventNames(eventnames);
    //}

    var ExtListMetaData = /** @class */ (function (_super) {
        __extends(ExtListMetaData, _super);
        function ExtListMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtListMetaData.getAll = function () {
            ExtListMetaData.PROPERTIES = Ext_List.getProperties(ExtListMetaData.PROPERTIES);
            ExtListMetaData.EVENTS = Ext_List.getEvents(ExtListMetaData.EVENTS);
            ExtListMetaData.EVENTS.forEach(function (event) {
                ExtListMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtListMetaData.PROPERTIES = [];
        ExtListMetaData.EVENTS = [];
        ExtListMetaData.EVENTNAMES = [];
        return ExtListMetaData;
    }(Ext_List));
    (function () { ExtListMetaData.getAll(); })();
    var ExtListComponent = /** @class */ (function (_super) {
        __extends(ExtListComponent, _super);
        function ExtListComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtListMetaData.PROPERTIES, ExtListMetaData.EVENTS) || this;
            _this.xtype = 'list';
            return _this;
        }
        ExtListComponent_1 = ExtListComponent;
        ExtListComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtListComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtListComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtListComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtListComponent_1;
        ExtListComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtListComponent = ExtListComponent_1 = __decorate([
            core.Component({
                selector: 'ext-list',
                inputs: ExtListMetaData.PROPERTIES,
                outputs: ExtListMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtListComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtListComponent);
        return ExtListComponent;
    }(EngBase));

    var Ext_dataview_DataItem = /** @class */ (function (_super) {
        __extends(Ext_dataview_DataItem, _super);
        function Ext_dataview_DataItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_DataItem.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_DataItem.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_dataview_DataItem.getEvents = function (events) {
            events = events.concat(Ext_dataview_DataItem.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_dataview_DataItem.PROPERTIES = [
            'dataMap',
            'itemCls',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_DataItem.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dataitem,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'dataitem,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'dataitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dataitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,dataitem,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dataitem,event' },
            { name: 'focusenter', parameters: 'dataitem,event' },
            { name: 'focusleave', parameters: 'dataitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'dataitem,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'dataitem,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dataitem,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'dataitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'dataItem,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_DataItem;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_DataItem.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var Ext_dataview_component_ListItem = /** @class */ (function (_super) {
        __extends(Ext_dataview_component_ListItem, _super);
        function Ext_dataview_component_ListItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_component_ListItem.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_component_ListItem.PROPERTIES);
            return Ext_dataview_DataItem.getProperties(properties);
        };
        Ext_dataview_component_ListItem.getEvents = function (events) {
            events = events.concat(Ext_dataview_component_ListItem.EVENTS);
            return Ext_dataview_DataItem.getEvents(events);
        };
        Ext_dataview_component_ListItem.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_component_ListItem.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,listitem,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'listitem,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'listitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'listitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,listitem,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'listitem,event' },
            { name: 'focusenter', parameters: 'listitem,event' },
            { name: 'focusleave', parameters: 'listitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'listitem,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'listitem,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'listitem,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'listitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'dataItem,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_component_ListItem;
    }(Ext_dataview_DataItem));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_component_ListItem.EVENTNAMES);
    //    return Ext_dataview_DataItem.getEventNames(eventnames);
    //}

    var ExtListitemMetaData = /** @class */ (function (_super) {
        __extends(ExtListitemMetaData, _super);
        function ExtListitemMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtListitemMetaData.getAll = function () {
            ExtListitemMetaData.PROPERTIES = Ext_dataview_component_ListItem.getProperties(ExtListitemMetaData.PROPERTIES);
            ExtListitemMetaData.EVENTS = Ext_dataview_component_ListItem.getEvents(ExtListitemMetaData.EVENTS);
            ExtListitemMetaData.EVENTS.forEach(function (event) {
                ExtListitemMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtListitemMetaData.PROPERTIES = [];
        ExtListitemMetaData.EVENTS = [];
        ExtListitemMetaData.EVENTNAMES = [];
        return ExtListitemMetaData;
    }(Ext_dataview_component_ListItem));
    (function () { ExtListitemMetaData.getAll(); })();
    var ExtListitemComponent = /** @class */ (function (_super) {
        __extends(ExtListitemComponent, _super);
        function ExtListitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtListitemMetaData.PROPERTIES, ExtListitemMetaData.EVENTS) || this;
            _this.xtype = 'listitem';
            return _this;
        }
        ExtListitemComponent_1 = ExtListitemComponent;
        ExtListitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtListitemComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtListitemComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtListitemComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtListitemComponent_1;
        ExtListitemComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtListitemComponent = ExtListitemComponent_1 = __decorate([
            core.Component({
                selector: 'ext-listitem',
                inputs: ExtListitemMetaData.PROPERTIES,
                outputs: ExtListitemMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtListitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtListitemComponent);
        return ExtListitemComponent;
    }(EngBase));

    var Ext_dataview_SimpleListItem = /** @class */ (function (_super) {
        __extends(Ext_dataview_SimpleListItem, _super);
        function Ext_dataview_SimpleListItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_SimpleListItem.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_SimpleListItem.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_dataview_SimpleListItem.getEvents = function (events) {
            events = events.concat(Ext_dataview_SimpleListItem.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_dataview_SimpleListItem.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_SimpleListItem.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'simplelistitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'simplelistitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'simplelistitem,event' },
            { name: 'focusenter', parameters: 'simplelistitem,event' },
            { name: 'focusleave', parameters: 'simplelistitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'simplelistitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_SimpleListItem;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_SimpleListItem.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var Ext_dataview_ListItemPlaceholder = /** @class */ (function (_super) {
        __extends(Ext_dataview_ListItemPlaceholder, _super);
        function Ext_dataview_ListItemPlaceholder() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_ListItemPlaceholder.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_ListItemPlaceholder.PROPERTIES);
            return Ext_dataview_SimpleListItem.getProperties(properties);
        };
        Ext_dataview_ListItemPlaceholder.getEvents = function (events) {
            events = events.concat(Ext_dataview_ListItemPlaceholder.EVENTS);
            return Ext_dataview_SimpleListItem.getEvents(events);
        };
        Ext_dataview_ListItemPlaceholder.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_ListItemPlaceholder.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'listitemplaceholder' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'listitemplaceholder,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'listitemplaceholder,event' },
            { name: 'focusenter', parameters: 'listitemplaceholder,event' },
            { name: 'focusleave', parameters: 'listitemplaceholder,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'listitemplaceholder' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_ListItemPlaceholder;
    }(Ext_dataview_SimpleListItem));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_ListItemPlaceholder.EVENTNAMES);
    //    return Ext_dataview_SimpleListItem.getEventNames(eventnames);
    //}

    var ExtListitemplaceholderMetaData = /** @class */ (function (_super) {
        __extends(ExtListitemplaceholderMetaData, _super);
        function ExtListitemplaceholderMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtListitemplaceholderMetaData.getAll = function () {
            ExtListitemplaceholderMetaData.PROPERTIES = Ext_dataview_ListItemPlaceholder.getProperties(ExtListitemplaceholderMetaData.PROPERTIES);
            ExtListitemplaceholderMetaData.EVENTS = Ext_dataview_ListItemPlaceholder.getEvents(ExtListitemplaceholderMetaData.EVENTS);
            ExtListitemplaceholderMetaData.EVENTS.forEach(function (event) {
                ExtListitemplaceholderMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtListitemplaceholderMetaData.PROPERTIES = [];
        ExtListitemplaceholderMetaData.EVENTS = [];
        ExtListitemplaceholderMetaData.EVENTNAMES = [];
        return ExtListitemplaceholderMetaData;
    }(Ext_dataview_ListItemPlaceholder));
    (function () { ExtListitemplaceholderMetaData.getAll(); })();
    var ExtListitemplaceholderComponent = /** @class */ (function (_super) {
        __extends(ExtListitemplaceholderComponent, _super);
        function ExtListitemplaceholderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtListitemplaceholderMetaData.PROPERTIES, ExtListitemplaceholderMetaData.EVENTS) || this;
            _this.xtype = 'listitemplaceholder';
            return _this;
        }
        ExtListitemplaceholderComponent_1 = ExtListitemplaceholderComponent;
        ExtListitemplaceholderComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtListitemplaceholderComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtListitemplaceholderComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtListitemplaceholderComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtListitemplaceholderComponent_1;
        ExtListitemplaceholderComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtListitemplaceholderComponent = ExtListitemplaceholderComponent_1 = __decorate([
            core.Component({
                selector: 'ext-listitemplaceholder',
                inputs: ExtListitemplaceholderMetaData.PROPERTIES,
                outputs: ExtListitemplaceholderMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtListitemplaceholderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtListitemplaceholderComponent);
        return ExtListitemplaceholderComponent;
    }(EngBase));

    var Ext_dataview_listswiper_Item = /** @class */ (function (_super) {
        __extends(Ext_dataview_listswiper_Item, _super);
        function Ext_dataview_listswiper_Item() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_listswiper_Item.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_listswiper_Item.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_dataview_listswiper_Item.getEvents = function (events) {
            events = events.concat(Ext_dataview_listswiper_Item.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_dataview_listswiper_Item.PROPERTIES = [
            'action',
            'state',
            'translationTarget',
            'undo',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_listswiper_Item.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,listswiperitem,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'listswiperitem,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'listswiperitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'listswiperitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,listswiperitem,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'listswiperitem,event' },
            { name: 'focusenter', parameters: 'listswiperitem,event' },
            { name: 'focusleave', parameters: 'listswiperitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'listswiperitem,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'listswiperitem,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'listswiperitem,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'listswiperitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_listswiper_Item;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_listswiper_Item.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var ExtListswiperitemMetaData = /** @class */ (function (_super) {
        __extends(ExtListswiperitemMetaData, _super);
        function ExtListswiperitemMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtListswiperitemMetaData.getAll = function () {
            ExtListswiperitemMetaData.PROPERTIES = Ext_dataview_listswiper_Item.getProperties(ExtListswiperitemMetaData.PROPERTIES);
            ExtListswiperitemMetaData.EVENTS = Ext_dataview_listswiper_Item.getEvents(ExtListswiperitemMetaData.EVENTS);
            ExtListswiperitemMetaData.EVENTS.forEach(function (event) {
                ExtListswiperitemMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtListswiperitemMetaData.PROPERTIES = [];
        ExtListswiperitemMetaData.EVENTS = [];
        ExtListswiperitemMetaData.EVENTNAMES = [];
        return ExtListswiperitemMetaData;
    }(Ext_dataview_listswiper_Item));
    (function () { ExtListswiperitemMetaData.getAll(); })();
    var ExtListswiperitemComponent = /** @class */ (function (_super) {
        __extends(ExtListswiperitemComponent, _super);
        function ExtListswiperitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtListswiperitemMetaData.PROPERTIES, ExtListswiperitemMetaData.EVENTS) || this;
            _this.xtype = 'listswiperitem';
            return _this;
        }
        ExtListswiperitemComponent_1 = ExtListswiperitemComponent;
        ExtListswiperitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtListswiperitemComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtListswiperitemComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtListswiperitemComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtListswiperitemComponent_1;
        ExtListswiperitemComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtListswiperitemComponent = ExtListswiperitemComponent_1 = __decorate([
            core.Component({
                selector: 'ext-listswiperitem',
                inputs: ExtListswiperitemMetaData.PROPERTIES,
                outputs: ExtListswiperitemMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtListswiperitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtListswiperitemComponent);
        return ExtListswiperitemComponent;
    }(EngBase));

    var Ext_dataview_listswiper_Stepper = /** @class */ (function (_super) {
        __extends(Ext_dataview_listswiper_Stepper, _super);
        function Ext_dataview_listswiper_Stepper() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_listswiper_Stepper.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_listswiper_Stepper.PROPERTIES);
            return Ext_dataview_listswiper_Item.getProperties(properties);
        };
        Ext_dataview_listswiper_Stepper.getEvents = function (events) {
            events = events.concat(Ext_dataview_listswiper_Stepper.EVENTS);
            return Ext_dataview_listswiper_Item.getEvents(events);
        };
        Ext_dataview_listswiper_Stepper.PROPERTIES = [
            'animation',
            'iconCls',
            'side',
            'step',
            'text',
            'undo',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_listswiper_Stepper.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,listswiperstepper,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'listswiperstepper,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'listswiperstepper' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'listswiperstepper,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,listswiperstepper,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'listswiperstepper,event' },
            { name: 'focusenter', parameters: 'listswiperstepper,event' },
            { name: 'focusleave', parameters: 'listswiperstepper,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'listswiperstepper,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'listswiperstepper,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'listswiperstepper,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'listswiperstepper' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_listswiper_Stepper;
    }(Ext_dataview_listswiper_Item));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_listswiper_Stepper.EVENTNAMES);
    //    return Ext_dataview_listswiper_Item.getEventNames(eventnames);
    //}

    var ExtListswiperstepperMetaData = /** @class */ (function (_super) {
        __extends(ExtListswiperstepperMetaData, _super);
        function ExtListswiperstepperMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtListswiperstepperMetaData.getAll = function () {
            ExtListswiperstepperMetaData.PROPERTIES = Ext_dataview_listswiper_Stepper.getProperties(ExtListswiperstepperMetaData.PROPERTIES);
            ExtListswiperstepperMetaData.EVENTS = Ext_dataview_listswiper_Stepper.getEvents(ExtListswiperstepperMetaData.EVENTS);
            ExtListswiperstepperMetaData.EVENTS.forEach(function (event) {
                ExtListswiperstepperMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtListswiperstepperMetaData.PROPERTIES = [];
        ExtListswiperstepperMetaData.EVENTS = [];
        ExtListswiperstepperMetaData.EVENTNAMES = [];
        return ExtListswiperstepperMetaData;
    }(Ext_dataview_listswiper_Stepper));
    (function () { ExtListswiperstepperMetaData.getAll(); })();
    var ExtListswiperstepperComponent = /** @class */ (function (_super) {
        __extends(ExtListswiperstepperComponent, _super);
        function ExtListswiperstepperComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtListswiperstepperMetaData.PROPERTIES, ExtListswiperstepperMetaData.EVENTS) || this;
            _this.xtype = 'listswiperstepper';
            return _this;
        }
        ExtListswiperstepperComponent_1 = ExtListswiperstepperComponent;
        ExtListswiperstepperComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtListswiperstepperComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtListswiperstepperComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtListswiperstepperComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtListswiperstepperComponent_1;
        ExtListswiperstepperComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtListswiperstepperComponent = ExtListswiperstepperComponent_1 = __decorate([
            core.Component({
                selector: 'ext-listswiperstepper',
                inputs: ExtListswiperstepperMetaData.PROPERTIES,
                outputs: ExtListswiperstepperMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtListswiperstepperComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtListswiperstepperComponent);
        return ExtListswiperstepperComponent;
    }(EngBase));

    var Ext_NestedList = /** @class */ (function (_super) {
        __extends(Ext_NestedList, _super);
        function Ext_NestedList() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_NestedList.getProperties = function (properties) {
            properties = properties.concat(Ext_NestedList.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_NestedList.getEvents = function (events) {
            events = events.concat(Ext_NestedList.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_NestedList.PROPERTIES = [
            'allowDeselect',
            'backButton',
            'backText',
            'cardSwitchAnimation',
            'detailCard',
            'detailContainer',
            'displayField',
            'emptyText',
            'lastActiveList',
            'lastNode',
            'layout',
            'listConfig',
            'loadingText',
            'onItemDisclosure',
            'store',
            'title',
            'toolbar',
            'updateTitleText',
            'useTitleAsBackText',
            'variableHeights',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_NestedList.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,nestedlist,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'nestedlist,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'back', parameters: 'nestedlist,node,lastActiveList,detailCardActive' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeload', parameters: 'nestedlist,store,operation' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeselectionchange', parameters: 'nestedlist,list,node,selections' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'nestedlist' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'nestedlist,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'containertap', parameters: 'nestedlist,list,e' },
            { name: 'deactivate', parameters: 'oldActiveItem,nestedlist,newActiveItem' },
            { name: 'deselect', parameters: 'nestedlist,list,selections' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'nestedlist,event' },
            { name: 'focusenter', parameters: 'nestedlist,event' },
            { name: 'focusleave', parameters: 'nestedlist,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'nestedlist,list,index,target,record,e' },
            { name: 'itemtap', parameters: 'nestedlist,list,index,target,record,e' },
            { name: 'leafitemtap', parameters: 'nestedlist,list,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'listchange', parameters: 'nestedlist,listitem' },
            { name: 'load', parameters: 'nestedlist,store,records,successful,operation' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'nestedlist,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'nestedlist,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'nestedlist,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'nestedlist,list,selections' },
            { name: 'selectionchange', parameters: 'nestedlist,list,selections' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'nestedlist' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_NestedList;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_NestedList.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var ExtNestedlistMetaData = /** @class */ (function (_super) {
        __extends(ExtNestedlistMetaData, _super);
        function ExtNestedlistMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtNestedlistMetaData.getAll = function () {
            ExtNestedlistMetaData.PROPERTIES = Ext_NestedList.getProperties(ExtNestedlistMetaData.PROPERTIES);
            ExtNestedlistMetaData.EVENTS = Ext_NestedList.getEvents(ExtNestedlistMetaData.EVENTS);
            ExtNestedlistMetaData.EVENTS.forEach(function (event) {
                ExtNestedlistMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtNestedlistMetaData.PROPERTIES = [];
        ExtNestedlistMetaData.EVENTS = [];
        ExtNestedlistMetaData.EVENTNAMES = [];
        return ExtNestedlistMetaData;
    }(Ext_NestedList));
    (function () { ExtNestedlistMetaData.getAll(); })();
    var ExtNestedlistComponent = /** @class */ (function (_super) {
        __extends(ExtNestedlistComponent, _super);
        function ExtNestedlistComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtNestedlistMetaData.PROPERTIES, ExtNestedlistMetaData.EVENTS) || this;
            _this.xtype = 'nestedlist';
            return _this;
        }
        ExtNestedlistComponent_1 = ExtNestedlistComponent;
        ExtNestedlistComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtNestedlistComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtNestedlistComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtNestedlistComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtNestedlistComponent_1;
        ExtNestedlistComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtNestedlistComponent = ExtNestedlistComponent_1 = __decorate([
            core.Component({
                selector: 'ext-nestedlist',
                inputs: ExtNestedlistMetaData.PROPERTIES,
                outputs: ExtNestedlistMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtNestedlistComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtNestedlistComponent);
        return ExtNestedlistComponent;
    }(EngBase));

    var Ext_dataview_pullrefresh_Item = /** @class */ (function (_super) {
        __extends(Ext_dataview_pullrefresh_Item, _super);
        function Ext_dataview_pullrefresh_Item() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_pullrefresh_Item.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_pullrefresh_Item.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_dataview_pullrefresh_Item.getEvents = function (events) {
            events = events.concat(Ext_dataview_pullrefresh_Item.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_dataview_pullrefresh_Item.PROPERTIES = [
            'lastUpdated',
            'pull',
            'state',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_pullrefresh_Item.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_pullrefresh_Item;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_pullrefresh_Item.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var Ext_dataview_pullrefresh_Bar = /** @class */ (function (_super) {
        __extends(Ext_dataview_pullrefresh_Bar, _super);
        function Ext_dataview_pullrefresh_Bar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_pullrefresh_Bar.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_pullrefresh_Bar.PROPERTIES);
            return Ext_dataview_pullrefresh_Item.getProperties(properties);
        };
        Ext_dataview_pullrefresh_Bar.getEvents = function (events) {
            events = events.concat(Ext_dataview_pullrefresh_Bar.EVENTS);
            return Ext_dataview_pullrefresh_Item.getEvents(events);
        };
        Ext_dataview_pullrefresh_Bar.PROPERTIES = [
            'lastUpdatedDateFormat',
            'lastUpdatedText',
            'loadedText',
            'loadingText',
            'mode',
            'pullText',
            'releaseText',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_pullrefresh_Bar.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pullrefreshbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pullrefreshbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pullrefreshbar,event' },
            { name: 'focusenter', parameters: 'pullrefreshbar,event' },
            { name: 'focusleave', parameters: 'pullrefreshbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pullrefreshbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_pullrefresh_Bar;
    }(Ext_dataview_pullrefresh_Item));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_pullrefresh_Bar.EVENTNAMES);
    //    return Ext_dataview_pullrefresh_Item.getEventNames(eventnames);
    //}

    var ExtPullrefreshbarMetaData = /** @class */ (function (_super) {
        __extends(ExtPullrefreshbarMetaData, _super);
        function ExtPullrefreshbarMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPullrefreshbarMetaData.getAll = function () {
            ExtPullrefreshbarMetaData.PROPERTIES = Ext_dataview_pullrefresh_Bar.getProperties(ExtPullrefreshbarMetaData.PROPERTIES);
            ExtPullrefreshbarMetaData.EVENTS = Ext_dataview_pullrefresh_Bar.getEvents(ExtPullrefreshbarMetaData.EVENTS);
            ExtPullrefreshbarMetaData.EVENTS.forEach(function (event) {
                ExtPullrefreshbarMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPullrefreshbarMetaData.PROPERTIES = [];
        ExtPullrefreshbarMetaData.EVENTS = [];
        ExtPullrefreshbarMetaData.EVENTNAMES = [];
        return ExtPullrefreshbarMetaData;
    }(Ext_dataview_pullrefresh_Bar));
    (function () { ExtPullrefreshbarMetaData.getAll(); })();
    var ExtPullrefreshbarComponent = /** @class */ (function (_super) {
        __extends(ExtPullrefreshbarComponent, _super);
        function ExtPullrefreshbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPullrefreshbarMetaData.PROPERTIES, ExtPullrefreshbarMetaData.EVENTS) || this;
            _this.xtype = 'pullrefreshbar';
            return _this;
        }
        ExtPullrefreshbarComponent_1 = ExtPullrefreshbarComponent;
        ExtPullrefreshbarComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPullrefreshbarComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPullrefreshbarComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPullrefreshbarComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPullrefreshbarComponent_1;
        ExtPullrefreshbarComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPullrefreshbarComponent = ExtPullrefreshbarComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pullrefreshbar',
                inputs: ExtPullrefreshbarMetaData.PROPERTIES,
                outputs: ExtPullrefreshbarMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPullrefreshbarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPullrefreshbarComponent);
        return ExtPullrefreshbarComponent;
    }(EngBase));

    var Ext_dataview_pullrefresh_Spinner = /** @class */ (function (_super) {
        __extends(Ext_dataview_pullrefresh_Spinner, _super);
        function Ext_dataview_pullrefresh_Spinner() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_pullrefresh_Spinner.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_pullrefresh_Spinner.PROPERTIES);
            return Ext_dataview_pullrefresh_Item.getProperties(properties);
        };
        Ext_dataview_pullrefresh_Spinner.getEvents = function (events) {
            events = events.concat(Ext_dataview_pullrefresh_Spinner.EVENTS);
            return Ext_dataview_pullrefresh_Item.getEvents(events);
        };
        Ext_dataview_pullrefresh_Spinner.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_pullrefresh_Spinner.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pullrefreshspinner' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pullrefreshspinner,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pullrefreshspinner,event' },
            { name: 'focusenter', parameters: 'pullrefreshspinner,event' },
            { name: 'focusleave', parameters: 'pullrefreshspinner,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pullrefreshspinner' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_pullrefresh_Spinner;
    }(Ext_dataview_pullrefresh_Item));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_pullrefresh_Spinner.EVENTNAMES);
    //    return Ext_dataview_pullrefresh_Item.getEventNames(eventnames);
    //}

    var ExtPullrefreshspinnerMetaData = /** @class */ (function (_super) {
        __extends(ExtPullrefreshspinnerMetaData, _super);
        function ExtPullrefreshspinnerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPullrefreshspinnerMetaData.getAll = function () {
            ExtPullrefreshspinnerMetaData.PROPERTIES = Ext_dataview_pullrefresh_Spinner.getProperties(ExtPullrefreshspinnerMetaData.PROPERTIES);
            ExtPullrefreshspinnerMetaData.EVENTS = Ext_dataview_pullrefresh_Spinner.getEvents(ExtPullrefreshspinnerMetaData.EVENTS);
            ExtPullrefreshspinnerMetaData.EVENTS.forEach(function (event) {
                ExtPullrefreshspinnerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPullrefreshspinnerMetaData.PROPERTIES = [];
        ExtPullrefreshspinnerMetaData.EVENTS = [];
        ExtPullrefreshspinnerMetaData.EVENTNAMES = [];
        return ExtPullrefreshspinnerMetaData;
    }(Ext_dataview_pullrefresh_Spinner));
    (function () { ExtPullrefreshspinnerMetaData.getAll(); })();
    var ExtPullrefreshspinnerComponent = /** @class */ (function (_super) {
        __extends(ExtPullrefreshspinnerComponent, _super);
        function ExtPullrefreshspinnerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPullrefreshspinnerMetaData.PROPERTIES, ExtPullrefreshspinnerMetaData.EVENTS) || this;
            _this.xtype = 'pullrefreshspinner';
            return _this;
        }
        ExtPullrefreshspinnerComponent_1 = ExtPullrefreshspinnerComponent;
        ExtPullrefreshspinnerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPullrefreshspinnerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPullrefreshspinnerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPullrefreshspinnerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPullrefreshspinnerComponent_1;
        ExtPullrefreshspinnerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPullrefreshspinnerComponent = ExtPullrefreshspinnerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pullrefreshspinner',
                inputs: ExtPullrefreshspinnerMetaData.PROPERTIES,
                outputs: ExtPullrefreshspinnerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPullrefreshspinnerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPullrefreshspinnerComponent);
        return ExtPullrefreshspinnerComponent;
    }(EngBase));

    var Ext_dataview_component_SimpleListItem = /** @class */ (function (_super) {
        __extends(Ext_dataview_component_SimpleListItem, _super);
        function Ext_dataview_component_SimpleListItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_component_SimpleListItem.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_component_SimpleListItem.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_dataview_component_SimpleListItem.getEvents = function (events) {
            events = events.concat(Ext_dataview_component_SimpleListItem.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_dataview_component_SimpleListItem.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_component_SimpleListItem.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'simplelistitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'simplelistitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'simplelistitem,event' },
            { name: 'focusenter', parameters: 'simplelistitem,event' },
            { name: 'focusleave', parameters: 'simplelistitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'simplelistitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_component_SimpleListItem;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_component_SimpleListItem.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtSimplelistitemMetaData = /** @class */ (function (_super) {
        __extends(ExtSimplelistitemMetaData, _super);
        function ExtSimplelistitemMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSimplelistitemMetaData.getAll = function () {
            ExtSimplelistitemMetaData.PROPERTIES = Ext_dataview_component_SimpleListItem.getProperties(ExtSimplelistitemMetaData.PROPERTIES);
            ExtSimplelistitemMetaData.EVENTS = Ext_dataview_component_SimpleListItem.getEvents(ExtSimplelistitemMetaData.EVENTS);
            ExtSimplelistitemMetaData.EVENTS.forEach(function (event) {
                ExtSimplelistitemMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSimplelistitemMetaData.PROPERTIES = [];
        ExtSimplelistitemMetaData.EVENTS = [];
        ExtSimplelistitemMetaData.EVENTNAMES = [];
        return ExtSimplelistitemMetaData;
    }(Ext_dataview_component_SimpleListItem));
    (function () { ExtSimplelistitemMetaData.getAll(); })();
    var ExtSimplelistitemComponent = /** @class */ (function (_super) {
        __extends(ExtSimplelistitemComponent, _super);
        function ExtSimplelistitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSimplelistitemMetaData.PROPERTIES, ExtSimplelistitemMetaData.EVENTS) || this;
            _this.xtype = 'simplelistitem';
            return _this;
        }
        ExtSimplelistitemComponent_1 = ExtSimplelistitemComponent;
        ExtSimplelistitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSimplelistitemComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSimplelistitemComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSimplelistitemComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSimplelistitemComponent_1;
        ExtSimplelistitemComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSimplelistitemComponent = ExtSimplelistitemComponent_1 = __decorate([
            core.Component({
                selector: 'ext-simplelistitem',
                inputs: ExtSimplelistitemMetaData.PROPERTIES,
                outputs: ExtSimplelistitemMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSimplelistitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSimplelistitemComponent);
        return ExtSimplelistitemComponent;
    }(EngBase));

    var Ext_window_Window = /** @class */ (function (_super) {
        __extends(Ext_window_Window, _super);
        function Ext_window_Window() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_window_Window.getProperties = function (properties) {
            properties = properties.concat(Ext_window_Window.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_window_Window.getEvents = function (events) {
            events = events.concat(Ext_window_Window.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_window_Window.PROPERTIES = [
            'bodyBorder',
            'border',
            'centered',
            'constrainDrag',
            'dismissAction',
            'dismissHandler',
            'draggable',
            'floated',
            'hideAnimation',
            'hideMode',
            'keyMap',
            'maskTapHandler',
            'maximizable',
            'maximizeAnimation',
            'maximized',
            'maximizeProxy',
            'maximizeTool',
            'modal',
            'restorable',
            'restoreAnimation',
            'restoreTool',
            'shadow',
            'showAnimation',
            'tabIndex',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_window_Window.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dialog,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'dialog,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'dialog' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'dialog' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaximize', parameters: 'dialog' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'dialog,context' },
            { name: 'beforerestore', parameters: 'dialog' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'dialog' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dialog,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'dialog' },
            { name: 'deactivate', parameters: 'oldActiveItem,dialog,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'dialog' },
            { name: 'drawershow', parameters: 'dialog' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'dialog' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dialog,event' },
            { name: 'focusenter', parameters: 'dialog,event' },
            { name: 'focusleave', parameters: 'dialog,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maximize', parameters: 'dialog' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'dialog,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'dialog,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dialog,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'dialog,context' },
            { name: 'resizedragcancel', parameters: 'dialog,context' },
            { name: 'resizedragend', parameters: 'dialog,context' },
            { name: 'resizedragstart', parameters: 'dialog,context' },
            { name: 'restore', parameters: 'dialog' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'dialog' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_window_Window;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_window_Window.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var ExtDialogMetaData = /** @class */ (function (_super) {
        __extends(ExtDialogMetaData, _super);
        function ExtDialogMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtDialogMetaData.getAll = function () {
            ExtDialogMetaData.PROPERTIES = Ext_window_Window.getProperties(ExtDialogMetaData.PROPERTIES);
            ExtDialogMetaData.EVENTS = Ext_window_Window.getEvents(ExtDialogMetaData.EVENTS);
            ExtDialogMetaData.EVENTS.forEach(function (event) {
                ExtDialogMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtDialogMetaData.PROPERTIES = [];
        ExtDialogMetaData.EVENTS = [];
        ExtDialogMetaData.EVENTNAMES = [];
        return ExtDialogMetaData;
    }(Ext_window_Window));
    (function () { ExtDialogMetaData.getAll(); })();
    var ExtDialogComponent = /** @class */ (function (_super) {
        __extends(ExtDialogComponent, _super);
        function ExtDialogComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtDialogMetaData.PROPERTIES, ExtDialogMetaData.EVENTS) || this;
            _this.xtype = 'dialog';
            return _this;
        }
        ExtDialogComponent_1 = ExtDialogComponent;
        ExtDialogComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtDialogComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtDialogComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtDialogComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtDialogComponent_1;
        ExtDialogComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtDialogComponent = ExtDialogComponent_1 = __decorate([
            core.Component({
                selector: 'ext-dialog',
                inputs: ExtDialogMetaData.PROPERTIES,
                outputs: ExtDialogMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtDialogComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtDialogComponent);
        return ExtDialogComponent;
    }(EngBase));

    var Ext_draw_Component = /** @class */ (function (_super) {
        __extends(Ext_draw_Component, _super);
        function Ext_draw_Component() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_draw_Component.getProperties = function (properties) {
            properties = properties.concat(Ext_draw_Component.PROPERTIES);
            return Ext_draw_ContainerBase.getProperties(properties);
        };
        Ext_draw_Component.getEvents = function (events) {
            events = events.concat(Ext_draw_Component.EVENTS);
            return Ext_draw_ContainerBase.getEvents(events);
        };
        Ext_draw_Component.PROPERTIES = [
            'downloadServerUrl',
            'engine',
            'gradients',
            'resizeHandler',
            'sprites',
            'surfaceZIndexes',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_draw_Component.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,draw,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'draw,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'draw' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'draw,event' },
            { name: 'bodyresize', parameters: 'size' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,draw,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'draw,event' },
            { name: 'focusenter', parameters: 'draw,event' },
            { name: 'focusleave', parameters: 'draw,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'draw,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'draw,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'draw,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spriteclick', parameters: 'sprite,event' },
            { name: 'spritedblclick', parameters: 'sprite,event' },
            { name: 'spritemousedown', parameters: 'sprite,event' },
            { name: 'spritemousemove', parameters: 'sprite,event' },
            { name: 'spritemouseout', parameters: 'sprite,event' },
            { name: 'spritemouseover', parameters: 'sprite,event' },
            { name: 'spritemouseup', parameters: 'sprite,event' },
            { name: 'spritetap', parameters: 'sprite,event' },
            { name: 'tofront', parameters: 'draw' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_draw_Component;
    }(Ext_draw_ContainerBase));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_draw_Component.EVENTNAMES);
    //    return Ext_draw_ContainerBase.getEventNames(eventnames);
    //}

    var ExtDrawMetaData = /** @class */ (function (_super) {
        __extends(ExtDrawMetaData, _super);
        function ExtDrawMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtDrawMetaData.getAll = function () {
            ExtDrawMetaData.PROPERTIES = Ext_draw_Component.getProperties(ExtDrawMetaData.PROPERTIES);
            ExtDrawMetaData.EVENTS = Ext_draw_Component.getEvents(ExtDrawMetaData.EVENTS);
            ExtDrawMetaData.EVENTS.forEach(function (event) {
                ExtDrawMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtDrawMetaData.PROPERTIES = [];
        ExtDrawMetaData.EVENTS = [];
        ExtDrawMetaData.EVENTNAMES = [];
        return ExtDrawMetaData;
    }(Ext_draw_Component));
    (function () { ExtDrawMetaData.getAll(); })();
    var ExtDrawComponent = /** @class */ (function (_super) {
        __extends(ExtDrawComponent, _super);
        function ExtDrawComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtDrawMetaData.PROPERTIES, ExtDrawMetaData.EVENTS) || this;
            _this.xtype = 'draw';
            return _this;
        }
        ExtDrawComponent_1 = ExtDrawComponent;
        ExtDrawComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtDrawComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtDrawComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtDrawComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtDrawComponent_1;
        ExtDrawComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtDrawComponent = ExtDrawComponent_1 = __decorate([
            core.Component({
                selector: 'ext-draw',
                inputs: ExtDrawMetaData.PROPERTIES,
                outputs: ExtDrawMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtDrawComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtDrawComponent);
        return ExtDrawComponent;
    }(EngBase));

    var Ext_draw_SurfaceBase = /** @class */ (function (_super) {
        __extends(Ext_draw_SurfaceBase, _super);
        function Ext_draw_SurfaceBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_draw_SurfaceBase.getProperties = function (properties) {
            properties = properties.concat(Ext_draw_SurfaceBase.PROPERTIES);
            return Ext_Widget.getProperties(properties);
        };
        Ext_draw_SurfaceBase.getEvents = function (events) {
            events = events.concat(Ext_draw_SurfaceBase.EVENTS);
            return Ext_Widget.getEvents(events);
        };
        Ext_draw_SurfaceBase.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_draw_SurfaceBase.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_draw_SurfaceBase;
    }(Ext_Widget));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_draw_SurfaceBase.EVENTNAMES);
    //    return Ext_Widget.getEventNames(eventnames);
    //}

    var Ext_draw_Surface = /** @class */ (function (_super) {
        __extends(Ext_draw_Surface, _super);
        function Ext_draw_Surface() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_draw_Surface.getProperties = function (properties) {
            properties = properties.concat(Ext_draw_Surface.PROPERTIES);
            return Ext_draw_SurfaceBase.getProperties(properties);
        };
        Ext_draw_Surface.getEvents = function (events) {
            events = events.concat(Ext_draw_Surface.EVENTS);
            return Ext_draw_SurfaceBase.getEvents(events);
        };
        Ext_draw_Surface.PROPERTIES = [
            'background',
            'dirty',
            'flipRtlText',
            'items',
            'rect',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_draw_Surface.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'surface' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'surface,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'surface,event' },
            { name: 'focusenter', parameters: 'surface,event' },
            { name: 'focusleave', parameters: 'surface,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'surface' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_draw_Surface;
    }(Ext_draw_SurfaceBase));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_draw_Surface.EVENTNAMES);
    //    return Ext_draw_SurfaceBase.getEventNames(eventnames);
    //}

    var ExtSurfaceMetaData = /** @class */ (function (_super) {
        __extends(ExtSurfaceMetaData, _super);
        function ExtSurfaceMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSurfaceMetaData.getAll = function () {
            ExtSurfaceMetaData.PROPERTIES = Ext_draw_Surface.getProperties(ExtSurfaceMetaData.PROPERTIES);
            ExtSurfaceMetaData.EVENTS = Ext_draw_Surface.getEvents(ExtSurfaceMetaData.EVENTS);
            ExtSurfaceMetaData.EVENTS.forEach(function (event) {
                ExtSurfaceMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSurfaceMetaData.PROPERTIES = [];
        ExtSurfaceMetaData.EVENTS = [];
        ExtSurfaceMetaData.EVENTNAMES = [];
        return ExtSurfaceMetaData;
    }(Ext_draw_Surface));
    (function () { ExtSurfaceMetaData.getAll(); })();
    var ExtSurfaceComponent = /** @class */ (function (_super) {
        __extends(ExtSurfaceComponent, _super);
        function ExtSurfaceComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSurfaceMetaData.PROPERTIES, ExtSurfaceMetaData.EVENTS) || this;
            _this.xtype = 'surface';
            return _this;
        }
        ExtSurfaceComponent_1 = ExtSurfaceComponent;
        ExtSurfaceComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSurfaceComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSurfaceComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSurfaceComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSurfaceComponent_1;
        ExtSurfaceComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSurfaceComponent = ExtSurfaceComponent_1 = __decorate([
            core.Component({
                selector: 'ext-surface',
                inputs: ExtSurfaceMetaData.PROPERTIES,
                outputs: ExtSurfaceMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSurfaceComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSurfaceComponent);
        return ExtSurfaceComponent;
    }(EngBase));

    var Ext_Editor = /** @class */ (function (_super) {
        __extends(Ext_Editor, _super);
        function Ext_Editor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Editor.getProperties = function (properties) {
            properties = properties.concat(Ext_Editor.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_Editor.getEvents = function (events) {
            events = events.concat(Ext_Editor.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_Editor.PROPERTIES = [
            'alignment',
            'allowBlur',
            'cancelOnClear',
            'cancelOnEsc',
            'completeOnEnter',
            'constrain',
            'field',
            'hideEl',
            'ignoreNoChange',
            'matchFont',
            'offset',
            'parentEl',
            'revertInvalid',
            'shadow',
            'swallowKeys',
            'updateEl',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Editor.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,editor,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'editor,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecomplete', parameters: 'editor,value,startValue' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestartedit', parameters: 'editor,boundEl,value' },
            { name: 'beforetofront', parameters: 'editor' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'editor,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'canceledit', parameters: 'editor,value,startValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'complete', parameters: 'editor,value,startValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,editor,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'editor,event' },
            { name: 'focusenter', parameters: 'editor,event' },
            { name: 'focusleave', parameters: 'editor,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'editor,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'editor,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'editor,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'specialkey', parameters: 'editor,field,event' },
            { name: 'startedit', parameters: 'editor,boundEl,value' },
            { name: 'tofront', parameters: 'editor' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Editor;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Editor.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var ExtEditorMetaData = /** @class */ (function (_super) {
        __extends(ExtEditorMetaData, _super);
        function ExtEditorMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtEditorMetaData.getAll = function () {
            ExtEditorMetaData.PROPERTIES = Ext_Editor.getProperties(ExtEditorMetaData.PROPERTIES);
            ExtEditorMetaData.EVENTS = Ext_Editor.getEvents(ExtEditorMetaData.EVENTS);
            ExtEditorMetaData.EVENTS.forEach(function (event) {
                ExtEditorMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtEditorMetaData.PROPERTIES = [];
        ExtEditorMetaData.EVENTS = [];
        ExtEditorMetaData.EVENTNAMES = [];
        return ExtEditorMetaData;
    }(Ext_Editor));
    (function () { ExtEditorMetaData.getAll(); })();
    var ExtEditorComponent = /** @class */ (function (_super) {
        __extends(ExtEditorComponent, _super);
        function ExtEditorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtEditorMetaData.PROPERTIES, ExtEditorMetaData.EVENTS) || this;
            _this.xtype = 'editor';
            return _this;
        }
        ExtEditorComponent_1 = ExtEditorComponent;
        ExtEditorComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtEditorComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtEditorComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtEditorComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtEditorComponent_1;
        ExtEditorComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtEditorComponent = ExtEditorComponent_1 = __decorate([
            core.Component({
                selector: 'ext-editor',
                inputs: ExtEditorMetaData.PROPERTIES,
                outputs: ExtEditorMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtEditorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtEditorComponent);
        return ExtEditorComponent;
    }(EngBase));

    var Ext_form_Checkbox = /** @class */ (function (_super) {
        __extends(Ext_form_Checkbox, _super);
        function Ext_form_Checkbox() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Checkbox.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Checkbox.PROPERTIES);
            return Ext_field_Input.getProperties(properties);
        };
        Ext_form_Checkbox.getEvents = function (events) {
            events = events.concat(Ext_form_Checkbox.EVENTS);
            return Ext_field_Input.getEvents(events);
        };
        Ext_form_Checkbox.PROPERTIES = [
            'checked',
            'labelMaskTap',
            'publishes',
            'shareableName',
            'twoWayBindable',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Checkbox.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'checkbox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'checkbox,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'checkbox,newValue,oldValue' },
            { name: 'check', parameters: 'checkbox' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'checkbox,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'checkbox,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'checkbox,event' },
            { name: 'focusenter', parameters: 'checkbox,event' },
            { name: 'focusleave', parameters: 'checkbox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'checkbox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'uncheck', parameters: 'checkbox' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Checkbox;
    }(Ext_field_Input));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Checkbox.EVENTNAMES);
    //    return Ext_field_Input.getEventNames(eventnames);
    //}

    var ExtCheckboxMetaData = /** @class */ (function (_super) {
        __extends(ExtCheckboxMetaData, _super);
        function ExtCheckboxMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCheckboxMetaData.getAll = function () {
            ExtCheckboxMetaData.PROPERTIES = Ext_form_Checkbox.getProperties(ExtCheckboxMetaData.PROPERTIES);
            ExtCheckboxMetaData.EVENTS = Ext_form_Checkbox.getEvents(ExtCheckboxMetaData.EVENTS);
            ExtCheckboxMetaData.EVENTS.forEach(function (event) {
                ExtCheckboxMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCheckboxMetaData.PROPERTIES = [];
        ExtCheckboxMetaData.EVENTS = [];
        ExtCheckboxMetaData.EVENTNAMES = [];
        return ExtCheckboxMetaData;
    }(Ext_form_Checkbox));
    (function () { ExtCheckboxMetaData.getAll(); })();
    var ExtCheckboxComponent = /** @class */ (function (_super) {
        __extends(ExtCheckboxComponent, _super);
        function ExtCheckboxComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCheckboxMetaData.PROPERTIES, ExtCheckboxMetaData.EVENTS) || this;
            _this.xtype = 'checkbox';
            return _this;
        }
        ExtCheckboxComponent_1 = ExtCheckboxComponent;
        ExtCheckboxComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCheckboxComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCheckboxComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCheckboxComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCheckboxComponent_1;
        ExtCheckboxComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCheckboxComponent = ExtCheckboxComponent_1 = __decorate([
            core.Component({
                selector: 'ext-checkbox',
                inputs: ExtCheckboxMetaData.PROPERTIES,
                outputs: ExtCheckboxMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCheckboxComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCheckboxComponent);
        return ExtCheckboxComponent;
    }(EngBase));

    var Ext_field_Container = /** @class */ (function (_super) {
        __extends(Ext_field_Container, _super);
        function Ext_field_Container() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_Container.getProperties = function (properties) {
            properties = properties.concat(Ext_field_Container.PROPERTIES);
            return Ext_field_Field.getProperties(properties);
        };
        Ext_field_Container.getEvents = function (events) {
            events = events.concat(Ext_field_Container.EVENTS);
            return Ext_field_Field.getEvents(events);
        };
        Ext_field_Container.PROPERTIES = [
            'autoSize',
            'container',
            'defaults',
            'defaultType',
            'error',
            'fieldDefaults',
            'items',
            'layout',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_Container.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'containerfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'containerfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'containerfield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'containerfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'containerfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'containerfield,event' },
            { name: 'focusenter', parameters: 'containerfield,event' },
            { name: 'focusleave', parameters: 'containerfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'containerfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_Container;
    }(Ext_field_Field));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_Container.EVENTNAMES);
    //    return Ext_field_Field.getEventNames(eventnames);
    //}

    var Ext_field_FieldGroupContainer = /** @class */ (function (_super) {
        __extends(Ext_field_FieldGroupContainer, _super);
        function Ext_field_FieldGroupContainer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_FieldGroupContainer.getProperties = function (properties) {
            properties = properties.concat(Ext_field_FieldGroupContainer.PROPERTIES);
            return Ext_field_Container.getProperties(properties);
        };
        Ext_field_FieldGroupContainer.getEvents = function (events) {
            events = events.concat(Ext_field_FieldGroupContainer.EVENTS);
            return Ext_field_Container.getEvents(events);
        };
        Ext_field_FieldGroupContainer.PROPERTIES = [
            'defaultFieldValue',
            'delegate',
            'fieldsName',
            'shareableName',
            'vertical',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_FieldGroupContainer.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'groupcontainer' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'groupcontainer,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'groupcontainer,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'groupcontainer,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'groupcontainer,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'groupcontainer,event' },
            { name: 'focusenter', parameters: 'groupcontainer,event' },
            { name: 'focusleave', parameters: 'groupcontainer,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'groupcontainer' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_FieldGroupContainer;
    }(Ext_field_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_FieldGroupContainer.EVENTNAMES);
    //    return Ext_field_Container.getEventNames(eventnames);
    //}

    var Ext_field_CheckboxGroup = /** @class */ (function (_super) {
        __extends(Ext_field_CheckboxGroup, _super);
        function Ext_field_CheckboxGroup() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_CheckboxGroup.getProperties = function (properties) {
            properties = properties.concat(Ext_field_CheckboxGroup.PROPERTIES);
            return Ext_field_FieldGroupContainer.getProperties(properties);
        };
        Ext_field_CheckboxGroup.getEvents = function (events) {
            events = events.concat(Ext_field_CheckboxGroup.EVENTS);
            return Ext_field_FieldGroupContainer.getEvents(events);
        };
        Ext_field_CheckboxGroup.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_CheckboxGroup.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'checkboxgroup' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'checkboxgroup,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'checkboxgroup,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'checkboxgroup,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'checkboxgroup,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'checkboxgroup,event' },
            { name: 'focusenter', parameters: 'checkboxgroup,event' },
            { name: 'focusleave', parameters: 'checkboxgroup,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'checkboxgroup' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_CheckboxGroup;
    }(Ext_field_FieldGroupContainer));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_CheckboxGroup.EVENTNAMES);
    //    return Ext_field_FieldGroupContainer.getEventNames(eventnames);
    //}

    var ExtCheckboxgroupMetaData = /** @class */ (function (_super) {
        __extends(ExtCheckboxgroupMetaData, _super);
        function ExtCheckboxgroupMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCheckboxgroupMetaData.getAll = function () {
            ExtCheckboxgroupMetaData.PROPERTIES = Ext_field_CheckboxGroup.getProperties(ExtCheckboxgroupMetaData.PROPERTIES);
            ExtCheckboxgroupMetaData.EVENTS = Ext_field_CheckboxGroup.getEvents(ExtCheckboxgroupMetaData.EVENTS);
            ExtCheckboxgroupMetaData.EVENTS.forEach(function (event) {
                ExtCheckboxgroupMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCheckboxgroupMetaData.PROPERTIES = [];
        ExtCheckboxgroupMetaData.EVENTS = [];
        ExtCheckboxgroupMetaData.EVENTNAMES = [];
        return ExtCheckboxgroupMetaData;
    }(Ext_field_CheckboxGroup));
    (function () { ExtCheckboxgroupMetaData.getAll(); })();
    var ExtCheckboxgroupComponent = /** @class */ (function (_super) {
        __extends(ExtCheckboxgroupComponent, _super);
        function ExtCheckboxgroupComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCheckboxgroupMetaData.PROPERTIES, ExtCheckboxgroupMetaData.EVENTS) || this;
            _this.xtype = 'checkboxgroup';
            return _this;
        }
        ExtCheckboxgroupComponent_1 = ExtCheckboxgroupComponent;
        ExtCheckboxgroupComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCheckboxgroupComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCheckboxgroupComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCheckboxgroupComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCheckboxgroupComponent_1;
        ExtCheckboxgroupComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCheckboxgroupComponent = ExtCheckboxgroupComponent_1 = __decorate([
            core.Component({
                selector: 'ext-checkboxgroup',
                inputs: ExtCheckboxgroupMetaData.PROPERTIES,
                outputs: ExtCheckboxgroupMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCheckboxgroupComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCheckboxgroupComponent);
        return ExtCheckboxgroupComponent;
    }(EngBase));

    var Ext_form_field_ComboBox = /** @class */ (function (_super) {
        __extends(Ext_form_field_ComboBox, _super);
        function Ext_form_field_ComboBox() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_field_ComboBox.getProperties = function (properties) {
            properties = properties.concat(Ext_form_field_ComboBox.PROPERTIES);
            return Ext_field_Select.getProperties(properties);
        };
        Ext_form_field_ComboBox.getEvents = function (events) {
            events = events.concat(Ext_form_field_ComboBox.EVENTS);
            return Ext_field_Select.getEvents(events);
        };
        Ext_form_field_ComboBox.PROPERTIES = [
            'allQuery',
            'anyMatch',
            'autoSelect',
            'caseSensitive',
            'editable',
            'enableRegEx',
            'forceSelection',
            'minChars',
            'primaryFilter',
            'queryCaching',
            'queryDelay',
            'queryMode',
            'queryParam',
            'triggerAction',
            'typeAhead',
            'typeAheadDelay',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_field_ComboBox.EVENTS = [
            { name: 'action', parameters: 'combobox,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepickercreate', parameters: 'combobox,newValue' },
            { name: 'beforequery', parameters: 'queryPlan' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'combobox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'combobox,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'combobox,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'combobox,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'combobox,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'combobox,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'combobox,e' },
            { name: 'focusenter', parameters: 'combobox,event' },
            { name: 'focusleave', parameters: 'combobox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'combobox,e' },
            { name: 'keyup', parameters: 'combobox,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'combobox,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'combobox,e' },
            { name: 'pickercreate', parameters: 'combobox,picker' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'combobox,newValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'combobox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_field_ComboBox;
    }(Ext_field_Select));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_field_ComboBox.EVENTNAMES);
    //    return Ext_field_Select.getEventNames(eventnames);
    //}

    var ExtComboboxMetaData = /** @class */ (function (_super) {
        __extends(ExtComboboxMetaData, _super);
        function ExtComboboxMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtComboboxMetaData.getAll = function () {
            ExtComboboxMetaData.PROPERTIES = Ext_form_field_ComboBox.getProperties(ExtComboboxMetaData.PROPERTIES);
            ExtComboboxMetaData.EVENTS = Ext_form_field_ComboBox.getEvents(ExtComboboxMetaData.EVENTS);
            ExtComboboxMetaData.EVENTS.forEach(function (event) {
                ExtComboboxMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtComboboxMetaData.PROPERTIES = [];
        ExtComboboxMetaData.EVENTS = [];
        ExtComboboxMetaData.EVENTNAMES = [];
        return ExtComboboxMetaData;
    }(Ext_form_field_ComboBox));
    (function () { ExtComboboxMetaData.getAll(); })();
    var ExtComboboxComponent = /** @class */ (function (_super) {
        __extends(ExtComboboxComponent, _super);
        function ExtComboboxComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtComboboxMetaData.PROPERTIES, ExtComboboxMetaData.EVENTS) || this;
            _this.xtype = 'combobox';
            return _this;
        }
        ExtComboboxComponent_1 = ExtComboboxComponent;
        ExtComboboxComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtComboboxComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtComboboxComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtComboboxComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtComboboxComponent_1;
        ExtComboboxComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtComboboxComponent = ExtComboboxComponent_1 = __decorate([
            core.Component({
                selector: 'ext-combobox',
                inputs: ExtComboboxMetaData.PROPERTIES,
                outputs: ExtComboboxMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtComboboxComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtComboboxComponent);
        return ExtComboboxComponent;
    }(EngBase));

    var ExtContainerfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtContainerfieldMetaData, _super);
        function ExtContainerfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtContainerfieldMetaData.getAll = function () {
            ExtContainerfieldMetaData.PROPERTIES = Ext_field_Container.getProperties(ExtContainerfieldMetaData.PROPERTIES);
            ExtContainerfieldMetaData.EVENTS = Ext_field_Container.getEvents(ExtContainerfieldMetaData.EVENTS);
            ExtContainerfieldMetaData.EVENTS.forEach(function (event) {
                ExtContainerfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtContainerfieldMetaData.PROPERTIES = [];
        ExtContainerfieldMetaData.EVENTS = [];
        ExtContainerfieldMetaData.EVENTNAMES = [];
        return ExtContainerfieldMetaData;
    }(Ext_field_Container));
    (function () { ExtContainerfieldMetaData.getAll(); })();
    var ExtContainerfieldComponent = /** @class */ (function (_super) {
        __extends(ExtContainerfieldComponent, _super);
        function ExtContainerfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtContainerfieldMetaData.PROPERTIES, ExtContainerfieldMetaData.EVENTS) || this;
            _this.xtype = 'containerfield';
            return _this;
        }
        ExtContainerfieldComponent_1 = ExtContainerfieldComponent;
        ExtContainerfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtContainerfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtContainerfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtContainerfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtContainerfieldComponent_1;
        ExtContainerfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtContainerfieldComponent = ExtContainerfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-containerfield',
                inputs: ExtContainerfieldMetaData.PROPERTIES,
                outputs: ExtContainerfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtContainerfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtContainerfieldComponent);
        return ExtContainerfieldComponent;
    }(EngBase));

    var Ext_field_DatePicker = /** @class */ (function (_super) {
        __extends(Ext_field_DatePicker, _super);
        function Ext_field_DatePicker() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_DatePicker.getProperties = function (properties) {
            properties = properties.concat(Ext_field_DatePicker.PROPERTIES);
            return Ext_field_Picker.getProperties(properties);
        };
        Ext_field_DatePicker.getEvents = function (events) {
            events = events.concat(Ext_field_DatePicker.EVENTS);
            return Ext_field_Picker.getEvents(events);
        };
        Ext_field_DatePicker.PROPERTIES = [
            'altFormats',
            'dateFormat',
            'destroyPickerOnHide',
            'maxDate',
            'minDate',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_DatePicker.EVENTS = [
            { name: 'action', parameters: 'datefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'datefield,newDate,oldDate' },
            { name: 'clearicontap', parameters: 'datefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'datefield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'datefield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datefield,e' },
            { name: 'focusenter', parameters: 'datefield,event' },
            { name: 'focusleave', parameters: 'datefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'datefield,e' },
            { name: 'keyup', parameters: 'datefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'datefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'datefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_DatePicker;
    }(Ext_field_Picker));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_DatePicker.EVENTNAMES);
    //    return Ext_field_Picker.getEventNames(eventnames);
    //}

    var ExtDatefieldMetaData = /** @class */ (function (_super) {
        __extends(ExtDatefieldMetaData, _super);
        function ExtDatefieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtDatefieldMetaData.getAll = function () {
            ExtDatefieldMetaData.PROPERTIES = Ext_field_DatePicker.getProperties(ExtDatefieldMetaData.PROPERTIES);
            ExtDatefieldMetaData.EVENTS = Ext_field_DatePicker.getEvents(ExtDatefieldMetaData.EVENTS);
            ExtDatefieldMetaData.EVENTS.forEach(function (event) {
                ExtDatefieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtDatefieldMetaData.PROPERTIES = [];
        ExtDatefieldMetaData.EVENTS = [];
        ExtDatefieldMetaData.EVENTNAMES = [];
        return ExtDatefieldMetaData;
    }(Ext_field_DatePicker));
    (function () { ExtDatefieldMetaData.getAll(); })();
    var ExtDatefieldComponent = /** @class */ (function (_super) {
        __extends(ExtDatefieldComponent, _super);
        function ExtDatefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtDatefieldMetaData.PROPERTIES, ExtDatefieldMetaData.EVENTS) || this;
            _this.xtype = 'datefield';
            return _this;
        }
        ExtDatefieldComponent_1 = ExtDatefieldComponent;
        ExtDatefieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtDatefieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtDatefieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtDatefieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtDatefieldComponent_1;
        ExtDatefieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtDatefieldComponent = ExtDatefieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-datefield',
                inputs: ExtDatefieldMetaData.PROPERTIES,
                outputs: ExtDatefieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtDatefieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtDatefieldComponent);
        return ExtDatefieldComponent;
    }(EngBase));

    var Ext_field_Date = /** @class */ (function (_super) {
        __extends(Ext_field_Date, _super);
        function Ext_field_Date() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_Date.getProperties = function (properties) {
            properties = properties.concat(Ext_field_Date.PROPERTIES);
            return Ext_field_Picker.getProperties(properties);
        };
        Ext_field_Date.getEvents = function (events) {
            events = events.concat(Ext_field_Date.EVENTS);
            return Ext_field_Picker.getEvents(events);
        };
        Ext_field_Date.PROPERTIES = [
            'altFormats',
            'dateFormat',
            'destroyPickerOnHide',
            'maxDate',
            'minDate',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_Date.EVENTS = [
            { name: 'action', parameters: 'datefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'datefield,newDate,oldDate' },
            { name: 'clearicontap', parameters: 'datefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'datefield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'datefield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datefield,e' },
            { name: 'focusenter', parameters: 'datefield,event' },
            { name: 'focusleave', parameters: 'datefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'datefield,e' },
            { name: 'keyup', parameters: 'datefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'datefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'datefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_Date;
    }(Ext_field_Picker));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_Date.EVENTNAMES);
    //    return Ext_field_Picker.getEventNames(eventnames);
    //}

    var Ext_form_DatePickerNative = /** @class */ (function (_super) {
        __extends(Ext_form_DatePickerNative, _super);
        function Ext_form_DatePickerNative() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_DatePickerNative.getProperties = function (properties) {
            properties = properties.concat(Ext_form_DatePickerNative.PROPERTIES);
            return Ext_field_Date.getProperties(properties);
        };
        Ext_form_DatePickerNative.getEvents = function (events) {
            events = events.concat(Ext_form_DatePickerNative.EVENTS);
            return Ext_field_Date.getEvents(events);
        };
        Ext_form_DatePickerNative.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_DatePickerNative.EVENTS = [
            { name: 'action', parameters: 'datepickernativefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datepickernativefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datepickernativefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'datepickernativefield,newDate,oldDate' },
            { name: 'clearicontap', parameters: 'datepickernativefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'datepickernativefield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'datepickernativefield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datepickernativefield,e' },
            { name: 'focusenter', parameters: 'datepickernativefield,event' },
            { name: 'focusleave', parameters: 'datepickernativefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'datepickernativefield,e' },
            { name: 'keyup', parameters: 'datepickernativefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'datepickernativefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'datepickernativefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datepickernativefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_DatePickerNative;
    }(Ext_field_Date));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_DatePickerNative.EVENTNAMES);
    //    return Ext_field_Date.getEventNames(eventnames);
    //}

    var ExtDatepickernativefieldMetaData = /** @class */ (function (_super) {
        __extends(ExtDatepickernativefieldMetaData, _super);
        function ExtDatepickernativefieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtDatepickernativefieldMetaData.getAll = function () {
            ExtDatepickernativefieldMetaData.PROPERTIES = Ext_form_DatePickerNative.getProperties(ExtDatepickernativefieldMetaData.PROPERTIES);
            ExtDatepickernativefieldMetaData.EVENTS = Ext_form_DatePickerNative.getEvents(ExtDatepickernativefieldMetaData.EVENTS);
            ExtDatepickernativefieldMetaData.EVENTS.forEach(function (event) {
                ExtDatepickernativefieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtDatepickernativefieldMetaData.PROPERTIES = [];
        ExtDatepickernativefieldMetaData.EVENTS = [];
        ExtDatepickernativefieldMetaData.EVENTNAMES = [];
        return ExtDatepickernativefieldMetaData;
    }(Ext_form_DatePickerNative));
    (function () { ExtDatepickernativefieldMetaData.getAll(); })();
    var ExtDatepickernativefieldComponent = /** @class */ (function (_super) {
        __extends(ExtDatepickernativefieldComponent, _super);
        function ExtDatepickernativefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtDatepickernativefieldMetaData.PROPERTIES, ExtDatepickernativefieldMetaData.EVENTS) || this;
            _this.xtype = 'datepickernativefield';
            return _this;
        }
        ExtDatepickernativefieldComponent_1 = ExtDatepickernativefieldComponent;
        ExtDatepickernativefieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtDatepickernativefieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtDatepickernativefieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtDatepickernativefieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtDatepickernativefieldComponent_1;
        ExtDatepickernativefieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtDatepickernativefieldComponent = ExtDatepickernativefieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-datepickernativefield',
                inputs: ExtDatepickernativefieldMetaData.PROPERTIES,
                outputs: ExtDatepickernativefieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtDatepickernativefieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtDatepickernativefieldComponent);
        return ExtDatepickernativefieldComponent;
    }(EngBase));

    var Ext_form_Display = /** @class */ (function (_super) {
        __extends(Ext_form_Display, _super);
        function Ext_form_Display() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Display.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Display.PROPERTIES);
            return Ext_field_Field.getProperties(properties);
        };
        Ext_form_Display.getEvents = function (events) {
            events = events.concat(Ext_form_Display.EVENTS);
            return Ext_field_Field.getEvents(events);
        };
        Ext_form_Display.PROPERTIES = [
            'encodeHtml',
            'focusable',
            'readOnly',
            'renderer',
            'scope',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Display.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'displayfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'displayfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'displayfield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'displayfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'displayfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'displayfield,event' },
            { name: 'focusenter', parameters: 'displayfield,event' },
            { name: 'focusleave', parameters: 'displayfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'displayfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Display;
    }(Ext_field_Field));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Display.EVENTNAMES);
    //    return Ext_field_Field.getEventNames(eventnames);
    //}

    var ExtDisplayfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtDisplayfieldMetaData, _super);
        function ExtDisplayfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtDisplayfieldMetaData.getAll = function () {
            ExtDisplayfieldMetaData.PROPERTIES = Ext_form_Display.getProperties(ExtDisplayfieldMetaData.PROPERTIES);
            ExtDisplayfieldMetaData.EVENTS = Ext_form_Display.getEvents(ExtDisplayfieldMetaData.EVENTS);
            ExtDisplayfieldMetaData.EVENTS.forEach(function (event) {
                ExtDisplayfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtDisplayfieldMetaData.PROPERTIES = [];
        ExtDisplayfieldMetaData.EVENTS = [];
        ExtDisplayfieldMetaData.EVENTNAMES = [];
        return ExtDisplayfieldMetaData;
    }(Ext_form_Display));
    (function () { ExtDisplayfieldMetaData.getAll(); })();
    var ExtDisplayfieldComponent = /** @class */ (function (_super) {
        __extends(ExtDisplayfieldComponent, _super);
        function ExtDisplayfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtDisplayfieldMetaData.PROPERTIES, ExtDisplayfieldMetaData.EVENTS) || this;
            _this.xtype = 'displayfield';
            return _this;
        }
        ExtDisplayfieldComponent_1 = ExtDisplayfieldComponent;
        ExtDisplayfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtDisplayfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtDisplayfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtDisplayfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtDisplayfieldComponent_1;
        ExtDisplayfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtDisplayfieldComponent = ExtDisplayfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-displayfield',
                inputs: ExtDisplayfieldMetaData.PROPERTIES,
                outputs: ExtDisplayfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtDisplayfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtDisplayfieldComponent);
        return ExtDisplayfieldComponent;
    }(EngBase));

    var Ext_form_Email = /** @class */ (function (_super) {
        __extends(Ext_form_Email, _super);
        function Ext_form_Email() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Email.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Email.PROPERTIES);
            return Ext_field_Text.getProperties(properties);
        };
        Ext_form_Email.getEvents = function (events) {
            events = events.concat(Ext_form_Email.EVENTS);
            return Ext_field_Text.getEvents(events);
        };
        Ext_form_Email.PROPERTIES = [
            'autoCapitalize',
            'inputType',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Email.EVENTS = [
            { name: 'action', parameters: 'emailfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'emailfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'emailfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'emailfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'emailfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'emailfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'emailfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'emailfield,e' },
            { name: 'focusenter', parameters: 'emailfield,event' },
            { name: 'focusleave', parameters: 'emailfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'emailfield,e' },
            { name: 'keyup', parameters: 'emailfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'emailfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'emailfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'emailfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Email;
    }(Ext_field_Text));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Email.EVENTNAMES);
    //    return Ext_field_Text.getEventNames(eventnames);
    //}

    var ExtEmailfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtEmailfieldMetaData, _super);
        function ExtEmailfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtEmailfieldMetaData.getAll = function () {
            ExtEmailfieldMetaData.PROPERTIES = Ext_form_Email.getProperties(ExtEmailfieldMetaData.PROPERTIES);
            ExtEmailfieldMetaData.EVENTS = Ext_form_Email.getEvents(ExtEmailfieldMetaData.EVENTS);
            ExtEmailfieldMetaData.EVENTS.forEach(function (event) {
                ExtEmailfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtEmailfieldMetaData.PROPERTIES = [];
        ExtEmailfieldMetaData.EVENTS = [];
        ExtEmailfieldMetaData.EVENTNAMES = [];
        return ExtEmailfieldMetaData;
    }(Ext_form_Email));
    (function () { ExtEmailfieldMetaData.getAll(); })();
    var ExtEmailfieldComponent = /** @class */ (function (_super) {
        __extends(ExtEmailfieldComponent, _super);
        function ExtEmailfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtEmailfieldMetaData.PROPERTIES, ExtEmailfieldMetaData.EVENTS) || this;
            _this.xtype = 'emailfield';
            return _this;
        }
        ExtEmailfieldComponent_1 = ExtEmailfieldComponent;
        ExtEmailfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtEmailfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtEmailfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtEmailfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtEmailfieldComponent_1;
        ExtEmailfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtEmailfieldComponent = ExtEmailfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-emailfield',
                inputs: ExtEmailfieldMetaData.PROPERTIES,
                outputs: ExtEmailfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtEmailfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtEmailfieldComponent);
        return ExtEmailfieldComponent;
    }(EngBase));

    var Ext_form_Field = /** @class */ (function (_super) {
        __extends(Ext_form_Field, _super);
        function Ext_form_Field() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Field.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Field.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_form_Field.getEvents = function (events) {
            events = events.concat(Ext_form_Field.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_form_Field.PROPERTIES = [
            'autoFitErrors',
            'bodyAlign',
            'dataType',
            'disabled',
            'error',
            'errorMessage',
            'errorTarget',
            'errorTip',
            'errorTpl',
            'fullscreen',
            'inline',
            'label',
            'labelAlign',
            'labelCls',
            'labelMinWidth',
            'labelTextAlign',
            'labelWidth',
            'labelWrap',
            'name',
            'required',
            'requiredMessage',
            'sideError',
            'tipError',
            'titleError',
            'underError',
            'validateDisabled',
            'validationMessage',
            'validators',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Field.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'field' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'field,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'field,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'field,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'field,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'field,event' },
            { name: 'focusenter', parameters: 'field,event' },
            { name: 'focusleave', parameters: 'field,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'field' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Field;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Field.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtFieldMetaData = /** @class */ (function (_super) {
        __extends(ExtFieldMetaData, _super);
        function ExtFieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtFieldMetaData.getAll = function () {
            ExtFieldMetaData.PROPERTIES = Ext_form_Field.getProperties(ExtFieldMetaData.PROPERTIES);
            ExtFieldMetaData.EVENTS = Ext_form_Field.getEvents(ExtFieldMetaData.EVENTS);
            ExtFieldMetaData.EVENTS.forEach(function (event) {
                ExtFieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtFieldMetaData.PROPERTIES = [];
        ExtFieldMetaData.EVENTS = [];
        ExtFieldMetaData.EVENTNAMES = [];
        return ExtFieldMetaData;
    }(Ext_form_Field));
    (function () { ExtFieldMetaData.getAll(); })();
    var ExtFieldComponent = /** @class */ (function (_super) {
        __extends(ExtFieldComponent, _super);
        function ExtFieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtFieldMetaData.PROPERTIES, ExtFieldMetaData.EVENTS) || this;
            _this.xtype = 'field';
            return _this;
        }
        ExtFieldComponent_1 = ExtFieldComponent;
        ExtFieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtFieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtFieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtFieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtFieldComponent_1;
        ExtFieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtFieldComponent = ExtFieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-field',
                inputs: ExtFieldMetaData.PROPERTIES,
                outputs: ExtFieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtFieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtFieldComponent);
        return ExtFieldComponent;
    }(EngBase));

    var ExtGroupcontainerMetaData = /** @class */ (function (_super) {
        __extends(ExtGroupcontainerMetaData, _super);
        function ExtGroupcontainerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtGroupcontainerMetaData.getAll = function () {
            ExtGroupcontainerMetaData.PROPERTIES = Ext_field_FieldGroupContainer.getProperties(ExtGroupcontainerMetaData.PROPERTIES);
            ExtGroupcontainerMetaData.EVENTS = Ext_field_FieldGroupContainer.getEvents(ExtGroupcontainerMetaData.EVENTS);
            ExtGroupcontainerMetaData.EVENTS.forEach(function (event) {
                ExtGroupcontainerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtGroupcontainerMetaData.PROPERTIES = [];
        ExtGroupcontainerMetaData.EVENTS = [];
        ExtGroupcontainerMetaData.EVENTNAMES = [];
        return ExtGroupcontainerMetaData;
    }(Ext_field_FieldGroupContainer));
    (function () { ExtGroupcontainerMetaData.getAll(); })();
    var ExtGroupcontainerComponent = /** @class */ (function (_super) {
        __extends(ExtGroupcontainerComponent, _super);
        function ExtGroupcontainerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtGroupcontainerMetaData.PROPERTIES, ExtGroupcontainerMetaData.EVENTS) || this;
            _this.xtype = 'groupcontainer';
            return _this;
        }
        ExtGroupcontainerComponent_1 = ExtGroupcontainerComponent;
        ExtGroupcontainerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtGroupcontainerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtGroupcontainerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtGroupcontainerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtGroupcontainerComponent_1;
        ExtGroupcontainerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtGroupcontainerComponent = ExtGroupcontainerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-groupcontainer',
                inputs: ExtGroupcontainerMetaData.PROPERTIES,
                outputs: ExtGroupcontainerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtGroupcontainerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtGroupcontainerComponent);
        return ExtGroupcontainerComponent;
    }(EngBase));

    var Ext_field_File = /** @class */ (function (_super) {
        __extends(Ext_field_File, _super);
        function Ext_field_File() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_File.getProperties = function (properties) {
            properties = properties.concat(Ext_field_File.PROPERTIES);
            return Ext_field_Text.getProperties(properties);
        };
        Ext_field_File.getEvents = function (events) {
            events = events.concat(Ext_field_File.EVENTS);
            return Ext_field_Text.getEvents(events);
        };
        Ext_field_File.PROPERTIES = [
            'accept',
            'capture',
            'multiple',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_File.EVENTS = [
            { name: 'action', parameters: 'filefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'filefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'filefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'filefield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'filefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'filefield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'filefield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'filefield,e' },
            { name: 'focusenter', parameters: 'filefield,event' },
            { name: 'focusleave', parameters: 'filefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'filefield,e' },
            { name: 'keyup', parameters: 'filefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'filefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'filefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'filefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_File;
    }(Ext_field_Text));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_File.EVENTNAMES);
    //    return Ext_field_Text.getEventNames(eventnames);
    //}

    var ExtFilefieldMetaData = /** @class */ (function (_super) {
        __extends(ExtFilefieldMetaData, _super);
        function ExtFilefieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtFilefieldMetaData.getAll = function () {
            ExtFilefieldMetaData.PROPERTIES = Ext_field_File.getProperties(ExtFilefieldMetaData.PROPERTIES);
            ExtFilefieldMetaData.EVENTS = Ext_field_File.getEvents(ExtFilefieldMetaData.EVENTS);
            ExtFilefieldMetaData.EVENTS.forEach(function (event) {
                ExtFilefieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtFilefieldMetaData.PROPERTIES = [];
        ExtFilefieldMetaData.EVENTS = [];
        ExtFilefieldMetaData.EVENTNAMES = [];
        return ExtFilefieldMetaData;
    }(Ext_field_File));
    (function () { ExtFilefieldMetaData.getAll(); })();
    var ExtFilefieldComponent = /** @class */ (function (_super) {
        __extends(ExtFilefieldComponent, _super);
        function ExtFilefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtFilefieldMetaData.PROPERTIES, ExtFilefieldMetaData.EVENTS) || this;
            _this.xtype = 'filefield';
            return _this;
        }
        ExtFilefieldComponent_1 = ExtFilefieldComponent;
        ExtFilefieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtFilefieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtFilefieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtFilefieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtFilefieldComponent_1;
        ExtFilefieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtFilefieldComponent = ExtFilefieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-filefield',
                inputs: ExtFilefieldMetaData.PROPERTIES,
                outputs: ExtFilefieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtFilefieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtFilefieldComponent);
        return ExtFilefieldComponent;
    }(EngBase));

    var Ext_field_FileButton = /** @class */ (function (_super) {
        __extends(Ext_field_FileButton, _super);
        function Ext_field_FileButton() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_FileButton.getProperties = function (properties) {
            properties = properties.concat(Ext_field_FileButton.PROPERTIES);
            return Ext_Button.getProperties(properties);
        };
        Ext_field_FileButton.getEvents = function (events) {
            events = events.concat(Ext_field_FileButton.EVENTS);
            return Ext_Button.getEvents(events);
        };
        Ext_field_FileButton.PROPERTIES = [
            'accept',
            'capture',
            'multiple',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_FileButton.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'filebutton' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'filebutton,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'filebutton,newValue,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'filebutton,event' },
            { name: 'focusenter', parameters: 'filebutton,event' },
            { name: 'focusleave', parameters: 'filebutton,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'pressedchange', parameters: 'sender,value,oldValue' },
            { name: 'release', parameters: 'filebutton,e' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'filebutton,e' },
            { name: 'tofront', parameters: 'filebutton' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_FileButton;
    }(Ext_Button));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_FileButton.EVENTNAMES);
    //    return Ext_Button.getEventNames(eventnames);
    //}

    var ExtFilebuttonMetaData = /** @class */ (function (_super) {
        __extends(ExtFilebuttonMetaData, _super);
        function ExtFilebuttonMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtFilebuttonMetaData.getAll = function () {
            ExtFilebuttonMetaData.PROPERTIES = Ext_field_FileButton.getProperties(ExtFilebuttonMetaData.PROPERTIES);
            ExtFilebuttonMetaData.EVENTS = Ext_field_FileButton.getEvents(ExtFilebuttonMetaData.EVENTS);
            ExtFilebuttonMetaData.EVENTS.forEach(function (event) {
                ExtFilebuttonMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtFilebuttonMetaData.PROPERTIES = [];
        ExtFilebuttonMetaData.EVENTS = [];
        ExtFilebuttonMetaData.EVENTNAMES = [];
        return ExtFilebuttonMetaData;
    }(Ext_field_FileButton));
    (function () { ExtFilebuttonMetaData.getAll(); })();
    var ExtFilebuttonComponent = /** @class */ (function (_super) {
        __extends(ExtFilebuttonComponent, _super);
        function ExtFilebuttonComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtFilebuttonMetaData.PROPERTIES, ExtFilebuttonMetaData.EVENTS) || this;
            _this.xtype = 'filebutton';
            return _this;
        }
        ExtFilebuttonComponent_1 = ExtFilebuttonComponent;
        ExtFilebuttonComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtFilebuttonComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtFilebuttonComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtFilebuttonComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtFilebuttonComponent_1;
        ExtFilebuttonComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtFilebuttonComponent = ExtFilebuttonComponent_1 = __decorate([
            core.Component({
                selector: 'ext-filebutton',
                inputs: ExtFilebuttonMetaData.PROPERTIES,
                outputs: ExtFilebuttonMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtFilebuttonComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtFilebuttonComponent);
        return ExtFilebuttonComponent;
    }(EngBase));

    var Ext_form_Hidden = /** @class */ (function (_super) {
        __extends(Ext_form_Hidden, _super);
        function Ext_form_Hidden() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Hidden.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Hidden.PROPERTIES);
            return Ext_field_Input.getProperties(properties);
        };
        Ext_form_Hidden.getEvents = function (events) {
            events = events.concat(Ext_form_Hidden.EVENTS);
            return Ext_field_Input.getEvents(events);
        };
        Ext_form_Hidden.PROPERTIES = [
            'inputType',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Hidden.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'hiddenfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'hiddenfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'hiddenfield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'hiddenfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'hiddenfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'hiddenfield,event' },
            { name: 'focusenter', parameters: 'hiddenfield,event' },
            { name: 'focusleave', parameters: 'hiddenfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'hiddenfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Hidden;
    }(Ext_field_Input));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Hidden.EVENTNAMES);
    //    return Ext_field_Input.getEventNames(eventnames);
    //}

    var ExtHiddenfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtHiddenfieldMetaData, _super);
        function ExtHiddenfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtHiddenfieldMetaData.getAll = function () {
            ExtHiddenfieldMetaData.PROPERTIES = Ext_form_Hidden.getProperties(ExtHiddenfieldMetaData.PROPERTIES);
            ExtHiddenfieldMetaData.EVENTS = Ext_form_Hidden.getEvents(ExtHiddenfieldMetaData.EVENTS);
            ExtHiddenfieldMetaData.EVENTS.forEach(function (event) {
                ExtHiddenfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtHiddenfieldMetaData.PROPERTIES = [];
        ExtHiddenfieldMetaData.EVENTS = [];
        ExtHiddenfieldMetaData.EVENTNAMES = [];
        return ExtHiddenfieldMetaData;
    }(Ext_form_Hidden));
    (function () { ExtHiddenfieldMetaData.getAll(); })();
    var ExtHiddenfieldComponent = /** @class */ (function (_super) {
        __extends(ExtHiddenfieldComponent, _super);
        function ExtHiddenfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtHiddenfieldMetaData.PROPERTIES, ExtHiddenfieldMetaData.EVENTS) || this;
            _this.xtype = 'hiddenfield';
            return _this;
        }
        ExtHiddenfieldComponent_1 = ExtHiddenfieldComponent;
        ExtHiddenfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtHiddenfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtHiddenfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtHiddenfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtHiddenfieldComponent_1;
        ExtHiddenfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtHiddenfieldComponent = ExtHiddenfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-hiddenfield',
                inputs: ExtHiddenfieldMetaData.PROPERTIES,
                outputs: ExtHiddenfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtHiddenfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtHiddenfieldComponent);
        return ExtHiddenfieldComponent;
    }(EngBase));

    var ExtInputfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtInputfieldMetaData, _super);
        function ExtInputfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtInputfieldMetaData.getAll = function () {
            ExtInputfieldMetaData.PROPERTIES = Ext_field_Input.getProperties(ExtInputfieldMetaData.PROPERTIES);
            ExtInputfieldMetaData.EVENTS = Ext_field_Input.getEvents(ExtInputfieldMetaData.EVENTS);
            ExtInputfieldMetaData.EVENTS.forEach(function (event) {
                ExtInputfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtInputfieldMetaData.PROPERTIES = [];
        ExtInputfieldMetaData.EVENTS = [];
        ExtInputfieldMetaData.EVENTNAMES = [];
        return ExtInputfieldMetaData;
    }(Ext_field_Input));
    (function () { ExtInputfieldMetaData.getAll(); })();
    var ExtInputfieldComponent = /** @class */ (function (_super) {
        __extends(ExtInputfieldComponent, _super);
        function ExtInputfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtInputfieldMetaData.PROPERTIES, ExtInputfieldMetaData.EVENTS) || this;
            _this.xtype = 'inputfield';
            return _this;
        }
        ExtInputfieldComponent_1 = ExtInputfieldComponent;
        ExtInputfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtInputfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtInputfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtInputfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtInputfieldComponent_1;
        ExtInputfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtInputfieldComponent = ExtInputfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-inputfield',
                inputs: ExtInputfieldMetaData.PROPERTIES,
                outputs: ExtInputfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtInputfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtInputfieldComponent);
        return ExtInputfieldComponent;
    }(EngBase));

    var Ext_form_Number = /** @class */ (function (_super) {
        __extends(Ext_form_Number, _super);
        function Ext_form_Number() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Number.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Number.PROPERTIES);
            return Ext_field_Text.getProperties(properties);
        };
        Ext_form_Number.getEvents = function (events) {
            events = events.concat(Ext_form_Number.EVENTS);
            return Ext_field_Text.getEvents(events);
        };
        Ext_form_Number.PROPERTIES = [
            'decimals',
            'decimalSeparator',
            'decimalsText',
            'inputType',
            'maxValue',
            'maxValueText',
            'minValue',
            'minValueText',
            'trim',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Number.EVENTS = [
            { name: 'action', parameters: 'numberfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'numberfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'numberfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'numberfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'numberfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'numberfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'numberfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'numberfield,e' },
            { name: 'focusenter', parameters: 'numberfield,event' },
            { name: 'focusleave', parameters: 'numberfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'numberfield,e' },
            { name: 'keyup', parameters: 'numberfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'numberfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'numberfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'numberfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Number;
    }(Ext_field_Text));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Number.EVENTNAMES);
    //    return Ext_field_Text.getEventNames(eventnames);
    //}

    var ExtNumberfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtNumberfieldMetaData, _super);
        function ExtNumberfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtNumberfieldMetaData.getAll = function () {
            ExtNumberfieldMetaData.PROPERTIES = Ext_form_Number.getProperties(ExtNumberfieldMetaData.PROPERTIES);
            ExtNumberfieldMetaData.EVENTS = Ext_form_Number.getEvents(ExtNumberfieldMetaData.EVENTS);
            ExtNumberfieldMetaData.EVENTS.forEach(function (event) {
                ExtNumberfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtNumberfieldMetaData.PROPERTIES = [];
        ExtNumberfieldMetaData.EVENTS = [];
        ExtNumberfieldMetaData.EVENTNAMES = [];
        return ExtNumberfieldMetaData;
    }(Ext_form_Number));
    (function () { ExtNumberfieldMetaData.getAll(); })();
    var ExtNumberfieldComponent = /** @class */ (function (_super) {
        __extends(ExtNumberfieldComponent, _super);
        function ExtNumberfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtNumberfieldMetaData.PROPERTIES, ExtNumberfieldMetaData.EVENTS) || this;
            _this.xtype = 'numberfield';
            return _this;
        }
        ExtNumberfieldComponent_1 = ExtNumberfieldComponent;
        ExtNumberfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtNumberfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtNumberfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtNumberfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtNumberfieldComponent_1;
        ExtNumberfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtNumberfieldComponent = ExtNumberfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-numberfield',
                inputs: ExtNumberfieldMetaData.PROPERTIES,
                outputs: ExtNumberfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtNumberfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtNumberfieldComponent);
        return ExtNumberfieldComponent;
    }(EngBase));

    var ExtFieldpanelMetaData = /** @class */ (function (_super) {
        __extends(ExtFieldpanelMetaData, _super);
        function ExtFieldpanelMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtFieldpanelMetaData.getAll = function () {
            ExtFieldpanelMetaData.PROPERTIES = Ext_field_Panel.getProperties(ExtFieldpanelMetaData.PROPERTIES);
            ExtFieldpanelMetaData.EVENTS = Ext_field_Panel.getEvents(ExtFieldpanelMetaData.EVENTS);
            ExtFieldpanelMetaData.EVENTS.forEach(function (event) {
                ExtFieldpanelMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtFieldpanelMetaData.PROPERTIES = [];
        ExtFieldpanelMetaData.EVENTS = [];
        ExtFieldpanelMetaData.EVENTNAMES = [];
        return ExtFieldpanelMetaData;
    }(Ext_field_Panel));
    (function () { ExtFieldpanelMetaData.getAll(); })();
    var ExtFieldpanelComponent = /** @class */ (function (_super) {
        __extends(ExtFieldpanelComponent, _super);
        function ExtFieldpanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtFieldpanelMetaData.PROPERTIES, ExtFieldpanelMetaData.EVENTS) || this;
            _this.xtype = 'fieldpanel';
            return _this;
        }
        ExtFieldpanelComponent_1 = ExtFieldpanelComponent;
        ExtFieldpanelComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtFieldpanelComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtFieldpanelComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtFieldpanelComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtFieldpanelComponent_1;
        ExtFieldpanelComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtFieldpanelComponent = ExtFieldpanelComponent_1 = __decorate([
            core.Component({
                selector: 'ext-fieldpanel',
                inputs: ExtFieldpanelMetaData.PROPERTIES,
                outputs: ExtFieldpanelMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtFieldpanelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtFieldpanelComponent);
        return ExtFieldpanelComponent;
    }(EngBase));

    var Ext_form_Password = /** @class */ (function (_super) {
        __extends(Ext_form_Password, _super);
        function Ext_form_Password() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Password.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Password.PROPERTIES);
            return Ext_field_Text.getProperties(properties);
        };
        Ext_form_Password.getEvents = function (events) {
            events = events.concat(Ext_form_Password.EVENTS);
            return Ext_field_Text.getEvents(events);
        };
        Ext_form_Password.PROPERTIES = [
            'autoCapitalize',
            'inputType',
            'revealable',
            'revealed',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Password.EVENTS = [
            { name: 'action', parameters: 'passwordfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'passwordfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'passwordfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'passwordfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'passwordfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'passwordfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'passwordfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'passwordfield,e' },
            { name: 'focusenter', parameters: 'passwordfield,event' },
            { name: 'focusleave', parameters: 'passwordfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'passwordfield,e' },
            { name: 'keyup', parameters: 'passwordfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'passwordfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'passwordfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'passwordfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Password;
    }(Ext_field_Text));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Password.EVENTNAMES);
    //    return Ext_field_Text.getEventNames(eventnames);
    //}

    var ExtPasswordfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtPasswordfieldMetaData, _super);
        function ExtPasswordfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPasswordfieldMetaData.getAll = function () {
            ExtPasswordfieldMetaData.PROPERTIES = Ext_form_Password.getProperties(ExtPasswordfieldMetaData.PROPERTIES);
            ExtPasswordfieldMetaData.EVENTS = Ext_form_Password.getEvents(ExtPasswordfieldMetaData.EVENTS);
            ExtPasswordfieldMetaData.EVENTS.forEach(function (event) {
                ExtPasswordfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPasswordfieldMetaData.PROPERTIES = [];
        ExtPasswordfieldMetaData.EVENTS = [];
        ExtPasswordfieldMetaData.EVENTNAMES = [];
        return ExtPasswordfieldMetaData;
    }(Ext_form_Password));
    (function () { ExtPasswordfieldMetaData.getAll(); })();
    var ExtPasswordfieldComponent = /** @class */ (function (_super) {
        __extends(ExtPasswordfieldComponent, _super);
        function ExtPasswordfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPasswordfieldMetaData.PROPERTIES, ExtPasswordfieldMetaData.EVENTS) || this;
            _this.xtype = 'passwordfield';
            return _this;
        }
        ExtPasswordfieldComponent_1 = ExtPasswordfieldComponent;
        ExtPasswordfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPasswordfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPasswordfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPasswordfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPasswordfieldComponent_1;
        ExtPasswordfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPasswordfieldComponent = ExtPasswordfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-passwordfield',
                inputs: ExtPasswordfieldMetaData.PROPERTIES,
                outputs: ExtPasswordfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPasswordfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPasswordfieldComponent);
        return ExtPasswordfieldComponent;
    }(EngBase));

    var ExtPickerfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtPickerfieldMetaData, _super);
        function ExtPickerfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPickerfieldMetaData.getAll = function () {
            ExtPickerfieldMetaData.PROPERTIES = Ext_field_Picker.getProperties(ExtPickerfieldMetaData.PROPERTIES);
            ExtPickerfieldMetaData.EVENTS = Ext_field_Picker.getEvents(ExtPickerfieldMetaData.EVENTS);
            ExtPickerfieldMetaData.EVENTS.forEach(function (event) {
                ExtPickerfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPickerfieldMetaData.PROPERTIES = [];
        ExtPickerfieldMetaData.EVENTS = [];
        ExtPickerfieldMetaData.EVENTNAMES = [];
        return ExtPickerfieldMetaData;
    }(Ext_field_Picker));
    (function () { ExtPickerfieldMetaData.getAll(); })();
    var ExtPickerfieldComponent = /** @class */ (function (_super) {
        __extends(ExtPickerfieldComponent, _super);
        function ExtPickerfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPickerfieldMetaData.PROPERTIES, ExtPickerfieldMetaData.EVENTS) || this;
            _this.xtype = 'pickerfield';
            return _this;
        }
        ExtPickerfieldComponent_1 = ExtPickerfieldComponent;
        ExtPickerfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPickerfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPickerfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPickerfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPickerfieldComponent_1;
        ExtPickerfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPickerfieldComponent = ExtPickerfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pickerfield',
                inputs: ExtPickerfieldMetaData.PROPERTIES,
                outputs: ExtPickerfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPickerfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPickerfieldComponent);
        return ExtPickerfieldComponent;
    }(EngBase));

    var Ext_field_Checkbox = /** @class */ (function (_super) {
        __extends(Ext_field_Checkbox, _super);
        function Ext_field_Checkbox() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_Checkbox.getProperties = function (properties) {
            properties = properties.concat(Ext_field_Checkbox.PROPERTIES);
            return Ext_field_Input.getProperties(properties);
        };
        Ext_field_Checkbox.getEvents = function (events) {
            events = events.concat(Ext_field_Checkbox.EVENTS);
            return Ext_field_Input.getEvents(events);
        };
        Ext_field_Checkbox.PROPERTIES = [
            'checked',
            'labelMaskTap',
            'publishes',
            'shareableName',
            'twoWayBindable',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_Checkbox.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'checkbox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'checkbox,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'checkbox,newValue,oldValue' },
            { name: 'check', parameters: 'checkbox' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'checkbox,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'checkbox,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'checkbox,event' },
            { name: 'focusenter', parameters: 'checkbox,event' },
            { name: 'focusleave', parameters: 'checkbox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'checkbox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'uncheck', parameters: 'checkbox' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_Checkbox;
    }(Ext_field_Input));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_Checkbox.EVENTNAMES);
    //    return Ext_field_Input.getEventNames(eventnames);
    //}

    var Ext_form_Radio = /** @class */ (function (_super) {
        __extends(Ext_form_Radio, _super);
        function Ext_form_Radio() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Radio.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Radio.PROPERTIES);
            return Ext_field_Checkbox.getProperties(properties);
        };
        Ext_form_Radio.getEvents = function (events) {
            events = events.concat(Ext_form_Radio.EVENTS);
            return Ext_field_Checkbox.getEvents(events);
        };
        Ext_form_Radio.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Radio.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'radio' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'radio,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'radio,newValue,oldValue' },
            { name: 'check', parameters: 'radio' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'radio,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'radio,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'radio,event' },
            { name: 'focusenter', parameters: 'radio,event' },
            { name: 'focusleave', parameters: 'radio,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'radio' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'uncheck', parameters: 'radio' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Radio;
    }(Ext_field_Checkbox));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Radio.EVENTNAMES);
    //    return Ext_field_Checkbox.getEventNames(eventnames);
    //}

    var ExtRadioMetaData = /** @class */ (function (_super) {
        __extends(ExtRadioMetaData, _super);
        function ExtRadioMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtRadioMetaData.getAll = function () {
            ExtRadioMetaData.PROPERTIES = Ext_form_Radio.getProperties(ExtRadioMetaData.PROPERTIES);
            ExtRadioMetaData.EVENTS = Ext_form_Radio.getEvents(ExtRadioMetaData.EVENTS);
            ExtRadioMetaData.EVENTS.forEach(function (event) {
                ExtRadioMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtRadioMetaData.PROPERTIES = [];
        ExtRadioMetaData.EVENTS = [];
        ExtRadioMetaData.EVENTNAMES = [];
        return ExtRadioMetaData;
    }(Ext_form_Radio));
    (function () { ExtRadioMetaData.getAll(); })();
    var ExtRadioComponent = /** @class */ (function (_super) {
        __extends(ExtRadioComponent, _super);
        function ExtRadioComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtRadioMetaData.PROPERTIES, ExtRadioMetaData.EVENTS) || this;
            _this.xtype = 'radio';
            return _this;
        }
        ExtRadioComponent_1 = ExtRadioComponent;
        ExtRadioComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtRadioComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtRadioComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtRadioComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtRadioComponent_1;
        ExtRadioComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtRadioComponent = ExtRadioComponent_1 = __decorate([
            core.Component({
                selector: 'ext-radio',
                inputs: ExtRadioMetaData.PROPERTIES,
                outputs: ExtRadioMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtRadioComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtRadioComponent);
        return ExtRadioComponent;
    }(EngBase));

    var Ext_field_RadioGroup = /** @class */ (function (_super) {
        __extends(Ext_field_RadioGroup, _super);
        function Ext_field_RadioGroup() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_RadioGroup.getProperties = function (properties) {
            properties = properties.concat(Ext_field_RadioGroup.PROPERTIES);
            return Ext_field_FieldGroupContainer.getProperties(properties);
        };
        Ext_field_RadioGroup.getEvents = function (events) {
            events = events.concat(Ext_field_RadioGroup.EVENTS);
            return Ext_field_FieldGroupContainer.getEvents(events);
        };
        Ext_field_RadioGroup.PROPERTIES = [
            'simpleValue',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_RadioGroup.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'radiogroup' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'radiogroup,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'radiogroup,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'radiogroup,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'radiogroup,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'radiogroup,event' },
            { name: 'focusenter', parameters: 'radiogroup,event' },
            { name: 'focusleave', parameters: 'radiogroup,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'radiogroup' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_RadioGroup;
    }(Ext_field_FieldGroupContainer));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_RadioGroup.EVENTNAMES);
    //    return Ext_field_FieldGroupContainer.getEventNames(eventnames);
    //}

    var ExtRadiogroupMetaData = /** @class */ (function (_super) {
        __extends(ExtRadiogroupMetaData, _super);
        function ExtRadiogroupMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtRadiogroupMetaData.getAll = function () {
            ExtRadiogroupMetaData.PROPERTIES = Ext_field_RadioGroup.getProperties(ExtRadiogroupMetaData.PROPERTIES);
            ExtRadiogroupMetaData.EVENTS = Ext_field_RadioGroup.getEvents(ExtRadiogroupMetaData.EVENTS);
            ExtRadiogroupMetaData.EVENTS.forEach(function (event) {
                ExtRadiogroupMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtRadiogroupMetaData.PROPERTIES = [];
        ExtRadiogroupMetaData.EVENTS = [];
        ExtRadiogroupMetaData.EVENTNAMES = [];
        return ExtRadiogroupMetaData;
    }(Ext_field_RadioGroup));
    (function () { ExtRadiogroupMetaData.getAll(); })();
    var ExtRadiogroupComponent = /** @class */ (function (_super) {
        __extends(ExtRadiogroupComponent, _super);
        function ExtRadiogroupComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtRadiogroupMetaData.PROPERTIES, ExtRadiogroupMetaData.EVENTS) || this;
            _this.xtype = 'radiogroup';
            return _this;
        }
        ExtRadiogroupComponent_1 = ExtRadiogroupComponent;
        ExtRadiogroupComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtRadiogroupComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtRadiogroupComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtRadiogroupComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtRadiogroupComponent_1;
        ExtRadiogroupComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtRadiogroupComponent = ExtRadiogroupComponent_1 = __decorate([
            core.Component({
                selector: 'ext-radiogroup',
                inputs: ExtRadiogroupMetaData.PROPERTIES,
                outputs: ExtRadiogroupMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtRadiogroupComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtRadiogroupComponent);
        return ExtRadiogroupComponent;
    }(EngBase));

    var Ext_form_Search = /** @class */ (function (_super) {
        __extends(Ext_form_Search, _super);
        function Ext_form_Search() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Search.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Search.PROPERTIES);
            return Ext_field_Text.getProperties(properties);
        };
        Ext_form_Search.getEvents = function (events) {
            events = events.concat(Ext_form_Search.EVENTS);
            return Ext_field_Text.getEvents(events);
        };
        Ext_form_Search.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Search.EVENTS = [
            { name: 'action', parameters: 'searchfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'searchfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'searchfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'searchfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'searchfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'searchfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'searchfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'searchfield,e' },
            { name: 'focusenter', parameters: 'searchfield,event' },
            { name: 'focusleave', parameters: 'searchfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'searchfield,e' },
            { name: 'keyup', parameters: 'searchfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'searchfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'searchfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'searchfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Search;
    }(Ext_field_Text));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Search.EVENTNAMES);
    //    return Ext_field_Text.getEventNames(eventnames);
    //}

    var ExtSearchfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtSearchfieldMetaData, _super);
        function ExtSearchfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSearchfieldMetaData.getAll = function () {
            ExtSearchfieldMetaData.PROPERTIES = Ext_form_Search.getProperties(ExtSearchfieldMetaData.PROPERTIES);
            ExtSearchfieldMetaData.EVENTS = Ext_form_Search.getEvents(ExtSearchfieldMetaData.EVENTS);
            ExtSearchfieldMetaData.EVENTS.forEach(function (event) {
                ExtSearchfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSearchfieldMetaData.PROPERTIES = [];
        ExtSearchfieldMetaData.EVENTS = [];
        ExtSearchfieldMetaData.EVENTNAMES = [];
        return ExtSearchfieldMetaData;
    }(Ext_form_Search));
    (function () { ExtSearchfieldMetaData.getAll(); })();
    var ExtSearchfieldComponent = /** @class */ (function (_super) {
        __extends(ExtSearchfieldComponent, _super);
        function ExtSearchfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSearchfieldMetaData.PROPERTIES, ExtSearchfieldMetaData.EVENTS) || this;
            _this.xtype = 'searchfield';
            return _this;
        }
        ExtSearchfieldComponent_1 = ExtSearchfieldComponent;
        ExtSearchfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSearchfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSearchfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSearchfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSearchfieldComponent_1;
        ExtSearchfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSearchfieldComponent = ExtSearchfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-searchfield',
                inputs: ExtSearchfieldMetaData.PROPERTIES,
                outputs: ExtSearchfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSearchfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSearchfieldComponent);
        return ExtSearchfieldComponent;
    }(EngBase));

    var Ext_form_Select = /** @class */ (function (_super) {
        __extends(Ext_form_Select, _super);
        function Ext_form_Select() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Select.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Select.PROPERTIES);
            return Ext_field_Picker.getProperties(properties);
        };
        Ext_form_Select.getEvents = function (events) {
            events = events.concat(Ext_form_Select.EVENTS);
            return Ext_field_Picker.getEvents(events);
        };
        Ext_form_Select.PROPERTIES = [
            'autoFocus',
            'autoFocusLast',
            'autoLoadOnValue',
            'autoSelect',
            'chipView',
            'collapseOnSelect',
            'delimiter',
            'displayField',
            'displayTpl',
            'edgePicker',
            'editable',
            'floatedPicker',
            'forceSelection',
            'hiddenName',
            'itemCls',
            'itemTpl',
            'multiSelect',
            'options',
            'publishes',
            'recordCreator',
            'recordCreatorScope',
            'selection',
            'selectOnTab',
            'store',
            'twoWayBindable',
            'valueCollection',
            'valueField',
            'valueNotFoundText',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Select.EVENTS = [
            { name: 'action', parameters: 'selectfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'selectfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'selectfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'selectfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'selectfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'selectfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'selectfield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'selectfield,e' },
            { name: 'focusenter', parameters: 'selectfield,event' },
            { name: 'focusleave', parameters: 'selectfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'selectfield,e' },
            { name: 'keyup', parameters: 'selectfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'selectfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'selectfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'selectfield,newValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'selectfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Select;
    }(Ext_field_Picker));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Select.EVENTNAMES);
    //    return Ext_field_Picker.getEventNames(eventnames);
    //}

    var ExtSelectfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtSelectfieldMetaData, _super);
        function ExtSelectfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSelectfieldMetaData.getAll = function () {
            ExtSelectfieldMetaData.PROPERTIES = Ext_form_Select.getProperties(ExtSelectfieldMetaData.PROPERTIES);
            ExtSelectfieldMetaData.EVENTS = Ext_form_Select.getEvents(ExtSelectfieldMetaData.EVENTS);
            ExtSelectfieldMetaData.EVENTS.forEach(function (event) {
                ExtSelectfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSelectfieldMetaData.PROPERTIES = [];
        ExtSelectfieldMetaData.EVENTS = [];
        ExtSelectfieldMetaData.EVENTNAMES = [];
        return ExtSelectfieldMetaData;
    }(Ext_form_Select));
    (function () { ExtSelectfieldMetaData.getAll(); })();
    var ExtSelectfieldComponent = /** @class */ (function (_super) {
        __extends(ExtSelectfieldComponent, _super);
        function ExtSelectfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSelectfieldMetaData.PROPERTIES, ExtSelectfieldMetaData.EVENTS) || this;
            _this.xtype = 'selectfield';
            return _this;
        }
        ExtSelectfieldComponent_1 = ExtSelectfieldComponent;
        ExtSelectfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSelectfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSelectfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSelectfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSelectfieldComponent_1;
        ExtSelectfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSelectfieldComponent = ExtSelectfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-selectfield',
                inputs: ExtSelectfieldMetaData.PROPERTIES,
                outputs: ExtSelectfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSelectfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSelectfieldComponent);
        return ExtSelectfieldComponent;
    }(EngBase));

    var Ext_field_Slider = /** @class */ (function (_super) {
        __extends(Ext_field_Slider, _super);
        function Ext_field_Slider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_Slider.getProperties = function (properties) {
            properties = properties.concat(Ext_field_Slider.PROPERTIES);
            return Ext_field_Field.getProperties(properties);
        };
        Ext_field_Slider.getEvents = function (events) {
            events = events.concat(Ext_field_Slider.EVENTS);
            return Ext_field_Field.getEvents(events);
        };
        Ext_field_Slider.PROPERTIES = [
            'bodyAlign',
            'increment',
            'liveUpdate',
            'maxValue',
            'minValue',
            'readOnly',
            'slider',
            'tabIndex',
            'twoWayBindable',
            'value',
            'values',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_Slider.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sliderfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sliderfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'me,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'sliderfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: 'sliderfield,sl,thumb,e' },
            { name: 'dragchange', parameters: 'me,sl,thumb,newValue,oldValue' },
            { name: 'dragend', parameters: 'sliderfield,sl,thumb,value,e' },
            { name: 'dragstart', parameters: 'sliderfield,sl,thumb,value,e' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'sliderfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sliderfield,event' },
            { name: 'focusenter', parameters: 'sliderfield,event' },
            { name: 'focusleave', parameters: 'sliderfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sliderfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_Slider;
    }(Ext_field_Field));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_Slider.EVENTNAMES);
    //    return Ext_field_Field.getEventNames(eventnames);
    //}

    var Ext_field_SingleSlider = /** @class */ (function (_super) {
        __extends(Ext_field_SingleSlider, _super);
        function Ext_field_SingleSlider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_SingleSlider.getProperties = function (properties) {
            properties = properties.concat(Ext_field_SingleSlider.PROPERTIES);
            return Ext_field_Slider.getProperties(properties);
        };
        Ext_field_SingleSlider.getEvents = function (events) {
            events = events.concat(Ext_field_SingleSlider.EVENTS);
            return Ext_field_Slider.getEvents(events);
        };
        Ext_field_SingleSlider.PROPERTIES = [
            'publishes',
            'twoWayBindable',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_SingleSlider.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'singlesliderfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'singlesliderfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'me,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'singlesliderfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: 'singlesliderfield,sl,thumb,e' },
            { name: 'dragchange', parameters: 'me,sl,newValue,oldValue' },
            { name: 'dragend', parameters: 'singlesliderfield,sl,thumb,value,e' },
            { name: 'dragstart', parameters: 'singlesliderfield,sl,thumb,value,e' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'singlesliderfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'singlesliderfield,event' },
            { name: 'focusenter', parameters: 'singlesliderfield,event' },
            { name: 'focusleave', parameters: 'singlesliderfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'singlesliderfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_SingleSlider;
    }(Ext_field_Slider));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_SingleSlider.EVENTNAMES);
    //    return Ext_field_Slider.getEventNames(eventnames);
    //}

    var ExtSinglesliderfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtSinglesliderfieldMetaData, _super);
        function ExtSinglesliderfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSinglesliderfieldMetaData.getAll = function () {
            ExtSinglesliderfieldMetaData.PROPERTIES = Ext_field_SingleSlider.getProperties(ExtSinglesliderfieldMetaData.PROPERTIES);
            ExtSinglesliderfieldMetaData.EVENTS = Ext_field_SingleSlider.getEvents(ExtSinglesliderfieldMetaData.EVENTS);
            ExtSinglesliderfieldMetaData.EVENTS.forEach(function (event) {
                ExtSinglesliderfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSinglesliderfieldMetaData.PROPERTIES = [];
        ExtSinglesliderfieldMetaData.EVENTS = [];
        ExtSinglesliderfieldMetaData.EVENTNAMES = [];
        return ExtSinglesliderfieldMetaData;
    }(Ext_field_SingleSlider));
    (function () { ExtSinglesliderfieldMetaData.getAll(); })();
    var ExtSinglesliderfieldComponent = /** @class */ (function (_super) {
        __extends(ExtSinglesliderfieldComponent, _super);
        function ExtSinglesliderfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSinglesliderfieldMetaData.PROPERTIES, ExtSinglesliderfieldMetaData.EVENTS) || this;
            _this.xtype = 'singlesliderfield';
            return _this;
        }
        ExtSinglesliderfieldComponent_1 = ExtSinglesliderfieldComponent;
        ExtSinglesliderfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSinglesliderfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSinglesliderfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSinglesliderfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSinglesliderfieldComponent_1;
        ExtSinglesliderfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSinglesliderfieldComponent = ExtSinglesliderfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-singlesliderfield',
                inputs: ExtSinglesliderfieldMetaData.PROPERTIES,
                outputs: ExtSinglesliderfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSinglesliderfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSinglesliderfieldComponent);
        return ExtSinglesliderfieldComponent;
    }(EngBase));

    var Ext_form_Slider = /** @class */ (function (_super) {
        __extends(Ext_form_Slider, _super);
        function Ext_form_Slider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Slider.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Slider.PROPERTIES);
            return Ext_field_Field.getProperties(properties);
        };
        Ext_form_Slider.getEvents = function (events) {
            events = events.concat(Ext_form_Slider.EVENTS);
            return Ext_field_Field.getEvents(events);
        };
        Ext_form_Slider.PROPERTIES = [
            'bodyAlign',
            'increment',
            'liveUpdate',
            'maxValue',
            'minValue',
            'readOnly',
            'slider',
            'tabIndex',
            'twoWayBindable',
            'value',
            'values',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Slider.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sliderfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sliderfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'me,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'sliderfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: 'sliderfield,sl,thumb,e' },
            { name: 'dragchange', parameters: 'me,sl,thumb,newValue,oldValue' },
            { name: 'dragend', parameters: 'sliderfield,sl,thumb,value,e' },
            { name: 'dragstart', parameters: 'sliderfield,sl,thumb,value,e' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'sliderfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sliderfield,event' },
            { name: 'focusenter', parameters: 'sliderfield,event' },
            { name: 'focusleave', parameters: 'sliderfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sliderfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Slider;
    }(Ext_field_Field));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Slider.EVENTNAMES);
    //    return Ext_field_Field.getEventNames(eventnames);
    //}

    var ExtSliderfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtSliderfieldMetaData, _super);
        function ExtSliderfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSliderfieldMetaData.getAll = function () {
            ExtSliderfieldMetaData.PROPERTIES = Ext_form_Slider.getProperties(ExtSliderfieldMetaData.PROPERTIES);
            ExtSliderfieldMetaData.EVENTS = Ext_form_Slider.getEvents(ExtSliderfieldMetaData.EVENTS);
            ExtSliderfieldMetaData.EVENTS.forEach(function (event) {
                ExtSliderfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSliderfieldMetaData.PROPERTIES = [];
        ExtSliderfieldMetaData.EVENTS = [];
        ExtSliderfieldMetaData.EVENTNAMES = [];
        return ExtSliderfieldMetaData;
    }(Ext_form_Slider));
    (function () { ExtSliderfieldMetaData.getAll(); })();
    var ExtSliderfieldComponent = /** @class */ (function (_super) {
        __extends(ExtSliderfieldComponent, _super);
        function ExtSliderfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSliderfieldMetaData.PROPERTIES, ExtSliderfieldMetaData.EVENTS) || this;
            _this.xtype = 'sliderfield';
            return _this;
        }
        ExtSliderfieldComponent_1 = ExtSliderfieldComponent;
        ExtSliderfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSliderfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSliderfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSliderfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSliderfieldComponent_1;
        ExtSliderfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSliderfieldComponent = ExtSliderfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-sliderfield',
                inputs: ExtSliderfieldMetaData.PROPERTIES,
                outputs: ExtSliderfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSliderfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSliderfieldComponent);
        return ExtSliderfieldComponent;
    }(EngBase));

    var Ext_field_Number = /** @class */ (function (_super) {
        __extends(Ext_field_Number, _super);
        function Ext_field_Number() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_Number.getProperties = function (properties) {
            properties = properties.concat(Ext_field_Number.PROPERTIES);
            return Ext_field_Text.getProperties(properties);
        };
        Ext_field_Number.getEvents = function (events) {
            events = events.concat(Ext_field_Number.EVENTS);
            return Ext_field_Text.getEvents(events);
        };
        Ext_field_Number.PROPERTIES = [
            'decimals',
            'decimalSeparator',
            'decimalsText',
            'inputType',
            'maxValue',
            'maxValueText',
            'minValue',
            'minValueText',
            'trim',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_Number.EVENTS = [
            { name: 'action', parameters: 'numberfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'numberfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'numberfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'numberfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'numberfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'numberfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'numberfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'numberfield,e' },
            { name: 'focusenter', parameters: 'numberfield,event' },
            { name: 'focusleave', parameters: 'numberfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'numberfield,e' },
            { name: 'keyup', parameters: 'numberfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'numberfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'numberfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'numberfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_Number;
    }(Ext_field_Text));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_Number.EVENTNAMES);
    //    return Ext_field_Text.getEventNames(eventnames);
    //}

    var Ext_form_Spinner = /** @class */ (function (_super) {
        __extends(Ext_form_Spinner, _super);
        function Ext_form_Spinner() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Spinner.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Spinner.PROPERTIES);
            return Ext_field_Number.getProperties(properties);
        };
        Ext_form_Spinner.getEvents = function (events) {
            events = events.concat(Ext_form_Spinner.EVENTS);
            return Ext_field_Number.getEvents(events);
        };
        Ext_form_Spinner.PROPERTIES = [
            'accelerateOnTapHold',
            'clearable',
            'cycle',
            'decimals',
            'stepValue',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Spinner.EVENTS = [
            { name: 'action', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'spinnerfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'spinnerfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'spinnerfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'spinnerfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'spinnerfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'spinnerfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'spinnerfield,e' },
            { name: 'focusenter', parameters: 'spinnerfield,event' },
            { name: 'focusleave', parameters: 'spinnerfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'spinnerfield,e' },
            { name: 'keyup', parameters: 'spinnerfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'spinnerfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'spinnerfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'spin', parameters: 'spinnerfield,value,direction' },
            { name: 'spindown', parameters: 'spinnerfield,value' },
            { name: 'spinup', parameters: 'spinnerfield,value' },
            { name: 'tofront', parameters: 'spinnerfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: '' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Spinner;
    }(Ext_field_Number));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Spinner.EVENTNAMES);
    //    return Ext_field_Number.getEventNames(eventnames);
    //}

    var ExtSpinnerfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtSpinnerfieldMetaData, _super);
        function ExtSpinnerfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSpinnerfieldMetaData.getAll = function () {
            ExtSpinnerfieldMetaData.PROPERTIES = Ext_form_Spinner.getProperties(ExtSpinnerfieldMetaData.PROPERTIES);
            ExtSpinnerfieldMetaData.EVENTS = Ext_form_Spinner.getEvents(ExtSpinnerfieldMetaData.EVENTS);
            ExtSpinnerfieldMetaData.EVENTS.forEach(function (event) {
                ExtSpinnerfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSpinnerfieldMetaData.PROPERTIES = [];
        ExtSpinnerfieldMetaData.EVENTS = [];
        ExtSpinnerfieldMetaData.EVENTNAMES = [];
        return ExtSpinnerfieldMetaData;
    }(Ext_form_Spinner));
    (function () { ExtSpinnerfieldMetaData.getAll(); })();
    var ExtSpinnerfieldComponent = /** @class */ (function (_super) {
        __extends(ExtSpinnerfieldComponent, _super);
        function ExtSpinnerfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSpinnerfieldMetaData.PROPERTIES, ExtSpinnerfieldMetaData.EVENTS) || this;
            _this.xtype = 'spinnerfield';
            return _this;
        }
        ExtSpinnerfieldComponent_1 = ExtSpinnerfieldComponent;
        ExtSpinnerfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSpinnerfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSpinnerfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSpinnerfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSpinnerfieldComponent_1;
        ExtSpinnerfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSpinnerfieldComponent = ExtSpinnerfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-spinnerfield',
                inputs: ExtSpinnerfieldMetaData.PROPERTIES,
                outputs: ExtSpinnerfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSpinnerfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSpinnerfieldComponent);
        return ExtSpinnerfieldComponent;
    }(EngBase));

    var Ext_form_Text = /** @class */ (function (_super) {
        __extends(Ext_form_Text, _super);
        function Ext_form_Text() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Text.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Text.PROPERTIES);
            return Ext_field_Input.getProperties(properties);
        };
        Ext_form_Text.getEvents = function (events) {
            events = events.concat(Ext_form_Text.EVENTS);
            return Ext_field_Input.getEvents(events);
        };
        Ext_form_Text.PROPERTIES = [
            'animateUnderline',
            'autoCapitalize',
            'autoComplete',
            'autoCorrect',
            'autoHideInputMask',
            'badFormatMessage',
            'bodyAlign',
            'clearable',
            'editable',
            'inputMask',
            'inputType',
            'labelAlign',
            'labelInPlaceholder',
            'maxLength',
            'parseValidator',
            'pattern',
            'placeholder',
            'publishes',
            'stripCharsRe',
            'textAlign',
            'triggers',
            'twoWayBindable',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Text.EVENTS = [
            { name: 'action', parameters: 'textfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'textfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'textfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'textfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'textfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'textfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'textfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'textfield,e' },
            { name: 'focusenter', parameters: 'textfield,event' },
            { name: 'focusleave', parameters: 'textfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'textfield,e' },
            { name: 'keyup', parameters: 'textfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'textfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'textfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'textfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Text;
    }(Ext_field_Input));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Text.EVENTNAMES);
    //    return Ext_field_Input.getEventNames(eventnames);
    //}

    var ExtTextfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtTextfieldMetaData, _super);
        function ExtTextfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTextfieldMetaData.getAll = function () {
            ExtTextfieldMetaData.PROPERTIES = Ext_form_Text.getProperties(ExtTextfieldMetaData.PROPERTIES);
            ExtTextfieldMetaData.EVENTS = Ext_form_Text.getEvents(ExtTextfieldMetaData.EVENTS);
            ExtTextfieldMetaData.EVENTS.forEach(function (event) {
                ExtTextfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTextfieldMetaData.PROPERTIES = [];
        ExtTextfieldMetaData.EVENTS = [];
        ExtTextfieldMetaData.EVENTNAMES = [];
        return ExtTextfieldMetaData;
    }(Ext_form_Text));
    (function () { ExtTextfieldMetaData.getAll(); })();
    var ExtTextfieldComponent = /** @class */ (function (_super) {
        __extends(ExtTextfieldComponent, _super);
        function ExtTextfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTextfieldMetaData.PROPERTIES, ExtTextfieldMetaData.EVENTS) || this;
            _this.xtype = 'textfield';
            return _this;
        }
        ExtTextfieldComponent_1 = ExtTextfieldComponent;
        ExtTextfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTextfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTextfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTextfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTextfieldComponent_1;
        ExtTextfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTextfieldComponent = ExtTextfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-textfield',
                inputs: ExtTextfieldMetaData.PROPERTIES,
                outputs: ExtTextfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTextfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTextfieldComponent);
        return ExtTextfieldComponent;
    }(EngBase));

    var Ext_form_TextArea = /** @class */ (function (_super) {
        __extends(Ext_form_TextArea, _super);
        function Ext_form_TextArea() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_TextArea.getProperties = function (properties) {
            properties = properties.concat(Ext_form_TextArea.PROPERTIES);
            return Ext_field_Text.getProperties(properties);
        };
        Ext_form_TextArea.getEvents = function (events) {
            events = events.concat(Ext_form_TextArea.EVENTS);
            return Ext_field_Text.getEvents(events);
        };
        Ext_form_TextArea.PROPERTIES = [
            'autoCapitalize',
            'clearable',
            'maxRows',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_TextArea.EVENTS = [
            { name: 'action', parameters: 'textareafield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'textareafield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'textareafield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'textareafield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'textareafield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'textareafield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'textareafield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'textareafield,e' },
            { name: 'focusenter', parameters: 'textareafield,event' },
            { name: 'focusleave', parameters: 'textareafield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'textareafield,e' },
            { name: 'keyup', parameters: 'textareafield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'textareafield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'textareafield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'textareafield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_TextArea;
    }(Ext_field_Text));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_TextArea.EVENTNAMES);
    //    return Ext_field_Text.getEventNames(eventnames);
    //}

    var ExtTextareafieldMetaData = /** @class */ (function (_super) {
        __extends(ExtTextareafieldMetaData, _super);
        function ExtTextareafieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTextareafieldMetaData.getAll = function () {
            ExtTextareafieldMetaData.PROPERTIES = Ext_form_TextArea.getProperties(ExtTextareafieldMetaData.PROPERTIES);
            ExtTextareafieldMetaData.EVENTS = Ext_form_TextArea.getEvents(ExtTextareafieldMetaData.EVENTS);
            ExtTextareafieldMetaData.EVENTS.forEach(function (event) {
                ExtTextareafieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTextareafieldMetaData.PROPERTIES = [];
        ExtTextareafieldMetaData.EVENTS = [];
        ExtTextareafieldMetaData.EVENTNAMES = [];
        return ExtTextareafieldMetaData;
    }(Ext_form_TextArea));
    (function () { ExtTextareafieldMetaData.getAll(); })();
    var ExtTextareafieldComponent = /** @class */ (function (_super) {
        __extends(ExtTextareafieldComponent, _super);
        function ExtTextareafieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTextareafieldMetaData.PROPERTIES, ExtTextareafieldMetaData.EVENTS) || this;
            _this.xtype = 'textareafield';
            return _this;
        }
        ExtTextareafieldComponent_1 = ExtTextareafieldComponent;
        ExtTextareafieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTextareafieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTextareafieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTextareafieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTextareafieldComponent_1;
        ExtTextareafieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTextareafieldComponent = ExtTextareafieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-textareafield',
                inputs: ExtTextareafieldMetaData.PROPERTIES,
                outputs: ExtTextareafieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTextareafieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTextareafieldComponent);
        return ExtTextareafieldComponent;
    }(EngBase));

    var Ext_field_Time = /** @class */ (function (_super) {
        __extends(Ext_field_Time, _super);
        function Ext_field_Time() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_Time.getProperties = function (properties) {
            properties = properties.concat(Ext_field_Time.PROPERTIES);
            return Ext_field_Picker.getProperties(properties);
        };
        Ext_field_Time.getEvents = function (events) {
            events = events.concat(Ext_field_Time.EVENTS);
            return Ext_field_Picker.getEvents(events);
        };
        Ext_field_Time.PROPERTIES = [
            'altFormats',
            'format',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_Time.EVENTS = [
            { name: 'action', parameters: 'timefield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'timefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'timefield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'timefield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'timefield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'timefield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'timefield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'timefield,e' },
            { name: 'focusenter', parameters: 'timefield,event' },
            { name: 'focusleave', parameters: 'timefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'timefield,e' },
            { name: 'keyup', parameters: 'timefield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'timefield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'timefield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'timefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_Time;
    }(Ext_field_Picker));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_Time.EVENTNAMES);
    //    return Ext_field_Picker.getEventNames(eventnames);
    //}

    var ExtTimefieldMetaData = /** @class */ (function (_super) {
        __extends(ExtTimefieldMetaData, _super);
        function ExtTimefieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTimefieldMetaData.getAll = function () {
            ExtTimefieldMetaData.PROPERTIES = Ext_field_Time.getProperties(ExtTimefieldMetaData.PROPERTIES);
            ExtTimefieldMetaData.EVENTS = Ext_field_Time.getEvents(ExtTimefieldMetaData.EVENTS);
            ExtTimefieldMetaData.EVENTS.forEach(function (event) {
                ExtTimefieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTimefieldMetaData.PROPERTIES = [];
        ExtTimefieldMetaData.EVENTS = [];
        ExtTimefieldMetaData.EVENTNAMES = [];
        return ExtTimefieldMetaData;
    }(Ext_field_Time));
    (function () { ExtTimefieldMetaData.getAll(); })();
    var ExtTimefieldComponent = /** @class */ (function (_super) {
        __extends(ExtTimefieldComponent, _super);
        function ExtTimefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTimefieldMetaData.PROPERTIES, ExtTimefieldMetaData.EVENTS) || this;
            _this.xtype = 'timefield';
            return _this;
        }
        ExtTimefieldComponent_1 = ExtTimefieldComponent;
        ExtTimefieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTimefieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTimefieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTimefieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTimefieldComponent_1;
        ExtTimefieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTimefieldComponent = ExtTimefieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-timefield',
                inputs: ExtTimefieldMetaData.PROPERTIES,
                outputs: ExtTimefieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTimefieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTimefieldComponent);
        return ExtTimefieldComponent;
    }(EngBase));

    var Ext_form_Toggle = /** @class */ (function (_super) {
        __extends(Ext_form_Toggle, _super);
        function Ext_form_Toggle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Toggle.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Toggle.PROPERTIES);
            return Ext_field_SingleSlider.getProperties(properties);
        };
        Ext_form_Toggle.getEvents = function (events) {
            events = events.concat(Ext_form_Toggle.EVENTS);
            return Ext_field_SingleSlider.getEvents(events);
        };
        Ext_form_Toggle.PROPERTIES = [
            'activeLabel',
            'bodyAlign',
            'inactiveLabel',
            'publishes',
            'slider',
            'twoWayBindable',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Toggle.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'togglefield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'togglefield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'togglefield,newValue,oldValue' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'togglefield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: '' },
            { name: 'dragchange', parameters: 'me,sl,newValue,oldValue' },
            { name: 'dragend', parameters: '' },
            { name: 'dragstart', parameters: '' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'togglefield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'togglefield,event' },
            { name: 'focusenter', parameters: 'togglefield,event' },
            { name: 'focusleave', parameters: 'togglefield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'togglefield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Toggle;
    }(Ext_field_SingleSlider));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Toggle.EVENTNAMES);
    //    return Ext_field_SingleSlider.getEventNames(eventnames);
    //}

    var ExtTogglefieldMetaData = /** @class */ (function (_super) {
        __extends(ExtTogglefieldMetaData, _super);
        function ExtTogglefieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTogglefieldMetaData.getAll = function () {
            ExtTogglefieldMetaData.PROPERTIES = Ext_form_Toggle.getProperties(ExtTogglefieldMetaData.PROPERTIES);
            ExtTogglefieldMetaData.EVENTS = Ext_form_Toggle.getEvents(ExtTogglefieldMetaData.EVENTS);
            ExtTogglefieldMetaData.EVENTS.forEach(function (event) {
                ExtTogglefieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTogglefieldMetaData.PROPERTIES = [];
        ExtTogglefieldMetaData.EVENTS = [];
        ExtTogglefieldMetaData.EVENTNAMES = [];
        return ExtTogglefieldMetaData;
    }(Ext_form_Toggle));
    (function () { ExtTogglefieldMetaData.getAll(); })();
    var ExtTogglefieldComponent = /** @class */ (function (_super) {
        __extends(ExtTogglefieldComponent, _super);
        function ExtTogglefieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTogglefieldMetaData.PROPERTIES, ExtTogglefieldMetaData.EVENTS) || this;
            _this.xtype = 'togglefield';
            return _this;
        }
        ExtTogglefieldComponent_1 = ExtTogglefieldComponent;
        ExtTogglefieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTogglefieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTogglefieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTogglefieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTogglefieldComponent_1;
        ExtTogglefieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTogglefieldComponent = ExtTogglefieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-togglefield',
                inputs: ExtTogglefieldMetaData.PROPERTIES,
                outputs: ExtTogglefieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTogglefieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTogglefieldComponent);
        return ExtTogglefieldComponent;
    }(EngBase));

    var Ext_field_trigger_Base = /** @class */ (function (_super) {
        __extends(Ext_field_trigger_Base, _super);
        function Ext_field_trigger_Base() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_trigger_Base.getProperties = function (properties) {
            properties = properties.concat(Ext_field_trigger_Base.PROPERTIES);
            return Ext_Widget.getProperties(properties);
        };
        Ext_field_trigger_Base.getEvents = function (events) {
            events = events.concat(Ext_field_trigger_Base.EVENTS);
            return Ext_Widget.getEvents(events);
        };
        Ext_field_trigger_Base.PROPERTIES = [
            'field',
            'group',
            'name',
            'side',
            'triggers',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_trigger_Base.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_trigger_Base;
    }(Ext_Widget));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_trigger_Base.EVENTNAMES);
    //    return Ext_Widget.getEventNames(eventnames);
    //}

    var Ext_field_trigger_Trigger = /** @class */ (function (_super) {
        __extends(Ext_field_trigger_Trigger, _super);
        function Ext_field_trigger_Trigger() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_trigger_Trigger.getProperties = function (properties) {
            properties = properties.concat(Ext_field_trigger_Trigger.PROPERTIES);
            return Ext_field_trigger_Base.getProperties(properties);
        };
        Ext_field_trigger_Trigger.getEvents = function (events) {
            events = events.concat(Ext_field_trigger_Trigger.EVENTS);
            return Ext_field_trigger_Base.getEvents(events);
        };
        Ext_field_trigger_Trigger.PROPERTIES = [
            'focusOnTap',
            'handler',
            'iconCls',
            'repeat',
            'scope',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_trigger_Trigger.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'trigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'trigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'trigger,event' },
            { name: 'focusenter', parameters: 'trigger,event' },
            { name: 'focusleave', parameters: 'trigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'trigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_trigger_Trigger;
    }(Ext_field_trigger_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_trigger_Trigger.EVENTNAMES);
    //    return Ext_field_trigger_Base.getEventNames(eventnames);
    //}

    var Ext_field_trigger_Clear = /** @class */ (function (_super) {
        __extends(Ext_field_trigger_Clear, _super);
        function Ext_field_trigger_Clear() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_trigger_Clear.getProperties = function (properties) {
            properties = properties.concat(Ext_field_trigger_Clear.PROPERTIES);
            return Ext_field_trigger_Trigger.getProperties(properties);
        };
        Ext_field_trigger_Clear.getEvents = function (events) {
            events = events.concat(Ext_field_trigger_Clear.EVENTS);
            return Ext_field_trigger_Trigger.getEvents(events);
        };
        Ext_field_trigger_Clear.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_trigger_Clear.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'cleartrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'cleartrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'cleartrigger,event' },
            { name: 'focusenter', parameters: 'cleartrigger,event' },
            { name: 'focusleave', parameters: 'cleartrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'cleartrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_trigger_Clear;
    }(Ext_field_trigger_Trigger));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_trigger_Clear.EVENTNAMES);
    //    return Ext_field_trigger_Trigger.getEventNames(eventnames);
    //}

    var ExtCleartriggerMetaData = /** @class */ (function (_super) {
        __extends(ExtCleartriggerMetaData, _super);
        function ExtCleartriggerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCleartriggerMetaData.getAll = function () {
            ExtCleartriggerMetaData.PROPERTIES = Ext_field_trigger_Clear.getProperties(ExtCleartriggerMetaData.PROPERTIES);
            ExtCleartriggerMetaData.EVENTS = Ext_field_trigger_Clear.getEvents(ExtCleartriggerMetaData.EVENTS);
            ExtCleartriggerMetaData.EVENTS.forEach(function (event) {
                ExtCleartriggerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCleartriggerMetaData.PROPERTIES = [];
        ExtCleartriggerMetaData.EVENTS = [];
        ExtCleartriggerMetaData.EVENTNAMES = [];
        return ExtCleartriggerMetaData;
    }(Ext_field_trigger_Clear));
    (function () { ExtCleartriggerMetaData.getAll(); })();
    var ExtCleartriggerComponent = /** @class */ (function (_super) {
        __extends(ExtCleartriggerComponent, _super);
        function ExtCleartriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCleartriggerMetaData.PROPERTIES, ExtCleartriggerMetaData.EVENTS) || this;
            _this.xtype = 'cleartrigger';
            return _this;
        }
        ExtCleartriggerComponent_1 = ExtCleartriggerComponent;
        ExtCleartriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCleartriggerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCleartriggerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCleartriggerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCleartriggerComponent_1;
        ExtCleartriggerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCleartriggerComponent = ExtCleartriggerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-cleartrigger',
                inputs: ExtCleartriggerMetaData.PROPERTIES,
                outputs: ExtCleartriggerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCleartriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCleartriggerComponent);
        return ExtCleartriggerComponent;
    }(EngBase));

    var Ext_field_trigger_Expand = /** @class */ (function (_super) {
        __extends(Ext_field_trigger_Expand, _super);
        function Ext_field_trigger_Expand() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_trigger_Expand.getProperties = function (properties) {
            properties = properties.concat(Ext_field_trigger_Expand.PROPERTIES);
            return Ext_field_trigger_Trigger.getProperties(properties);
        };
        Ext_field_trigger_Expand.getEvents = function (events) {
            events = events.concat(Ext_field_trigger_Expand.EVENTS);
            return Ext_field_trigger_Trigger.getEvents(events);
        };
        Ext_field_trigger_Expand.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_trigger_Expand.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'expandtrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'expandtrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'expandtrigger,event' },
            { name: 'focusenter', parameters: 'expandtrigger,event' },
            { name: 'focusleave', parameters: 'expandtrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'expandtrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_trigger_Expand;
    }(Ext_field_trigger_Trigger));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_trigger_Expand.EVENTNAMES);
    //    return Ext_field_trigger_Trigger.getEventNames(eventnames);
    //}

    var Ext_field_trigger_Date = /** @class */ (function (_super) {
        __extends(Ext_field_trigger_Date, _super);
        function Ext_field_trigger_Date() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_trigger_Date.getProperties = function (properties) {
            properties = properties.concat(Ext_field_trigger_Date.PROPERTIES);
            return Ext_field_trigger_Expand.getProperties(properties);
        };
        Ext_field_trigger_Date.getEvents = function (events) {
            events = events.concat(Ext_field_trigger_Date.EVENTS);
            return Ext_field_trigger_Expand.getEvents(events);
        };
        Ext_field_trigger_Date.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_trigger_Date.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'datetrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datetrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'datetrigger,event' },
            { name: 'focusenter', parameters: 'datetrigger,event' },
            { name: 'focusleave', parameters: 'datetrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'datetrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_trigger_Date;
    }(Ext_field_trigger_Expand));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_trigger_Date.EVENTNAMES);
    //    return Ext_field_trigger_Expand.getEventNames(eventnames);
    //}

    var ExtDatetriggerMetaData = /** @class */ (function (_super) {
        __extends(ExtDatetriggerMetaData, _super);
        function ExtDatetriggerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtDatetriggerMetaData.getAll = function () {
            ExtDatetriggerMetaData.PROPERTIES = Ext_field_trigger_Date.getProperties(ExtDatetriggerMetaData.PROPERTIES);
            ExtDatetriggerMetaData.EVENTS = Ext_field_trigger_Date.getEvents(ExtDatetriggerMetaData.EVENTS);
            ExtDatetriggerMetaData.EVENTS.forEach(function (event) {
                ExtDatetriggerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtDatetriggerMetaData.PROPERTIES = [];
        ExtDatetriggerMetaData.EVENTS = [];
        ExtDatetriggerMetaData.EVENTNAMES = [];
        return ExtDatetriggerMetaData;
    }(Ext_field_trigger_Date));
    (function () { ExtDatetriggerMetaData.getAll(); })();
    var ExtDatetriggerComponent = /** @class */ (function (_super) {
        __extends(ExtDatetriggerComponent, _super);
        function ExtDatetriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtDatetriggerMetaData.PROPERTIES, ExtDatetriggerMetaData.EVENTS) || this;
            _this.xtype = 'datetrigger';
            return _this;
        }
        ExtDatetriggerComponent_1 = ExtDatetriggerComponent;
        ExtDatetriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtDatetriggerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtDatetriggerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtDatetriggerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtDatetriggerComponent_1;
        ExtDatetriggerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtDatetriggerComponent = ExtDatetriggerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-datetrigger',
                inputs: ExtDatetriggerMetaData.PROPERTIES,
                outputs: ExtDatetriggerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtDatetriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtDatetriggerComponent);
        return ExtDatetriggerComponent;
    }(EngBase));

    var ExtExpandtriggerMetaData = /** @class */ (function (_super) {
        __extends(ExtExpandtriggerMetaData, _super);
        function ExtExpandtriggerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtExpandtriggerMetaData.getAll = function () {
            ExtExpandtriggerMetaData.PROPERTIES = Ext_field_trigger_Expand.getProperties(ExtExpandtriggerMetaData.PROPERTIES);
            ExtExpandtriggerMetaData.EVENTS = Ext_field_trigger_Expand.getEvents(ExtExpandtriggerMetaData.EVENTS);
            ExtExpandtriggerMetaData.EVENTS.forEach(function (event) {
                ExtExpandtriggerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtExpandtriggerMetaData.PROPERTIES = [];
        ExtExpandtriggerMetaData.EVENTS = [];
        ExtExpandtriggerMetaData.EVENTNAMES = [];
        return ExtExpandtriggerMetaData;
    }(Ext_field_trigger_Expand));
    (function () { ExtExpandtriggerMetaData.getAll(); })();
    var ExtExpandtriggerComponent = /** @class */ (function (_super) {
        __extends(ExtExpandtriggerComponent, _super);
        function ExtExpandtriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtExpandtriggerMetaData.PROPERTIES, ExtExpandtriggerMetaData.EVENTS) || this;
            _this.xtype = 'expandtrigger';
            return _this;
        }
        ExtExpandtriggerComponent_1 = ExtExpandtriggerComponent;
        ExtExpandtriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtExpandtriggerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtExpandtriggerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtExpandtriggerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtExpandtriggerComponent_1;
        ExtExpandtriggerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtExpandtriggerComponent = ExtExpandtriggerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-expandtrigger',
                inputs: ExtExpandtriggerMetaData.PROPERTIES,
                outputs: ExtExpandtriggerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtExpandtriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtExpandtriggerComponent);
        return ExtExpandtriggerComponent;
    }(EngBase));

    var Ext_field_trigger_Menu = /** @class */ (function (_super) {
        __extends(Ext_field_trigger_Menu, _super);
        function Ext_field_trigger_Menu() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_trigger_Menu.getProperties = function (properties) {
            properties = properties.concat(Ext_field_trigger_Menu.PROPERTIES);
            return Ext_field_trigger_Trigger.getProperties(properties);
        };
        Ext_field_trigger_Menu.getEvents = function (events) {
            events = events.concat(Ext_field_trigger_Menu.EVENTS);
            return Ext_field_trigger_Trigger.getEvents(events);
        };
        Ext_field_trigger_Menu.PROPERTIES = [
            'destroyMenu',
            'menu',
            'menuAlign',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_trigger_Menu.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'menutrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menutrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'menutrigger,event' },
            { name: 'focusenter', parameters: 'menutrigger,event' },
            { name: 'focusleave', parameters: 'menutrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'menutrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_trigger_Menu;
    }(Ext_field_trigger_Trigger));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_trigger_Menu.EVENTNAMES);
    //    return Ext_field_trigger_Trigger.getEventNames(eventnames);
    //}

    var ExtMenutriggerMetaData = /** @class */ (function (_super) {
        __extends(ExtMenutriggerMetaData, _super);
        function ExtMenutriggerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtMenutriggerMetaData.getAll = function () {
            ExtMenutriggerMetaData.PROPERTIES = Ext_field_trigger_Menu.getProperties(ExtMenutriggerMetaData.PROPERTIES);
            ExtMenutriggerMetaData.EVENTS = Ext_field_trigger_Menu.getEvents(ExtMenutriggerMetaData.EVENTS);
            ExtMenutriggerMetaData.EVENTS.forEach(function (event) {
                ExtMenutriggerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtMenutriggerMetaData.PROPERTIES = [];
        ExtMenutriggerMetaData.EVENTS = [];
        ExtMenutriggerMetaData.EVENTNAMES = [];
        return ExtMenutriggerMetaData;
    }(Ext_field_trigger_Menu));
    (function () { ExtMenutriggerMetaData.getAll(); })();
    var ExtMenutriggerComponent = /** @class */ (function (_super) {
        __extends(ExtMenutriggerComponent, _super);
        function ExtMenutriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtMenutriggerMetaData.PROPERTIES, ExtMenutriggerMetaData.EVENTS) || this;
            _this.xtype = 'menutrigger';
            return _this;
        }
        ExtMenutriggerComponent_1 = ExtMenutriggerComponent;
        ExtMenutriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtMenutriggerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtMenutriggerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtMenutriggerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtMenutriggerComponent_1;
        ExtMenutriggerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtMenutriggerComponent = ExtMenutriggerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-menutrigger',
                inputs: ExtMenutriggerMetaData.PROPERTIES,
                outputs: ExtMenutriggerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtMenutriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtMenutriggerComponent);
        return ExtMenutriggerComponent;
    }(EngBase));

    var Ext_field_trigger_Reveal = /** @class */ (function (_super) {
        __extends(Ext_field_trigger_Reveal, _super);
        function Ext_field_trigger_Reveal() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_trigger_Reveal.getProperties = function (properties) {
            properties = properties.concat(Ext_field_trigger_Reveal.PROPERTIES);
            return Ext_field_trigger_Trigger.getProperties(properties);
        };
        Ext_field_trigger_Reveal.getEvents = function (events) {
            events = events.concat(Ext_field_trigger_Reveal.EVENTS);
            return Ext_field_trigger_Trigger.getEvents(events);
        };
        Ext_field_trigger_Reveal.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_trigger_Reveal.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'revealtrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'revealtrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'revealtrigger,event' },
            { name: 'focusenter', parameters: 'revealtrigger,event' },
            { name: 'focusleave', parameters: 'revealtrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'revealtrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_trigger_Reveal;
    }(Ext_field_trigger_Trigger));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_trigger_Reveal.EVENTNAMES);
    //    return Ext_field_trigger_Trigger.getEventNames(eventnames);
    //}

    var ExtRevealtriggerMetaData = /** @class */ (function (_super) {
        __extends(ExtRevealtriggerMetaData, _super);
        function ExtRevealtriggerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtRevealtriggerMetaData.getAll = function () {
            ExtRevealtriggerMetaData.PROPERTIES = Ext_field_trigger_Reveal.getProperties(ExtRevealtriggerMetaData.PROPERTIES);
            ExtRevealtriggerMetaData.EVENTS = Ext_field_trigger_Reveal.getEvents(ExtRevealtriggerMetaData.EVENTS);
            ExtRevealtriggerMetaData.EVENTS.forEach(function (event) {
                ExtRevealtriggerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtRevealtriggerMetaData.PROPERTIES = [];
        ExtRevealtriggerMetaData.EVENTS = [];
        ExtRevealtriggerMetaData.EVENTNAMES = [];
        return ExtRevealtriggerMetaData;
    }(Ext_field_trigger_Reveal));
    (function () { ExtRevealtriggerMetaData.getAll(); })();
    var ExtRevealtriggerComponent = /** @class */ (function (_super) {
        __extends(ExtRevealtriggerComponent, _super);
        function ExtRevealtriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtRevealtriggerMetaData.PROPERTIES, ExtRevealtriggerMetaData.EVENTS) || this;
            _this.xtype = 'revealtrigger';
            return _this;
        }
        ExtRevealtriggerComponent_1 = ExtRevealtriggerComponent;
        ExtRevealtriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtRevealtriggerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtRevealtriggerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtRevealtriggerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtRevealtriggerComponent_1;
        ExtRevealtriggerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtRevealtriggerComponent = ExtRevealtriggerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-revealtrigger',
                inputs: ExtRevealtriggerMetaData.PROPERTIES,
                outputs: ExtRevealtriggerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtRevealtriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtRevealtriggerComponent);
        return ExtRevealtriggerComponent;
    }(EngBase));

    var Ext_field_trigger_SpinDown = /** @class */ (function (_super) {
        __extends(Ext_field_trigger_SpinDown, _super);
        function Ext_field_trigger_SpinDown() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_trigger_SpinDown.getProperties = function (properties) {
            properties = properties.concat(Ext_field_trigger_SpinDown.PROPERTIES);
            return Ext_field_trigger_Trigger.getProperties(properties);
        };
        Ext_field_trigger_SpinDown.getEvents = function (events) {
            events = events.concat(Ext_field_trigger_SpinDown.EVENTS);
            return Ext_field_trigger_Trigger.getEvents(events);
        };
        Ext_field_trigger_SpinDown.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_trigger_SpinDown.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'spindowntrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'spindowntrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'spindowntrigger,event' },
            { name: 'focusenter', parameters: 'spindowntrigger,event' },
            { name: 'focusleave', parameters: 'spindowntrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'spindowntrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_trigger_SpinDown;
    }(Ext_field_trigger_Trigger));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_trigger_SpinDown.EVENTNAMES);
    //    return Ext_field_trigger_Trigger.getEventNames(eventnames);
    //}

    var ExtSpindowntriggerMetaData = /** @class */ (function (_super) {
        __extends(ExtSpindowntriggerMetaData, _super);
        function ExtSpindowntriggerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSpindowntriggerMetaData.getAll = function () {
            ExtSpindowntriggerMetaData.PROPERTIES = Ext_field_trigger_SpinDown.getProperties(ExtSpindowntriggerMetaData.PROPERTIES);
            ExtSpindowntriggerMetaData.EVENTS = Ext_field_trigger_SpinDown.getEvents(ExtSpindowntriggerMetaData.EVENTS);
            ExtSpindowntriggerMetaData.EVENTS.forEach(function (event) {
                ExtSpindowntriggerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSpindowntriggerMetaData.PROPERTIES = [];
        ExtSpindowntriggerMetaData.EVENTS = [];
        ExtSpindowntriggerMetaData.EVENTNAMES = [];
        return ExtSpindowntriggerMetaData;
    }(Ext_field_trigger_SpinDown));
    (function () { ExtSpindowntriggerMetaData.getAll(); })();
    var ExtSpindowntriggerComponent = /** @class */ (function (_super) {
        __extends(ExtSpindowntriggerComponent, _super);
        function ExtSpindowntriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSpindowntriggerMetaData.PROPERTIES, ExtSpindowntriggerMetaData.EVENTS) || this;
            _this.xtype = 'spindowntrigger';
            return _this;
        }
        ExtSpindowntriggerComponent_1 = ExtSpindowntriggerComponent;
        ExtSpindowntriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSpindowntriggerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSpindowntriggerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSpindowntriggerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSpindowntriggerComponent_1;
        ExtSpindowntriggerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSpindowntriggerComponent = ExtSpindowntriggerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-spindowntrigger',
                inputs: ExtSpindowntriggerMetaData.PROPERTIES,
                outputs: ExtSpindowntriggerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSpindowntriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSpindowntriggerComponent);
        return ExtSpindowntriggerComponent;
    }(EngBase));

    var Ext_field_trigger_SpinUp = /** @class */ (function (_super) {
        __extends(Ext_field_trigger_SpinUp, _super);
        function Ext_field_trigger_SpinUp() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_trigger_SpinUp.getProperties = function (properties) {
            properties = properties.concat(Ext_field_trigger_SpinUp.PROPERTIES);
            return Ext_field_trigger_Trigger.getProperties(properties);
        };
        Ext_field_trigger_SpinUp.getEvents = function (events) {
            events = events.concat(Ext_field_trigger_SpinUp.EVENTS);
            return Ext_field_trigger_Trigger.getEvents(events);
        };
        Ext_field_trigger_SpinUp.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_trigger_SpinUp.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'spinuptrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'spinuptrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'spinuptrigger,event' },
            { name: 'focusenter', parameters: 'spinuptrigger,event' },
            { name: 'focusleave', parameters: 'spinuptrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'spinuptrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_trigger_SpinUp;
    }(Ext_field_trigger_Trigger));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_trigger_SpinUp.EVENTNAMES);
    //    return Ext_field_trigger_Trigger.getEventNames(eventnames);
    //}

    var ExtSpinuptriggerMetaData = /** @class */ (function (_super) {
        __extends(ExtSpinuptriggerMetaData, _super);
        function ExtSpinuptriggerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSpinuptriggerMetaData.getAll = function () {
            ExtSpinuptriggerMetaData.PROPERTIES = Ext_field_trigger_SpinUp.getProperties(ExtSpinuptriggerMetaData.PROPERTIES);
            ExtSpinuptriggerMetaData.EVENTS = Ext_field_trigger_SpinUp.getEvents(ExtSpinuptriggerMetaData.EVENTS);
            ExtSpinuptriggerMetaData.EVENTS.forEach(function (event) {
                ExtSpinuptriggerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSpinuptriggerMetaData.PROPERTIES = [];
        ExtSpinuptriggerMetaData.EVENTS = [];
        ExtSpinuptriggerMetaData.EVENTNAMES = [];
        return ExtSpinuptriggerMetaData;
    }(Ext_field_trigger_SpinUp));
    (function () { ExtSpinuptriggerMetaData.getAll(); })();
    var ExtSpinuptriggerComponent = /** @class */ (function (_super) {
        __extends(ExtSpinuptriggerComponent, _super);
        function ExtSpinuptriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSpinuptriggerMetaData.PROPERTIES, ExtSpinuptriggerMetaData.EVENTS) || this;
            _this.xtype = 'spinuptrigger';
            return _this;
        }
        ExtSpinuptriggerComponent_1 = ExtSpinuptriggerComponent;
        ExtSpinuptriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSpinuptriggerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSpinuptriggerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSpinuptriggerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSpinuptriggerComponent_1;
        ExtSpinuptriggerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSpinuptriggerComponent = ExtSpinuptriggerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-spinuptrigger',
                inputs: ExtSpinuptriggerMetaData.PROPERTIES,
                outputs: ExtSpinuptriggerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSpinuptriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSpinuptriggerComponent);
        return ExtSpinuptriggerComponent;
    }(EngBase));

    var Ext_field_trigger_Time = /** @class */ (function (_super) {
        __extends(Ext_field_trigger_Time, _super);
        function Ext_field_trigger_Time() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_field_trigger_Time.getProperties = function (properties) {
            properties = properties.concat(Ext_field_trigger_Time.PROPERTIES);
            return Ext_field_trigger_Expand.getProperties(properties);
        };
        Ext_field_trigger_Time.getEvents = function (events) {
            events = events.concat(Ext_field_trigger_Time.EVENTS);
            return Ext_field_trigger_Expand.getEvents(events);
        };
        Ext_field_trigger_Time.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_field_trigger_Time.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'timetrigger' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'timetrigger,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'timetrigger,event' },
            { name: 'focusenter', parameters: 'timetrigger,event' },
            { name: 'focusleave', parameters: 'timetrigger,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'timetrigger' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_field_trigger_Time;
    }(Ext_field_trigger_Expand));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_field_trigger_Time.EVENTNAMES);
    //    return Ext_field_trigger_Expand.getEventNames(eventnames);
    //}

    var ExtTimetriggerMetaData = /** @class */ (function (_super) {
        __extends(ExtTimetriggerMetaData, _super);
        function ExtTimetriggerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTimetriggerMetaData.getAll = function () {
            ExtTimetriggerMetaData.PROPERTIES = Ext_field_trigger_Time.getProperties(ExtTimetriggerMetaData.PROPERTIES);
            ExtTimetriggerMetaData.EVENTS = Ext_field_trigger_Time.getEvents(ExtTimetriggerMetaData.EVENTS);
            ExtTimetriggerMetaData.EVENTS.forEach(function (event) {
                ExtTimetriggerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTimetriggerMetaData.PROPERTIES = [];
        ExtTimetriggerMetaData.EVENTS = [];
        ExtTimetriggerMetaData.EVENTNAMES = [];
        return ExtTimetriggerMetaData;
    }(Ext_field_trigger_Time));
    (function () { ExtTimetriggerMetaData.getAll(); })();
    var ExtTimetriggerComponent = /** @class */ (function (_super) {
        __extends(ExtTimetriggerComponent, _super);
        function ExtTimetriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTimetriggerMetaData.PROPERTIES, ExtTimetriggerMetaData.EVENTS) || this;
            _this.xtype = 'timetrigger';
            return _this;
        }
        ExtTimetriggerComponent_1 = ExtTimetriggerComponent;
        ExtTimetriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTimetriggerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTimetriggerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTimetriggerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTimetriggerComponent_1;
        ExtTimetriggerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTimetriggerComponent = ExtTimetriggerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-timetrigger',
                inputs: ExtTimetriggerMetaData.PROPERTIES,
                outputs: ExtTimetriggerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTimetriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTimetriggerComponent);
        return ExtTimetriggerComponent;
    }(EngBase));

    var ExtTriggerMetaData = /** @class */ (function (_super) {
        __extends(ExtTriggerMetaData, _super);
        function ExtTriggerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTriggerMetaData.getAll = function () {
            ExtTriggerMetaData.PROPERTIES = Ext_field_trigger_Trigger.getProperties(ExtTriggerMetaData.PROPERTIES);
            ExtTriggerMetaData.EVENTS = Ext_field_trigger_Trigger.getEvents(ExtTriggerMetaData.EVENTS);
            ExtTriggerMetaData.EVENTS.forEach(function (event) {
                ExtTriggerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTriggerMetaData.PROPERTIES = [];
        ExtTriggerMetaData.EVENTS = [];
        ExtTriggerMetaData.EVENTNAMES = [];
        return ExtTriggerMetaData;
    }(Ext_field_trigger_Trigger));
    (function () { ExtTriggerMetaData.getAll(); })();
    var ExtTriggerComponent = /** @class */ (function (_super) {
        __extends(ExtTriggerComponent, _super);
        function ExtTriggerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTriggerMetaData.PROPERTIES, ExtTriggerMetaData.EVENTS) || this;
            _this.xtype = 'trigger';
            return _this;
        }
        ExtTriggerComponent_1 = ExtTriggerComponent;
        ExtTriggerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTriggerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTriggerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTriggerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTriggerComponent_1;
        ExtTriggerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTriggerComponent = ExtTriggerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-trigger',
                inputs: ExtTriggerMetaData.PROPERTIES,
                outputs: ExtTriggerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTriggerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTriggerComponent);
        return ExtTriggerComponent;
    }(EngBase));

    var Ext_form_Url = /** @class */ (function (_super) {
        __extends(Ext_form_Url, _super);
        function Ext_form_Url() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_Url.getProperties = function (properties) {
            properties = properties.concat(Ext_form_Url.PROPERTIES);
            return Ext_field_Text.getProperties(properties);
        };
        Ext_form_Url.getEvents = function (events) {
            events = events.concat(Ext_form_Url.EVENTS);
            return Ext_field_Text.getEvents(events);
        };
        Ext_form_Url.PROPERTIES = [
            'autoCapitalize',
            'inputType',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_Url.EVENTS = [
            { name: 'action', parameters: 'urlfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'urlfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'urlfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'urlfield,newValue,oldValue' },
            { name: 'clearicontap', parameters: 'urlfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'urlfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'urlfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'urlfield,e' },
            { name: 'focusenter', parameters: 'urlfield,event' },
            { name: 'focusleave', parameters: 'urlfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'urlfield,e' },
            { name: 'keyup', parameters: 'urlfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'urlfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'urlfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'urlfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_Url;
    }(Ext_field_Text));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_Url.EVENTNAMES);
    //    return Ext_field_Text.getEventNames(eventnames);
    //}

    var ExtUrlfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtUrlfieldMetaData, _super);
        function ExtUrlfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtUrlfieldMetaData.getAll = function () {
            ExtUrlfieldMetaData.PROPERTIES = Ext_form_Url.getProperties(ExtUrlfieldMetaData.PROPERTIES);
            ExtUrlfieldMetaData.EVENTS = Ext_form_Url.getEvents(ExtUrlfieldMetaData.EVENTS);
            ExtUrlfieldMetaData.EVENTS.forEach(function (event) {
                ExtUrlfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtUrlfieldMetaData.PROPERTIES = [];
        ExtUrlfieldMetaData.EVENTS = [];
        ExtUrlfieldMetaData.EVENTNAMES = [];
        return ExtUrlfieldMetaData;
    }(Ext_form_Url));
    (function () { ExtUrlfieldMetaData.getAll(); })();
    var ExtUrlfieldComponent = /** @class */ (function (_super) {
        __extends(ExtUrlfieldComponent, _super);
        function ExtUrlfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtUrlfieldMetaData.PROPERTIES, ExtUrlfieldMetaData.EVENTS) || this;
            _this.xtype = 'urlfield';
            return _this;
        }
        ExtUrlfieldComponent_1 = ExtUrlfieldComponent;
        ExtUrlfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtUrlfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtUrlfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtUrlfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtUrlfieldComponent_1;
        ExtUrlfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtUrlfieldComponent = ExtUrlfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-urlfield',
                inputs: ExtUrlfieldMetaData.PROPERTIES,
                outputs: ExtUrlfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtUrlfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtUrlfieldComponent);
        return ExtUrlfieldComponent;
    }(EngBase));

    var Ext_form_FieldSet = /** @class */ (function (_super) {
        __extends(Ext_form_FieldSet, _super);
        function Ext_form_FieldSet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_FieldSet.getProperties = function (properties) {
            properties = properties.concat(Ext_form_FieldSet.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_form_FieldSet.getEvents = function (events) {
            events = events.concat(Ext_form_FieldSet.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_form_FieldSet.PROPERTIES = [
            'fieldDefaults',
            'instructions',
            'title',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_FieldSet.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,fieldset,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'fieldset,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'fieldset' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'fieldset,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,fieldset,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'fieldset,event' },
            { name: 'focusenter', parameters: 'fieldset,event' },
            { name: 'focusleave', parameters: 'fieldset,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'fieldset,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'fieldset,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'fieldset,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'fieldset' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_FieldSet;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_FieldSet.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var ExtFieldsetMetaData = /** @class */ (function (_super) {
        __extends(ExtFieldsetMetaData, _super);
        function ExtFieldsetMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtFieldsetMetaData.getAll = function () {
            ExtFieldsetMetaData.PROPERTIES = Ext_form_FieldSet.getProperties(ExtFieldsetMetaData.PROPERTIES);
            ExtFieldsetMetaData.EVENTS = Ext_form_FieldSet.getEvents(ExtFieldsetMetaData.EVENTS);
            ExtFieldsetMetaData.EVENTS.forEach(function (event) {
                ExtFieldsetMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtFieldsetMetaData.PROPERTIES = [];
        ExtFieldsetMetaData.EVENTS = [];
        ExtFieldsetMetaData.EVENTNAMES = [];
        return ExtFieldsetMetaData;
    }(Ext_form_FieldSet));
    (function () { ExtFieldsetMetaData.getAll(); })();
    var ExtFieldsetComponent = /** @class */ (function (_super) {
        __extends(ExtFieldsetComponent, _super);
        function ExtFieldsetComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtFieldsetMetaData.PROPERTIES, ExtFieldsetMetaData.EVENTS) || this;
            _this.xtype = 'fieldset';
            return _this;
        }
        ExtFieldsetComponent_1 = ExtFieldsetComponent;
        ExtFieldsetComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtFieldsetComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtFieldsetComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtFieldsetComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtFieldsetComponent_1;
        ExtFieldsetComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtFieldsetComponent = ExtFieldsetComponent_1 = __decorate([
            core.Component({
                selector: 'ext-fieldset',
                inputs: ExtFieldsetMetaData.PROPERTIES,
                outputs: ExtFieldsetMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtFieldsetComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtFieldsetComponent);
        return ExtFieldsetComponent;
    }(EngBase));

    var Ext_form_FormPanel = /** @class */ (function (_super) {
        __extends(Ext_form_FormPanel, _super);
        function Ext_form_FormPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_form_FormPanel.getProperties = function (properties) {
            properties = properties.concat(Ext_form_FormPanel.PROPERTIES);
            return Ext_field_Panel.getProperties(properties);
        };
        Ext_form_FormPanel.getEvents = function (events) {
            events = events.concat(Ext_form_FormPanel.EVENTS);
            return Ext_field_Panel.getEvents(events);
        };
        Ext_form_FormPanel.PROPERTIES = [
            'enableSubmissionForm',
            'enctype',
            'fieldDefaults',
            'jsonSubmit',
            'method',
            'multipartDetection',
            'standardSubmit',
            'submitOnAction',
            'trackResetOnLoad',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_form_FormPanel.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,formpanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'formpanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'formpanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'formpanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'formpanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'formpanel,values,options,e' },
            { name: 'beforetofront', parameters: 'formpanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'formpanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'formpanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,formpanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'formpanel,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'formpanel' },
            { name: 'drawershow', parameters: 'formpanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'formpanel,result' },
            { name: 'expand', parameters: 'formpanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'formpanel,event' },
            { name: 'focusenter', parameters: 'formpanel,event' },
            { name: 'focusleave', parameters: 'formpanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'formpanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'formpanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'formpanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'formpanel,context' },
            { name: 'resizedragcancel', parameters: 'formpanel,context' },
            { name: 'resizedragend', parameters: 'formpanel,context' },
            { name: 'resizedragstart', parameters: 'formpanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'formpanel,result,e' },
            { name: 'tofront', parameters: 'formpanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_form_FormPanel;
    }(Ext_field_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_form_FormPanel.EVENTNAMES);
    //    return Ext_field_Panel.getEventNames(eventnames);
    //}

    var ExtFormpanelMetaData = /** @class */ (function (_super) {
        __extends(ExtFormpanelMetaData, _super);
        function ExtFormpanelMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtFormpanelMetaData.getAll = function () {
            ExtFormpanelMetaData.PROPERTIES = Ext_form_FormPanel.getProperties(ExtFormpanelMetaData.PROPERTIES);
            ExtFormpanelMetaData.EVENTS = Ext_form_FormPanel.getEvents(ExtFormpanelMetaData.EVENTS);
            ExtFormpanelMetaData.EVENTS.forEach(function (event) {
                ExtFormpanelMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtFormpanelMetaData.PROPERTIES = [];
        ExtFormpanelMetaData.EVENTS = [];
        ExtFormpanelMetaData.EVENTNAMES = [];
        return ExtFormpanelMetaData;
    }(Ext_form_FormPanel));
    (function () { ExtFormpanelMetaData.getAll(); })();
    var ExtFormpanelComponent = /** @class */ (function (_super) {
        __extends(ExtFormpanelComponent, _super);
        function ExtFormpanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtFormpanelMetaData.PROPERTIES, ExtFormpanelMetaData.EVENTS) || this;
            _this.xtype = 'formpanel';
            return _this;
        }
        ExtFormpanelComponent_1 = ExtFormpanelComponent;
        ExtFormpanelComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtFormpanelComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtFormpanelComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtFormpanelComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtFormpanelComponent_1;
        ExtFormpanelComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtFormpanelComponent = ExtFormpanelComponent_1 = __decorate([
            core.Component({
                selector: 'ext-formpanel',
                inputs: ExtFormpanelMetaData.PROPERTIES,
                outputs: ExtFormpanelMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtFormpanelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtFormpanelComponent);
        return ExtFormpanelComponent;
    }(EngBase));

    var Ext_froala_Editor = /** @class */ (function (_super) {
        __extends(Ext_froala_Editor, _super);
        function Ext_froala_Editor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_froala_Editor.getProperties = function (properties) {
            properties = properties.concat(Ext_froala_Editor.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_froala_Editor.getEvents = function (events) {
            events = events.concat(Ext_froala_Editor.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_froala_Editor.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_froala_Editor.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'froalaeditor' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'froalaeditor,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'froalaeditor,the' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'froalaeditor,event' },
            { name: 'focusenter', parameters: 'froalaeditor,event' },
            { name: 'focusleave', parameters: 'froalaeditor,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'ready', parameters: 'froalaeditor,the' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'froalaeditor' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_froala_Editor;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_froala_Editor.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtFroalaeditorMetaData = /** @class */ (function (_super) {
        __extends(ExtFroalaeditorMetaData, _super);
        function ExtFroalaeditorMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtFroalaeditorMetaData.getAll = function () {
            ExtFroalaeditorMetaData.PROPERTIES = Ext_froala_Editor.getProperties(ExtFroalaeditorMetaData.PROPERTIES);
            ExtFroalaeditorMetaData.EVENTS = Ext_froala_Editor.getEvents(ExtFroalaeditorMetaData.EVENTS);
            ExtFroalaeditorMetaData.EVENTS.forEach(function (event) {
                ExtFroalaeditorMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtFroalaeditorMetaData.PROPERTIES = [];
        ExtFroalaeditorMetaData.EVENTS = [];
        ExtFroalaeditorMetaData.EVENTNAMES = [];
        return ExtFroalaeditorMetaData;
    }(Ext_froala_Editor));
    (function () { ExtFroalaeditorMetaData.getAll(); })();
    var ExtFroalaeditorComponent = /** @class */ (function (_super) {
        __extends(ExtFroalaeditorComponent, _super);
        function ExtFroalaeditorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtFroalaeditorMetaData.PROPERTIES, ExtFroalaeditorMetaData.EVENTS) || this;
            _this.xtype = 'froalaeditor';
            return _this;
        }
        ExtFroalaeditorComponent_1 = ExtFroalaeditorComponent;
        ExtFroalaeditorComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtFroalaeditorComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtFroalaeditorComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtFroalaeditorComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtFroalaeditorComponent_1;
        ExtFroalaeditorComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtFroalaeditorComponent = ExtFroalaeditorComponent_1 = __decorate([
            core.Component({
                selector: 'ext-froalaeditor',
                inputs: ExtFroalaeditorMetaData.PROPERTIES,
                outputs: ExtFroalaeditorMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtFroalaeditorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtFroalaeditorComponent);
        return ExtFroalaeditorComponent;
    }(EngBase));

    var Ext_froala_EditorField = /** @class */ (function (_super) {
        __extends(Ext_froala_EditorField, _super);
        function Ext_froala_EditorField() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_froala_EditorField.getProperties = function (properties) {
            properties = properties.concat(Ext_froala_EditorField.PROPERTIES);
            return Ext_field_Container.getProperties(properties);
        };
        Ext_froala_EditorField.getEvents = function (events) {
            events = events.concat(Ext_froala_EditorField.EVENTS);
            return Ext_field_Container.getEvents(events);
        };
        Ext_froala_EditorField.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_froala_EditorField.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'froalaeditorfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'froalaeditorfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'froalaeditorfield,the' },
            { name: 'click', parameters: 'e' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'froalaeditorfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'froalaeditorfield,error' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'froalaeditorfield,event' },
            { name: 'focusenter', parameters: 'froalaeditorfield,event' },
            { name: 'focusleave', parameters: 'froalaeditorfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keyup', parameters: 'e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'ready', parameters: 'froalaeditorfield,the' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'froalaeditorfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_froala_EditorField;
    }(Ext_field_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_froala_EditorField.EVENTNAMES);
    //    return Ext_field_Container.getEventNames(eventnames);
    //}

    var ExtFroalaeditorfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtFroalaeditorfieldMetaData, _super);
        function ExtFroalaeditorfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtFroalaeditorfieldMetaData.getAll = function () {
            ExtFroalaeditorfieldMetaData.PROPERTIES = Ext_froala_EditorField.getProperties(ExtFroalaeditorfieldMetaData.PROPERTIES);
            ExtFroalaeditorfieldMetaData.EVENTS = Ext_froala_EditorField.getEvents(ExtFroalaeditorfieldMetaData.EVENTS);
            ExtFroalaeditorfieldMetaData.EVENTS.forEach(function (event) {
                ExtFroalaeditorfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtFroalaeditorfieldMetaData.PROPERTIES = [];
        ExtFroalaeditorfieldMetaData.EVENTS = [];
        ExtFroalaeditorfieldMetaData.EVENTNAMES = [];
        return ExtFroalaeditorfieldMetaData;
    }(Ext_froala_EditorField));
    (function () { ExtFroalaeditorfieldMetaData.getAll(); })();
    var ExtFroalaeditorfieldComponent = /** @class */ (function (_super) {
        __extends(ExtFroalaeditorfieldComponent, _super);
        function ExtFroalaeditorfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtFroalaeditorfieldMetaData.PROPERTIES, ExtFroalaeditorfieldMetaData.EVENTS) || this;
            _this.xtype = 'froalaeditorfield';
            return _this;
        }
        ExtFroalaeditorfieldComponent_1 = ExtFroalaeditorfieldComponent;
        ExtFroalaeditorfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtFroalaeditorfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtFroalaeditorfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtFroalaeditorfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtFroalaeditorfieldComponent_1;
        ExtFroalaeditorfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtFroalaeditorfieldComponent = ExtFroalaeditorfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-froalaeditorfield',
                inputs: ExtFroalaeditorfieldMetaData.PROPERTIES,
                outputs: ExtFroalaeditorfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtFroalaeditorfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtFroalaeditorfieldComponent);
        return ExtFroalaeditorfieldComponent;
    }(EngBase));

    var Ext_grid_cell_Base = /** @class */ (function (_super) {
        __extends(Ext_grid_cell_Base, _super);
        function Ext_grid_cell_Base() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_cell_Base.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_cell_Base.PROPERTIES);
            return Ext_Widget.getProperties(properties);
        };
        Ext_grid_cell_Base.getEvents = function (events) {
            events = events.concat(Ext_grid_cell_Base.EVENTS);
            return Ext_Widget.getEvents(events);
        };
        Ext_grid_cell_Base.PROPERTIES = [
            'align',
            'bodyCls',
            'bodyStyle',
            'cellCls',
            'cls',
            'column',
            'hidden',
            'record',
            'selectable',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_cell_Base.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'gridcellbase' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcellbase,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'gridcellbase,event' },
            { name: 'focusenter', parameters: 'gridcellbase,event' },
            { name: 'focusleave', parameters: 'gridcellbase,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'gridcellbase' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_cell_Base;
    }(Ext_Widget));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_cell_Base.EVENTNAMES);
    //    return Ext_Widget.getEventNames(eventnames);
    //}

    var ExtGridcellbaseMetaData = /** @class */ (function (_super) {
        __extends(ExtGridcellbaseMetaData, _super);
        function ExtGridcellbaseMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtGridcellbaseMetaData.getAll = function () {
            ExtGridcellbaseMetaData.PROPERTIES = Ext_grid_cell_Base.getProperties(ExtGridcellbaseMetaData.PROPERTIES);
            ExtGridcellbaseMetaData.EVENTS = Ext_grid_cell_Base.getEvents(ExtGridcellbaseMetaData.EVENTS);
            ExtGridcellbaseMetaData.EVENTS.forEach(function (event) {
                ExtGridcellbaseMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtGridcellbaseMetaData.PROPERTIES = [];
        ExtGridcellbaseMetaData.EVENTS = [];
        ExtGridcellbaseMetaData.EVENTNAMES = [];
        return ExtGridcellbaseMetaData;
    }(Ext_grid_cell_Base));
    (function () { ExtGridcellbaseMetaData.getAll(); })();
    var ExtGridcellbaseComponent = /** @class */ (function (_super) {
        __extends(ExtGridcellbaseComponent, _super);
        function ExtGridcellbaseComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtGridcellbaseMetaData.PROPERTIES, ExtGridcellbaseMetaData.EVENTS) || this;
            _this.xtype = 'gridcellbase';
            return _this;
        }
        ExtGridcellbaseComponent_1 = ExtGridcellbaseComponent;
        ExtGridcellbaseComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtGridcellbaseComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtGridcellbaseComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtGridcellbaseComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtGridcellbaseComponent_1;
        ExtGridcellbaseComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtGridcellbaseComponent = ExtGridcellbaseComponent_1 = __decorate([
            core.Component({
                selector: 'ext-gridcellbase',
                inputs: ExtGridcellbaseMetaData.PROPERTIES,
                outputs: ExtGridcellbaseMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtGridcellbaseComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtGridcellbaseComponent);
        return ExtGridcellbaseComponent;
    }(EngBase));

    var Ext_grid_cell_Text = /** @class */ (function (_super) {
        __extends(Ext_grid_cell_Text, _super);
        function Ext_grid_cell_Text() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_cell_Text.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_cell_Text.PROPERTIES);
            return Ext_grid_cell_Base.getProperties(properties);
        };
        Ext_grid_cell_Text.getEvents = function (events) {
            events = events.concat(Ext_grid_cell_Text.EVENTS);
            return Ext_grid_cell_Base.getEvents(events);
        };
        Ext_grid_cell_Text.PROPERTIES = [
            'encodeHtml',
            'rawValue',
            'zeroValue',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_cell_Text.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'textcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'textcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'textcell,event' },
            { name: 'focusenter', parameters: 'textcell,event' },
            { name: 'focusleave', parameters: 'textcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'textcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_cell_Text;
    }(Ext_grid_cell_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_cell_Text.EVENTNAMES);
    //    return Ext_grid_cell_Base.getEventNames(eventnames);
    //}

    var Ext_grid_cell_Boolean = /** @class */ (function (_super) {
        __extends(Ext_grid_cell_Boolean, _super);
        function Ext_grid_cell_Boolean() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_cell_Boolean.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_cell_Boolean.PROPERTIES);
            return Ext_grid_cell_Text.getProperties(properties);
        };
        Ext_grid_cell_Boolean.getEvents = function (events) {
            events = events.concat(Ext_grid_cell_Boolean.EVENTS);
            return Ext_grid_cell_Text.getEvents(events);
        };
        Ext_grid_cell_Boolean.PROPERTIES = [
            'falseText',
            'trueText',
            'undefinedText',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_cell_Boolean.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'booleancell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'booleancell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'booleancell,event' },
            { name: 'focusenter', parameters: 'booleancell,event' },
            { name: 'focusleave', parameters: 'booleancell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'booleancell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_cell_Boolean;
    }(Ext_grid_cell_Text));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_cell_Boolean.EVENTNAMES);
    //    return Ext_grid_cell_Text.getEventNames(eventnames);
    //}

    var ExtBooleancellMetaData = /** @class */ (function (_super) {
        __extends(ExtBooleancellMetaData, _super);
        function ExtBooleancellMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtBooleancellMetaData.getAll = function () {
            ExtBooleancellMetaData.PROPERTIES = Ext_grid_cell_Boolean.getProperties(ExtBooleancellMetaData.PROPERTIES);
            ExtBooleancellMetaData.EVENTS = Ext_grid_cell_Boolean.getEvents(ExtBooleancellMetaData.EVENTS);
            ExtBooleancellMetaData.EVENTS.forEach(function (event) {
                ExtBooleancellMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtBooleancellMetaData.PROPERTIES = [];
        ExtBooleancellMetaData.EVENTS = [];
        ExtBooleancellMetaData.EVENTNAMES = [];
        return ExtBooleancellMetaData;
    }(Ext_grid_cell_Boolean));
    (function () { ExtBooleancellMetaData.getAll(); })();
    var ExtBooleancellComponent = /** @class */ (function (_super) {
        __extends(ExtBooleancellComponent, _super);
        function ExtBooleancellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtBooleancellMetaData.PROPERTIES, ExtBooleancellMetaData.EVENTS) || this;
            _this.xtype = 'booleancell';
            return _this;
        }
        ExtBooleancellComponent_1 = ExtBooleancellComponent;
        ExtBooleancellComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtBooleancellComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtBooleancellComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtBooleancellComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtBooleancellComponent_1;
        ExtBooleancellComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtBooleancellComponent = ExtBooleancellComponent_1 = __decorate([
            core.Component({
                selector: 'ext-booleancell',
                inputs: ExtBooleancellMetaData.PROPERTIES,
                outputs: ExtBooleancellMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtBooleancellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtBooleancellComponent);
        return ExtBooleancellComponent;
    }(EngBase));

    var Ext_grid_cell_Cell = /** @class */ (function (_super) {
        __extends(Ext_grid_cell_Cell, _super);
        function Ext_grid_cell_Cell() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_cell_Cell.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_cell_Cell.PROPERTIES);
            return Ext_grid_cell_Text.getProperties(properties);
        };
        Ext_grid_cell_Cell.getEvents = function (events) {
            events = events.concat(Ext_grid_cell_Cell.EVENTS);
            return Ext_grid_cell_Text.getEvents(events);
        };
        Ext_grid_cell_Cell.PROPERTIES = [
            'formatter',
            'renderer',
            'scope',
            'tpl',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_cell_Cell.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'gridcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'gridcell,event' },
            { name: 'focusenter', parameters: 'gridcell,event' },
            { name: 'focusleave', parameters: 'gridcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'gridcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_cell_Cell;
    }(Ext_grid_cell_Text));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_cell_Cell.EVENTNAMES);
    //    return Ext_grid_cell_Text.getEventNames(eventnames);
    //}

    var ExtGridcellMetaData = /** @class */ (function (_super) {
        __extends(ExtGridcellMetaData, _super);
        function ExtGridcellMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtGridcellMetaData.getAll = function () {
            ExtGridcellMetaData.PROPERTIES = Ext_grid_cell_Cell.getProperties(ExtGridcellMetaData.PROPERTIES);
            ExtGridcellMetaData.EVENTS = Ext_grid_cell_Cell.getEvents(ExtGridcellMetaData.EVENTS);
            ExtGridcellMetaData.EVENTS.forEach(function (event) {
                ExtGridcellMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtGridcellMetaData.PROPERTIES = [];
        ExtGridcellMetaData.EVENTS = [];
        ExtGridcellMetaData.EVENTNAMES = [];
        return ExtGridcellMetaData;
    }(Ext_grid_cell_Cell));
    (function () { ExtGridcellMetaData.getAll(); })();
    var ExtGridcellComponent = /** @class */ (function (_super) {
        __extends(ExtGridcellComponent, _super);
        function ExtGridcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtGridcellMetaData.PROPERTIES, ExtGridcellMetaData.EVENTS) || this;
            _this.xtype = 'gridcell';
            return _this;
        }
        ExtGridcellComponent_1 = ExtGridcellComponent;
        ExtGridcellComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtGridcellComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtGridcellComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtGridcellComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtGridcellComponent_1;
        ExtGridcellComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtGridcellComponent = ExtGridcellComponent_1 = __decorate([
            core.Component({
                selector: 'ext-gridcell',
                inputs: ExtGridcellMetaData.PROPERTIES,
                outputs: ExtGridcellMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtGridcellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtGridcellComponent);
        return ExtGridcellComponent;
    }(EngBase));

    var Ext_grid_cell_Check = /** @class */ (function (_super) {
        __extends(Ext_grid_cell_Check, _super);
        function Ext_grid_cell_Check() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_cell_Check.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_cell_Check.PROPERTIES);
            return Ext_grid_cell_Base.getProperties(properties);
        };
        Ext_grid_cell_Check.getEvents = function (events) {
            events = events.concat(Ext_grid_cell_Check.EVENTS);
            return Ext_grid_cell_Base.getEvents(events);
        };
        Ext_grid_cell_Check.PROPERTIES = [
            'disabled',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_cell_Check.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'checkcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'checkcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'checkcell,event' },
            { name: 'focusenter', parameters: 'checkcell,event' },
            { name: 'focusleave', parameters: 'checkcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'checkcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_cell_Check;
    }(Ext_grid_cell_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_cell_Check.EVENTNAMES);
    //    return Ext_grid_cell_Base.getEventNames(eventnames);
    //}

    var ExtCheckcellMetaData = /** @class */ (function (_super) {
        __extends(ExtCheckcellMetaData, _super);
        function ExtCheckcellMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCheckcellMetaData.getAll = function () {
            ExtCheckcellMetaData.PROPERTIES = Ext_grid_cell_Check.getProperties(ExtCheckcellMetaData.PROPERTIES);
            ExtCheckcellMetaData.EVENTS = Ext_grid_cell_Check.getEvents(ExtCheckcellMetaData.EVENTS);
            ExtCheckcellMetaData.EVENTS.forEach(function (event) {
                ExtCheckcellMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCheckcellMetaData.PROPERTIES = [];
        ExtCheckcellMetaData.EVENTS = [];
        ExtCheckcellMetaData.EVENTNAMES = [];
        return ExtCheckcellMetaData;
    }(Ext_grid_cell_Check));
    (function () { ExtCheckcellMetaData.getAll(); })();
    var ExtCheckcellComponent = /** @class */ (function (_super) {
        __extends(ExtCheckcellComponent, _super);
        function ExtCheckcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCheckcellMetaData.PROPERTIES, ExtCheckcellMetaData.EVENTS) || this;
            _this.xtype = 'checkcell';
            return _this;
        }
        ExtCheckcellComponent_1 = ExtCheckcellComponent;
        ExtCheckcellComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCheckcellComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCheckcellComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCheckcellComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCheckcellComponent_1;
        ExtCheckcellComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCheckcellComponent = ExtCheckcellComponent_1 = __decorate([
            core.Component({
                selector: 'ext-checkcell',
                inputs: ExtCheckcellMetaData.PROPERTIES,
                outputs: ExtCheckcellMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCheckcellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCheckcellComponent);
        return ExtCheckcellComponent;
    }(EngBase));

    var Ext_grid_cell_Date = /** @class */ (function (_super) {
        __extends(Ext_grid_cell_Date, _super);
        function Ext_grid_cell_Date() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_cell_Date.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_cell_Date.PROPERTIES);
            return Ext_grid_cell_Text.getProperties(properties);
        };
        Ext_grid_cell_Date.getEvents = function (events) {
            events = events.concat(Ext_grid_cell_Date.EVENTS);
            return Ext_grid_cell_Text.getEvents(events);
        };
        Ext_grid_cell_Date.PROPERTIES = [
            'format',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_cell_Date.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'datecell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datecell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'datecell,event' },
            { name: 'focusenter', parameters: 'datecell,event' },
            { name: 'focusleave', parameters: 'datecell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'datecell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_cell_Date;
    }(Ext_grid_cell_Text));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_cell_Date.EVENTNAMES);
    //    return Ext_grid_cell_Text.getEventNames(eventnames);
    //}

    var ExtDatecellMetaData = /** @class */ (function (_super) {
        __extends(ExtDatecellMetaData, _super);
        function ExtDatecellMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtDatecellMetaData.getAll = function () {
            ExtDatecellMetaData.PROPERTIES = Ext_grid_cell_Date.getProperties(ExtDatecellMetaData.PROPERTIES);
            ExtDatecellMetaData.EVENTS = Ext_grid_cell_Date.getEvents(ExtDatecellMetaData.EVENTS);
            ExtDatecellMetaData.EVENTS.forEach(function (event) {
                ExtDatecellMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtDatecellMetaData.PROPERTIES = [];
        ExtDatecellMetaData.EVENTS = [];
        ExtDatecellMetaData.EVENTNAMES = [];
        return ExtDatecellMetaData;
    }(Ext_grid_cell_Date));
    (function () { ExtDatecellMetaData.getAll(); })();
    var ExtDatecellComponent = /** @class */ (function (_super) {
        __extends(ExtDatecellComponent, _super);
        function ExtDatecellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtDatecellMetaData.PROPERTIES, ExtDatecellMetaData.EVENTS) || this;
            _this.xtype = 'datecell';
            return _this;
        }
        ExtDatecellComponent_1 = ExtDatecellComponent;
        ExtDatecellComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtDatecellComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtDatecellComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtDatecellComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtDatecellComponent_1;
        ExtDatecellComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtDatecellComponent = ExtDatecellComponent_1 = __decorate([
            core.Component({
                selector: 'ext-datecell',
                inputs: ExtDatecellMetaData.PROPERTIES,
                outputs: ExtDatecellMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtDatecellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtDatecellComponent);
        return ExtDatecellComponent;
    }(EngBase));

    var Ext_grid_cell_Number = /** @class */ (function (_super) {
        __extends(Ext_grid_cell_Number, _super);
        function Ext_grid_cell_Number() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_cell_Number.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_cell_Number.PROPERTIES);
            return Ext_grid_cell_Text.getProperties(properties);
        };
        Ext_grid_cell_Number.getEvents = function (events) {
            events = events.concat(Ext_grid_cell_Number.EVENTS);
            return Ext_grid_cell_Text.getEvents(events);
        };
        Ext_grid_cell_Number.PROPERTIES = [
            'format',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_cell_Number.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'numbercell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'numbercell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'numbercell,event' },
            { name: 'focusenter', parameters: 'numbercell,event' },
            { name: 'focusleave', parameters: 'numbercell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'numbercell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_cell_Number;
    }(Ext_grid_cell_Text));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_cell_Number.EVENTNAMES);
    //    return Ext_grid_cell_Text.getEventNames(eventnames);
    //}

    var ExtNumbercellMetaData = /** @class */ (function (_super) {
        __extends(ExtNumbercellMetaData, _super);
        function ExtNumbercellMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtNumbercellMetaData.getAll = function () {
            ExtNumbercellMetaData.PROPERTIES = Ext_grid_cell_Number.getProperties(ExtNumbercellMetaData.PROPERTIES);
            ExtNumbercellMetaData.EVENTS = Ext_grid_cell_Number.getEvents(ExtNumbercellMetaData.EVENTS);
            ExtNumbercellMetaData.EVENTS.forEach(function (event) {
                ExtNumbercellMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtNumbercellMetaData.PROPERTIES = [];
        ExtNumbercellMetaData.EVENTS = [];
        ExtNumbercellMetaData.EVENTNAMES = [];
        return ExtNumbercellMetaData;
    }(Ext_grid_cell_Number));
    (function () { ExtNumbercellMetaData.getAll(); })();
    var ExtNumbercellComponent = /** @class */ (function (_super) {
        __extends(ExtNumbercellComponent, _super);
        function ExtNumbercellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtNumbercellMetaData.PROPERTIES, ExtNumbercellMetaData.EVENTS) || this;
            _this.xtype = 'numbercell';
            return _this;
        }
        ExtNumbercellComponent_1 = ExtNumbercellComponent;
        ExtNumbercellComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtNumbercellComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtNumbercellComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtNumbercellComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtNumbercellComponent_1;
        ExtNumbercellComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtNumbercellComponent = ExtNumbercellComponent_1 = __decorate([
            core.Component({
                selector: 'ext-numbercell',
                inputs: ExtNumbercellMetaData.PROPERTIES,
                outputs: ExtNumbercellMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtNumbercellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtNumbercellComponent);
        return ExtNumbercellComponent;
    }(EngBase));

    var Ext_grid_cell_RowNumberer = /** @class */ (function (_super) {
        __extends(Ext_grid_cell_RowNumberer, _super);
        function Ext_grid_cell_RowNumberer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_cell_RowNumberer.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_cell_RowNumberer.PROPERTIES);
            return Ext_grid_cell_Number.getProperties(properties);
        };
        Ext_grid_cell_RowNumberer.getEvents = function (events) {
            events = events.concat(Ext_grid_cell_RowNumberer.EVENTS);
            return Ext_grid_cell_Number.getEvents(events);
        };
        Ext_grid_cell_RowNumberer.PROPERTIES = [
            'format',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_cell_RowNumberer.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'rownumberercell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'rownumberercell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'rownumberercell,event' },
            { name: 'focusenter', parameters: 'rownumberercell,event' },
            { name: 'focusleave', parameters: 'rownumberercell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'rownumberercell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_cell_RowNumberer;
    }(Ext_grid_cell_Number));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_cell_RowNumberer.EVENTNAMES);
    //    return Ext_grid_cell_Number.getEventNames(eventnames);
    //}

    var ExtRownumberercellMetaData = /** @class */ (function (_super) {
        __extends(ExtRownumberercellMetaData, _super);
        function ExtRownumberercellMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtRownumberercellMetaData.getAll = function () {
            ExtRownumberercellMetaData.PROPERTIES = Ext_grid_cell_RowNumberer.getProperties(ExtRownumberercellMetaData.PROPERTIES);
            ExtRownumberercellMetaData.EVENTS = Ext_grid_cell_RowNumberer.getEvents(ExtRownumberercellMetaData.EVENTS);
            ExtRownumberercellMetaData.EVENTS.forEach(function (event) {
                ExtRownumberercellMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtRownumberercellMetaData.PROPERTIES = [];
        ExtRownumberercellMetaData.EVENTS = [];
        ExtRownumberercellMetaData.EVENTNAMES = [];
        return ExtRownumberercellMetaData;
    }(Ext_grid_cell_RowNumberer));
    (function () { ExtRownumberercellMetaData.getAll(); })();
    var ExtRownumberercellComponent = /** @class */ (function (_super) {
        __extends(ExtRownumberercellComponent, _super);
        function ExtRownumberercellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtRownumberercellMetaData.PROPERTIES, ExtRownumberercellMetaData.EVENTS) || this;
            _this.xtype = 'rownumberercell';
            return _this;
        }
        ExtRownumberercellComponent_1 = ExtRownumberercellComponent;
        ExtRownumberercellComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtRownumberercellComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtRownumberercellComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtRownumberercellComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtRownumberercellComponent_1;
        ExtRownumberercellComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtRownumberercellComponent = ExtRownumberercellComponent_1 = __decorate([
            core.Component({
                selector: 'ext-rownumberercell',
                inputs: ExtRownumberercellMetaData.PROPERTIES,
                outputs: ExtRownumberercellMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtRownumberercellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtRownumberercellComponent);
        return ExtRownumberercellComponent;
    }(EngBase));

    var ExtTextcellMetaData = /** @class */ (function (_super) {
        __extends(ExtTextcellMetaData, _super);
        function ExtTextcellMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTextcellMetaData.getAll = function () {
            ExtTextcellMetaData.PROPERTIES = Ext_grid_cell_Text.getProperties(ExtTextcellMetaData.PROPERTIES);
            ExtTextcellMetaData.EVENTS = Ext_grid_cell_Text.getEvents(ExtTextcellMetaData.EVENTS);
            ExtTextcellMetaData.EVENTS.forEach(function (event) {
                ExtTextcellMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTextcellMetaData.PROPERTIES = [];
        ExtTextcellMetaData.EVENTS = [];
        ExtTextcellMetaData.EVENTNAMES = [];
        return ExtTextcellMetaData;
    }(Ext_grid_cell_Text));
    (function () { ExtTextcellMetaData.getAll(); })();
    var ExtTextcellComponent = /** @class */ (function (_super) {
        __extends(ExtTextcellComponent, _super);
        function ExtTextcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTextcellMetaData.PROPERTIES, ExtTextcellMetaData.EVENTS) || this;
            _this.xtype = 'textcell';
            return _this;
        }
        ExtTextcellComponent_1 = ExtTextcellComponent;
        ExtTextcellComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTextcellComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTextcellComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTextcellComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTextcellComponent_1;
        ExtTextcellComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTextcellComponent = ExtTextcellComponent_1 = __decorate([
            core.Component({
                selector: 'ext-textcell',
                inputs: ExtTextcellMetaData.PROPERTIES,
                outputs: ExtTextcellMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTextcellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTextcellComponent);
        return ExtTextcellComponent;
    }(EngBase));

    var Ext_grid_cell_Tree = /** @class */ (function (_super) {
        __extends(Ext_grid_cell_Tree, _super);
        function Ext_grid_cell_Tree() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_cell_Tree.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_cell_Tree.PROPERTIES);
            return Ext_grid_cell_Cell.getProperties(properties);
        };
        Ext_grid_cell_Tree.getEvents = function (events) {
            events = events.concat(Ext_grid_cell_Tree.EVENTS);
            return Ext_grid_cell_Cell.getEvents(events);
        };
        Ext_grid_cell_Tree.PROPERTIES = [
            'autoCheckChildren',
            'checkable',
            'checkableField',
            'checkedField',
            'checkOnTriTap',
            'enableTri',
            'iconCls',
            'iconClsProperty',
            'text',
            'toolDefaults',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_cell_Tree.EVENTS = [
            { name: 'beforecheckchange', parameters: 'treecell,checked,current,record,e' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'treecell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'treecell,event' },
            { name: 'checkchange', parameters: 'treecell,checked,record,e' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'treecell,event' },
            { name: 'focusenter', parameters: 'treecell,event' },
            { name: 'focusleave', parameters: 'treecell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'treecell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_cell_Tree;
    }(Ext_grid_cell_Cell));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_cell_Tree.EVENTNAMES);
    //    return Ext_grid_cell_Cell.getEventNames(eventnames);
    //}

    var ExtTreecellMetaData = /** @class */ (function (_super) {
        __extends(ExtTreecellMetaData, _super);
        function ExtTreecellMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTreecellMetaData.getAll = function () {
            ExtTreecellMetaData.PROPERTIES = Ext_grid_cell_Tree.getProperties(ExtTreecellMetaData.PROPERTIES);
            ExtTreecellMetaData.EVENTS = Ext_grid_cell_Tree.getEvents(ExtTreecellMetaData.EVENTS);
            ExtTreecellMetaData.EVENTS.forEach(function (event) {
                ExtTreecellMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTreecellMetaData.PROPERTIES = [];
        ExtTreecellMetaData.EVENTS = [];
        ExtTreecellMetaData.EVENTNAMES = [];
        return ExtTreecellMetaData;
    }(Ext_grid_cell_Tree));
    (function () { ExtTreecellMetaData.getAll(); })();
    var ExtTreecellComponent = /** @class */ (function (_super) {
        __extends(ExtTreecellComponent, _super);
        function ExtTreecellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTreecellMetaData.PROPERTIES, ExtTreecellMetaData.EVENTS) || this;
            _this.xtype = 'treecell';
            return _this;
        }
        ExtTreecellComponent_1 = ExtTreecellComponent;
        ExtTreecellComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTreecellComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTreecellComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTreecellComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTreecellComponent_1;
        ExtTreecellComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTreecellComponent = ExtTreecellComponent_1 = __decorate([
            core.Component({
                selector: 'ext-treecell',
                inputs: ExtTreecellMetaData.PROPERTIES,
                outputs: ExtTreecellMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTreecellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTreecellComponent);
        return ExtTreecellComponent;
    }(EngBase));

    var Ext_grid_cell_Widget = /** @class */ (function (_super) {
        __extends(Ext_grid_cell_Widget, _super);
        function Ext_grid_cell_Widget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_cell_Widget.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_cell_Widget.PROPERTIES);
            return Ext_grid_cell_Base.getProperties(properties);
        };
        Ext_grid_cell_Widget.getEvents = function (events) {
            events = events.concat(Ext_grid_cell_Widget.EVENTS);
            return Ext_grid_cell_Base.getEvents(events);
        };
        Ext_grid_cell_Widget.PROPERTIES = [
            'align',
            'forceWidth',
            'selectable',
            'widget',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_cell_Widget.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'widgetcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'widgetcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'widgetcell,event' },
            { name: 'focusenter', parameters: 'widgetcell,event' },
            { name: 'focusleave', parameters: 'widgetcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'widgetcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_cell_Widget;
    }(Ext_grid_cell_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_cell_Widget.EVENTNAMES);
    //    return Ext_grid_cell_Base.getEventNames(eventnames);
    //}

    var ExtWidgetcellMetaData = /** @class */ (function (_super) {
        __extends(ExtWidgetcellMetaData, _super);
        function ExtWidgetcellMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtWidgetcellMetaData.getAll = function () {
            ExtWidgetcellMetaData.PROPERTIES = Ext_grid_cell_Widget.getProperties(ExtWidgetcellMetaData.PROPERTIES);
            ExtWidgetcellMetaData.EVENTS = Ext_grid_cell_Widget.getEvents(ExtWidgetcellMetaData.EVENTS);
            ExtWidgetcellMetaData.EVENTS.forEach(function (event) {
                ExtWidgetcellMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtWidgetcellMetaData.PROPERTIES = [];
        ExtWidgetcellMetaData.EVENTS = [];
        ExtWidgetcellMetaData.EVENTNAMES = [];
        return ExtWidgetcellMetaData;
    }(Ext_grid_cell_Widget));
    (function () { ExtWidgetcellMetaData.getAll(); })();
    var ExtWidgetcellComponent = /** @class */ (function (_super) {
        __extends(ExtWidgetcellComponent, _super);
        function ExtWidgetcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtWidgetcellMetaData.PROPERTIES, ExtWidgetcellMetaData.EVENTS) || this;
            _this.xtype = 'widgetcell';
            return _this;
        }
        ExtWidgetcellComponent_1 = ExtWidgetcellComponent;
        ExtWidgetcellComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtWidgetcellComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtWidgetcellComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtWidgetcellComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtWidgetcellComponent_1;
        ExtWidgetcellComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtWidgetcellComponent = ExtWidgetcellComponent_1 = __decorate([
            core.Component({
                selector: 'ext-widgetcell',
                inputs: ExtWidgetcellMetaData.PROPERTIES,
                outputs: ExtWidgetcellMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtWidgetcellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtWidgetcellComponent);
        return ExtWidgetcellComponent;
    }(EngBase));

    var Ext_grid_CellEditor = /** @class */ (function (_super) {
        __extends(Ext_grid_CellEditor, _super);
        function Ext_grid_CellEditor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_CellEditor.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_CellEditor.PROPERTIES);
            return Ext_Editor.getProperties(properties);
        };
        Ext_grid_CellEditor.getEvents = function (events) {
            events = events.concat(Ext_grid_CellEditor.EVENTS);
            return Ext_Editor.getEvents(events);
        };
        Ext_grid_CellEditor.PROPERTIES = [
            'autoPin',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_CellEditor.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,celleditor,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'celleditor,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecomplete', parameters: 'celleditor,value,startValue' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestartedit', parameters: 'celleditor,boundEl,value' },
            { name: 'beforetofront', parameters: 'celleditor' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'celleditor,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'canceledit', parameters: 'celleditor,value,startValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'complete', parameters: 'celleditor,value,startValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,celleditor,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'celleditor,event' },
            { name: 'focusenter', parameters: 'celleditor,event' },
            { name: 'focusleave', parameters: 'celleditor,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'celleditor,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'celleditor,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'celleditor,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'specialkey', parameters: 'celleditor,field,event' },
            { name: 'startedit', parameters: 'celleditor,boundEl,value' },
            { name: 'tofront', parameters: 'celleditor' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_CellEditor;
    }(Ext_Editor));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_CellEditor.EVENTNAMES);
    //    return Ext_Editor.getEventNames(eventnames);
    //}

    var ExtCelleditorMetaData = /** @class */ (function (_super) {
        __extends(ExtCelleditorMetaData, _super);
        function ExtCelleditorMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCelleditorMetaData.getAll = function () {
            ExtCelleditorMetaData.PROPERTIES = Ext_grid_CellEditor.getProperties(ExtCelleditorMetaData.PROPERTIES);
            ExtCelleditorMetaData.EVENTS = Ext_grid_CellEditor.getEvents(ExtCelleditorMetaData.EVENTS);
            ExtCelleditorMetaData.EVENTS.forEach(function (event) {
                ExtCelleditorMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCelleditorMetaData.PROPERTIES = [];
        ExtCelleditorMetaData.EVENTS = [];
        ExtCelleditorMetaData.EVENTNAMES = [];
        return ExtCelleditorMetaData;
    }(Ext_grid_CellEditor));
    (function () { ExtCelleditorMetaData.getAll(); })();
    var ExtCelleditorComponent = /** @class */ (function (_super) {
        __extends(ExtCelleditorComponent, _super);
        function ExtCelleditorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCelleditorMetaData.PROPERTIES, ExtCelleditorMetaData.EVENTS) || this;
            _this.xtype = 'celleditor';
            return _this;
        }
        ExtCelleditorComponent_1 = ExtCelleditorComponent;
        ExtCelleditorComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCelleditorComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCelleditorComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCelleditorComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCelleditorComponent_1;
        ExtCelleditorComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCelleditorComponent = ExtCelleditorComponent_1 = __decorate([
            core.Component({
                selector: 'ext-celleditor',
                inputs: ExtCelleditorMetaData.PROPERTIES,
                outputs: ExtCelleditorMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCelleditorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCelleditorComponent);
        return ExtCelleditorComponent;
    }(EngBase));

    var Ext_grid_HeaderContainer = /** @class */ (function (_super) {
        __extends(Ext_grid_HeaderContainer, _super);
        function Ext_grid_HeaderContainer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_HeaderContainer.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_HeaderContainer.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_grid_HeaderContainer.getEvents = function (events) {
            events = events.concat(Ext_grid_HeaderContainer.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_grid_HeaderContainer.PROPERTIES = [
            'columns',
            'defaultColumnUI',
            'reserveScrollbar',
            'sortable',
            'verticalOverflow',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_HeaderContainer.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,headercontainer,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'headercontainer,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'headercontainer' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'headercontainer,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,headercontainer,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'headercontainer,event' },
            { name: 'focusenter', parameters: 'headercontainer,event' },
            { name: 'focusleave', parameters: 'headercontainer,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'headercontainer,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'headercontainer,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'headercontainer,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'headercontainer' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_HeaderContainer;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_HeaderContainer.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var Ext_grid_column_Column = /** @class */ (function (_super) {
        __extends(Ext_grid_column_Column, _super);
        function Ext_grid_column_Column() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_column_Column.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_column_Column.PROPERTIES);
            return Ext_grid_HeaderContainer.getProperties(properties);
        };
        Ext_grid_column_Column.getEvents = function (events) {
            events = events.concat(Ext_grid_column_Column.EVENTS);
            return Ext_grid_HeaderContainer.getEvents(events);
        };
        Ext_grid_column_Column.PROPERTIES = [
            'align',
            'cell',
            'computedWidth',
            'dataIndex',
            'defaultEditor',
            'defaultWidth',
            'depends',
            'editable',
            'editor',
            'editorDefaults',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'formatter',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'hideable',
            'hideShowMenuItem',
            'ignore',
            'ignoreExport',
            'locked',
            'menu',
            'menuDisabled',
            'renderer',
            'resizable',
            'scope',
            'scratchCell',
            'sortable',
            'sorter',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'text',
            'tpl',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_column_Column.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,gridcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'gridcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,gridcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridcolumn,event' },
            { name: 'focusenter', parameters: 'gridcolumn,event' },
            { name: 'focusleave', parameters: 'gridcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'gridcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'gridcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'gridcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_column_Column;
    }(Ext_grid_HeaderContainer));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_column_Column.EVENTNAMES);
    //    return Ext_grid_HeaderContainer.getEventNames(eventnames);
    //}

    var Ext_grid_column_Boolean = /** @class */ (function (_super) {
        __extends(Ext_grid_column_Boolean, _super);
        function Ext_grid_column_Boolean() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_column_Boolean.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_column_Boolean.PROPERTIES);
            return Ext_grid_column_Column.getProperties(properties);
        };
        Ext_grid_column_Boolean.getEvents = function (events) {
            events = events.concat(Ext_grid_column_Boolean.EVENTS);
            return Ext_grid_column_Column.getEvents(events);
        };
        Ext_grid_column_Boolean.PROPERTIES = [
            'falseText',
            'trueText',
            'undefinedText',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_column_Boolean.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,booleancolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'booleancolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'booleancolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'booleancolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,booleancolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'booleancolumn,event' },
            { name: 'focusenter', parameters: 'booleancolumn,event' },
            { name: 'focusleave', parameters: 'booleancolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'booleancolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'booleancolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'booleancolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'booleancolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_column_Boolean;
    }(Ext_grid_column_Column));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_column_Boolean.EVENTNAMES);
    //    return Ext_grid_column_Column.getEventNames(eventnames);
    //}

    var ExtBooleancolumnMetaData = /** @class */ (function (_super) {
        __extends(ExtBooleancolumnMetaData, _super);
        function ExtBooleancolumnMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtBooleancolumnMetaData.getAll = function () {
            ExtBooleancolumnMetaData.PROPERTIES = Ext_grid_column_Boolean.getProperties(ExtBooleancolumnMetaData.PROPERTIES);
            ExtBooleancolumnMetaData.EVENTS = Ext_grid_column_Boolean.getEvents(ExtBooleancolumnMetaData.EVENTS);
            ExtBooleancolumnMetaData.EVENTS.forEach(function (event) {
                ExtBooleancolumnMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtBooleancolumnMetaData.PROPERTIES = [];
        ExtBooleancolumnMetaData.EVENTS = [];
        ExtBooleancolumnMetaData.EVENTNAMES = [];
        return ExtBooleancolumnMetaData;
    }(Ext_grid_column_Boolean));
    (function () { ExtBooleancolumnMetaData.getAll(); })();
    var ExtBooleancolumnComponent = /** @class */ (function (_super) {
        __extends(ExtBooleancolumnComponent, _super);
        function ExtBooleancolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtBooleancolumnMetaData.PROPERTIES, ExtBooleancolumnMetaData.EVENTS) || this;
            _this.xtype = 'booleancolumn';
            return _this;
        }
        ExtBooleancolumnComponent_1 = ExtBooleancolumnComponent;
        ExtBooleancolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtBooleancolumnComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtBooleancolumnComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtBooleancolumnComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtBooleancolumnComponent_1;
        ExtBooleancolumnComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtBooleancolumnComponent = ExtBooleancolumnComponent_1 = __decorate([
            core.Component({
                selector: 'ext-booleancolumn',
                inputs: ExtBooleancolumnMetaData.PROPERTIES,
                outputs: ExtBooleancolumnMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtBooleancolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtBooleancolumnComponent);
        return ExtBooleancolumnComponent;
    }(EngBase));

    var Ext_grid_column_Check = /** @class */ (function (_super) {
        __extends(Ext_grid_column_Check, _super);
        function Ext_grid_column_Check() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_column_Check.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_column_Check.PROPERTIES);
            return Ext_grid_column_Column.getProperties(properties);
        };
        Ext_grid_column_Check.getEvents = function (events) {
            events = events.concat(Ext_grid_column_Check.EVENTS);
            return Ext_grid_column_Column.getEvents(events);
        };
        Ext_grid_column_Check.PROPERTIES = [
            'align',
            'cell',
            'headerCheckbox',
            'headerCheckboxAlign',
            'ignoreExport',
            'stopSelection',
            'text',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_column_Check.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,checkcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'checkcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'checkcolumn,rowIndex,checked,record,e' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'checkcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'checkcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'checkcolumn,rowIndex,checked,record,e' },
            { name: 'deactivate', parameters: 'oldActiveItem,checkcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'checkcolumn,event' },
            { name: 'focusenter', parameters: 'checkcolumn,event' },
            { name: 'focusleave', parameters: 'checkcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'checkcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'checkcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'checkcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'checkcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_column_Check;
    }(Ext_grid_column_Column));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_column_Check.EVENTNAMES);
    //    return Ext_grid_column_Column.getEventNames(eventnames);
    //}

    var ExtCheckcolumnMetaData = /** @class */ (function (_super) {
        __extends(ExtCheckcolumnMetaData, _super);
        function ExtCheckcolumnMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtCheckcolumnMetaData.getAll = function () {
            ExtCheckcolumnMetaData.PROPERTIES = Ext_grid_column_Check.getProperties(ExtCheckcolumnMetaData.PROPERTIES);
            ExtCheckcolumnMetaData.EVENTS = Ext_grid_column_Check.getEvents(ExtCheckcolumnMetaData.EVENTS);
            ExtCheckcolumnMetaData.EVENTS.forEach(function (event) {
                ExtCheckcolumnMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtCheckcolumnMetaData.PROPERTIES = [];
        ExtCheckcolumnMetaData.EVENTS = [];
        ExtCheckcolumnMetaData.EVENTNAMES = [];
        return ExtCheckcolumnMetaData;
    }(Ext_grid_column_Check));
    (function () { ExtCheckcolumnMetaData.getAll(); })();
    var ExtCheckcolumnComponent = /** @class */ (function (_super) {
        __extends(ExtCheckcolumnComponent, _super);
        function ExtCheckcolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtCheckcolumnMetaData.PROPERTIES, ExtCheckcolumnMetaData.EVENTS) || this;
            _this.xtype = 'checkcolumn';
            return _this;
        }
        ExtCheckcolumnComponent_1 = ExtCheckcolumnComponent;
        ExtCheckcolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtCheckcolumnComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtCheckcolumnComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtCheckcolumnComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtCheckcolumnComponent_1;
        ExtCheckcolumnComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtCheckcolumnComponent = ExtCheckcolumnComponent_1 = __decorate([
            core.Component({
                selector: 'ext-checkcolumn',
                inputs: ExtCheckcolumnMetaData.PROPERTIES,
                outputs: ExtCheckcolumnMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtCheckcolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtCheckcolumnComponent);
        return ExtCheckcolumnComponent;
    }(EngBase));

    var Ext_grid_column_Template = /** @class */ (function (_super) {
        __extends(Ext_grid_column_Template, _super);
        function Ext_grid_column_Template() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_column_Template.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_column_Template.PROPERTIES);
            return Ext_grid_HeaderContainer.getProperties(properties);
        };
        Ext_grid_column_Template.getEvents = function (events) {
            events = events.concat(Ext_grid_column_Template.EVENTS);
            return Ext_grid_HeaderContainer.getEvents(events);
        };
        Ext_grid_column_Template.PROPERTIES = [
            'align',
            'cell',
            'computedWidth',
            'dataIndex',
            'defaultEditor',
            'defaultWidth',
            'depends',
            'editable',
            'editor',
            'editorDefaults',
            'exportRenderer',
            'exportStyle',
            'exportSummaryRenderer',
            'filter',
            'formatter',
            'groupable',
            'grouper',
            'groupHeaderTpl',
            'hideable',
            'hideShowMenuItem',
            'ignore',
            'ignoreExport',
            'locked',
            'menu',
            'menuDisabled',
            'renderer',
            'resizable',
            'scope',
            'scratchCell',
            'sortable',
            'sorter',
            'summary',
            'summaryCell',
            'summaryDataIndex',
            'summaryFormatter',
            'summaryRenderer',
            'text',
            'tpl',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_column_Template.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,gridcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'gridcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,gridcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridcolumn,event' },
            { name: 'focusenter', parameters: 'gridcolumn,event' },
            { name: 'focusleave', parameters: 'gridcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'gridcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'gridcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'gridcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_column_Template;
    }(Ext_grid_HeaderContainer));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_column_Template.EVENTNAMES);
    //    return Ext_grid_HeaderContainer.getEventNames(eventnames);
    //}

    var ExtGridcolumnMetaData = /** @class */ (function (_super) {
        __extends(ExtGridcolumnMetaData, _super);
        function ExtGridcolumnMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtGridcolumnMetaData.getAll = function () {
            ExtGridcolumnMetaData.PROPERTIES = Ext_grid_column_Template.getProperties(ExtGridcolumnMetaData.PROPERTIES);
            ExtGridcolumnMetaData.EVENTS = Ext_grid_column_Template.getEvents(ExtGridcolumnMetaData.EVENTS);
            ExtGridcolumnMetaData.EVENTS.forEach(function (event) {
                ExtGridcolumnMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtGridcolumnMetaData.PROPERTIES = [];
        ExtGridcolumnMetaData.EVENTS = [];
        ExtGridcolumnMetaData.EVENTNAMES = [];
        return ExtGridcolumnMetaData;
    }(Ext_grid_column_Template));
    (function () { ExtGridcolumnMetaData.getAll(); })();
    var ExtGridcolumnComponent = /** @class */ (function (_super) {
        __extends(ExtGridcolumnComponent, _super);
        function ExtGridcolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtGridcolumnMetaData.PROPERTIES, ExtGridcolumnMetaData.EVENTS) || this;
            _this.xtype = 'gridcolumn';
            return _this;
        }
        ExtGridcolumnComponent_1 = ExtGridcolumnComponent;
        ExtGridcolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtGridcolumnComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtGridcolumnComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtGridcolumnComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtGridcolumnComponent_1;
        ExtGridcolumnComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtGridcolumnComponent = ExtGridcolumnComponent_1 = __decorate([
            core.Component({
                selector: 'ext-gridcolumn',
                inputs: ExtGridcolumnMetaData.PROPERTIES,
                outputs: ExtGridcolumnMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtGridcolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtGridcolumnComponent);
        return ExtGridcolumnComponent;
    }(EngBase));

    var Ext_grid_column_Date = /** @class */ (function (_super) {
        __extends(Ext_grid_column_Date, _super);
        function Ext_grid_column_Date() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_column_Date.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_column_Date.PROPERTIES);
            return Ext_grid_column_Column.getProperties(properties);
        };
        Ext_grid_column_Date.getEvents = function (events) {
            events = events.concat(Ext_grid_column_Date.EVENTS);
            return Ext_grid_column_Column.getEvents(events);
        };
        Ext_grid_column_Date.PROPERTIES = [
            'format',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_column_Date.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,datecolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'datecolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datecolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datecolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,datecolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datecolumn,event' },
            { name: 'focusenter', parameters: 'datecolumn,event' },
            { name: 'focusleave', parameters: 'datecolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'datecolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'datecolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'datecolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datecolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_column_Date;
    }(Ext_grid_column_Column));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_column_Date.EVENTNAMES);
    //    return Ext_grid_column_Column.getEventNames(eventnames);
    //}

    var ExtDatecolumnMetaData = /** @class */ (function (_super) {
        __extends(ExtDatecolumnMetaData, _super);
        function ExtDatecolumnMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtDatecolumnMetaData.getAll = function () {
            ExtDatecolumnMetaData.PROPERTIES = Ext_grid_column_Date.getProperties(ExtDatecolumnMetaData.PROPERTIES);
            ExtDatecolumnMetaData.EVENTS = Ext_grid_column_Date.getEvents(ExtDatecolumnMetaData.EVENTS);
            ExtDatecolumnMetaData.EVENTS.forEach(function (event) {
                ExtDatecolumnMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtDatecolumnMetaData.PROPERTIES = [];
        ExtDatecolumnMetaData.EVENTS = [];
        ExtDatecolumnMetaData.EVENTNAMES = [];
        return ExtDatecolumnMetaData;
    }(Ext_grid_column_Date));
    (function () { ExtDatecolumnMetaData.getAll(); })();
    var ExtDatecolumnComponent = /** @class */ (function (_super) {
        __extends(ExtDatecolumnComponent, _super);
        function ExtDatecolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtDatecolumnMetaData.PROPERTIES, ExtDatecolumnMetaData.EVENTS) || this;
            _this.xtype = 'datecolumn';
            return _this;
        }
        ExtDatecolumnComponent_1 = ExtDatecolumnComponent;
        ExtDatecolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtDatecolumnComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtDatecolumnComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtDatecolumnComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtDatecolumnComponent_1;
        ExtDatecolumnComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtDatecolumnComponent = ExtDatecolumnComponent_1 = __decorate([
            core.Component({
                selector: 'ext-datecolumn',
                inputs: ExtDatecolumnMetaData.PROPERTIES,
                outputs: ExtDatecolumnMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtDatecolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtDatecolumnComponent);
        return ExtDatecolumnComponent;
    }(EngBase));

    var Ext_grid_column_Drag = /** @class */ (function (_super) {
        __extends(Ext_grid_column_Drag, _super);
        function Ext_grid_column_Drag() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_column_Drag.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_column_Drag.PROPERTIES);
            return Ext_grid_column_Column.getProperties(properties);
        };
        Ext_grid_column_Drag.getEvents = function (events) {
            events = events.concat(Ext_grid_column_Drag.EVENTS);
            return Ext_grid_column_Column.getEvents(events);
        };
        Ext_grid_column_Drag.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_column_Drag.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dragcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'dragcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'dragcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dragcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,dragcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dragcolumn,event' },
            { name: 'focusenter', parameters: 'dragcolumn,event' },
            { name: 'focusleave', parameters: 'dragcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'dragcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'dragcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dragcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'dragcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_column_Drag;
    }(Ext_grid_column_Column));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_column_Drag.EVENTNAMES);
    //    return Ext_grid_column_Column.getEventNames(eventnames);
    //}

    var ExtDragcolumnMetaData = /** @class */ (function (_super) {
        __extends(ExtDragcolumnMetaData, _super);
        function ExtDragcolumnMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtDragcolumnMetaData.getAll = function () {
            ExtDragcolumnMetaData.PROPERTIES = Ext_grid_column_Drag.getProperties(ExtDragcolumnMetaData.PROPERTIES);
            ExtDragcolumnMetaData.EVENTS = Ext_grid_column_Drag.getEvents(ExtDragcolumnMetaData.EVENTS);
            ExtDragcolumnMetaData.EVENTS.forEach(function (event) {
                ExtDragcolumnMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtDragcolumnMetaData.PROPERTIES = [];
        ExtDragcolumnMetaData.EVENTS = [];
        ExtDragcolumnMetaData.EVENTNAMES = [];
        return ExtDragcolumnMetaData;
    }(Ext_grid_column_Drag));
    (function () { ExtDragcolumnMetaData.getAll(); })();
    var ExtDragcolumnComponent = /** @class */ (function (_super) {
        __extends(ExtDragcolumnComponent, _super);
        function ExtDragcolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtDragcolumnMetaData.PROPERTIES, ExtDragcolumnMetaData.EVENTS) || this;
            _this.xtype = 'dragcolumn';
            return _this;
        }
        ExtDragcolumnComponent_1 = ExtDragcolumnComponent;
        ExtDragcolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtDragcolumnComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtDragcolumnComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtDragcolumnComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtDragcolumnComponent_1;
        ExtDragcolumnComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtDragcolumnComponent = ExtDragcolumnComponent_1 = __decorate([
            core.Component({
                selector: 'ext-dragcolumn',
                inputs: ExtDragcolumnMetaData.PROPERTIES,
                outputs: ExtDragcolumnMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtDragcolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtDragcolumnComponent);
        return ExtDragcolumnComponent;
    }(EngBase));

    var Ext_grid_column_Number = /** @class */ (function (_super) {
        __extends(Ext_grid_column_Number, _super);
        function Ext_grid_column_Number() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_column_Number.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_column_Number.PROPERTIES);
            return Ext_grid_column_Column.getProperties(properties);
        };
        Ext_grid_column_Number.getEvents = function (events) {
            events = events.concat(Ext_grid_column_Number.EVENTS);
            return Ext_grid_column_Column.getEvents(events);
        };
        Ext_grid_column_Number.PROPERTIES = [
            'format',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_column_Number.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,numbercolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'numbercolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'numbercolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'numbercolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,numbercolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'numbercolumn,event' },
            { name: 'focusenter', parameters: 'numbercolumn,event' },
            { name: 'focusleave', parameters: 'numbercolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'numbercolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'numbercolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'numbercolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'numbercolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_column_Number;
    }(Ext_grid_column_Column));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_column_Number.EVENTNAMES);
    //    return Ext_grid_column_Column.getEventNames(eventnames);
    //}

    var ExtNumbercolumnMetaData = /** @class */ (function (_super) {
        __extends(ExtNumbercolumnMetaData, _super);
        function ExtNumbercolumnMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtNumbercolumnMetaData.getAll = function () {
            ExtNumbercolumnMetaData.PROPERTIES = Ext_grid_column_Number.getProperties(ExtNumbercolumnMetaData.PROPERTIES);
            ExtNumbercolumnMetaData.EVENTS = Ext_grid_column_Number.getEvents(ExtNumbercolumnMetaData.EVENTS);
            ExtNumbercolumnMetaData.EVENTS.forEach(function (event) {
                ExtNumbercolumnMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtNumbercolumnMetaData.PROPERTIES = [];
        ExtNumbercolumnMetaData.EVENTS = [];
        ExtNumbercolumnMetaData.EVENTNAMES = [];
        return ExtNumbercolumnMetaData;
    }(Ext_grid_column_Number));
    (function () { ExtNumbercolumnMetaData.getAll(); })();
    var ExtNumbercolumnComponent = /** @class */ (function (_super) {
        __extends(ExtNumbercolumnComponent, _super);
        function ExtNumbercolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtNumbercolumnMetaData.PROPERTIES, ExtNumbercolumnMetaData.EVENTS) || this;
            _this.xtype = 'numbercolumn';
            return _this;
        }
        ExtNumbercolumnComponent_1 = ExtNumbercolumnComponent;
        ExtNumbercolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtNumbercolumnComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtNumbercolumnComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtNumbercolumnComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtNumbercolumnComponent_1;
        ExtNumbercolumnComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtNumbercolumnComponent = ExtNumbercolumnComponent_1 = __decorate([
            core.Component({
                selector: 'ext-numbercolumn',
                inputs: ExtNumbercolumnMetaData.PROPERTIES,
                outputs: ExtNumbercolumnMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtNumbercolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtNumbercolumnComponent);
        return ExtNumbercolumnComponent;
    }(EngBase));

    var Ext_grid_column_RowNumberer = /** @class */ (function (_super) {
        __extends(Ext_grid_column_RowNumberer, _super);
        function Ext_grid_column_RowNumberer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_column_RowNumberer.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_column_RowNumberer.PROPERTIES);
            return Ext_grid_column_Number.getProperties(properties);
        };
        Ext_grid_column_RowNumberer.getEvents = function (events) {
            events = events.concat(Ext_grid_column_RowNumberer.EVENTS);
            return Ext_grid_column_Number.getEvents(events);
        };
        Ext_grid_column_RowNumberer.PROPERTIES = [
            'menu',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_column_RowNumberer.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,rownumberer,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'rownumberer,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'rownumberer' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'rownumberer,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,rownumberer,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'rownumberer,event' },
            { name: 'focusenter', parameters: 'rownumberer,event' },
            { name: 'focusleave', parameters: 'rownumberer,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'rownumberer,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'rownumberer,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'rownumberer,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'rownumberer' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_column_RowNumberer;
    }(Ext_grid_column_Number));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_column_RowNumberer.EVENTNAMES);
    //    return Ext_grid_column_Number.getEventNames(eventnames);
    //}

    var ExtRownumbererMetaData = /** @class */ (function (_super) {
        __extends(ExtRownumbererMetaData, _super);
        function ExtRownumbererMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtRownumbererMetaData.getAll = function () {
            ExtRownumbererMetaData.PROPERTIES = Ext_grid_column_RowNumberer.getProperties(ExtRownumbererMetaData.PROPERTIES);
            ExtRownumbererMetaData.EVENTS = Ext_grid_column_RowNumberer.getEvents(ExtRownumbererMetaData.EVENTS);
            ExtRownumbererMetaData.EVENTS.forEach(function (event) {
                ExtRownumbererMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtRownumbererMetaData.PROPERTIES = [];
        ExtRownumbererMetaData.EVENTS = [];
        ExtRownumbererMetaData.EVENTNAMES = [];
        return ExtRownumbererMetaData;
    }(Ext_grid_column_RowNumberer));
    (function () { ExtRownumbererMetaData.getAll(); })();
    var ExtRownumbererComponent = /** @class */ (function (_super) {
        __extends(ExtRownumbererComponent, _super);
        function ExtRownumbererComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtRownumbererMetaData.PROPERTIES, ExtRownumbererMetaData.EVENTS) || this;
            _this.xtype = 'rownumberer';
            return _this;
        }
        ExtRownumbererComponent_1 = ExtRownumbererComponent;
        ExtRownumbererComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtRownumbererComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtRownumbererComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtRownumbererComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtRownumbererComponent_1;
        ExtRownumbererComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtRownumbererComponent = ExtRownumbererComponent_1 = __decorate([
            core.Component({
                selector: 'ext-rownumberer',
                inputs: ExtRownumbererMetaData.PROPERTIES,
                outputs: ExtRownumbererMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtRownumbererComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtRownumbererComponent);
        return ExtRownumbererComponent;
    }(EngBase));

    var Ext_grid_column_Selection = /** @class */ (function (_super) {
        __extends(Ext_grid_column_Selection, _super);
        function Ext_grid_column_Selection() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_column_Selection.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_column_Selection.PROPERTIES);
            return Ext_grid_column_Check.getProperties(properties);
        };
        Ext_grid_column_Selection.getEvents = function (events) {
            events = events.concat(Ext_grid_column_Selection.EVENTS);
            return Ext_grid_column_Check.getEvents(events);
        };
        Ext_grid_column_Selection.PROPERTIES = [
            'stopSelection',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_column_Selection.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,selectioncolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'selectioncolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'selectioncolumn,rowIndex,checked,record,e' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'selectioncolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'selectioncolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'selectioncolumn,rowIndex,checked,record,e' },
            { name: 'deactivate', parameters: 'oldActiveItem,selectioncolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'selectioncolumn,event' },
            { name: 'focusenter', parameters: 'selectioncolumn,event' },
            { name: 'focusleave', parameters: 'selectioncolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'selectioncolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'selectioncolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'selectioncolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'selectioncolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_column_Selection;
    }(Ext_grid_column_Check));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_column_Selection.EVENTNAMES);
    //    return Ext_grid_column_Check.getEventNames(eventnames);
    //}

    var ExtSelectioncolumnMetaData = /** @class */ (function (_super) {
        __extends(ExtSelectioncolumnMetaData, _super);
        function ExtSelectioncolumnMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSelectioncolumnMetaData.getAll = function () {
            ExtSelectioncolumnMetaData.PROPERTIES = Ext_grid_column_Selection.getProperties(ExtSelectioncolumnMetaData.PROPERTIES);
            ExtSelectioncolumnMetaData.EVENTS = Ext_grid_column_Selection.getEvents(ExtSelectioncolumnMetaData.EVENTS);
            ExtSelectioncolumnMetaData.EVENTS.forEach(function (event) {
                ExtSelectioncolumnMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSelectioncolumnMetaData.PROPERTIES = [];
        ExtSelectioncolumnMetaData.EVENTS = [];
        ExtSelectioncolumnMetaData.EVENTNAMES = [];
        return ExtSelectioncolumnMetaData;
    }(Ext_grid_column_Selection));
    (function () { ExtSelectioncolumnMetaData.getAll(); })();
    var ExtSelectioncolumnComponent = /** @class */ (function (_super) {
        __extends(ExtSelectioncolumnComponent, _super);
        function ExtSelectioncolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSelectioncolumnMetaData.PROPERTIES, ExtSelectioncolumnMetaData.EVENTS) || this;
            _this.xtype = 'selectioncolumn';
            return _this;
        }
        ExtSelectioncolumnComponent_1 = ExtSelectioncolumnComponent;
        ExtSelectioncolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSelectioncolumnComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSelectioncolumnComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSelectioncolumnComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSelectioncolumnComponent_1;
        ExtSelectioncolumnComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSelectioncolumnComponent = ExtSelectioncolumnComponent_1 = __decorate([
            core.Component({
                selector: 'ext-selectioncolumn',
                inputs: ExtSelectioncolumnMetaData.PROPERTIES,
                outputs: ExtSelectioncolumnMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSelectioncolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSelectioncolumnComponent);
        return ExtSelectioncolumnComponent;
    }(EngBase));

    var Ext_grid_column_Text = /** @class */ (function (_super) {
        __extends(Ext_grid_column_Text, _super);
        function Ext_grid_column_Text() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_column_Text.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_column_Text.PROPERTIES);
            return Ext_grid_column_Column.getProperties(properties);
        };
        Ext_grid_column_Text.getEvents = function (events) {
            events = events.concat(Ext_grid_column_Text.EVENTS);
            return Ext_grid_column_Column.getEvents(events);
        };
        Ext_grid_column_Text.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_column_Text.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,textcolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'textcolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'textcolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'textcolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,textcolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'textcolumn,event' },
            { name: 'focusenter', parameters: 'textcolumn,event' },
            { name: 'focusleave', parameters: 'textcolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'textcolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'textcolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'textcolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'textcolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_column_Text;
    }(Ext_grid_column_Column));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_column_Text.EVENTNAMES);
    //    return Ext_grid_column_Column.getEventNames(eventnames);
    //}

    var ExtTextcolumnMetaData = /** @class */ (function (_super) {
        __extends(ExtTextcolumnMetaData, _super);
        function ExtTextcolumnMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTextcolumnMetaData.getAll = function () {
            ExtTextcolumnMetaData.PROPERTIES = Ext_grid_column_Text.getProperties(ExtTextcolumnMetaData.PROPERTIES);
            ExtTextcolumnMetaData.EVENTS = Ext_grid_column_Text.getEvents(ExtTextcolumnMetaData.EVENTS);
            ExtTextcolumnMetaData.EVENTS.forEach(function (event) {
                ExtTextcolumnMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTextcolumnMetaData.PROPERTIES = [];
        ExtTextcolumnMetaData.EVENTS = [];
        ExtTextcolumnMetaData.EVENTNAMES = [];
        return ExtTextcolumnMetaData;
    }(Ext_grid_column_Text));
    (function () { ExtTextcolumnMetaData.getAll(); })();
    var ExtTextcolumnComponent = /** @class */ (function (_super) {
        __extends(ExtTextcolumnComponent, _super);
        function ExtTextcolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTextcolumnMetaData.PROPERTIES, ExtTextcolumnMetaData.EVENTS) || this;
            _this.xtype = 'textcolumn';
            return _this;
        }
        ExtTextcolumnComponent_1 = ExtTextcolumnComponent;
        ExtTextcolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTextcolumnComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTextcolumnComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTextcolumnComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTextcolumnComponent_1;
        ExtTextcolumnComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTextcolumnComponent = ExtTextcolumnComponent_1 = __decorate([
            core.Component({
                selector: 'ext-textcolumn',
                inputs: ExtTextcolumnMetaData.PROPERTIES,
                outputs: ExtTextcolumnMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTextcolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTextcolumnComponent);
        return ExtTextcolumnComponent;
    }(EngBase));

    var Ext_grid_column_Tree = /** @class */ (function (_super) {
        __extends(Ext_grid_column_Tree, _super);
        function Ext_grid_column_Tree() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_column_Tree.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_column_Tree.PROPERTIES);
            return Ext_grid_column_Column.getProperties(properties);
        };
        Ext_grid_column_Tree.getEvents = function (events) {
            events = events.concat(Ext_grid_column_Tree.EVENTS);
            return Ext_grid_column_Column.getEvents(events);
        };
        Ext_grid_column_Tree.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_column_Tree.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,treecolumn,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'treecolumn,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'treecolumn' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'treecolumn,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,treecolumn,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'treecolumn,event' },
            { name: 'focusenter', parameters: 'treecolumn,event' },
            { name: 'focusleave', parameters: 'treecolumn,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'treecolumn,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'treecolumn,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'treecolumn,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'treecolumn' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_column_Tree;
    }(Ext_grid_column_Column));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_column_Tree.EVENTNAMES);
    //    return Ext_grid_column_Column.getEventNames(eventnames);
    //}

    var ExtTreecolumnMetaData = /** @class */ (function (_super) {
        __extends(ExtTreecolumnMetaData, _super);
        function ExtTreecolumnMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTreecolumnMetaData.getAll = function () {
            ExtTreecolumnMetaData.PROPERTIES = Ext_grid_column_Tree.getProperties(ExtTreecolumnMetaData.PROPERTIES);
            ExtTreecolumnMetaData.EVENTS = Ext_grid_column_Tree.getEvents(ExtTreecolumnMetaData.EVENTS);
            ExtTreecolumnMetaData.EVENTS.forEach(function (event) {
                ExtTreecolumnMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTreecolumnMetaData.PROPERTIES = [];
        ExtTreecolumnMetaData.EVENTS = [];
        ExtTreecolumnMetaData.EVENTNAMES = [];
        return ExtTreecolumnMetaData;
    }(Ext_grid_column_Tree));
    (function () { ExtTreecolumnMetaData.getAll(); })();
    var ExtTreecolumnComponent = /** @class */ (function (_super) {
        __extends(ExtTreecolumnComponent, _super);
        function ExtTreecolumnComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTreecolumnMetaData.PROPERTIES, ExtTreecolumnMetaData.EVENTS) || this;
            _this.xtype = 'treecolumn';
            return _this;
        }
        ExtTreecolumnComponent_1 = ExtTreecolumnComponent;
        ExtTreecolumnComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTreecolumnComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTreecolumnComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTreecolumnComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTreecolumnComponent_1;
        ExtTreecolumnComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTreecolumnComponent = ExtTreecolumnComponent_1 = __decorate([
            core.Component({
                selector: 'ext-treecolumn',
                inputs: ExtTreecolumnMetaData.PROPERTIES,
                outputs: ExtTreecolumnMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTreecolumnComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTreecolumnComponent);
        return ExtTreecolumnComponent;
    }(EngBase));

    var Ext_grid_Grid = /** @class */ (function (_super) {
        __extends(Ext_grid_Grid, _super);
        function Ext_grid_Grid() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_Grid.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_Grid.PROPERTIES);
            return Ext_dataview_List.getProperties(properties);
        };
        Ext_grid_Grid.getEvents = function (events) {
            events = events.concat(Ext_grid_Grid.EVENTS);
            return Ext_dataview_List.getEvents(events);
        };
        Ext_grid_Grid.PROPERTIES = [
            'columnLines',
            'columnMenu',
            'columnResize',
            'columns',
            'columnsMenuItem',
            'enableColumnMove',
            'groupHeader',
            'hideHeaders',
            'hideScrollbar',
            'infinite',
            'itemConfig',
            'itemsFocusable',
            'multiColumnSort',
            'pinnedHeader',
            'reserveScrollbar',
            'rowNumbers',
            'scrollable',
            'scrollToTopOnRefresh',
            'selectable',
            'sortable',
            'striped',
            'title',
            'titleBar',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_Grid.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,grid,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecomplete', parameters: 'editor,value,startValue,The' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeedit', parameters: 'sender,location' },
            { name: 'beforegroupcollapse', parameters: 'grid,group' },
            { name: 'beforegroupexpand', parameters: 'grid,group' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeselectionextend', parameters: 'grid,An,extension' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestartedit', parameters: 'editor,boundEl,value,The' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'grid' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'grid,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'canceledit', parameters: 'editor,value,startValue' },
            { name: 'canceledit', parameters: 'sender,location' },
            { name: 'cellselection', parameters: 'grid,selection' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'grid,location' },
            { name: 'childlongpress', parameters: 'grid,location' },
            { name: 'childmouseenter', parameters: 'grid,location' },
            { name: 'childmouseleave', parameters: 'grid,location' },
            { name: 'childsingletap', parameters: 'grid,location' },
            { name: 'childtap', parameters: 'grid,location' },
            { name: 'childtaphold', parameters: 'grid,location' },
            { name: 'childtouchcancel', parameters: 'grid,location' },
            { name: 'childtouchend', parameters: 'grid,location' },
            { name: 'childtouchmove', parameters: 'grid,location' },
            { name: 'childtouchstart', parameters: 'grid,location' },
            { name: 'columnadd', parameters: 'grid,column,index' },
            { name: 'columnhide', parameters: 'grid,column' },
            { name: 'columnmenucreated', parameters: 'grid,column,menu' },
            { name: 'columnmove', parameters: 'grid,column,fromIndex,toIndex' },
            { name: 'columnremove', parameters: 'grid,column' },
            { name: 'columnresize', parameters: 'grid,column,width' },
            { name: 'columnselection', parameters: 'grid,selection' },
            { name: 'columnshow', parameters: 'grid,column' },
            { name: 'columnsort', parameters: 'grid,column,direction' },
            { name: 'complete', parameters: 'editor,value,startValue,The' },
            { name: 'deactivate', parameters: 'oldActiveItem,grid,newActiveItem' },
            { name: 'deselect', parameters: 'grid,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'edit', parameters: 'sender,location' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'grid,event' },
            { name: 'focusenter', parameters: 'grid,event' },
            { name: 'focusleave', parameters: 'grid,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupcollapse', parameters: 'grid,group' },
            { name: 'groupexpand', parameters: 'grid,group' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'grid,index,record,action' },
            { name: 'itemdoubletap', parameters: 'grid,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'grid,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'grid,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'grid,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'grid,index,target,record,e' },
            { name: 'itemswipe', parameters: 'grid,index,target,record,e' },
            { name: 'itemtap', parameters: 'grid,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'grid,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'grid,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'grid,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'grid,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'grid,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'grid,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'grid' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'grid,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'grid,selected' },
            { name: 'selectionextenderdrag', parameters: 'grid,An,extension' },
            { name: 'show', parameters: 'sender' },
            { name: 'specialkey', parameters: 'editor,field,event' },
            { name: 'startedit', parameters: 'editor,boundEl,value,The' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'grid' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateedit', parameters: 'sender,location' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_Grid;
    }(Ext_dataview_List));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_Grid.EVENTNAMES);
    //    return Ext_dataview_List.getEventNames(eventnames);
    //}

    var ExtGridMetaData = /** @class */ (function (_super) {
        __extends(ExtGridMetaData, _super);
        function ExtGridMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtGridMetaData.getAll = function () {
            ExtGridMetaData.PROPERTIES = Ext_grid_Grid.getProperties(ExtGridMetaData.PROPERTIES);
            ExtGridMetaData.EVENTS = Ext_grid_Grid.getEvents(ExtGridMetaData.EVENTS);
            ExtGridMetaData.EVENTS.forEach(function (event) {
                ExtGridMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtGridMetaData.PROPERTIES = [];
        ExtGridMetaData.EVENTS = [];
        ExtGridMetaData.EVENTNAMES = [];
        return ExtGridMetaData;
    }(Ext_grid_Grid));
    (function () { ExtGridMetaData.getAll(); })();
    var ExtGridComponent = /** @class */ (function (_super) {
        __extends(ExtGridComponent, _super);
        function ExtGridComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtGridMetaData.PROPERTIES, ExtGridMetaData.EVENTS) || this;
            _this.xtype = 'grid';
            return _this;
        }
        ExtGridComponent_1 = ExtGridComponent;
        ExtGridComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtGridComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtGridComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtGridComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtGridComponent_1;
        ExtGridComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtGridComponent = ExtGridComponent_1 = __decorate([
            core.Component({
                selector: 'ext-grid',
                inputs: ExtGridMetaData.PROPERTIES,
                outputs: ExtGridMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtGridComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtGridComponent);
        return ExtGridComponent;
    }(EngBase));

    var ExtHeadercontainerMetaData = /** @class */ (function (_super) {
        __extends(ExtHeadercontainerMetaData, _super);
        function ExtHeadercontainerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtHeadercontainerMetaData.getAll = function () {
            ExtHeadercontainerMetaData.PROPERTIES = Ext_grid_HeaderContainer.getProperties(ExtHeadercontainerMetaData.PROPERTIES);
            ExtHeadercontainerMetaData.EVENTS = Ext_grid_HeaderContainer.getEvents(ExtHeadercontainerMetaData.EVENTS);
            ExtHeadercontainerMetaData.EVENTS.forEach(function (event) {
                ExtHeadercontainerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtHeadercontainerMetaData.PROPERTIES = [];
        ExtHeadercontainerMetaData.EVENTS = [];
        ExtHeadercontainerMetaData.EVENTNAMES = [];
        return ExtHeadercontainerMetaData;
    }(Ext_grid_HeaderContainer));
    (function () { ExtHeadercontainerMetaData.getAll(); })();
    var ExtHeadercontainerComponent = /** @class */ (function (_super) {
        __extends(ExtHeadercontainerComponent, _super);
        function ExtHeadercontainerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtHeadercontainerMetaData.PROPERTIES, ExtHeadercontainerMetaData.EVENTS) || this;
            _this.xtype = 'headercontainer';
            return _this;
        }
        ExtHeadercontainerComponent_1 = ExtHeadercontainerComponent;
        ExtHeadercontainerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtHeadercontainerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtHeadercontainerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtHeadercontainerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtHeadercontainerComponent_1;
        ExtHeadercontainerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtHeadercontainerComponent = ExtHeadercontainerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-headercontainer',
                inputs: ExtHeadercontainerMetaData.PROPERTIES,
                outputs: ExtHeadercontainerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtHeadercontainerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtHeadercontainerComponent);
        return ExtHeadercontainerComponent;
    }(EngBase));

    var Ext_grid_LockedGrid = /** @class */ (function (_super) {
        __extends(Ext_grid_LockedGrid, _super);
        function Ext_grid_LockedGrid() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_LockedGrid.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_LockedGrid.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_grid_LockedGrid.getEvents = function (events) {
            events = events.concat(Ext_grid_LockedGrid.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_grid_LockedGrid.PROPERTIES = [
            'columnMenu',
            'columns',
            'defaultLockedRegion',
            'enableColumnMove',
            'gridDefaults',
            'grouped',
            'hideHeaders',
            'itemConfig',
            'leftGridDefaults',
            'regions',
            'rightGridDefaults',
            'store',
            'variableHeights',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_LockedGrid.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,lockedgrid,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'lockedgrid,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'lockedgrid' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'lockedgrid' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'lockedgrid,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'lockedgrid' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'lockedgrid,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'lockedgrid' },
            { name: 'deactivate', parameters: 'oldActiveItem,lockedgrid,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'lockedgrid' },
            { name: 'drawershow', parameters: 'lockedgrid' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'lockedgrid' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'lockedgrid,event' },
            { name: 'focusenter', parameters: 'lockedgrid,event' },
            { name: 'focusleave', parameters: 'lockedgrid,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'lockedgrid,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'lockedgrid,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'lockedgrid,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'lockedgrid,context' },
            { name: 'resizedragcancel', parameters: 'lockedgrid,context' },
            { name: 'resizedragend', parameters: 'lockedgrid,context' },
            { name: 'resizedragstart', parameters: 'lockedgrid,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'lockedgrid' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_LockedGrid;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_LockedGrid.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var ExtLockedgridMetaData = /** @class */ (function (_super) {
        __extends(ExtLockedgridMetaData, _super);
        function ExtLockedgridMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtLockedgridMetaData.getAll = function () {
            ExtLockedgridMetaData.PROPERTIES = Ext_grid_LockedGrid.getProperties(ExtLockedgridMetaData.PROPERTIES);
            ExtLockedgridMetaData.EVENTS = Ext_grid_LockedGrid.getEvents(ExtLockedgridMetaData.EVENTS);
            ExtLockedgridMetaData.EVENTS.forEach(function (event) {
                ExtLockedgridMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtLockedgridMetaData.PROPERTIES = [];
        ExtLockedgridMetaData.EVENTS = [];
        ExtLockedgridMetaData.EVENTNAMES = [];
        return ExtLockedgridMetaData;
    }(Ext_grid_LockedGrid));
    (function () { ExtLockedgridMetaData.getAll(); })();
    var ExtLockedgridComponent = /** @class */ (function (_super) {
        __extends(ExtLockedgridComponent, _super);
        function ExtLockedgridComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtLockedgridMetaData.PROPERTIES, ExtLockedgridMetaData.EVENTS) || this;
            _this.xtype = 'lockedgrid';
            return _this;
        }
        ExtLockedgridComponent_1 = ExtLockedgridComponent;
        ExtLockedgridComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtLockedgridComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtLockedgridComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtLockedgridComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtLockedgridComponent_1;
        ExtLockedgridComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtLockedgridComponent = ExtLockedgridComponent_1 = __decorate([
            core.Component({
                selector: 'ext-lockedgrid',
                inputs: ExtLockedgridMetaData.PROPERTIES,
                outputs: ExtLockedgridMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtLockedgridComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtLockedgridComponent);
        return ExtLockedgridComponent;
    }(EngBase));

    var Ext_grid_LockedGridRegion = /** @class */ (function (_super) {
        __extends(Ext_grid_LockedGridRegion, _super);
        function Ext_grid_LockedGridRegion() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_LockedGridRegion.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_LockedGridRegion.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_grid_LockedGridRegion.getEvents = function (events) {
            events = events.concat(Ext_grid_LockedGridRegion.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_grid_LockedGridRegion.PROPERTIES = [
            'grid',
            'locked',
            'menuItem',
            'regionKey',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_LockedGridRegion.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,lockedgridregion,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'lockedgridregion,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'lockedgridregion' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'lockedgridregion' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'lockedgridregion,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'lockedgridregion' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'lockedgridregion,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'lockedgridregion' },
            { name: 'deactivate', parameters: 'oldActiveItem,lockedgridregion,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'lockedgridregion' },
            { name: 'drawershow', parameters: 'lockedgridregion' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'lockedgridregion' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'lockedgridregion,event' },
            { name: 'focusenter', parameters: 'lockedgridregion,event' },
            { name: 'focusleave', parameters: 'lockedgridregion,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'lockedgridregion,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'lockedgridregion,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'lockedgridregion,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'lockedgridregion,context' },
            { name: 'resizedragcancel', parameters: 'lockedgridregion,context' },
            { name: 'resizedragend', parameters: 'lockedgridregion,context' },
            { name: 'resizedragstart', parameters: 'lockedgridregion,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'lockedgridregion' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_LockedGridRegion;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_LockedGridRegion.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var ExtLockedgridregionMetaData = /** @class */ (function (_super) {
        __extends(ExtLockedgridregionMetaData, _super);
        function ExtLockedgridregionMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtLockedgridregionMetaData.getAll = function () {
            ExtLockedgridregionMetaData.PROPERTIES = Ext_grid_LockedGridRegion.getProperties(ExtLockedgridregionMetaData.PROPERTIES);
            ExtLockedgridregionMetaData.EVENTS = Ext_grid_LockedGridRegion.getEvents(ExtLockedgridregionMetaData.EVENTS);
            ExtLockedgridregionMetaData.EVENTS.forEach(function (event) {
                ExtLockedgridregionMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtLockedgridregionMetaData.PROPERTIES = [];
        ExtLockedgridregionMetaData.EVENTS = [];
        ExtLockedgridregionMetaData.EVENTNAMES = [];
        return ExtLockedgridregionMetaData;
    }(Ext_grid_LockedGridRegion));
    (function () { ExtLockedgridregionMetaData.getAll(); })();
    var ExtLockedgridregionComponent = /** @class */ (function (_super) {
        __extends(ExtLockedgridregionComponent, _super);
        function ExtLockedgridregionComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtLockedgridregionMetaData.PROPERTIES, ExtLockedgridregionMetaData.EVENTS) || this;
            _this.xtype = 'lockedgridregion';
            return _this;
        }
        ExtLockedgridregionComponent_1 = ExtLockedgridregionComponent;
        ExtLockedgridregionComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtLockedgridregionComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtLockedgridregionComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtLockedgridregionComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtLockedgridregionComponent_1;
        ExtLockedgridregionComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtLockedgridregionComponent = ExtLockedgridregionComponent_1 = __decorate([
            core.Component({
                selector: 'ext-lockedgridregion',
                inputs: ExtLockedgridregionMetaData.PROPERTIES,
                outputs: ExtLockedgridregionMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtLockedgridregionComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtLockedgridregionComponent);
        return ExtLockedgridregionComponent;
    }(EngBase));

    var Ext_menu_Item = /** @class */ (function (_super) {
        __extends(Ext_menu_Item, _super);
        function Ext_menu_Item() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_menu_Item.getProperties = function (properties) {
            properties = properties.concat(Ext_menu_Item.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_menu_Item.getEvents = function (events) {
            events = events.concat(Ext_menu_Item.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_menu_Item.PROPERTIES = [
            'clickHideDelay',
            'destroyMenu',
            'handler',
            'hideOnClick',
            'href',
            'icon',
            'iconAlign',
            'iconCls',
            'indented',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'scope',
            'separator',
            'target',
            'text',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_menu_Item.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menuitem,event' },
            { name: 'focusenter', parameters: 'menuitem,event' },
            { name: 'focusleave', parameters: 'menuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_menu_Item;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_menu_Item.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var Ext_grid_menu_Shared = /** @class */ (function (_super) {
        __extends(Ext_grid_menu_Shared, _super);
        function Ext_grid_menu_Shared() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_menu_Shared.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_menu_Shared.PROPERTIES);
            return Ext_menu_Item.getProperties(properties);
        };
        Ext_grid_menu_Shared.getEvents = function (events) {
            events = events.concat(Ext_grid_menu_Shared.EVENTS);
            return Ext_menu_Item.getEvents(events);
        };
        Ext_grid_menu_Shared.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_menu_Shared.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_menu_Shared;
    }(Ext_menu_Item));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_menu_Shared.EVENTNAMES);
    //    return Ext_menu_Item.getEventNames(eventnames);
    //}

    var Ext_grid_menu_Columns = /** @class */ (function (_super) {
        __extends(Ext_grid_menu_Columns, _super);
        function Ext_grid_menu_Columns() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_menu_Columns.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_menu_Columns.PROPERTIES);
            return Ext_grid_menu_Shared.getProperties(properties);
        };
        Ext_grid_menu_Columns.getEvents = function (events) {
            events = events.concat(Ext_grid_menu_Columns.EVENTS);
            return Ext_grid_menu_Shared.getEvents(events);
        };
        Ext_grid_menu_Columns.PROPERTIES = [
            'text',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_menu_Columns.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridcolumnsmenu' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridcolumnsmenu,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridcolumnsmenu,event' },
            { name: 'focusenter', parameters: 'gridcolumnsmenu,event' },
            { name: 'focusleave', parameters: 'gridcolumnsmenu,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridcolumnsmenu' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_menu_Columns;
    }(Ext_grid_menu_Shared));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_menu_Columns.EVENTNAMES);
    //    return Ext_grid_menu_Shared.getEventNames(eventnames);
    //}

    var ExtGridcolumnsmenuMetaData = /** @class */ (function (_super) {
        __extends(ExtGridcolumnsmenuMetaData, _super);
        function ExtGridcolumnsmenuMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtGridcolumnsmenuMetaData.getAll = function () {
            ExtGridcolumnsmenuMetaData.PROPERTIES = Ext_grid_menu_Columns.getProperties(ExtGridcolumnsmenuMetaData.PROPERTIES);
            ExtGridcolumnsmenuMetaData.EVENTS = Ext_grid_menu_Columns.getEvents(ExtGridcolumnsmenuMetaData.EVENTS);
            ExtGridcolumnsmenuMetaData.EVENTS.forEach(function (event) {
                ExtGridcolumnsmenuMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtGridcolumnsmenuMetaData.PROPERTIES = [];
        ExtGridcolumnsmenuMetaData.EVENTS = [];
        ExtGridcolumnsmenuMetaData.EVENTNAMES = [];
        return ExtGridcolumnsmenuMetaData;
    }(Ext_grid_menu_Columns));
    (function () { ExtGridcolumnsmenuMetaData.getAll(); })();
    var ExtGridcolumnsmenuComponent = /** @class */ (function (_super) {
        __extends(ExtGridcolumnsmenuComponent, _super);
        function ExtGridcolumnsmenuComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtGridcolumnsmenuMetaData.PROPERTIES, ExtGridcolumnsmenuMetaData.EVENTS) || this;
            _this.xtype = 'gridcolumnsmenu';
            return _this;
        }
        ExtGridcolumnsmenuComponent_1 = ExtGridcolumnsmenuComponent;
        ExtGridcolumnsmenuComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtGridcolumnsmenuComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtGridcolumnsmenuComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtGridcolumnsmenuComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtGridcolumnsmenuComponent_1;
        ExtGridcolumnsmenuComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtGridcolumnsmenuComponent = ExtGridcolumnsmenuComponent_1 = __decorate([
            core.Component({
                selector: 'ext-gridcolumnsmenu',
                inputs: ExtGridcolumnsmenuMetaData.PROPERTIES,
                outputs: ExtGridcolumnsmenuMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtGridcolumnsmenuComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtGridcolumnsmenuComponent);
        return ExtGridcolumnsmenuComponent;
    }(EngBase));

    var Ext_grid_menu_GroupByThis = /** @class */ (function (_super) {
        __extends(Ext_grid_menu_GroupByThis, _super);
        function Ext_grid_menu_GroupByThis() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_menu_GroupByThis.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_menu_GroupByThis.PROPERTIES);
            return Ext_menu_Item.getProperties(properties);
        };
        Ext_grid_menu_GroupByThis.getEvents = function (events) {
            events = events.concat(Ext_grid_menu_GroupByThis.EVENTS);
            return Ext_menu_Item.getEvents(events);
        };
        Ext_grid_menu_GroupByThis.PROPERTIES = [
            'text',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_menu_GroupByThis.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridgroupbythismenuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridgroupbythismenuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridgroupbythismenuitem,event' },
            { name: 'focusenter', parameters: 'gridgroupbythismenuitem,event' },
            { name: 'focusleave', parameters: 'gridgroupbythismenuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridgroupbythismenuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_menu_GroupByThis;
    }(Ext_menu_Item));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_menu_GroupByThis.EVENTNAMES);
    //    return Ext_menu_Item.getEventNames(eventnames);
    //}

    var ExtGridgroupbythismenuitemMetaData = /** @class */ (function (_super) {
        __extends(ExtGridgroupbythismenuitemMetaData, _super);
        function ExtGridgroupbythismenuitemMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtGridgroupbythismenuitemMetaData.getAll = function () {
            ExtGridgroupbythismenuitemMetaData.PROPERTIES = Ext_grid_menu_GroupByThis.getProperties(ExtGridgroupbythismenuitemMetaData.PROPERTIES);
            ExtGridgroupbythismenuitemMetaData.EVENTS = Ext_grid_menu_GroupByThis.getEvents(ExtGridgroupbythismenuitemMetaData.EVENTS);
            ExtGridgroupbythismenuitemMetaData.EVENTS.forEach(function (event) {
                ExtGridgroupbythismenuitemMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtGridgroupbythismenuitemMetaData.PROPERTIES = [];
        ExtGridgroupbythismenuitemMetaData.EVENTS = [];
        ExtGridgroupbythismenuitemMetaData.EVENTNAMES = [];
        return ExtGridgroupbythismenuitemMetaData;
    }(Ext_grid_menu_GroupByThis));
    (function () { ExtGridgroupbythismenuitemMetaData.getAll(); })();
    var ExtGridgroupbythismenuitemComponent = /** @class */ (function (_super) {
        __extends(ExtGridgroupbythismenuitemComponent, _super);
        function ExtGridgroupbythismenuitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtGridgroupbythismenuitemMetaData.PROPERTIES, ExtGridgroupbythismenuitemMetaData.EVENTS) || this;
            _this.xtype = 'gridgroupbythismenuitem';
            return _this;
        }
        ExtGridgroupbythismenuitemComponent_1 = ExtGridgroupbythismenuitemComponent;
        ExtGridgroupbythismenuitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtGridgroupbythismenuitemComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtGridgroupbythismenuitemComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtGridgroupbythismenuitemComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtGridgroupbythismenuitemComponent_1;
        ExtGridgroupbythismenuitemComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtGridgroupbythismenuitemComponent = ExtGridgroupbythismenuitemComponent_1 = __decorate([
            core.Component({
                selector: 'ext-gridgroupbythismenuitem',
                inputs: ExtGridgroupbythismenuitemMetaData.PROPERTIES,
                outputs: ExtGridgroupbythismenuitemMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtGridgroupbythismenuitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtGridgroupbythismenuitemComponent);
        return ExtGridgroupbythismenuitemComponent;
    }(EngBase));

    var Ext_menu_CheckItem = /** @class */ (function (_super) {
        __extends(Ext_menu_CheckItem, _super);
        function Ext_menu_CheckItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_menu_CheckItem.getProperties = function (properties) {
            properties = properties.concat(Ext_menu_CheckItem.PROPERTIES);
            return Ext_menu_Item.getProperties(properties);
        };
        Ext_menu_CheckItem.getEvents = function (events) {
            events = events.concat(Ext_menu_CheckItem.EVENTS);
            return Ext_menu_Item.getEvents(events);
        };
        Ext_menu_CheckItem.PROPERTIES = [
            'checkChangeDisabled',
            'checked',
            'checkHandler',
            'hideOnClick',
            'publishes',
            'scope',
            'submenuText',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_menu_CheckItem.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'menucheckitem,checked' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menucheckitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menucheckitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'menucheckitem,checked' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menucheckitem,event' },
            { name: 'focusenter', parameters: 'menucheckitem,event' },
            { name: 'focusleave', parameters: 'menucheckitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menucheckitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_menu_CheckItem;
    }(Ext_menu_Item));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_menu_CheckItem.EVENTNAMES);
    //    return Ext_menu_Item.getEventNames(eventnames);
    //}

    var Ext_grid_menu_ShowInGroups = /** @class */ (function (_super) {
        __extends(Ext_grid_menu_ShowInGroups, _super);
        function Ext_grid_menu_ShowInGroups() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_menu_ShowInGroups.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_menu_ShowInGroups.PROPERTIES);
            return Ext_menu_CheckItem.getProperties(properties);
        };
        Ext_grid_menu_ShowInGroups.getEvents = function (events) {
            events = events.concat(Ext_grid_menu_ShowInGroups.EVENTS);
            return Ext_menu_CheckItem.getEvents(events);
        };
        Ext_grid_menu_ShowInGroups.PROPERTIES = [
            'text',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_menu_ShowInGroups.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'gridshowingroupsmenuitem,checked' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridshowingroupsmenuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridshowingroupsmenuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'gridshowingroupsmenuitem,checked' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridshowingroupsmenuitem,event' },
            { name: 'focusenter', parameters: 'gridshowingroupsmenuitem,event' },
            { name: 'focusleave', parameters: 'gridshowingroupsmenuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridshowingroupsmenuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_menu_ShowInGroups;
    }(Ext_menu_CheckItem));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_menu_ShowInGroups.EVENTNAMES);
    //    return Ext_menu_CheckItem.getEventNames(eventnames);
    //}

    var ExtGridshowingroupsmenuitemMetaData = /** @class */ (function (_super) {
        __extends(ExtGridshowingroupsmenuitemMetaData, _super);
        function ExtGridshowingroupsmenuitemMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtGridshowingroupsmenuitemMetaData.getAll = function () {
            ExtGridshowingroupsmenuitemMetaData.PROPERTIES = Ext_grid_menu_ShowInGroups.getProperties(ExtGridshowingroupsmenuitemMetaData.PROPERTIES);
            ExtGridshowingroupsmenuitemMetaData.EVENTS = Ext_grid_menu_ShowInGroups.getEvents(ExtGridshowingroupsmenuitemMetaData.EVENTS);
            ExtGridshowingroupsmenuitemMetaData.EVENTS.forEach(function (event) {
                ExtGridshowingroupsmenuitemMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtGridshowingroupsmenuitemMetaData.PROPERTIES = [];
        ExtGridshowingroupsmenuitemMetaData.EVENTS = [];
        ExtGridshowingroupsmenuitemMetaData.EVENTNAMES = [];
        return ExtGridshowingroupsmenuitemMetaData;
    }(Ext_grid_menu_ShowInGroups));
    (function () { ExtGridshowingroupsmenuitemMetaData.getAll(); })();
    var ExtGridshowingroupsmenuitemComponent = /** @class */ (function (_super) {
        __extends(ExtGridshowingroupsmenuitemComponent, _super);
        function ExtGridshowingroupsmenuitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtGridshowingroupsmenuitemMetaData.PROPERTIES, ExtGridshowingroupsmenuitemMetaData.EVENTS) || this;
            _this.xtype = 'gridshowingroupsmenuitem';
            return _this;
        }
        ExtGridshowingroupsmenuitemComponent_1 = ExtGridshowingroupsmenuitemComponent;
        ExtGridshowingroupsmenuitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtGridshowingroupsmenuitemComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtGridshowingroupsmenuitemComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtGridshowingroupsmenuitemComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtGridshowingroupsmenuitemComponent_1;
        ExtGridshowingroupsmenuitemComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtGridshowingroupsmenuitemComponent = ExtGridshowingroupsmenuitemComponent_1 = __decorate([
            core.Component({
                selector: 'ext-gridshowingroupsmenuitem',
                inputs: ExtGridshowingroupsmenuitemMetaData.PROPERTIES,
                outputs: ExtGridshowingroupsmenuitemMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtGridshowingroupsmenuitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtGridshowingroupsmenuitemComponent);
        return ExtGridshowingroupsmenuitemComponent;
    }(EngBase));

    var Ext_menu_RadioItem = /** @class */ (function (_super) {
        __extends(Ext_menu_RadioItem, _super);
        function Ext_menu_RadioItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_menu_RadioItem.getProperties = function (properties) {
            properties = properties.concat(Ext_menu_RadioItem.PROPERTIES);
            return Ext_menu_CheckItem.getProperties(properties);
        };
        Ext_menu_RadioItem.getEvents = function (events) {
            events = events.concat(Ext_menu_RadioItem.EVENTS);
            return Ext_menu_CheckItem.getEvents(events);
        };
        Ext_menu_RadioItem.PROPERTIES = [
            'allowUncheck',
            'group',
            'name',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_menu_RadioItem.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'menuradioitem,checked' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menuradioitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menuradioitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'menuradioitem,checked' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menuradioitem,event' },
            { name: 'focusenter', parameters: 'menuradioitem,event' },
            { name: 'focusleave', parameters: 'menuradioitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menuradioitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_menu_RadioItem;
    }(Ext_menu_CheckItem));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_menu_RadioItem.EVENTNAMES);
    //    return Ext_menu_CheckItem.getEventNames(eventnames);
    //}

    var Ext_grid_menu_SortAsc = /** @class */ (function (_super) {
        __extends(Ext_grid_menu_SortAsc, _super);
        function Ext_grid_menu_SortAsc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_menu_SortAsc.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_menu_SortAsc.PROPERTIES);
            return Ext_menu_RadioItem.getProperties(properties);
        };
        Ext_grid_menu_SortAsc.getEvents = function (events) {
            events = events.concat(Ext_grid_menu_SortAsc.EVENTS);
            return Ext_menu_RadioItem.getEvents(events);
        };
        Ext_grid_menu_SortAsc.PROPERTIES = [
            'text',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_menu_SortAsc.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'gridsortascmenuitem,checked' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridsortascmenuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridsortascmenuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'gridsortascmenuitem,checked' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridsortascmenuitem,event' },
            { name: 'focusenter', parameters: 'gridsortascmenuitem,event' },
            { name: 'focusleave', parameters: 'gridsortascmenuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridsortascmenuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_menu_SortAsc;
    }(Ext_menu_RadioItem));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_menu_SortAsc.EVENTNAMES);
    //    return Ext_menu_RadioItem.getEventNames(eventnames);
    //}

    var ExtGridsortascmenuitemMetaData = /** @class */ (function (_super) {
        __extends(ExtGridsortascmenuitemMetaData, _super);
        function ExtGridsortascmenuitemMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtGridsortascmenuitemMetaData.getAll = function () {
            ExtGridsortascmenuitemMetaData.PROPERTIES = Ext_grid_menu_SortAsc.getProperties(ExtGridsortascmenuitemMetaData.PROPERTIES);
            ExtGridsortascmenuitemMetaData.EVENTS = Ext_grid_menu_SortAsc.getEvents(ExtGridsortascmenuitemMetaData.EVENTS);
            ExtGridsortascmenuitemMetaData.EVENTS.forEach(function (event) {
                ExtGridsortascmenuitemMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtGridsortascmenuitemMetaData.PROPERTIES = [];
        ExtGridsortascmenuitemMetaData.EVENTS = [];
        ExtGridsortascmenuitemMetaData.EVENTNAMES = [];
        return ExtGridsortascmenuitemMetaData;
    }(Ext_grid_menu_SortAsc));
    (function () { ExtGridsortascmenuitemMetaData.getAll(); })();
    var ExtGridsortascmenuitemComponent = /** @class */ (function (_super) {
        __extends(ExtGridsortascmenuitemComponent, _super);
        function ExtGridsortascmenuitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtGridsortascmenuitemMetaData.PROPERTIES, ExtGridsortascmenuitemMetaData.EVENTS) || this;
            _this.xtype = 'gridsortascmenuitem';
            return _this;
        }
        ExtGridsortascmenuitemComponent_1 = ExtGridsortascmenuitemComponent;
        ExtGridsortascmenuitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtGridsortascmenuitemComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtGridsortascmenuitemComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtGridsortascmenuitemComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtGridsortascmenuitemComponent_1;
        ExtGridsortascmenuitemComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtGridsortascmenuitemComponent = ExtGridsortascmenuitemComponent_1 = __decorate([
            core.Component({
                selector: 'ext-gridsortascmenuitem',
                inputs: ExtGridsortascmenuitemMetaData.PROPERTIES,
                outputs: ExtGridsortascmenuitemMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtGridsortascmenuitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtGridsortascmenuitemComponent);
        return ExtGridsortascmenuitemComponent;
    }(EngBase));

    var Ext_grid_menu_SortDesc = /** @class */ (function (_super) {
        __extends(Ext_grid_menu_SortDesc, _super);
        function Ext_grid_menu_SortDesc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_menu_SortDesc.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_menu_SortDesc.PROPERTIES);
            return Ext_menu_RadioItem.getProperties(properties);
        };
        Ext_grid_menu_SortDesc.getEvents = function (events) {
            events = events.concat(Ext_grid_menu_SortDesc.EVENTS);
            return Ext_menu_RadioItem.getEvents(events);
        };
        Ext_grid_menu_SortDesc.PROPERTIES = [
            'text',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_menu_SortDesc.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'gridsortdescmenuitem,checked' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridsortdescmenuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridsortdescmenuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'gridsortdescmenuitem,checked' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridsortdescmenuitem,event' },
            { name: 'focusenter', parameters: 'gridsortdescmenuitem,event' },
            { name: 'focusleave', parameters: 'gridsortdescmenuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridsortdescmenuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_menu_SortDesc;
    }(Ext_menu_RadioItem));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_menu_SortDesc.EVENTNAMES);
    //    return Ext_menu_RadioItem.getEventNames(eventnames);
    //}

    var ExtGridsortdescmenuitemMetaData = /** @class */ (function (_super) {
        __extends(ExtGridsortdescmenuitemMetaData, _super);
        function ExtGridsortdescmenuitemMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtGridsortdescmenuitemMetaData.getAll = function () {
            ExtGridsortdescmenuitemMetaData.PROPERTIES = Ext_grid_menu_SortDesc.getProperties(ExtGridsortdescmenuitemMetaData.PROPERTIES);
            ExtGridsortdescmenuitemMetaData.EVENTS = Ext_grid_menu_SortDesc.getEvents(ExtGridsortdescmenuitemMetaData.EVENTS);
            ExtGridsortdescmenuitemMetaData.EVENTS.forEach(function (event) {
                ExtGridsortdescmenuitemMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtGridsortdescmenuitemMetaData.PROPERTIES = [];
        ExtGridsortdescmenuitemMetaData.EVENTS = [];
        ExtGridsortdescmenuitemMetaData.EVENTNAMES = [];
        return ExtGridsortdescmenuitemMetaData;
    }(Ext_grid_menu_SortDesc));
    (function () { ExtGridsortdescmenuitemMetaData.getAll(); })();
    var ExtGridsortdescmenuitemComponent = /** @class */ (function (_super) {
        __extends(ExtGridsortdescmenuitemComponent, _super);
        function ExtGridsortdescmenuitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtGridsortdescmenuitemMetaData.PROPERTIES, ExtGridsortdescmenuitemMetaData.EVENTS) || this;
            _this.xtype = 'gridsortdescmenuitem';
            return _this;
        }
        ExtGridsortdescmenuitemComponent_1 = ExtGridsortdescmenuitemComponent;
        ExtGridsortdescmenuitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtGridsortdescmenuitemComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtGridsortdescmenuitemComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtGridsortdescmenuitemComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtGridsortdescmenuitemComponent_1;
        ExtGridsortdescmenuitemComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtGridsortdescmenuitemComponent = ExtGridsortdescmenuitemComponent_1 = __decorate([
            core.Component({
                selector: 'ext-gridsortdescmenuitem',
                inputs: ExtGridsortdescmenuitemMetaData.PROPERTIES,
                outputs: ExtGridsortdescmenuitemMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtGridsortdescmenuitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtGridsortdescmenuitemComponent);
        return ExtGridsortdescmenuitemComponent;
    }(EngBase));

    var Ext_grid_PagingToolbar = /** @class */ (function (_super) {
        __extends(Ext_grid_PagingToolbar, _super);
        function Ext_grid_PagingToolbar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_PagingToolbar.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_PagingToolbar.PROPERTIES);
            return Ext_Toolbar.getProperties(properties);
        };
        Ext_grid_PagingToolbar.getEvents = function (events) {
            events = events.concat(Ext_grid_PagingToolbar.EVENTS);
            return Ext_Toolbar.getEvents(events);
        };
        Ext_grid_PagingToolbar.PROPERTIES = [
            'nextButton',
            'prevButton',
            'sliderField',
            'summaryComponent',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_PagingToolbar.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pagingtoolbar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pagingtoolbar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pagingtoolbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pagingtoolbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,pagingtoolbar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pagingtoolbar,event' },
            { name: 'focusenter', parameters: 'pagingtoolbar,event' },
            { name: 'focusleave', parameters: 'pagingtoolbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pagingtoolbar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pagingtoolbar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pagingtoolbar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pagingtoolbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_PagingToolbar;
    }(Ext_Toolbar));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_PagingToolbar.EVENTNAMES);
    //    return Ext_Toolbar.getEventNames(eventnames);
    //}

    var ExtPagingtoolbarMetaData = /** @class */ (function (_super) {
        __extends(ExtPagingtoolbarMetaData, _super);
        function ExtPagingtoolbarMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPagingtoolbarMetaData.getAll = function () {
            ExtPagingtoolbarMetaData.PROPERTIES = Ext_grid_PagingToolbar.getProperties(ExtPagingtoolbarMetaData.PROPERTIES);
            ExtPagingtoolbarMetaData.EVENTS = Ext_grid_PagingToolbar.getEvents(ExtPagingtoolbarMetaData.EVENTS);
            ExtPagingtoolbarMetaData.EVENTS.forEach(function (event) {
                ExtPagingtoolbarMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPagingtoolbarMetaData.PROPERTIES = [];
        ExtPagingtoolbarMetaData.EVENTS = [];
        ExtPagingtoolbarMetaData.EVENTNAMES = [];
        return ExtPagingtoolbarMetaData;
    }(Ext_grid_PagingToolbar));
    (function () { ExtPagingtoolbarMetaData.getAll(); })();
    var ExtPagingtoolbarComponent = /** @class */ (function (_super) {
        __extends(ExtPagingtoolbarComponent, _super);
        function ExtPagingtoolbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPagingtoolbarMetaData.PROPERTIES, ExtPagingtoolbarMetaData.EVENTS) || this;
            _this.xtype = 'pagingtoolbar';
            return _this;
        }
        ExtPagingtoolbarComponent_1 = ExtPagingtoolbarComponent;
        ExtPagingtoolbarComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPagingtoolbarComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPagingtoolbarComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPagingtoolbarComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPagingtoolbarComponent_1;
        ExtPagingtoolbarComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPagingtoolbarComponent = ExtPagingtoolbarComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pagingtoolbar',
                inputs: ExtPagingtoolbarMetaData.PROPERTIES,
                outputs: ExtPagingtoolbarMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPagingtoolbarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPagingtoolbarComponent);
        return ExtPagingtoolbarComponent;
    }(EngBase));

    var Ext_grid_Row = /** @class */ (function (_super) {
        __extends(Ext_grid_Row, _super);
        function Ext_grid_Row() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_Row.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_Row.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_grid_Row.getEvents = function (events) {
            events = events.concat(Ext_grid_Row.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_grid_Row.PROPERTIES = [
            'body',
            'defaultCellUI',
            'expandedField',
            'stickyVisibility',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_Row.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridrow' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridrow,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridrow,event' },
            { name: 'focusenter', parameters: 'gridrow,event' },
            { name: 'focusleave', parameters: 'gridrow,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridrow' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_Row;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_Row.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtGridrowMetaData = /** @class */ (function (_super) {
        __extends(ExtGridrowMetaData, _super);
        function ExtGridrowMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtGridrowMetaData.getAll = function () {
            ExtGridrowMetaData.PROPERTIES = Ext_grid_Row.getProperties(ExtGridrowMetaData.PROPERTIES);
            ExtGridrowMetaData.EVENTS = Ext_grid_Row.getEvents(ExtGridrowMetaData.EVENTS);
            ExtGridrowMetaData.EVENTS.forEach(function (event) {
                ExtGridrowMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtGridrowMetaData.PROPERTIES = [];
        ExtGridrowMetaData.EVENTS = [];
        ExtGridrowMetaData.EVENTNAMES = [];
        return ExtGridrowMetaData;
    }(Ext_grid_Row));
    (function () { ExtGridrowMetaData.getAll(); })();
    var ExtGridrowComponent = /** @class */ (function (_super) {
        __extends(ExtGridrowComponent, _super);
        function ExtGridrowComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtGridrowMetaData.PROPERTIES, ExtGridrowMetaData.EVENTS) || this;
            _this.xtype = 'gridrow';
            return _this;
        }
        ExtGridrowComponent_1 = ExtGridrowComponent;
        ExtGridrowComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtGridrowComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtGridrowComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtGridrowComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtGridrowComponent_1;
        ExtGridrowComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtGridrowComponent = ExtGridrowComponent_1 = __decorate([
            core.Component({
                selector: 'ext-gridrow',
                inputs: ExtGridrowMetaData.PROPERTIES,
                outputs: ExtGridrowMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtGridrowComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtGridrowComponent);
        return ExtGridrowComponent;
    }(EngBase));

    var Ext_grid_RowBody = /** @class */ (function (_super) {
        __extends(Ext_grid_RowBody, _super);
        function Ext_grid_RowBody() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_RowBody.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_RowBody.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_grid_RowBody.getEvents = function (events) {
            events = events.concat(Ext_grid_RowBody.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_grid_RowBody.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_RowBody.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'rowbody' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'rowbody,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'rowbody,event' },
            { name: 'focusenter', parameters: 'rowbody,event' },
            { name: 'focusleave', parameters: 'rowbody,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'rowbody' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_RowBody;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_RowBody.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtRowbodyMetaData = /** @class */ (function (_super) {
        __extends(ExtRowbodyMetaData, _super);
        function ExtRowbodyMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtRowbodyMetaData.getAll = function () {
            ExtRowbodyMetaData.PROPERTIES = Ext_grid_RowBody.getProperties(ExtRowbodyMetaData.PROPERTIES);
            ExtRowbodyMetaData.EVENTS = Ext_grid_RowBody.getEvents(ExtRowbodyMetaData.EVENTS);
            ExtRowbodyMetaData.EVENTS.forEach(function (event) {
                ExtRowbodyMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtRowbodyMetaData.PROPERTIES = [];
        ExtRowbodyMetaData.EVENTS = [];
        ExtRowbodyMetaData.EVENTNAMES = [];
        return ExtRowbodyMetaData;
    }(Ext_grid_RowBody));
    (function () { ExtRowbodyMetaData.getAll(); })();
    var ExtRowbodyComponent = /** @class */ (function (_super) {
        __extends(ExtRowbodyComponent, _super);
        function ExtRowbodyComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtRowbodyMetaData.PROPERTIES, ExtRowbodyMetaData.EVENTS) || this;
            _this.xtype = 'rowbody';
            return _this;
        }
        ExtRowbodyComponent_1 = ExtRowbodyComponent;
        ExtRowbodyComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtRowbodyComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtRowbodyComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtRowbodyComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtRowbodyComponent_1;
        ExtRowbodyComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtRowbodyComponent = ExtRowbodyComponent_1 = __decorate([
            core.Component({
                selector: 'ext-rowbody',
                inputs: ExtRowbodyMetaData.PROPERTIES,
                outputs: ExtRowbodyMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtRowbodyComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtRowbodyComponent);
        return ExtRowbodyComponent;
    }(EngBase));

    var Ext_grid_rowedit_Bar = /** @class */ (function (_super) {
        __extends(Ext_grid_rowedit_Bar, _super);
        function Ext_grid_rowedit_Bar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_rowedit_Bar.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_rowedit_Bar.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_grid_rowedit_Bar.getEvents = function (events) {
            events = events.concat(Ext_grid_rowedit_Bar.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_grid_rowedit_Bar.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_rowedit_Bar.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,roweditorbar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'roweditorbar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'roweditorbar' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'roweditorbar' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'roweditorbar,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'roweditorbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'roweditorbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'roweditorbar' },
            { name: 'deactivate', parameters: 'oldActiveItem,roweditorbar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'roweditorbar' },
            { name: 'drawershow', parameters: 'roweditorbar' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'roweditorbar' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'roweditorbar,event' },
            { name: 'focusenter', parameters: 'roweditorbar,event' },
            { name: 'focusleave', parameters: 'roweditorbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'roweditorbar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'roweditorbar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'roweditorbar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'roweditorbar,context' },
            { name: 'resizedragcancel', parameters: 'roweditorbar,context' },
            { name: 'resizedragend', parameters: 'roweditorbar,context' },
            { name: 'resizedragstart', parameters: 'roweditorbar,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'roweditorbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_rowedit_Bar;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_rowedit_Bar.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var ExtRoweditorbarMetaData = /** @class */ (function (_super) {
        __extends(ExtRoweditorbarMetaData, _super);
        function ExtRoweditorbarMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtRoweditorbarMetaData.getAll = function () {
            ExtRoweditorbarMetaData.PROPERTIES = Ext_grid_rowedit_Bar.getProperties(ExtRoweditorbarMetaData.PROPERTIES);
            ExtRoweditorbarMetaData.EVENTS = Ext_grid_rowedit_Bar.getEvents(ExtRoweditorbarMetaData.EVENTS);
            ExtRoweditorbarMetaData.EVENTS.forEach(function (event) {
                ExtRoweditorbarMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtRoweditorbarMetaData.PROPERTIES = [];
        ExtRoweditorbarMetaData.EVENTS = [];
        ExtRoweditorbarMetaData.EVENTNAMES = [];
        return ExtRoweditorbarMetaData;
    }(Ext_grid_rowedit_Bar));
    (function () { ExtRoweditorbarMetaData.getAll(); })();
    var ExtRoweditorbarComponent = /** @class */ (function (_super) {
        __extends(ExtRoweditorbarComponent, _super);
        function ExtRoweditorbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtRoweditorbarMetaData.PROPERTIES, ExtRoweditorbarMetaData.EVENTS) || this;
            _this.xtype = 'roweditorbar';
            return _this;
        }
        ExtRoweditorbarComponent_1 = ExtRoweditorbarComponent;
        ExtRoweditorbarComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtRoweditorbarComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtRoweditorbarComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtRoweditorbarComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtRoweditorbarComponent_1;
        ExtRoweditorbarComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtRoweditorbarComponent = ExtRoweditorbarComponent_1 = __decorate([
            core.Component({
                selector: 'ext-roweditorbar',
                inputs: ExtRoweditorbarMetaData.PROPERTIES,
                outputs: ExtRoweditorbarMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtRoweditorbarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtRoweditorbarComponent);
        return ExtRoweditorbarComponent;
    }(EngBase));

    var Ext_grid_rowedit_Cell = /** @class */ (function (_super) {
        __extends(Ext_grid_rowedit_Cell, _super);
        function Ext_grid_rowedit_Cell() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_rowedit_Cell.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_rowedit_Cell.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_grid_rowedit_Cell.getEvents = function (events) {
            events = events.concat(Ext_grid_rowedit_Cell.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_grid_rowedit_Cell.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_rowedit_Cell.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'roweditorcell' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'roweditorcell,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'roweditorcell,event' },
            { name: 'focusenter', parameters: 'roweditorcell,event' },
            { name: 'focusleave', parameters: 'roweditorcell,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'roweditorcell' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_rowedit_Cell;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_rowedit_Cell.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtRoweditorcellMetaData = /** @class */ (function (_super) {
        __extends(ExtRoweditorcellMetaData, _super);
        function ExtRoweditorcellMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtRoweditorcellMetaData.getAll = function () {
            ExtRoweditorcellMetaData.PROPERTIES = Ext_grid_rowedit_Cell.getProperties(ExtRoweditorcellMetaData.PROPERTIES);
            ExtRoweditorcellMetaData.EVENTS = Ext_grid_rowedit_Cell.getEvents(ExtRoweditorcellMetaData.EVENTS);
            ExtRoweditorcellMetaData.EVENTS.forEach(function (event) {
                ExtRoweditorcellMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtRoweditorcellMetaData.PROPERTIES = [];
        ExtRoweditorcellMetaData.EVENTS = [];
        ExtRoweditorcellMetaData.EVENTNAMES = [];
        return ExtRoweditorcellMetaData;
    }(Ext_grid_rowedit_Cell));
    (function () { ExtRoweditorcellMetaData.getAll(); })();
    var ExtRoweditorcellComponent = /** @class */ (function (_super) {
        __extends(ExtRoweditorcellComponent, _super);
        function ExtRoweditorcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtRoweditorcellMetaData.PROPERTIES, ExtRoweditorcellMetaData.EVENTS) || this;
            _this.xtype = 'roweditorcell';
            return _this;
        }
        ExtRoweditorcellComponent_1 = ExtRoweditorcellComponent;
        ExtRoweditorcellComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtRoweditorcellComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtRoweditorcellComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtRoweditorcellComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtRoweditorcellComponent_1;
        ExtRoweditorcellComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtRoweditorcellComponent = ExtRoweditorcellComponent_1 = __decorate([
            core.Component({
                selector: 'ext-roweditorcell',
                inputs: ExtRoweditorcellMetaData.PROPERTIES,
                outputs: ExtRoweditorcellMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtRoweditorcellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtRoweditorcellComponent);
        return ExtRoweditorcellComponent;
    }(EngBase));

    var Ext_dataview_ListItem = /** @class */ (function (_super) {
        __extends(Ext_dataview_ListItem, _super);
        function Ext_dataview_ListItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_dataview_ListItem.getProperties = function (properties) {
            properties = properties.concat(Ext_dataview_ListItem.PROPERTIES);
            return Ext_dataview_DataItem.getProperties(properties);
        };
        Ext_dataview_ListItem.getEvents = function (events) {
            events = events.concat(Ext_dataview_ListItem.EVENTS);
            return Ext_dataview_DataItem.getEvents(events);
        };
        Ext_dataview_ListItem.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_dataview_ListItem.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,listitem,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'listitem,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'listitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'listitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,listitem,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'listitem,event' },
            { name: 'focusenter', parameters: 'listitem,event' },
            { name: 'focusleave', parameters: 'listitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'listitem,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'listitem,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'listitem,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'listitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'dataItem,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_dataview_ListItem;
    }(Ext_dataview_DataItem));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_dataview_ListItem.EVENTNAMES);
    //    return Ext_dataview_DataItem.getEventNames(eventnames);
    //}

    var Ext_grid_rowedit_Editor = /** @class */ (function (_super) {
        __extends(Ext_grid_rowedit_Editor, _super);
        function Ext_grid_rowedit_Editor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_rowedit_Editor.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_rowedit_Editor.PROPERTIES);
            return Ext_dataview_ListItem.getProperties(properties);
        };
        Ext_grid_rowedit_Editor.getEvents = function (events) {
            events = events.concat(Ext_grid_rowedit_Editor.EVENTS);
            return Ext_dataview_ListItem.getEvents(events);
        };
        Ext_grid_rowedit_Editor.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_rowedit_Editor.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,roweditor,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'roweditor,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'roweditor' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'roweditor,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,roweditor,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'roweditor,event' },
            { name: 'focusenter', parameters: 'roweditor,event' },
            { name: 'focusleave', parameters: 'roweditor,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'roweditor,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'roweditor,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'roweditor,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'roweditor' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'dataItem,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_rowedit_Editor;
    }(Ext_dataview_ListItem));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_rowedit_Editor.EVENTNAMES);
    //    return Ext_dataview_ListItem.getEventNames(eventnames);
    //}

    var ExtRoweditorMetaData = /** @class */ (function (_super) {
        __extends(ExtRoweditorMetaData, _super);
        function ExtRoweditorMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtRoweditorMetaData.getAll = function () {
            ExtRoweditorMetaData.PROPERTIES = Ext_grid_rowedit_Editor.getProperties(ExtRoweditorMetaData.PROPERTIES);
            ExtRoweditorMetaData.EVENTS = Ext_grid_rowedit_Editor.getEvents(ExtRoweditorMetaData.EVENTS);
            ExtRoweditorMetaData.EVENTS.forEach(function (event) {
                ExtRoweditorMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtRoweditorMetaData.PROPERTIES = [];
        ExtRoweditorMetaData.EVENTS = [];
        ExtRoweditorMetaData.EVENTNAMES = [];
        return ExtRoweditorMetaData;
    }(Ext_grid_rowedit_Editor));
    (function () { ExtRoweditorMetaData.getAll(); })();
    var ExtRoweditorComponent = /** @class */ (function (_super) {
        __extends(ExtRoweditorComponent, _super);
        function ExtRoweditorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtRoweditorMetaData.PROPERTIES, ExtRoweditorMetaData.EVENTS) || this;
            _this.xtype = 'roweditor';
            return _this;
        }
        ExtRoweditorComponent_1 = ExtRoweditorComponent;
        ExtRoweditorComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtRoweditorComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtRoweditorComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtRoweditorComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtRoweditorComponent_1;
        ExtRoweditorComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtRoweditorComponent = ExtRoweditorComponent_1 = __decorate([
            core.Component({
                selector: 'ext-roweditor',
                inputs: ExtRoweditorMetaData.PROPERTIES,
                outputs: ExtRoweditorMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtRoweditorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtRoweditorComponent);
        return ExtRoweditorComponent;
    }(EngBase));

    var Ext_grid_rowedit_Gap = /** @class */ (function (_super) {
        __extends(Ext_grid_rowedit_Gap, _super);
        function Ext_grid_rowedit_Gap() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_rowedit_Gap.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_rowedit_Gap.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_grid_rowedit_Gap.getEvents = function (events) {
            events = events.concat(Ext_grid_rowedit_Gap.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_grid_rowedit_Gap.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_rowedit_Gap.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'roweditorgap' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'roweditorgap,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'roweditorgap,event' },
            { name: 'focusenter', parameters: 'roweditorgap,event' },
            { name: 'focusleave', parameters: 'roweditorgap,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'roweditorgap' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_rowedit_Gap;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_rowedit_Gap.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtRoweditorgapMetaData = /** @class */ (function (_super) {
        __extends(ExtRoweditorgapMetaData, _super);
        function ExtRoweditorgapMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtRoweditorgapMetaData.getAll = function () {
            ExtRoweditorgapMetaData.PROPERTIES = Ext_grid_rowedit_Gap.getProperties(ExtRoweditorgapMetaData.PROPERTIES);
            ExtRoweditorgapMetaData.EVENTS = Ext_grid_rowedit_Gap.getEvents(ExtRoweditorgapMetaData.EVENTS);
            ExtRoweditorgapMetaData.EVENTS.forEach(function (event) {
                ExtRoweditorgapMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtRoweditorgapMetaData.PROPERTIES = [];
        ExtRoweditorgapMetaData.EVENTS = [];
        ExtRoweditorgapMetaData.EVENTNAMES = [];
        return ExtRoweditorgapMetaData;
    }(Ext_grid_rowedit_Gap));
    (function () { ExtRoweditorgapMetaData.getAll(); })();
    var ExtRoweditorgapComponent = /** @class */ (function (_super) {
        __extends(ExtRoweditorgapComponent, _super);
        function ExtRoweditorgapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtRoweditorgapMetaData.PROPERTIES, ExtRoweditorgapMetaData.EVENTS) || this;
            _this.xtype = 'roweditorgap';
            return _this;
        }
        ExtRoweditorgapComponent_1 = ExtRoweditorgapComponent;
        ExtRoweditorgapComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtRoweditorgapComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtRoweditorgapComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtRoweditorgapComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtRoweditorgapComponent_1;
        ExtRoweditorgapComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtRoweditorgapComponent = ExtRoweditorgapComponent_1 = __decorate([
            core.Component({
                selector: 'ext-roweditorgap',
                inputs: ExtRoweditorgapMetaData.PROPERTIES,
                outputs: ExtRoweditorgapMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtRoweditorgapComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtRoweditorgapComponent);
        return ExtRoweditorgapComponent;
    }(EngBase));

    var Ext_grid_RowHeader = /** @class */ (function (_super) {
        __extends(Ext_grid_RowHeader, _super);
        function Ext_grid_RowHeader() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_RowHeader.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_RowHeader.PROPERTIES);
            return Ext_dataview_ItemHeader.getProperties(properties);
        };
        Ext_grid_RowHeader.getEvents = function (events) {
            events = events.concat(Ext_grid_RowHeader.EVENTS);
            return Ext_dataview_ItemHeader.getEvents(events);
        };
        Ext_grid_RowHeader.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_RowHeader.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'rowheader' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'rowheader,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'rowheader,event' },
            { name: 'focusenter', parameters: 'rowheader,event' },
            { name: 'focusleave', parameters: 'rowheader,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'rowheader' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_RowHeader;
    }(Ext_dataview_ItemHeader));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_RowHeader.EVENTNAMES);
    //    return Ext_dataview_ItemHeader.getEventNames(eventnames);
    //}

    var ExtRowheaderMetaData = /** @class */ (function (_super) {
        __extends(ExtRowheaderMetaData, _super);
        function ExtRowheaderMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtRowheaderMetaData.getAll = function () {
            ExtRowheaderMetaData.PROPERTIES = Ext_grid_RowHeader.getProperties(ExtRowheaderMetaData.PROPERTIES);
            ExtRowheaderMetaData.EVENTS = Ext_grid_RowHeader.getEvents(ExtRowheaderMetaData.EVENTS);
            ExtRowheaderMetaData.EVENTS.forEach(function (event) {
                ExtRowheaderMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtRowheaderMetaData.PROPERTIES = [];
        ExtRowheaderMetaData.EVENTS = [];
        ExtRowheaderMetaData.EVENTNAMES = [];
        return ExtRowheaderMetaData;
    }(Ext_grid_RowHeader));
    (function () { ExtRowheaderMetaData.getAll(); })();
    var ExtRowheaderComponent = /** @class */ (function (_super) {
        __extends(ExtRowheaderComponent, _super);
        function ExtRowheaderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtRowheaderMetaData.PROPERTIES, ExtRowheaderMetaData.EVENTS) || this;
            _this.xtype = 'rowheader';
            return _this;
        }
        ExtRowheaderComponent_1 = ExtRowheaderComponent;
        ExtRowheaderComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtRowheaderComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtRowheaderComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtRowheaderComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtRowheaderComponent_1;
        ExtRowheaderComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtRowheaderComponent = ExtRowheaderComponent_1 = __decorate([
            core.Component({
                selector: 'ext-rowheader',
                inputs: ExtRowheaderMetaData.PROPERTIES,
                outputs: ExtRowheaderMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtRowheaderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtRowheaderComponent);
        return ExtRowheaderComponent;
    }(EngBase));

    var Ext_grid_SummaryRow = /** @class */ (function (_super) {
        __extends(Ext_grid_SummaryRow, _super);
        function Ext_grid_SummaryRow() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_grid_SummaryRow.getProperties = function (properties) {
            properties = properties.concat(Ext_grid_SummaryRow.PROPERTIES);
            return Ext_grid_Row.getProperties(properties);
        };
        Ext_grid_SummaryRow.getEvents = function (events) {
            events = events.concat(Ext_grid_SummaryRow.EVENTS);
            return Ext_grid_Row.getEvents(events);
        };
        Ext_grid_SummaryRow.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_grid_SummaryRow.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gridsummaryrow' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gridsummaryrow,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gridsummaryrow,event' },
            { name: 'focusenter', parameters: 'gridsummaryrow,event' },
            { name: 'focusleave', parameters: 'gridsummaryrow,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gridsummaryrow' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_grid_SummaryRow;
    }(Ext_grid_Row));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_grid_SummaryRow.EVENTNAMES);
    //    return Ext_grid_Row.getEventNames(eventnames);
    //}

    var ExtGridsummaryrowMetaData = /** @class */ (function (_super) {
        __extends(ExtGridsummaryrowMetaData, _super);
        function ExtGridsummaryrowMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtGridsummaryrowMetaData.getAll = function () {
            ExtGridsummaryrowMetaData.PROPERTIES = Ext_grid_SummaryRow.getProperties(ExtGridsummaryrowMetaData.PROPERTIES);
            ExtGridsummaryrowMetaData.EVENTS = Ext_grid_SummaryRow.getEvents(ExtGridsummaryrowMetaData.EVENTS);
            ExtGridsummaryrowMetaData.EVENTS.forEach(function (event) {
                ExtGridsummaryrowMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtGridsummaryrowMetaData.PROPERTIES = [];
        ExtGridsummaryrowMetaData.EVENTS = [];
        ExtGridsummaryrowMetaData.EVENTNAMES = [];
        return ExtGridsummaryrowMetaData;
    }(Ext_grid_SummaryRow));
    (function () { ExtGridsummaryrowMetaData.getAll(); })();
    var ExtGridsummaryrowComponent = /** @class */ (function (_super) {
        __extends(ExtGridsummaryrowComponent, _super);
        function ExtGridsummaryrowComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtGridsummaryrowMetaData.PROPERTIES, ExtGridsummaryrowMetaData.EVENTS) || this;
            _this.xtype = 'gridsummaryrow';
            return _this;
        }
        ExtGridsummaryrowComponent_1 = ExtGridsummaryrowComponent;
        ExtGridsummaryrowComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtGridsummaryrowComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtGridsummaryrowComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtGridsummaryrowComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtGridsummaryrowComponent_1;
        ExtGridsummaryrowComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtGridsummaryrowComponent = ExtGridsummaryrowComponent_1 = __decorate([
            core.Component({
                selector: 'ext-gridsummaryrow',
                inputs: ExtGridsummaryrowMetaData.PROPERTIES,
                outputs: ExtGridsummaryrowMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtGridsummaryrowComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtGridsummaryrowComponent);
        return ExtGridsummaryrowComponent;
    }(EngBase));

    var Ext_tree_Tree = /** @class */ (function (_super) {
        __extends(Ext_tree_Tree, _super);
        function Ext_tree_Tree() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_tree_Tree.getProperties = function (properties) {
            properties = properties.concat(Ext_tree_Tree.PROPERTIES);
            return Ext_grid_Grid.getProperties(properties);
        };
        Ext_tree_Tree.getEvents = function (events) {
            events = events.concat(Ext_tree_Tree.EVENTS);
            return Ext_grid_Grid.getEvents(events);
        };
        Ext_tree_Tree.PROPERTIES = [
            'expanderFirst',
            'expanderOnly',
            'folderSort',
            'selectOnExpander',
            'singleExpand',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_tree_Tree.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,tree,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecheckchange', parameters: 'tree,checked,current,record,e' },
            { name: 'beforecomplete', parameters: 'editor,value,startValue,The' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeedit', parameters: 'sender,location' },
            { name: 'beforegroupcollapse', parameters: 'tree,group' },
            { name: 'beforegroupexpand', parameters: 'tree,group' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeload', parameters: 'store,operation' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforenodecollapse', parameters: 'node,record' },
            { name: 'beforenodeexpand', parameters: 'row,record' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeselectionextend', parameters: 'grid,An,extension' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestartedit', parameters: 'editor,boundEl,value,The' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'tree' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tree,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'canceledit', parameters: 'editor,value,startValue' },
            { name: 'cellselection', parameters: 'grid,selection' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'checkchange', parameters: 'cell,checked,record,e' },
            { name: 'childdoubletap', parameters: 'tree,location' },
            { name: 'childlongpress', parameters: 'tree,location' },
            { name: 'childmouseenter', parameters: 'tree,location' },
            { name: 'childmouseleave', parameters: 'tree,location' },
            { name: 'childsingletap', parameters: 'tree,location' },
            { name: 'childtap', parameters: 'tree,location' },
            { name: 'childtaphold', parameters: 'tree,location' },
            { name: 'childtouchcancel', parameters: 'tree,location' },
            { name: 'childtouchend', parameters: 'tree,location' },
            { name: 'childtouchmove', parameters: 'tree,location' },
            { name: 'childtouchstart', parameters: 'tree,location' },
            { name: 'columnadd', parameters: 'tree,column,index' },
            { name: 'columnhide', parameters: 'tree,column' },
            { name: 'columnmenucreated', parameters: 'grid,column,menu' },
            { name: 'columnmove', parameters: 'tree,column,fromIndex,toIndex' },
            { name: 'columnremove', parameters: 'tree,column' },
            { name: 'columnresize', parameters: 'tree,column,width' },
            { name: 'columnselection', parameters: 'grid,selection' },
            { name: 'columnshow', parameters: 'tree,column' },
            { name: 'columnsort', parameters: 'tree,column,direction' },
            { name: 'complete', parameters: 'editor,value,startValue,The' },
            { name: 'deactivate', parameters: 'oldActiveItem,tree,newActiveItem' },
            { name: 'deselect', parameters: 'tree,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'edit', parameters: 'sender,location' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tree,event' },
            { name: 'focusenter', parameters: 'tree,event' },
            { name: 'focusleave', parameters: 'tree,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupcollapse', parameters: 'tree,group' },
            { name: 'groupexpand', parameters: 'tree,group' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'tree,index,record,action' },
            { name: 'itemdoubletap', parameters: 'tree,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'tree,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'tree,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'tree,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'tree,index,target,record,e' },
            { name: 'itemswipe', parameters: 'tree,index,target,record,e' },
            { name: 'itemtap', parameters: 'tree,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'tree,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'tree,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'tree,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'tree,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'tree,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'load', parameters: 'tree,records,successful,operation,node' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'tree,to,from' },
            { name: 'nodecollapse', parameters: 'node,record' },
            { name: 'nodeexpand', parameters: 'row,record' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'tree' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'tree,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'tree,selected' },
            { name: 'selectionextenderdrag', parameters: 'grid,An,extension' },
            { name: 'show', parameters: 'sender' },
            { name: 'specialkey', parameters: 'editor,field,event' },
            { name: 'startedit', parameters: 'editor,boundEl,value,The' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'tree' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateedit', parameters: 'sender,location' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_tree_Tree;
    }(Ext_grid_Grid));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_tree_Tree.EVENTNAMES);
    //    return Ext_grid_Grid.getEventNames(eventnames);
    //}

    var ExtTreeMetaData = /** @class */ (function (_super) {
        __extends(ExtTreeMetaData, _super);
        function ExtTreeMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTreeMetaData.getAll = function () {
            ExtTreeMetaData.PROPERTIES = Ext_tree_Tree.getProperties(ExtTreeMetaData.PROPERTIES);
            ExtTreeMetaData.EVENTS = Ext_tree_Tree.getEvents(ExtTreeMetaData.EVENTS);
            ExtTreeMetaData.EVENTS.forEach(function (event) {
                ExtTreeMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTreeMetaData.PROPERTIES = [];
        ExtTreeMetaData.EVENTS = [];
        ExtTreeMetaData.EVENTNAMES = [];
        return ExtTreeMetaData;
    }(Ext_tree_Tree));
    (function () { ExtTreeMetaData.getAll(); })();
    var ExtTreeComponent = /** @class */ (function (_super) {
        __extends(ExtTreeComponent, _super);
        function ExtTreeComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTreeMetaData.PROPERTIES, ExtTreeMetaData.EVENTS) || this;
            _this.xtype = 'tree';
            return _this;
        }
        ExtTreeComponent_1 = ExtTreeComponent;
        ExtTreeComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTreeComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTreeComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTreeComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTreeComponent_1;
        ExtTreeComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTreeComponent = ExtTreeComponent_1 = __decorate([
            core.Component({
                selector: 'ext-tree',
                inputs: ExtTreeMetaData.PROPERTIES,
                outputs: ExtTreeMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTreeComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTreeComponent);
        return ExtTreeComponent;
    }(EngBase));

    var Ext_Image = /** @class */ (function (_super) {
        __extends(Ext_Image, _super);
        function Ext_Image() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Image.getProperties = function (properties) {
            properties = properties.concat(Ext_Image.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_Image.getEvents = function (events) {
            events = events.concat(Ext_Image.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_Image.PROPERTIES = [
            'backgroundCls',
            'imageCls',
            'mode',
            'src',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Image.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'image' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'image,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'error', parameters: 'image,e' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'image,event' },
            { name: 'focusenter', parameters: 'image,event' },
            { name: 'focusleave', parameters: 'image,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'load', parameters: 'image,e' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'image,e' },
            { name: 'tofront', parameters: 'image' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Image;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Image.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtImageMetaData = /** @class */ (function (_super) {
        __extends(ExtImageMetaData, _super);
        function ExtImageMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtImageMetaData.getAll = function () {
            ExtImageMetaData.PROPERTIES = Ext_Image.getProperties(ExtImageMetaData.PROPERTIES);
            ExtImageMetaData.EVENTS = Ext_Image.getEvents(ExtImageMetaData.EVENTS);
            ExtImageMetaData.EVENTS.forEach(function (event) {
                ExtImageMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtImageMetaData.PROPERTIES = [];
        ExtImageMetaData.EVENTS = [];
        ExtImageMetaData.EVENTNAMES = [];
        return ExtImageMetaData;
    }(Ext_Image));
    (function () { ExtImageMetaData.getAll(); })();
    var ExtImageComponent = /** @class */ (function (_super) {
        __extends(ExtImageComponent, _super);
        function ExtImageComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtImageMetaData.PROPERTIES, ExtImageMetaData.EVENTS) || this;
            _this.xtype = 'image';
            return _this;
        }
        ExtImageComponent_1 = ExtImageComponent;
        ExtImageComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtImageComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtImageComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtImageComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtImageComponent_1;
        ExtImageComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtImageComponent = ExtImageComponent_1 = __decorate([
            core.Component({
                selector: 'ext-image',
                inputs: ExtImageMetaData.PROPERTIES,
                outputs: ExtImageMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtImageComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtImageComponent);
        return ExtImageComponent;
    }(EngBase));

    var Ext_Indicator = /** @class */ (function (_super) {
        __extends(Ext_Indicator, _super);
        function Ext_Indicator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Indicator.getProperties = function (properties) {
            properties = properties.concat(Ext_Indicator.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_Indicator.getEvents = function (events) {
            events = events.concat(Ext_Indicator.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_Indicator.PROPERTIES = [
            'activeIndex',
            'count',
            'direction',
            'tapMode',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Indicator.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'indicator' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'indicator,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'indicator,event' },
            { name: 'focusenter', parameters: 'indicator,event' },
            { name: 'focusleave', parameters: 'indicator,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'indicatortap', parameters: 'indicator,index,item' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'next', parameters: 'indicator' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'previous', parameters: 'indicator' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'indicator' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Indicator;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Indicator.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtIndicatorMetaData = /** @class */ (function (_super) {
        __extends(ExtIndicatorMetaData, _super);
        function ExtIndicatorMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtIndicatorMetaData.getAll = function () {
            ExtIndicatorMetaData.PROPERTIES = Ext_Indicator.getProperties(ExtIndicatorMetaData.PROPERTIES);
            ExtIndicatorMetaData.EVENTS = Ext_Indicator.getEvents(ExtIndicatorMetaData.EVENTS);
            ExtIndicatorMetaData.EVENTS.forEach(function (event) {
                ExtIndicatorMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtIndicatorMetaData.PROPERTIES = [];
        ExtIndicatorMetaData.EVENTS = [];
        ExtIndicatorMetaData.EVENTNAMES = [];
        return ExtIndicatorMetaData;
    }(Ext_Indicator));
    (function () { ExtIndicatorMetaData.getAll(); })();
    var ExtIndicatorComponent = /** @class */ (function (_super) {
        __extends(ExtIndicatorComponent, _super);
        function ExtIndicatorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtIndicatorMetaData.PROPERTIES, ExtIndicatorMetaData.EVENTS) || this;
            _this.xtype = 'indicator';
            return _this;
        }
        ExtIndicatorComponent_1 = ExtIndicatorComponent;
        ExtIndicatorComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtIndicatorComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtIndicatorComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtIndicatorComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtIndicatorComponent_1;
        ExtIndicatorComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtIndicatorComponent = ExtIndicatorComponent_1 = __decorate([
            core.Component({
                selector: 'ext-indicator',
                inputs: ExtIndicatorMetaData.PROPERTIES,
                outputs: ExtIndicatorMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtIndicatorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtIndicatorComponent);
        return ExtIndicatorComponent;
    }(EngBase));

    var Ext_Label = /** @class */ (function (_super) {
        __extends(Ext_Label, _super);
        function Ext_Label() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Label.getProperties = function (properties) {
            properties = properties.concat(Ext_Label.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_Label.getEvents = function (events) {
            events = events.concat(Ext_Label.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_Label.PROPERTIES = [
            'html',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Label.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'label' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'label,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'label,event' },
            { name: 'focusenter', parameters: 'label,event' },
            { name: 'focusleave', parameters: 'label,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'label' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Label;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Label.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtLabelMetaData = /** @class */ (function (_super) {
        __extends(ExtLabelMetaData, _super);
        function ExtLabelMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtLabelMetaData.getAll = function () {
            ExtLabelMetaData.PROPERTIES = Ext_Label.getProperties(ExtLabelMetaData.PROPERTIES);
            ExtLabelMetaData.EVENTS = Ext_Label.getEvents(ExtLabelMetaData.EVENTS);
            ExtLabelMetaData.EVENTS.forEach(function (event) {
                ExtLabelMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtLabelMetaData.PROPERTIES = [];
        ExtLabelMetaData.EVENTS = [];
        ExtLabelMetaData.EVENTNAMES = [];
        return ExtLabelMetaData;
    }(Ext_Label));
    (function () { ExtLabelMetaData.getAll(); })();
    var ExtLabelComponent = /** @class */ (function (_super) {
        __extends(ExtLabelComponent, _super);
        function ExtLabelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtLabelMetaData.PROPERTIES, ExtLabelMetaData.EVENTS) || this;
            _this.xtype = 'label';
            return _this;
        }
        ExtLabelComponent_1 = ExtLabelComponent;
        ExtLabelComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtLabelComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtLabelComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtLabelComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtLabelComponent_1;
        ExtLabelComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtLabelComponent = ExtLabelComponent_1 = __decorate([
            core.Component({
                selector: 'ext-label',
                inputs: ExtLabelMetaData.PROPERTIES,
                outputs: ExtLabelMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtLabelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtLabelComponent);
        return ExtLabelComponent;
    }(EngBase));

    var Ext_list_Tree = /** @class */ (function (_super) {
        __extends(Ext_list_Tree, _super);
        function Ext_list_Tree() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_list_Tree.getProperties = function (properties) {
            properties = properties.concat(Ext_list_Tree.PROPERTIES);
            return Ext_Gadget.getProperties(properties);
        };
        Ext_list_Tree.getEvents = function (events) {
            events = events.concat(Ext_list_Tree.EVENTS);
            return Ext_Gadget.getEvents(events);
        };
        Ext_list_Tree.PROPERTIES = [
            'defaults',
            'expanderFirst',
            'expanderOnly',
            'floatLeafItems',
            'highlightPath',
            'indent',
            'micro',
            'publishes',
            'selection',
            'selectOnExpander',
            'singleExpand',
            'store',
            'twoWayBindable',
            'ui',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_list_Tree.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'treelist' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'treelist,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'treelist,event' },
            { name: 'focusenter', parameters: 'treelist,event' },
            { name: 'focusleave', parameters: 'treelist,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemclick', parameters: 'sender,info' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'selectionchange', parameters: 'treelist,record' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'treelist' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_list_Tree;
    }(Ext_Gadget));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_list_Tree.EVENTNAMES);
    //    return Ext_Gadget.getEventNames(eventnames);
    //}

    var ExtTreelistMetaData = /** @class */ (function (_super) {
        __extends(ExtTreelistMetaData, _super);
        function ExtTreelistMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTreelistMetaData.getAll = function () {
            ExtTreelistMetaData.PROPERTIES = Ext_list_Tree.getProperties(ExtTreelistMetaData.PROPERTIES);
            ExtTreelistMetaData.EVENTS = Ext_list_Tree.getEvents(ExtTreelistMetaData.EVENTS);
            ExtTreelistMetaData.EVENTS.forEach(function (event) {
                ExtTreelistMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTreelistMetaData.PROPERTIES = [];
        ExtTreelistMetaData.EVENTS = [];
        ExtTreelistMetaData.EVENTNAMES = [];
        return ExtTreelistMetaData;
    }(Ext_list_Tree));
    (function () { ExtTreelistMetaData.getAll(); })();
    var ExtTreelistComponent = /** @class */ (function (_super) {
        __extends(ExtTreelistComponent, _super);
        function ExtTreelistComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTreelistMetaData.PROPERTIES, ExtTreelistMetaData.EVENTS) || this;
            _this.xtype = 'treelist';
            return _this;
        }
        ExtTreelistComponent_1 = ExtTreelistComponent;
        ExtTreelistComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTreelistComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTreelistComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTreelistComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTreelistComponent_1;
        ExtTreelistComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTreelistComponent = ExtTreelistComponent_1 = __decorate([
            core.Component({
                selector: 'ext-treelist',
                inputs: ExtTreelistMetaData.PROPERTIES,
                outputs: ExtTreelistMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTreelistComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTreelistComponent);
        return ExtTreelistComponent;
    }(EngBase));

    var Ext_list_AbstractTreeItem = /** @class */ (function (_super) {
        __extends(Ext_list_AbstractTreeItem, _super);
        function Ext_list_AbstractTreeItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_list_AbstractTreeItem.getProperties = function (properties) {
            properties = properties.concat(Ext_list_AbstractTreeItem.PROPERTIES);
            return Ext_Widget.getProperties(properties);
        };
        Ext_list_AbstractTreeItem.getEvents = function (events) {
            events = events.concat(Ext_list_AbstractTreeItem.EVENTS);
            return Ext_Widget.getEvents(events);
        };
        Ext_list_AbstractTreeItem.PROPERTIES = [
            'expandable',
            'expanded',
            'iconCls',
            'iconClsProperty',
            'leaf',
            'loading',
            'node',
            'over',
            'owner',
            'parentItem',
            'selected',
            'selectedParent',
            'text',
            'textProperty',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_list_AbstractTreeItem.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_list_AbstractTreeItem;
    }(Ext_Widget));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_list_AbstractTreeItem.EVENTNAMES);
    //    return Ext_Widget.getEventNames(eventnames);
    //}

    var Ext_list_TreeItem = /** @class */ (function (_super) {
        __extends(Ext_list_TreeItem, _super);
        function Ext_list_TreeItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_list_TreeItem.getProperties = function (properties) {
            properties = properties.concat(Ext_list_TreeItem.PROPERTIES);
            return Ext_list_AbstractTreeItem.getProperties(properties);
        };
        Ext_list_TreeItem.getEvents = function (events) {
            events = events.concat(Ext_list_TreeItem.EVENTS);
            return Ext_list_AbstractTreeItem.getEvents(events);
        };
        Ext_list_TreeItem.PROPERTIES = [
            'rowCls',
            'rowClsProperty',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_list_TreeItem.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'treelistitem' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'treelistitem,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'treelistitem,event' },
            { name: 'focusenter', parameters: 'treelistitem,event' },
            { name: 'focusleave', parameters: 'treelistitem,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'treelistitem' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_list_TreeItem;
    }(Ext_list_AbstractTreeItem));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_list_TreeItem.EVENTNAMES);
    //    return Ext_list_AbstractTreeItem.getEventNames(eventnames);
    //}

    var ExtTreelistitemMetaData = /** @class */ (function (_super) {
        __extends(ExtTreelistitemMetaData, _super);
        function ExtTreelistitemMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTreelistitemMetaData.getAll = function () {
            ExtTreelistitemMetaData.PROPERTIES = Ext_list_TreeItem.getProperties(ExtTreelistitemMetaData.PROPERTIES);
            ExtTreelistitemMetaData.EVENTS = Ext_list_TreeItem.getEvents(ExtTreelistitemMetaData.EVENTS);
            ExtTreelistitemMetaData.EVENTS.forEach(function (event) {
                ExtTreelistitemMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTreelistitemMetaData.PROPERTIES = [];
        ExtTreelistitemMetaData.EVENTS = [];
        ExtTreelistitemMetaData.EVENTNAMES = [];
        return ExtTreelistitemMetaData;
    }(Ext_list_TreeItem));
    (function () { ExtTreelistitemMetaData.getAll(); })();
    var ExtTreelistitemComponent = /** @class */ (function (_super) {
        __extends(ExtTreelistitemComponent, _super);
        function ExtTreelistitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTreelistitemMetaData.PROPERTIES, ExtTreelistitemMetaData.EVENTS) || this;
            _this.xtype = 'treelistitem';
            return _this;
        }
        ExtTreelistitemComponent_1 = ExtTreelistitemComponent;
        ExtTreelistitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTreelistitemComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTreelistitemComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTreelistitemComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTreelistitemComponent_1;
        ExtTreelistitemComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTreelistitemComponent = ExtTreelistitemComponent_1 = __decorate([
            core.Component({
                selector: 'ext-treelistitem',
                inputs: ExtTreelistitemMetaData.PROPERTIES,
                outputs: ExtTreelistitemMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTreelistitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTreelistitemComponent);
        return ExtTreelistitemComponent;
    }(EngBase));

    var Ext_Mask = /** @class */ (function (_super) {
        __extends(Ext_Mask, _super);
        function Ext_Mask() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Mask.getProperties = function (properties) {
            properties = properties.concat(Ext_Mask.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_Mask.getEvents = function (events) {
            events = events.concat(Ext_Mask.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_Mask.PROPERTIES = [
            'bottom',
            'left',
            'right',
            'top',
            'transparent',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Mask.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'mask' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'mask,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'mask,event' },
            { name: 'focusenter', parameters: 'mask,event' },
            { name: 'focusleave', parameters: 'mask,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'mask,e' },
            { name: 'tofront', parameters: 'mask' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Mask;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Mask.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var Ext_LoadMask = /** @class */ (function (_super) {
        __extends(Ext_LoadMask, _super);
        function Ext_LoadMask() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_LoadMask.getProperties = function (properties) {
            properties = properties.concat(Ext_LoadMask.PROPERTIES);
            return Ext_Mask.getProperties(properties);
        };
        Ext_LoadMask.getEvents = function (events) {
            events = events.concat(Ext_LoadMask.EVENTS);
            return Ext_Mask.getEvents(events);
        };
        Ext_LoadMask.PROPERTIES = [
            'cls',
            'indicator',
            'message',
            'messageCls',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_LoadMask.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'loadmask' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'loadmask,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'loadmask,event' },
            { name: 'focusenter', parameters: 'loadmask,event' },
            { name: 'focusleave', parameters: 'loadmask,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'loadmask,e' },
            { name: 'tofront', parameters: 'loadmask' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_LoadMask;
    }(Ext_Mask));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_LoadMask.EVENTNAMES);
    //    return Ext_Mask.getEventNames(eventnames);
    //}

    var ExtLoadmaskMetaData = /** @class */ (function (_super) {
        __extends(ExtLoadmaskMetaData, _super);
        function ExtLoadmaskMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtLoadmaskMetaData.getAll = function () {
            ExtLoadmaskMetaData.PROPERTIES = Ext_LoadMask.getProperties(ExtLoadmaskMetaData.PROPERTIES);
            ExtLoadmaskMetaData.EVENTS = Ext_LoadMask.getEvents(ExtLoadmaskMetaData.EVENTS);
            ExtLoadmaskMetaData.EVENTS.forEach(function (event) {
                ExtLoadmaskMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtLoadmaskMetaData.PROPERTIES = [];
        ExtLoadmaskMetaData.EVENTS = [];
        ExtLoadmaskMetaData.EVENTNAMES = [];
        return ExtLoadmaskMetaData;
    }(Ext_LoadMask));
    (function () { ExtLoadmaskMetaData.getAll(); })();
    var ExtLoadmaskComponent = /** @class */ (function (_super) {
        __extends(ExtLoadmaskComponent, _super);
        function ExtLoadmaskComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtLoadmaskMetaData.PROPERTIES, ExtLoadmaskMetaData.EVENTS) || this;
            _this.xtype = 'loadmask';
            return _this;
        }
        ExtLoadmaskComponent_1 = ExtLoadmaskComponent;
        ExtLoadmaskComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtLoadmaskComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtLoadmaskComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtLoadmaskComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtLoadmaskComponent_1;
        ExtLoadmaskComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtLoadmaskComponent = ExtLoadmaskComponent_1 = __decorate([
            core.Component({
                selector: 'ext-loadmask',
                inputs: ExtLoadmaskMetaData.PROPERTIES,
                outputs: ExtLoadmaskMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtLoadmaskComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtLoadmaskComponent);
        return ExtLoadmaskComponent;
    }(EngBase));

    var ExtMaskMetaData = /** @class */ (function (_super) {
        __extends(ExtMaskMetaData, _super);
        function ExtMaskMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtMaskMetaData.getAll = function () {
            ExtMaskMetaData.PROPERTIES = Ext_Mask.getProperties(ExtMaskMetaData.PROPERTIES);
            ExtMaskMetaData.EVENTS = Ext_Mask.getEvents(ExtMaskMetaData.EVENTS);
            ExtMaskMetaData.EVENTS.forEach(function (event) {
                ExtMaskMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtMaskMetaData.PROPERTIES = [];
        ExtMaskMetaData.EVENTS = [];
        ExtMaskMetaData.EVENTNAMES = [];
        return ExtMaskMetaData;
    }(Ext_Mask));
    (function () { ExtMaskMetaData.getAll(); })();
    var ExtMaskComponent = /** @class */ (function (_super) {
        __extends(ExtMaskComponent, _super);
        function ExtMaskComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtMaskMetaData.PROPERTIES, ExtMaskMetaData.EVENTS) || this;
            _this.xtype = 'mask';
            return _this;
        }
        ExtMaskComponent_1 = ExtMaskComponent;
        ExtMaskComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtMaskComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtMaskComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtMaskComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtMaskComponent_1;
        ExtMaskComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtMaskComponent = ExtMaskComponent_1 = __decorate([
            core.Component({
                selector: 'ext-mask',
                inputs: ExtMaskMetaData.PROPERTIES,
                outputs: ExtMaskMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtMaskComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtMaskComponent);
        return ExtMaskComponent;
    }(EngBase));

    var ExtMediaMetaData = /** @class */ (function (_super) {
        __extends(ExtMediaMetaData, _super);
        function ExtMediaMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtMediaMetaData.getAll = function () {
            ExtMediaMetaData.PROPERTIES = Ext_Media.getProperties(ExtMediaMetaData.PROPERTIES);
            ExtMediaMetaData.EVENTS = Ext_Media.getEvents(ExtMediaMetaData.EVENTS);
            ExtMediaMetaData.EVENTS.forEach(function (event) {
                ExtMediaMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtMediaMetaData.PROPERTIES = [];
        ExtMediaMetaData.EVENTS = [];
        ExtMediaMetaData.EVENTNAMES = [];
        return ExtMediaMetaData;
    }(Ext_Media));
    (function () { ExtMediaMetaData.getAll(); })();
    var ExtMediaComponent = /** @class */ (function (_super) {
        __extends(ExtMediaComponent, _super);
        function ExtMediaComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtMediaMetaData.PROPERTIES, ExtMediaMetaData.EVENTS) || this;
            _this.xtype = 'media';
            return _this;
        }
        ExtMediaComponent_1 = ExtMediaComponent;
        ExtMediaComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtMediaComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtMediaComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtMediaComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtMediaComponent_1;
        ExtMediaComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtMediaComponent = ExtMediaComponent_1 = __decorate([
            core.Component({
                selector: 'ext-media',
                inputs: ExtMediaMetaData.PROPERTIES,
                outputs: ExtMediaMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtMediaComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtMediaComponent);
        return ExtMediaComponent;
    }(EngBase));

    var ExtMenucheckitemMetaData = /** @class */ (function (_super) {
        __extends(ExtMenucheckitemMetaData, _super);
        function ExtMenucheckitemMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtMenucheckitemMetaData.getAll = function () {
            ExtMenucheckitemMetaData.PROPERTIES = Ext_menu_CheckItem.getProperties(ExtMenucheckitemMetaData.PROPERTIES);
            ExtMenucheckitemMetaData.EVENTS = Ext_menu_CheckItem.getEvents(ExtMenucheckitemMetaData.EVENTS);
            ExtMenucheckitemMetaData.EVENTS.forEach(function (event) {
                ExtMenucheckitemMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtMenucheckitemMetaData.PROPERTIES = [];
        ExtMenucheckitemMetaData.EVENTS = [];
        ExtMenucheckitemMetaData.EVENTNAMES = [];
        return ExtMenucheckitemMetaData;
    }(Ext_menu_CheckItem));
    (function () { ExtMenucheckitemMetaData.getAll(); })();
    var ExtMenucheckitemComponent = /** @class */ (function (_super) {
        __extends(ExtMenucheckitemComponent, _super);
        function ExtMenucheckitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtMenucheckitemMetaData.PROPERTIES, ExtMenucheckitemMetaData.EVENTS) || this;
            _this.xtype = 'menucheckitem';
            return _this;
        }
        ExtMenucheckitemComponent_1 = ExtMenucheckitemComponent;
        ExtMenucheckitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtMenucheckitemComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtMenucheckitemComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtMenucheckitemComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtMenucheckitemComponent_1;
        ExtMenucheckitemComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtMenucheckitemComponent = ExtMenucheckitemComponent_1 = __decorate([
            core.Component({
                selector: 'ext-menucheckitem',
                inputs: ExtMenucheckitemMetaData.PROPERTIES,
                outputs: ExtMenucheckitemMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtMenucheckitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtMenucheckitemComponent);
        return ExtMenucheckitemComponent;
    }(EngBase));

    var Ext_menu_TextItem = /** @class */ (function (_super) {
        __extends(Ext_menu_TextItem, _super);
        function Ext_menu_TextItem() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_menu_TextItem.getProperties = function (properties) {
            properties = properties.concat(Ext_menu_TextItem.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_menu_TextItem.getEvents = function (events) {
            events = events.concat(Ext_menu_TextItem.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_menu_TextItem.PROPERTIES = [
            'clickHideDelay',
            'destroyMenu',
            'handler',
            'hideOnClick',
            'href',
            'icon',
            'iconAlign',
            'iconCls',
            'indented',
            'menu',
            'menuAlign',
            'menuExpandDelay',
            'menuHideDelay',
            'scope',
            'separator',
            'target',
            'text',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_menu_TextItem.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menuitem' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menuitem,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menuitem,event' },
            { name: 'focusenter', parameters: 'menuitem,event' },
            { name: 'focusleave', parameters: 'menuitem,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menuitem' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_menu_TextItem;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_menu_TextItem.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtMenuitemMetaData = /** @class */ (function (_super) {
        __extends(ExtMenuitemMetaData, _super);
        function ExtMenuitemMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtMenuitemMetaData.getAll = function () {
            ExtMenuitemMetaData.PROPERTIES = Ext_menu_TextItem.getProperties(ExtMenuitemMetaData.PROPERTIES);
            ExtMenuitemMetaData.EVENTS = Ext_menu_TextItem.getEvents(ExtMenuitemMetaData.EVENTS);
            ExtMenuitemMetaData.EVENTS.forEach(function (event) {
                ExtMenuitemMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtMenuitemMetaData.PROPERTIES = [];
        ExtMenuitemMetaData.EVENTS = [];
        ExtMenuitemMetaData.EVENTNAMES = [];
        return ExtMenuitemMetaData;
    }(Ext_menu_TextItem));
    (function () { ExtMenuitemMetaData.getAll(); })();
    var ExtMenuitemComponent = /** @class */ (function (_super) {
        __extends(ExtMenuitemComponent, _super);
        function ExtMenuitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtMenuitemMetaData.PROPERTIES, ExtMenuitemMetaData.EVENTS) || this;
            _this.xtype = 'menuitem';
            return _this;
        }
        ExtMenuitemComponent_1 = ExtMenuitemComponent;
        ExtMenuitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtMenuitemComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtMenuitemComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtMenuitemComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtMenuitemComponent_1;
        ExtMenuitemComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtMenuitemComponent = ExtMenuitemComponent_1 = __decorate([
            core.Component({
                selector: 'ext-menuitem',
                inputs: ExtMenuitemMetaData.PROPERTIES,
                outputs: ExtMenuitemMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtMenuitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtMenuitemComponent);
        return ExtMenuitemComponent;
    }(EngBase));

    var Ext_menu_Menu = /** @class */ (function (_super) {
        __extends(Ext_menu_Menu, _super);
        function Ext_menu_Menu() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_menu_Menu.getProperties = function (properties) {
            properties = properties.concat(Ext_menu_Menu.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_menu_Menu.getEvents = function (events) {
            events = events.concat(Ext_menu_Menu.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_menu_Menu.PROPERTIES = [
            'align',
            'allowOtherMenus',
            'autoHide',
            'groups',
            'ignoreParentClicks',
            'indented',
            'mouseLeaveDelay',
            'separator',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_menu_Menu.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,menu,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'menu,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'menu' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'menu' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'menu,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menu' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menu,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'menu' },
            { name: 'deactivate', parameters: 'oldActiveItem,menu,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'menu' },
            { name: 'drawershow', parameters: 'menu' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'menu' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menu,event' },
            { name: 'focusenter', parameters: 'menu,event' },
            { name: 'focusleave', parameters: 'menu,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupchange', parameters: 'menu,groupName,newValue,oldValue' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'menu,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'menu,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'menu,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'menu,context' },
            { name: 'resizedragcancel', parameters: 'menu,context' },
            { name: 'resizedragend', parameters: 'menu,context' },
            { name: 'resizedragstart', parameters: 'menu,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menu' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_menu_Menu;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_menu_Menu.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var ExtMenuMetaData = /** @class */ (function (_super) {
        __extends(ExtMenuMetaData, _super);
        function ExtMenuMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtMenuMetaData.getAll = function () {
            ExtMenuMetaData.PROPERTIES = Ext_menu_Menu.getProperties(ExtMenuMetaData.PROPERTIES);
            ExtMenuMetaData.EVENTS = Ext_menu_Menu.getEvents(ExtMenuMetaData.EVENTS);
            ExtMenuMetaData.EVENTS.forEach(function (event) {
                ExtMenuMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtMenuMetaData.PROPERTIES = [];
        ExtMenuMetaData.EVENTS = [];
        ExtMenuMetaData.EVENTNAMES = [];
        return ExtMenuMetaData;
    }(Ext_menu_Menu));
    (function () { ExtMenuMetaData.getAll(); })();
    var ExtMenuComponent = /** @class */ (function (_super) {
        __extends(ExtMenuComponent, _super);
        function ExtMenuComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtMenuMetaData.PROPERTIES, ExtMenuMetaData.EVENTS) || this;
            _this.xtype = 'menu';
            return _this;
        }
        ExtMenuComponent_1 = ExtMenuComponent;
        ExtMenuComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtMenuComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtMenuComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtMenuComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtMenuComponent_1;
        ExtMenuComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtMenuComponent = ExtMenuComponent_1 = __decorate([
            core.Component({
                selector: 'ext-menu',
                inputs: ExtMenuMetaData.PROPERTIES,
                outputs: ExtMenuMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtMenuComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtMenuComponent);
        return ExtMenuComponent;
    }(EngBase));

    var ExtMenuradioitemMetaData = /** @class */ (function (_super) {
        __extends(ExtMenuradioitemMetaData, _super);
        function ExtMenuradioitemMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtMenuradioitemMetaData.getAll = function () {
            ExtMenuradioitemMetaData.PROPERTIES = Ext_menu_RadioItem.getProperties(ExtMenuradioitemMetaData.PROPERTIES);
            ExtMenuradioitemMetaData.EVENTS = Ext_menu_RadioItem.getEvents(ExtMenuradioitemMetaData.EVENTS);
            ExtMenuradioitemMetaData.EVENTS.forEach(function (event) {
                ExtMenuradioitemMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtMenuradioitemMetaData.PROPERTIES = [];
        ExtMenuradioitemMetaData.EVENTS = [];
        ExtMenuradioitemMetaData.EVENTNAMES = [];
        return ExtMenuradioitemMetaData;
    }(Ext_menu_RadioItem));
    (function () { ExtMenuradioitemMetaData.getAll(); })();
    var ExtMenuradioitemComponent = /** @class */ (function (_super) {
        __extends(ExtMenuradioitemComponent, _super);
        function ExtMenuradioitemComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtMenuradioitemMetaData.PROPERTIES, ExtMenuradioitemMetaData.EVENTS) || this;
            _this.xtype = 'menuradioitem';
            return _this;
        }
        ExtMenuradioitemComponent_1 = ExtMenuradioitemComponent;
        ExtMenuradioitemComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtMenuradioitemComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtMenuradioitemComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtMenuradioitemComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtMenuradioitemComponent_1;
        ExtMenuradioitemComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtMenuradioitemComponent = ExtMenuradioitemComponent_1 = __decorate([
            core.Component({
                selector: 'ext-menuradioitem',
                inputs: ExtMenuradioitemMetaData.PROPERTIES,
                outputs: ExtMenuradioitemMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtMenuradioitemComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtMenuradioitemComponent);
        return ExtMenuradioitemComponent;
    }(EngBase));

    var Ext_menu_Separator = /** @class */ (function (_super) {
        __extends(Ext_menu_Separator, _super);
        function Ext_menu_Separator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_menu_Separator.getProperties = function (properties) {
            properties = properties.concat(Ext_menu_Separator.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_menu_Separator.getEvents = function (events) {
            events = events.concat(Ext_menu_Separator.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_menu_Separator.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_menu_Separator.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'menuseparator' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'menuseparator,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'menuseparator,event' },
            { name: 'focusenter', parameters: 'menuseparator,event' },
            { name: 'focusleave', parameters: 'menuseparator,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'menuseparator' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_menu_Separator;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_menu_Separator.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtMenuseparatorMetaData = /** @class */ (function (_super) {
        __extends(ExtMenuseparatorMetaData, _super);
        function ExtMenuseparatorMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtMenuseparatorMetaData.getAll = function () {
            ExtMenuseparatorMetaData.PROPERTIES = Ext_menu_Separator.getProperties(ExtMenuseparatorMetaData.PROPERTIES);
            ExtMenuseparatorMetaData.EVENTS = Ext_menu_Separator.getEvents(ExtMenuseparatorMetaData.EVENTS);
            ExtMenuseparatorMetaData.EVENTS.forEach(function (event) {
                ExtMenuseparatorMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtMenuseparatorMetaData.PROPERTIES = [];
        ExtMenuseparatorMetaData.EVENTS = [];
        ExtMenuseparatorMetaData.EVENTNAMES = [];
        return ExtMenuseparatorMetaData;
    }(Ext_menu_Separator));
    (function () { ExtMenuseparatorMetaData.getAll(); })();
    var ExtMenuseparatorComponent = /** @class */ (function (_super) {
        __extends(ExtMenuseparatorComponent, _super);
        function ExtMenuseparatorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtMenuseparatorMetaData.PROPERTIES, ExtMenuseparatorMetaData.EVENTS) || this;
            _this.xtype = 'menuseparator';
            return _this;
        }
        ExtMenuseparatorComponent_1 = ExtMenuseparatorComponent;
        ExtMenuseparatorComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtMenuseparatorComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtMenuseparatorComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtMenuseparatorComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtMenuseparatorComponent_1;
        ExtMenuseparatorComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtMenuseparatorComponent = ExtMenuseparatorComponent_1 = __decorate([
            core.Component({
                selector: 'ext-menuseparator',
                inputs: ExtMenuseparatorMetaData.PROPERTIES,
                outputs: ExtMenuseparatorMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtMenuseparatorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtMenuseparatorComponent);
        return ExtMenuseparatorComponent;
    }(EngBase));

    var Ext_Dialog = /** @class */ (function (_super) {
        __extends(Ext_Dialog, _super);
        function Ext_Dialog() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Dialog.getProperties = function (properties) {
            properties = properties.concat(Ext_Dialog.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_Dialog.getEvents = function (events) {
            events = events.concat(Ext_Dialog.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_Dialog.PROPERTIES = [
            'bodyBorder',
            'border',
            'centered',
            'constrainDrag',
            'dismissAction',
            'dismissHandler',
            'draggable',
            'floated',
            'hideAnimation',
            'hideMode',
            'keyMap',
            'maskTapHandler',
            'maximizable',
            'maximizeAnimation',
            'maximized',
            'maximizeProxy',
            'maximizeTool',
            'modal',
            'restorable',
            'restoreAnimation',
            'restoreTool',
            'shadow',
            'showAnimation',
            'tabIndex',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Dialog.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,dialog,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'dialog,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'dialog' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'dialog' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaximize', parameters: 'dialog' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'dialog,context' },
            { name: 'beforerestore', parameters: 'dialog' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'dialog' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'dialog,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'dialog' },
            { name: 'deactivate', parameters: 'oldActiveItem,dialog,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'dialog' },
            { name: 'drawershow', parameters: 'dialog' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'dialog' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'dialog,event' },
            { name: 'focusenter', parameters: 'dialog,event' },
            { name: 'focusleave', parameters: 'dialog,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maximize', parameters: 'dialog' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'dialog,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'dialog,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'dialog,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'dialog,context' },
            { name: 'resizedragcancel', parameters: 'dialog,context' },
            { name: 'resizedragend', parameters: 'dialog,context' },
            { name: 'resizedragstart', parameters: 'dialog,context' },
            { name: 'restore', parameters: 'dialog' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'dialog' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Dialog;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Dialog.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var Ext_MessageBox = /** @class */ (function (_super) {
        __extends(Ext_MessageBox, _super);
        function Ext_MessageBox() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_MessageBox.getProperties = function (properties) {
            properties = properties.concat(Ext_MessageBox.PROPERTIES);
            return Ext_Dialog.getProperties(properties);
        };
        Ext_MessageBox.getEvents = function (events) {
            events = events.concat(Ext_MessageBox.EVENTS);
            return Ext_Dialog.getEvents(events);
        };
        Ext_MessageBox.PROPERTIES = [
            'buttons',
            'closeAction',
            'defaultTextHeight',
            'iconCls',
            'layout',
            'message',
            'msg',
            'prompt',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_MessageBox.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,messagebox,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'messagebox,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'messagebox' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'messagebox' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaximize', parameters: 'dialog' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'messagebox,context' },
            { name: 'beforerestore', parameters: 'dialog' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'messagebox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'messagebox,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'messagebox' },
            { name: 'deactivate', parameters: 'oldActiveItem,messagebox,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'messagebox' },
            { name: 'drawershow', parameters: 'messagebox' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'messagebox' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'messagebox,event' },
            { name: 'focusenter', parameters: 'messagebox,event' },
            { name: 'focusleave', parameters: 'messagebox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maximize', parameters: 'dialog' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'messagebox,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'messagebox,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'messagebox,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'messagebox,context' },
            { name: 'resizedragcancel', parameters: 'messagebox,context' },
            { name: 'resizedragend', parameters: 'messagebox,context' },
            { name: 'resizedragstart', parameters: 'messagebox,context' },
            { name: 'restore', parameters: 'dialog' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'messagebox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_MessageBox;
    }(Ext_Dialog));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_MessageBox.EVENTNAMES);
    //    return Ext_Dialog.getEventNames(eventnames);
    //}

    var ExtMessageboxMetaData = /** @class */ (function (_super) {
        __extends(ExtMessageboxMetaData, _super);
        function ExtMessageboxMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtMessageboxMetaData.getAll = function () {
            ExtMessageboxMetaData.PROPERTIES = Ext_MessageBox.getProperties(ExtMessageboxMetaData.PROPERTIES);
            ExtMessageboxMetaData.EVENTS = Ext_MessageBox.getEvents(ExtMessageboxMetaData.EVENTS);
            ExtMessageboxMetaData.EVENTS.forEach(function (event) {
                ExtMessageboxMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtMessageboxMetaData.PROPERTIES = [];
        ExtMessageboxMetaData.EVENTS = [];
        ExtMessageboxMetaData.EVENTNAMES = [];
        return ExtMessageboxMetaData;
    }(Ext_MessageBox));
    (function () { ExtMessageboxMetaData.getAll(); })();
    var ExtMessageboxComponent = /** @class */ (function (_super) {
        __extends(ExtMessageboxComponent, _super);
        function ExtMessageboxComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtMessageboxMetaData.PROPERTIES, ExtMessageboxMetaData.EVENTS) || this;
            _this.xtype = 'messagebox';
            return _this;
        }
        ExtMessageboxComponent_1 = ExtMessageboxComponent;
        ExtMessageboxComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtMessageboxComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtMessageboxComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtMessageboxComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtMessageboxComponent_1;
        ExtMessageboxComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtMessageboxComponent = ExtMessageboxComponent_1 = __decorate([
            core.Component({
                selector: 'ext-messagebox',
                inputs: ExtMessageboxMetaData.PROPERTIES,
                outputs: ExtMessageboxMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtMessageboxComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtMessageboxComponent);
        return ExtMessageboxComponent;
    }(EngBase));

    var Ext_NavigationView = /** @class */ (function (_super) {
        __extends(Ext_NavigationView, _super);
        function Ext_NavigationView() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_NavigationView.getProperties = function (properties) {
            properties = properties.concat(Ext_NavigationView.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_NavigationView.getEvents = function (events) {
            events = events.concat(Ext_NavigationView.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_NavigationView.PROPERTIES = [
            'defaultBackButtonText',
            'items',
            'layout',
            'navigationBar',
            'useTitleForBackButtonText',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_NavigationView.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,navigationview,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'navigationview,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'back', parameters: 'navigationview' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'navigationview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'navigationview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,navigationview,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'navigationview,event' },
            { name: 'focusenter', parameters: 'navigationview,event' },
            { name: 'focusleave', parameters: 'navigationview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'navigationview,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pop', parameters: 'navigationview,view' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'push', parameters: 'navigationview,view' },
            { name: 'remove', parameters: 'navigationview,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'navigationview,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'navigationview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_NavigationView;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_NavigationView.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var ExtNavigationviewMetaData = /** @class */ (function (_super) {
        __extends(ExtNavigationviewMetaData, _super);
        function ExtNavigationviewMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtNavigationviewMetaData.getAll = function () {
            ExtNavigationviewMetaData.PROPERTIES = Ext_NavigationView.getProperties(ExtNavigationviewMetaData.PROPERTIES);
            ExtNavigationviewMetaData.EVENTS = Ext_NavigationView.getEvents(ExtNavigationviewMetaData.EVENTS);
            ExtNavigationviewMetaData.EVENTS.forEach(function (event) {
                ExtNavigationviewMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtNavigationviewMetaData.PROPERTIES = [];
        ExtNavigationviewMetaData.EVENTS = [];
        ExtNavigationviewMetaData.EVENTNAMES = [];
        return ExtNavigationviewMetaData;
    }(Ext_NavigationView));
    (function () { ExtNavigationviewMetaData.getAll(); })();
    var ExtNavigationviewComponent = /** @class */ (function (_super) {
        __extends(ExtNavigationviewComponent, _super);
        function ExtNavigationviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtNavigationviewMetaData.PROPERTIES, ExtNavigationviewMetaData.EVENTS) || this;
            _this.xtype = 'navigationview';
            return _this;
        }
        ExtNavigationviewComponent_1 = ExtNavigationviewComponent;
        ExtNavigationviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtNavigationviewComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtNavigationviewComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtNavigationviewComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtNavigationviewComponent_1;
        ExtNavigationviewComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtNavigationviewComponent = ExtNavigationviewComponent_1 = __decorate([
            core.Component({
                selector: 'ext-navigationview',
                inputs: ExtNavigationviewMetaData.PROPERTIES,
                outputs: ExtNavigationviewMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtNavigationviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtNavigationviewComponent);
        return ExtNavigationviewComponent;
    }(EngBase));

    var Ext_panel_Panel = /** @class */ (function (_super) {
        __extends(Ext_panel_Panel, _super);
        function Ext_panel_Panel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_panel_Panel.getProperties = function (properties) {
            properties = properties.concat(Ext_panel_Panel.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_panel_Panel.getEvents = function (events) {
            events = events.concat(Ext_panel_Panel.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_panel_Panel.PROPERTIES = [
            'anchor',
            'anchorPosition',
            'bbar',
            'bodyBorder',
            'bodyPadding',
            'bodyStyle',
            'border',
            'buttons',
            'buttonToolbar',
            'closable',
            'closeAction',
            'closeToolText',
            'collapsed',
            'collapsible',
            'header',
            'headerPosition',
            'icon',
            'iconAlign',
            'iconCls',
            'lbar',
            'manageBorders',
            'rbar',
            'resizable',
            'tbar',
            'title',
            'titleAlign',
            'titleCollapse',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_panel_Panel.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,panel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'panel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'panel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'panel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'panel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'panel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'panel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'panel' },
            { name: 'deactivate', parameters: 'oldActiveItem,panel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'panel' },
            { name: 'drawershow', parameters: 'panel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'panel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'panel,event' },
            { name: 'focusenter', parameters: 'panel,event' },
            { name: 'focusleave', parameters: 'panel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'panel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'panel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'panel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'panel,context' },
            { name: 'resizedragcancel', parameters: 'panel,context' },
            { name: 'resizedragend', parameters: 'panel,context' },
            { name: 'resizedragstart', parameters: 'panel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'panel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_panel_Panel;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_panel_Panel.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var ExtPanelMetaData = /** @class */ (function (_super) {
        __extends(ExtPanelMetaData, _super);
        function ExtPanelMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPanelMetaData.getAll = function () {
            ExtPanelMetaData.PROPERTIES = Ext_panel_Panel.getProperties(ExtPanelMetaData.PROPERTIES);
            ExtPanelMetaData.EVENTS = Ext_panel_Panel.getEvents(ExtPanelMetaData.EVENTS);
            ExtPanelMetaData.EVENTS.forEach(function (event) {
                ExtPanelMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPanelMetaData.PROPERTIES = [];
        ExtPanelMetaData.EVENTS = [];
        ExtPanelMetaData.EVENTNAMES = [];
        return ExtPanelMetaData;
    }(Ext_panel_Panel));
    (function () { ExtPanelMetaData.getAll(); })();
    var ExtPanelComponent = /** @class */ (function (_super) {
        __extends(ExtPanelComponent, _super);
        function ExtPanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPanelMetaData.PROPERTIES, ExtPanelMetaData.EVENTS) || this;
            _this.xtype = 'panel';
            return _this;
        }
        ExtPanelComponent_1 = ExtPanelComponent;
        ExtPanelComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPanelComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPanelComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPanelComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPanelComponent_1;
        ExtPanelComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPanelComponent = ExtPanelComponent_1 = __decorate([
            core.Component({
                selector: 'ext-panel',
                inputs: ExtPanelMetaData.PROPERTIES,
                outputs: ExtPanelMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPanelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPanelComponent);
        return ExtPanelComponent;
    }(EngBase));

    var Ext_panel_Accordion = /** @class */ (function (_super) {
        __extends(Ext_panel_Accordion, _super);
        function Ext_panel_Accordion() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_panel_Accordion.getProperties = function (properties) {
            properties = properties.concat(Ext_panel_Accordion.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_panel_Accordion.getEvents = function (events) {
            events = events.concat(Ext_panel_Accordion.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_panel_Accordion.PROPERTIES = [
            'defaultPanelUI',
            'expandedFirst',
            'openable',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_panel_Accordion.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,accordion,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'accordion,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'accordion' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'accordion' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'accordion,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'accordion' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'accordion,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'accordion' },
            { name: 'deactivate', parameters: 'oldActiveItem,accordion,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'accordion' },
            { name: 'drawershow', parameters: 'accordion' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'accordion' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'accordion,event' },
            { name: 'focusenter', parameters: 'accordion,event' },
            { name: 'focusleave', parameters: 'accordion,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'accordion,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'accordion,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'accordion,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'accordion,context' },
            { name: 'resizedragcancel', parameters: 'accordion,context' },
            { name: 'resizedragend', parameters: 'accordion,context' },
            { name: 'resizedragstart', parameters: 'accordion,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'accordion' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_panel_Accordion;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_panel_Accordion.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var ExtAccordionMetaData = /** @class */ (function (_super) {
        __extends(ExtAccordionMetaData, _super);
        function ExtAccordionMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtAccordionMetaData.getAll = function () {
            ExtAccordionMetaData.PROPERTIES = Ext_panel_Accordion.getProperties(ExtAccordionMetaData.PROPERTIES);
            ExtAccordionMetaData.EVENTS = Ext_panel_Accordion.getEvents(ExtAccordionMetaData.EVENTS);
            ExtAccordionMetaData.EVENTS.forEach(function (event) {
                ExtAccordionMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtAccordionMetaData.PROPERTIES = [];
        ExtAccordionMetaData.EVENTS = [];
        ExtAccordionMetaData.EVENTNAMES = [];
        return ExtAccordionMetaData;
    }(Ext_panel_Accordion));
    (function () { ExtAccordionMetaData.getAll(); })();
    var ExtAccordionComponent = /** @class */ (function (_super) {
        __extends(ExtAccordionComponent, _super);
        function ExtAccordionComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtAccordionMetaData.PROPERTIES, ExtAccordionMetaData.EVENTS) || this;
            _this.xtype = 'accordion';
            return _this;
        }
        ExtAccordionComponent_1 = ExtAccordionComponent;
        ExtAccordionComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtAccordionComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtAccordionComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtAccordionComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtAccordionComponent_1;
        ExtAccordionComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtAccordionComponent = ExtAccordionComponent_1 = __decorate([
            core.Component({
                selector: 'ext-accordion',
                inputs: ExtAccordionMetaData.PROPERTIES,
                outputs: ExtAccordionMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtAccordionComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtAccordionComponent);
        return ExtAccordionComponent;
    }(EngBase));

    var Ext_panel_Date = /** @class */ (function (_super) {
        __extends(Ext_panel_Date, _super);
        function Ext_panel_Date() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_panel_Date.getProperties = function (properties) {
            properties = properties.concat(Ext_panel_Date.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_panel_Date.getEvents = function (events) {
            events = events.concat(Ext_panel_Date.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_panel_Date.PROPERTIES = [
            'animation',
            'autoConfirm',
            'captionFormat',
            'dateCellFormat',
            'disabledDates',
            'disabledDays',
            'focusableDate',
            'format',
            'handler',
            'headerFormat',
            'headerLength',
            'hideCaptions',
            'hideOutside',
            'maxDate',
            'minDate',
            'navigationPosition',
            'nextText',
            'panes',
            'prevText',
            'scope',
            'selectOnNavigate',
            'showAfterMaxDate',
            'showBeforeMinDate',
            'showFooter',
            'showTodayButton',
            'specialDates',
            'specialDays',
            'splitTitle',
            'startDay',
            'titleAnimation',
            'transformCellCls',
            'value',
            'weekendDays',
            'yearPicker',
            'yearPickerDefaults',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_panel_Date.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,datepanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'datepanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'datepanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'datepanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'datepanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datepanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datepanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'datepanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,datepanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'datepanel' },
            { name: 'drawershow', parameters: 'datepanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'datepanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datepanel,event' },
            { name: 'focusenter', parameters: 'datepanel,event' },
            { name: 'focusleave', parameters: 'datepanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'datepanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'datepanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'datepanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'datepanel,context' },
            { name: 'resizedragcancel', parameters: 'datepanel,context' },
            { name: 'resizedragend', parameters: 'datepanel,context' },
            { name: 'resizedragstart', parameters: 'datepanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datepanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_panel_Date;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_panel_Date.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var ExtDatepanelMetaData = /** @class */ (function (_super) {
        __extends(ExtDatepanelMetaData, _super);
        function ExtDatepanelMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtDatepanelMetaData.getAll = function () {
            ExtDatepanelMetaData.PROPERTIES = Ext_panel_Date.getProperties(ExtDatepanelMetaData.PROPERTIES);
            ExtDatepanelMetaData.EVENTS = Ext_panel_Date.getEvents(ExtDatepanelMetaData.EVENTS);
            ExtDatepanelMetaData.EVENTS.forEach(function (event) {
                ExtDatepanelMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtDatepanelMetaData.PROPERTIES = [];
        ExtDatepanelMetaData.EVENTS = [];
        ExtDatepanelMetaData.EVENTNAMES = [];
        return ExtDatepanelMetaData;
    }(Ext_panel_Date));
    (function () { ExtDatepanelMetaData.getAll(); })();
    var ExtDatepanelComponent = /** @class */ (function (_super) {
        __extends(ExtDatepanelComponent, _super);
        function ExtDatepanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtDatepanelMetaData.PROPERTIES, ExtDatepanelMetaData.EVENTS) || this;
            _this.xtype = 'datepanel';
            return _this;
        }
        ExtDatepanelComponent_1 = ExtDatepanelComponent;
        ExtDatepanelComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtDatepanelComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtDatepanelComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtDatepanelComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtDatepanelComponent_1;
        ExtDatepanelComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtDatepanelComponent = ExtDatepanelComponent_1 = __decorate([
            core.Component({
                selector: 'ext-datepanel',
                inputs: ExtDatepanelMetaData.PROPERTIES,
                outputs: ExtDatepanelMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtDatepanelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtDatepanelComponent);
        return ExtDatepanelComponent;
    }(EngBase));

    var Ext_panel_Title = /** @class */ (function (_super) {
        __extends(Ext_panel_Title, _super);
        function Ext_panel_Title() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_panel_Title.getProperties = function (properties) {
            properties = properties.concat(Ext_panel_Title.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_panel_Title.getEvents = function (events) {
            events = events.concat(Ext_panel_Title.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_panel_Title.PROPERTIES = [
            'glyph',
            'icon',
            'iconAlign',
            'iconCls',
            'rotateIcon',
            'rotation',
            'text',
            'textAlign',
            'weight',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_panel_Title.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'paneltitle' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'paneltitle,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'paneltitle,event' },
            { name: 'focusenter', parameters: 'paneltitle,event' },
            { name: 'focusleave', parameters: 'paneltitle,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'paneltitle' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_panel_Title;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_panel_Title.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var Ext_panel_DateTitle = /** @class */ (function (_super) {
        __extends(Ext_panel_DateTitle, _super);
        function Ext_panel_DateTitle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_panel_DateTitle.getProperties = function (properties) {
            properties = properties.concat(Ext_panel_DateTitle.PROPERTIES);
            return Ext_panel_Title.getProperties(properties);
        };
        Ext_panel_DateTitle.getEvents = function (events) {
            events = events.concat(Ext_panel_DateTitle.EVENTS);
            return Ext_panel_Title.getEvents(events);
        };
        Ext_panel_DateTitle.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_panel_DateTitle.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datetitle' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datetitle,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datetitle,event' },
            { name: 'focusenter', parameters: 'datetitle,event' },
            { name: 'focusleave', parameters: 'datetitle,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datetitle' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_panel_DateTitle;
    }(Ext_panel_Title));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_panel_DateTitle.EVENTNAMES);
    //    return Ext_panel_Title.getEventNames(eventnames);
    //}

    var ExtDatetitleMetaData = /** @class */ (function (_super) {
        __extends(ExtDatetitleMetaData, _super);
        function ExtDatetitleMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtDatetitleMetaData.getAll = function () {
            ExtDatetitleMetaData.PROPERTIES = Ext_panel_DateTitle.getProperties(ExtDatetitleMetaData.PROPERTIES);
            ExtDatetitleMetaData.EVENTS = Ext_panel_DateTitle.getEvents(ExtDatetitleMetaData.EVENTS);
            ExtDatetitleMetaData.EVENTS.forEach(function (event) {
                ExtDatetitleMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtDatetitleMetaData.PROPERTIES = [];
        ExtDatetitleMetaData.EVENTS = [];
        ExtDatetitleMetaData.EVENTNAMES = [];
        return ExtDatetitleMetaData;
    }(Ext_panel_DateTitle));
    (function () { ExtDatetitleMetaData.getAll(); })();
    var ExtDatetitleComponent = /** @class */ (function (_super) {
        __extends(ExtDatetitleComponent, _super);
        function ExtDatetitleComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtDatetitleMetaData.PROPERTIES, ExtDatetitleMetaData.EVENTS) || this;
            _this.xtype = 'datetitle';
            return _this;
        }
        ExtDatetitleComponent_1 = ExtDatetitleComponent;
        ExtDatetitleComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtDatetitleComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtDatetitleComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtDatetitleComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtDatetitleComponent_1;
        ExtDatetitleComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtDatetitleComponent = ExtDatetitleComponent_1 = __decorate([
            core.Component({
                selector: 'ext-datetitle',
                inputs: ExtDatetitleMetaData.PROPERTIES,
                outputs: ExtDatetitleMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtDatetitleComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtDatetitleComponent);
        return ExtDatetitleComponent;
    }(EngBase));

    var Ext_panel_Header = /** @class */ (function (_super) {
        __extends(Ext_panel_Header, _super);
        function Ext_panel_Header() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_panel_Header.getProperties = function (properties) {
            properties = properties.concat(Ext_panel_Header.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_panel_Header.getEvents = function (events) {
            events = events.concat(Ext_panel_Header.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_panel_Header.PROPERTIES = [
            'glyph',
            'icon',
            'iconAlign',
            'iconCls',
            'position',
            'title',
            'titleAlign',
            'titleRotation',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_panel_Header.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,panelheader,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'panelheader,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'panelheader' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'panelheader,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,panelheader,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'panelheader,event' },
            { name: 'focusenter', parameters: 'panelheader,event' },
            { name: 'focusleave', parameters: 'panelheader,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'panelheader,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'panelheader,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'panelheader,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'panelheader' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_panel_Header;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_panel_Header.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var ExtPanelheaderMetaData = /** @class */ (function (_super) {
        __extends(ExtPanelheaderMetaData, _super);
        function ExtPanelheaderMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPanelheaderMetaData.getAll = function () {
            ExtPanelheaderMetaData.PROPERTIES = Ext_panel_Header.getProperties(ExtPanelheaderMetaData.PROPERTIES);
            ExtPanelheaderMetaData.EVENTS = Ext_panel_Header.getEvents(ExtPanelheaderMetaData.EVENTS);
            ExtPanelheaderMetaData.EVENTS.forEach(function (event) {
                ExtPanelheaderMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPanelheaderMetaData.PROPERTIES = [];
        ExtPanelheaderMetaData.EVENTS = [];
        ExtPanelheaderMetaData.EVENTNAMES = [];
        return ExtPanelheaderMetaData;
    }(Ext_panel_Header));
    (function () { ExtPanelheaderMetaData.getAll(); })();
    var ExtPanelheaderComponent = /** @class */ (function (_super) {
        __extends(ExtPanelheaderComponent, _super);
        function ExtPanelheaderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPanelheaderMetaData.PROPERTIES, ExtPanelheaderMetaData.EVENTS) || this;
            _this.xtype = 'panelheader';
            return _this;
        }
        ExtPanelheaderComponent_1 = ExtPanelheaderComponent;
        ExtPanelheaderComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPanelheaderComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPanelheaderComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPanelheaderComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPanelheaderComponent_1;
        ExtPanelheaderComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPanelheaderComponent = ExtPanelheaderComponent_1 = __decorate([
            core.Component({
                selector: 'ext-panelheader',
                inputs: ExtPanelheaderMetaData.PROPERTIES,
                outputs: ExtPanelheaderMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPanelheaderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPanelheaderComponent);
        return ExtPanelheaderComponent;
    }(EngBase));

    var Ext_panel_Time = /** @class */ (function (_super) {
        __extends(Ext_panel_Time, _super);
        function Ext_panel_Time() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_panel_Time.getProperties = function (properties) {
            properties = properties.concat(Ext_panel_Time.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_panel_Time.getEvents = function (events) {
            events = events.concat(Ext_panel_Time.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_panel_Time.PROPERTIES = [
            'alignPMInside',
            'autoAdvance',
            'buttonAlign',
            'confirmable',
            'declineHandler',
            'defaultButtons',
            'handler',
            'hourDisplayFormat',
            'meridiem',
            'mode',
            'scope',
            'value',
            'vertical',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_panel_Time.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,timepanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'timepanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'timepanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'timepanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'timepanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'timepanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'timepanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'timepanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,timepanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'timepanel' },
            { name: 'drawershow', parameters: 'timepanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'timepanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'timepanel,event' },
            { name: 'focusenter', parameters: 'timepanel,event' },
            { name: 'focusleave', parameters: 'timepanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'timepanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'timepanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'timepanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'timepanel,context' },
            { name: 'resizedragcancel', parameters: 'timepanel,context' },
            { name: 'resizedragend', parameters: 'timepanel,context' },
            { name: 'resizedragstart', parameters: 'timepanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'timepanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_panel_Time;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_panel_Time.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var ExtTimepanelMetaData = /** @class */ (function (_super) {
        __extends(ExtTimepanelMetaData, _super);
        function ExtTimepanelMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTimepanelMetaData.getAll = function () {
            ExtTimepanelMetaData.PROPERTIES = Ext_panel_Time.getProperties(ExtTimepanelMetaData.PROPERTIES);
            ExtTimepanelMetaData.EVENTS = Ext_panel_Time.getEvents(ExtTimepanelMetaData.EVENTS);
            ExtTimepanelMetaData.EVENTS.forEach(function (event) {
                ExtTimepanelMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTimepanelMetaData.PROPERTIES = [];
        ExtTimepanelMetaData.EVENTS = [];
        ExtTimepanelMetaData.EVENTNAMES = [];
        return ExtTimepanelMetaData;
    }(Ext_panel_Time));
    (function () { ExtTimepanelMetaData.getAll(); })();
    var ExtTimepanelComponent = /** @class */ (function (_super) {
        __extends(ExtTimepanelComponent, _super);
        function ExtTimepanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTimepanelMetaData.PROPERTIES, ExtTimepanelMetaData.EVENTS) || this;
            _this.xtype = 'timepanel';
            return _this;
        }
        ExtTimepanelComponent_1 = ExtTimepanelComponent;
        ExtTimepanelComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTimepanelComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTimepanelComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTimepanelComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTimepanelComponent_1;
        ExtTimepanelComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTimepanelComponent = ExtTimepanelComponent_1 = __decorate([
            core.Component({
                selector: 'ext-timepanel',
                inputs: ExtTimepanelMetaData.PROPERTIES,
                outputs: ExtTimepanelMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTimepanelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTimepanelComponent);
        return ExtTimepanelComponent;
    }(EngBase));

    var ExtPaneltitleMetaData = /** @class */ (function (_super) {
        __extends(ExtPaneltitleMetaData, _super);
        function ExtPaneltitleMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPaneltitleMetaData.getAll = function () {
            ExtPaneltitleMetaData.PROPERTIES = Ext_panel_Title.getProperties(ExtPaneltitleMetaData.PROPERTIES);
            ExtPaneltitleMetaData.EVENTS = Ext_panel_Title.getEvents(ExtPaneltitleMetaData.EVENTS);
            ExtPaneltitleMetaData.EVENTS.forEach(function (event) {
                ExtPaneltitleMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPaneltitleMetaData.PROPERTIES = [];
        ExtPaneltitleMetaData.EVENTS = [];
        ExtPaneltitleMetaData.EVENTNAMES = [];
        return ExtPaneltitleMetaData;
    }(Ext_panel_Title));
    (function () { ExtPaneltitleMetaData.getAll(); })();
    var ExtPaneltitleComponent = /** @class */ (function (_super) {
        __extends(ExtPaneltitleComponent, _super);
        function ExtPaneltitleComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPaneltitleMetaData.PROPERTIES, ExtPaneltitleMetaData.EVENTS) || this;
            _this.xtype = 'paneltitle';
            return _this;
        }
        ExtPaneltitleComponent_1 = ExtPaneltitleComponent;
        ExtPaneltitleComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPaneltitleComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPaneltitleComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPaneltitleComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPaneltitleComponent_1;
        ExtPaneltitleComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPaneltitleComponent = ExtPaneltitleComponent_1 = __decorate([
            core.Component({
                selector: 'ext-paneltitle',
                inputs: ExtPaneltitleMetaData.PROPERTIES,
                outputs: ExtPaneltitleMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPaneltitleComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPaneltitleComponent);
        return ExtPaneltitleComponent;
    }(EngBase));

    var Ext_panel_YearPicker = /** @class */ (function (_super) {
        __extends(Ext_panel_YearPicker, _super);
        function Ext_panel_YearPicker() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_panel_YearPicker.getProperties = function (properties) {
            properties = properties.concat(Ext_panel_YearPicker.PROPERTIES);
            return Ext_dataview_BoundList.getProperties(properties);
        };
        Ext_panel_YearPicker.getEvents = function (events) {
            events = events.concat(Ext_panel_YearPicker.EVENTS);
            return Ext_dataview_BoundList.getEvents(events);
        };
        Ext_panel_YearPicker.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_panel_YearPicker.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,yearpicker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforegroupcollapse', parameters: 'yearpicker,group' },
            { name: 'beforegroupexpand', parameters: 'yearpicker,group' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'yearpicker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'yearpicker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'yearpicker,location' },
            { name: 'childlongpress', parameters: 'yearpicker,location' },
            { name: 'childmouseenter', parameters: 'yearpicker,location' },
            { name: 'childmouseleave', parameters: 'yearpicker,location' },
            { name: 'childsingletap', parameters: 'yearpicker,location' },
            { name: 'childtap', parameters: 'yearpicker,location' },
            { name: 'childtaphold', parameters: 'yearpicker,location' },
            { name: 'childtouchcancel', parameters: 'yearpicker,location' },
            { name: 'childtouchend', parameters: 'yearpicker,location' },
            { name: 'childtouchmove', parameters: 'yearpicker,location' },
            { name: 'childtouchstart', parameters: 'yearpicker,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,yearpicker,newActiveItem' },
            { name: 'deselect', parameters: 'yearpicker,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'yearpicker,event' },
            { name: 'focusenter', parameters: 'yearpicker,event' },
            { name: 'focusleave', parameters: 'yearpicker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupcollapse', parameters: 'yearpicker,group' },
            { name: 'groupexpand', parameters: 'yearpicker,group' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'yearpicker,index,record,action' },
            { name: 'itemdoubletap', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemswipe', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtap', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'yearpicker,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'yearpicker,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'yearpicker,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'yearpicker' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'yearpicker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'yearpicker,selected' },
            { name: 'show', parameters: 'sender' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'yearpicker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_panel_YearPicker;
    }(Ext_dataview_BoundList));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_panel_YearPicker.EVENTNAMES);
    //    return Ext_dataview_BoundList.getEventNames(eventnames);
    //}

    var ExtYearpickerMetaData = /** @class */ (function (_super) {
        __extends(ExtYearpickerMetaData, _super);
        function ExtYearpickerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtYearpickerMetaData.getAll = function () {
            ExtYearpickerMetaData.PROPERTIES = Ext_panel_YearPicker.getProperties(ExtYearpickerMetaData.PROPERTIES);
            ExtYearpickerMetaData.EVENTS = Ext_panel_YearPicker.getEvents(ExtYearpickerMetaData.EVENTS);
            ExtYearpickerMetaData.EVENTS.forEach(function (event) {
                ExtYearpickerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtYearpickerMetaData.PROPERTIES = [];
        ExtYearpickerMetaData.EVENTS = [];
        ExtYearpickerMetaData.EVENTNAMES = [];
        return ExtYearpickerMetaData;
    }(Ext_panel_YearPicker));
    (function () { ExtYearpickerMetaData.getAll(); })();
    var ExtYearpickerComponent = /** @class */ (function (_super) {
        __extends(ExtYearpickerComponent, _super);
        function ExtYearpickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtYearpickerMetaData.PROPERTIES, ExtYearpickerMetaData.EVENTS) || this;
            _this.xtype = 'yearpicker';
            return _this;
        }
        ExtYearpickerComponent_1 = ExtYearpickerComponent;
        ExtYearpickerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtYearpickerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtYearpickerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtYearpickerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtYearpickerComponent_1;
        ExtYearpickerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtYearpickerComponent = ExtYearpickerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-yearpicker',
                inputs: ExtYearpickerMetaData.PROPERTIES,
                outputs: ExtYearpickerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtYearpickerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtYearpickerComponent);
        return ExtYearpickerComponent;
    }(EngBase));

    var Ext_picker_Picker = /** @class */ (function (_super) {
        __extends(Ext_picker_Picker, _super);
        function Ext_picker_Picker() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_picker_Picker.getProperties = function (properties) {
            properties = properties.concat(Ext_picker_Picker.PROPERTIES);
            return Ext_Sheet.getProperties(properties);
        };
        Ext_picker_Picker.getEvents = function (events) {
            events = events.concat(Ext_picker_Picker.EVENTS);
            return Ext_Sheet.getEvents(events);
        };
        Ext_picker_Picker.PROPERTIES = [
            'bottom',
            'cancelButton',
            'centered',
            'defaultType',
            'doneButton',
            'floated',
            'height',
            'layout',
            'left',
            'right',
            'side',
            'slots',
            'tabIndex',
            'toolbar',
            'useTitles',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_picker_Picker.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,picker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'picker,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'picker' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'picker' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'picker,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'picker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'picker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'picker' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'picker,values' },
            { name: 'collapse', parameters: 'picker' },
            { name: 'deactivate', parameters: 'oldActiveItem,picker,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'picker' },
            { name: 'drawershow', parameters: 'picker' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'picker' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'picker,event' },
            { name: 'focusenter', parameters: 'picker,event' },
            { name: 'focusleave', parameters: 'picker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'picker,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pick', parameters: 'picker,values,slot' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'picker,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'picker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'picker,context' },
            { name: 'resizedragcancel', parameters: 'picker,context' },
            { name: 'resizedragend', parameters: 'picker,context' },
            { name: 'resizedragstart', parameters: 'picker,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'picker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_picker_Picker;
    }(Ext_Sheet));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_picker_Picker.EVENTNAMES);
    //    return Ext_Sheet.getEventNames(eventnames);
    //}

    var Ext_DatePicker = /** @class */ (function (_super) {
        __extends(Ext_DatePicker, _super);
        function Ext_DatePicker() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_DatePicker.getProperties = function (properties) {
            properties = properties.concat(Ext_DatePicker.PROPERTIES);
            return Ext_picker_Picker.getProperties(properties);
        };
        Ext_DatePicker.getEvents = function (events) {
            events = events.concat(Ext_DatePicker.EVENTS);
            return Ext_picker_Picker.getEvents(events);
        };
        Ext_DatePicker.PROPERTIES = [
            'dayText',
            'doneButton',
            'monthText',
            'slotOrder',
            'slots',
            'value',
            'yearFrom',
            'yearText',
            'yearTo',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_DatePicker.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,datepicker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'datepicker,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'datepicker' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'datepicker' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'datepicker,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'datepicker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'datepicker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'datepicker' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'datepicker,value' },
            { name: 'collapse', parameters: 'datepicker' },
            { name: 'deactivate', parameters: 'oldActiveItem,datepicker,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'datepicker' },
            { name: 'drawershow', parameters: 'datepicker' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'datepicker' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'datepicker,event' },
            { name: 'focusenter', parameters: 'datepicker,event' },
            { name: 'focusleave', parameters: 'datepicker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'datepicker,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pick', parameters: 'datepicker,values,slot' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'datepicker,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'datepicker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'datepicker,context' },
            { name: 'resizedragcancel', parameters: 'datepicker,context' },
            { name: 'resizedragend', parameters: 'datepicker,context' },
            { name: 'resizedragstart', parameters: 'datepicker,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'datepicker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_DatePicker;
    }(Ext_picker_Picker));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_DatePicker.EVENTNAMES);
    //    return Ext_picker_Picker.getEventNames(eventnames);
    //}

    var ExtDatepickerMetaData = /** @class */ (function (_super) {
        __extends(ExtDatepickerMetaData, _super);
        function ExtDatepickerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtDatepickerMetaData.getAll = function () {
            ExtDatepickerMetaData.PROPERTIES = Ext_DatePicker.getProperties(ExtDatepickerMetaData.PROPERTIES);
            ExtDatepickerMetaData.EVENTS = Ext_DatePicker.getEvents(ExtDatepickerMetaData.EVENTS);
            ExtDatepickerMetaData.EVENTS.forEach(function (event) {
                ExtDatepickerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtDatepickerMetaData.PROPERTIES = [];
        ExtDatepickerMetaData.EVENTS = [];
        ExtDatepickerMetaData.EVENTNAMES = [];
        return ExtDatepickerMetaData;
    }(Ext_DatePicker));
    (function () { ExtDatepickerMetaData.getAll(); })();
    var ExtDatepickerComponent = /** @class */ (function (_super) {
        __extends(ExtDatepickerComponent, _super);
        function ExtDatepickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtDatepickerMetaData.PROPERTIES, ExtDatepickerMetaData.EVENTS) || this;
            _this.xtype = 'datepicker';
            return _this;
        }
        ExtDatepickerComponent_1 = ExtDatepickerComponent;
        ExtDatepickerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtDatepickerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtDatepickerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtDatepickerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtDatepickerComponent_1;
        ExtDatepickerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtDatepickerComponent = ExtDatepickerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-datepicker',
                inputs: ExtDatepickerMetaData.PROPERTIES,
                outputs: ExtDatepickerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtDatepickerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtDatepickerComponent);
        return ExtDatepickerComponent;
    }(EngBase));

    var Ext_Picker = /** @class */ (function (_super) {
        __extends(Ext_Picker, _super);
        function Ext_Picker() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Picker.getProperties = function (properties) {
            properties = properties.concat(Ext_Picker.PROPERTIES);
            return Ext_Sheet.getProperties(properties);
        };
        Ext_Picker.getEvents = function (events) {
            events = events.concat(Ext_Picker.EVENTS);
            return Ext_Sheet.getEvents(events);
        };
        Ext_Picker.PROPERTIES = [
            'bottom',
            'cancelButton',
            'centered',
            'defaultType',
            'doneButton',
            'floated',
            'height',
            'layout',
            'left',
            'right',
            'side',
            'slots',
            'tabIndex',
            'toolbar',
            'useTitles',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Picker.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,picker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'picker,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'picker' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'picker' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'picker,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'picker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'picker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'picker' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'picker,values' },
            { name: 'collapse', parameters: 'picker' },
            { name: 'deactivate', parameters: 'oldActiveItem,picker,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'picker' },
            { name: 'drawershow', parameters: 'picker' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'picker' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'picker,event' },
            { name: 'focusenter', parameters: 'picker,event' },
            { name: 'focusleave', parameters: 'picker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'picker,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pick', parameters: 'picker,values,slot' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'picker,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'picker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'picker,context' },
            { name: 'resizedragcancel', parameters: 'picker,context' },
            { name: 'resizedragend', parameters: 'picker,context' },
            { name: 'resizedragstart', parameters: 'picker,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'picker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Picker;
    }(Ext_Sheet));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Picker.EVENTNAMES);
    //    return Ext_Sheet.getEventNames(eventnames);
    //}

    var ExtPickerMetaData = /** @class */ (function (_super) {
        __extends(ExtPickerMetaData, _super);
        function ExtPickerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPickerMetaData.getAll = function () {
            ExtPickerMetaData.PROPERTIES = Ext_Picker.getProperties(ExtPickerMetaData.PROPERTIES);
            ExtPickerMetaData.EVENTS = Ext_Picker.getEvents(ExtPickerMetaData.EVENTS);
            ExtPickerMetaData.EVENTS.forEach(function (event) {
                ExtPickerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPickerMetaData.PROPERTIES = [];
        ExtPickerMetaData.EVENTS = [];
        ExtPickerMetaData.EVENTNAMES = [];
        return ExtPickerMetaData;
    }(Ext_Picker));
    (function () { ExtPickerMetaData.getAll(); })();
    var ExtPickerComponent = /** @class */ (function (_super) {
        __extends(ExtPickerComponent, _super);
        function ExtPickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPickerMetaData.PROPERTIES, ExtPickerMetaData.EVENTS) || this;
            _this.xtype = 'picker';
            return _this;
        }
        ExtPickerComponent_1 = ExtPickerComponent;
        ExtPickerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPickerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPickerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPickerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPickerComponent_1;
        ExtPickerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPickerComponent = ExtPickerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-picker',
                inputs: ExtPickerMetaData.PROPERTIES,
                outputs: ExtPickerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPickerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPickerComponent);
        return ExtPickerComponent;
    }(EngBase));

    var Ext_picker_SelectPicker = /** @class */ (function (_super) {
        __extends(Ext_picker_SelectPicker, _super);
        function Ext_picker_SelectPicker() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_picker_SelectPicker.getProperties = function (properties) {
            properties = properties.concat(Ext_picker_SelectPicker.PROPERTIES);
            return Ext_picker_Picker.getProperties(properties);
        };
        Ext_picker_SelectPicker.getEvents = function (events) {
            events = events.concat(Ext_picker_SelectPicker.EVENTS);
            return Ext_picker_Picker.getEvents(events);
        };
        Ext_picker_SelectPicker.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_picker_SelectPicker.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,selectpicker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'selectpicker,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'selectpicker' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'selectpicker' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'selectpicker,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'selectpicker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'selectpicker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'cancel', parameters: 'selectpicker' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'selectpicker,values' },
            { name: 'collapse', parameters: 'selectpicker' },
            { name: 'deactivate', parameters: 'oldActiveItem,selectpicker,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'selectpicker' },
            { name: 'drawershow', parameters: 'selectpicker' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'selectpicker' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'selectpicker,event' },
            { name: 'focusenter', parameters: 'selectpicker,event' },
            { name: 'focusleave', parameters: 'selectpicker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'selectpicker,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pick', parameters: 'selectpicker,values,slot' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'selectpicker,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'selectpicker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'selectpicker,context' },
            { name: 'resizedragcancel', parameters: 'selectpicker,context' },
            { name: 'resizedragend', parameters: 'selectpicker,context' },
            { name: 'resizedragstart', parameters: 'selectpicker,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'selectpicker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_picker_SelectPicker;
    }(Ext_picker_Picker));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_picker_SelectPicker.EVENTNAMES);
    //    return Ext_picker_Picker.getEventNames(eventnames);
    //}

    var ExtSelectpickerMetaData = /** @class */ (function (_super) {
        __extends(ExtSelectpickerMetaData, _super);
        function ExtSelectpickerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSelectpickerMetaData.getAll = function () {
            ExtSelectpickerMetaData.PROPERTIES = Ext_picker_SelectPicker.getProperties(ExtSelectpickerMetaData.PROPERTIES);
            ExtSelectpickerMetaData.EVENTS = Ext_picker_SelectPicker.getEvents(ExtSelectpickerMetaData.EVENTS);
            ExtSelectpickerMetaData.EVENTS.forEach(function (event) {
                ExtSelectpickerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSelectpickerMetaData.PROPERTIES = [];
        ExtSelectpickerMetaData.EVENTS = [];
        ExtSelectpickerMetaData.EVENTNAMES = [];
        return ExtSelectpickerMetaData;
    }(Ext_picker_SelectPicker));
    (function () { ExtSelectpickerMetaData.getAll(); })();
    var ExtSelectpickerComponent = /** @class */ (function (_super) {
        __extends(ExtSelectpickerComponent, _super);
        function ExtSelectpickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSelectpickerMetaData.PROPERTIES, ExtSelectpickerMetaData.EVENTS) || this;
            _this.xtype = 'selectpicker';
            return _this;
        }
        ExtSelectpickerComponent_1 = ExtSelectpickerComponent;
        ExtSelectpickerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSelectpickerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSelectpickerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSelectpickerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSelectpickerComponent_1;
        ExtSelectpickerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSelectpickerComponent = ExtSelectpickerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-selectpicker',
                inputs: ExtSelectpickerMetaData.PROPERTIES,
                outputs: ExtSelectpickerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSelectpickerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSelectpickerComponent);
        return ExtSelectpickerComponent;
    }(EngBase));

    var Ext_picker_Slot = /** @class */ (function (_super) {
        __extends(Ext_picker_Slot, _super);
        function Ext_picker_Slot() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_picker_Slot.getProperties = function (properties) {
            properties = properties.concat(Ext_picker_Slot.PROPERTIES);
            return Ext_dataview_DataView.getProperties(properties);
        };
        Ext_picker_Slot.getEvents = function (events) {
            events = events.concat(Ext_picker_Slot.EVENTS);
            return Ext_dataview_DataView.getEvents(events);
        };
        Ext_picker_Slot.PROPERTIES = [
            'align',
            'cls',
            'displayField',
            'flex',
            'itemTpl',
            'name',
            'scrollable',
            'showTitle',
            'title',
            'triggerEvent',
            'value',
            'valueField',
            'verticallyCenterItems',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_picker_Slot.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pickerslot,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'pickerslot' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pickerslot,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'pickerslot,location' },
            { name: 'childlongpress', parameters: 'pickerslot,location' },
            { name: 'childmouseenter', parameters: 'pickerslot,location' },
            { name: 'childmouseleave', parameters: 'pickerslot,location' },
            { name: 'childsingletap', parameters: 'pickerslot,location' },
            { name: 'childtap', parameters: 'pickerslot,location' },
            { name: 'childtaphold', parameters: 'pickerslot,location' },
            { name: 'childtouchcancel', parameters: 'pickerslot,location' },
            { name: 'childtouchend', parameters: 'pickerslot,location' },
            { name: 'childtouchmove', parameters: 'pickerslot,location' },
            { name: 'childtouchstart', parameters: 'pickerslot,location' },
            { name: 'deactivate', parameters: 'oldActiveItem,pickerslot,newActiveItem' },
            { name: 'deselect', parameters: 'pickerslot,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pickerslot,event' },
            { name: 'focusenter', parameters: 'pickerslot,event' },
            { name: 'focusleave', parameters: 'pickerslot,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemdoubletap', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemswipe', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtap', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'pickerslot,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'pickerslot,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'pickerslot,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'pickerslot' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pickerslot,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'rowselection', parameters: 'view,selection' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'pickerslot,selected' },
            { name: 'selectionchange', parameters: 'view,records,selected,selection' },
            { name: 'show', parameters: 'sender' },
            { name: 'slotpick', parameters: 'pickerslot,value,node' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'pickerslot' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_picker_Slot;
    }(Ext_dataview_DataView));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_picker_Slot.EVENTNAMES);
    //    return Ext_dataview_DataView.getEventNames(eventnames);
    //}

    var ExtPickerslotMetaData = /** @class */ (function (_super) {
        __extends(ExtPickerslotMetaData, _super);
        function ExtPickerslotMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPickerslotMetaData.getAll = function () {
            ExtPickerslotMetaData.PROPERTIES = Ext_picker_Slot.getProperties(ExtPickerslotMetaData.PROPERTIES);
            ExtPickerslotMetaData.EVENTS = Ext_picker_Slot.getEvents(ExtPickerslotMetaData.EVENTS);
            ExtPickerslotMetaData.EVENTS.forEach(function (event) {
                ExtPickerslotMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPickerslotMetaData.PROPERTIES = [];
        ExtPickerslotMetaData.EVENTS = [];
        ExtPickerslotMetaData.EVENTNAMES = [];
        return ExtPickerslotMetaData;
    }(Ext_picker_Slot));
    (function () { ExtPickerslotMetaData.getAll(); })();
    var ExtPickerslotComponent = /** @class */ (function (_super) {
        __extends(ExtPickerslotComponent, _super);
        function ExtPickerslotComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPickerslotMetaData.PROPERTIES, ExtPickerslotMetaData.EVENTS) || this;
            _this.xtype = 'pickerslot';
            return _this;
        }
        ExtPickerslotComponent_1 = ExtPickerslotComponent;
        ExtPickerslotComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPickerslotComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPickerslotComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPickerslotComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPickerslotComponent_1;
        ExtPickerslotComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPickerslotComponent = ExtPickerslotComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pickerslot',
                inputs: ExtPickerslotMetaData.PROPERTIES,
                outputs: ExtPickerslotMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPickerslotComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPickerslotComponent);
        return ExtPickerslotComponent;
    }(EngBase));

    var Ext_picker_Tablet = /** @class */ (function (_super) {
        __extends(Ext_picker_Tablet, _super);
        function Ext_picker_Tablet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_picker_Tablet.getProperties = function (properties) {
            properties = properties.concat(Ext_picker_Tablet.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_picker_Tablet.getEvents = function (events) {
            events = events.concat(Ext_picker_Tablet.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_picker_Tablet.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_picker_Tablet.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,tabletpicker,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'tabletpicker,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'tabletpicker' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'tabletpicker' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'tabletpicker,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tabletpicker' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tabletpicker,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'tabletpicker' },
            { name: 'deactivate', parameters: 'oldActiveItem,tabletpicker,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'tabletpicker' },
            { name: 'drawershow', parameters: 'tabletpicker' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'tabletpicker' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tabletpicker,event' },
            { name: 'focusenter', parameters: 'tabletpicker,event' },
            { name: 'focusleave', parameters: 'tabletpicker,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'tabletpicker,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'tabletpicker,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'tabletpicker,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'tabletpicker,context' },
            { name: 'resizedragcancel', parameters: 'tabletpicker,context' },
            { name: 'resizedragend', parameters: 'tabletpicker,context' },
            { name: 'resizedragstart', parameters: 'tabletpicker,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'tabletpicker' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_picker_Tablet;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_picker_Tablet.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var ExtTabletpickerMetaData = /** @class */ (function (_super) {
        __extends(ExtTabletpickerMetaData, _super);
        function ExtTabletpickerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTabletpickerMetaData.getAll = function () {
            ExtTabletpickerMetaData.PROPERTIES = Ext_picker_Tablet.getProperties(ExtTabletpickerMetaData.PROPERTIES);
            ExtTabletpickerMetaData.EVENTS = Ext_picker_Tablet.getEvents(ExtTabletpickerMetaData.EVENTS);
            ExtTabletpickerMetaData.EVENTS.forEach(function (event) {
                ExtTabletpickerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTabletpickerMetaData.PROPERTIES = [];
        ExtTabletpickerMetaData.EVENTS = [];
        ExtTabletpickerMetaData.EVENTNAMES = [];
        return ExtTabletpickerMetaData;
    }(Ext_picker_Tablet));
    (function () { ExtTabletpickerMetaData.getAll(); })();
    var ExtTabletpickerComponent = /** @class */ (function (_super) {
        __extends(ExtTabletpickerComponent, _super);
        function ExtTabletpickerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTabletpickerMetaData.PROPERTIES, ExtTabletpickerMetaData.EVENTS) || this;
            _this.xtype = 'tabletpicker';
            return _this;
        }
        ExtTabletpickerComponent_1 = ExtTabletpickerComponent;
        ExtTabletpickerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTabletpickerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTabletpickerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTabletpickerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTabletpickerComponent_1;
        ExtTabletpickerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTabletpickerComponent = ExtTabletpickerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-tabletpicker',
                inputs: ExtTabletpickerMetaData.PROPERTIES,
                outputs: ExtTabletpickerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTabletpickerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTabletpickerComponent);
        return ExtTabletpickerComponent;
    }(EngBase));

    var Ext_pivot_cell_Cell = /** @class */ (function (_super) {
        __extends(Ext_pivot_cell_Cell, _super);
        function Ext_pivot_cell_Cell() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_pivot_cell_Cell.getProperties = function (properties) {
            properties = properties.concat(Ext_pivot_cell_Cell.PROPERTIES);
            return Ext_grid_cell_Cell.getProperties(properties);
        };
        Ext_pivot_cell_Cell.getEvents = function (events) {
            events = events.concat(Ext_pivot_cell_Cell.EVENTS);
            return Ext_grid_cell_Cell.getEvents(events);
        };
        Ext_pivot_cell_Cell.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_pivot_cell_Cell.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'pivotgridcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotgridcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'pivotgridcell,event' },
            { name: 'focusenter', parameters: 'pivotgridcell,event' },
            { name: 'focusleave', parameters: 'pivotgridcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'pivotgridcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_pivot_cell_Cell;
    }(Ext_grid_cell_Cell));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_pivot_cell_Cell.EVENTNAMES);
    //    return Ext_grid_cell_Cell.getEventNames(eventnames);
    //}

    var ExtPivotgridcellMetaData = /** @class */ (function (_super) {
        __extends(ExtPivotgridcellMetaData, _super);
        function ExtPivotgridcellMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPivotgridcellMetaData.getAll = function () {
            ExtPivotgridcellMetaData.PROPERTIES = Ext_pivot_cell_Cell.getProperties(ExtPivotgridcellMetaData.PROPERTIES);
            ExtPivotgridcellMetaData.EVENTS = Ext_pivot_cell_Cell.getEvents(ExtPivotgridcellMetaData.EVENTS);
            ExtPivotgridcellMetaData.EVENTS.forEach(function (event) {
                ExtPivotgridcellMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPivotgridcellMetaData.PROPERTIES = [];
        ExtPivotgridcellMetaData.EVENTS = [];
        ExtPivotgridcellMetaData.EVENTNAMES = [];
        return ExtPivotgridcellMetaData;
    }(Ext_pivot_cell_Cell));
    (function () { ExtPivotgridcellMetaData.getAll(); })();
    var ExtPivotgridcellComponent = /** @class */ (function (_super) {
        __extends(ExtPivotgridcellComponent, _super);
        function ExtPivotgridcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPivotgridcellMetaData.PROPERTIES, ExtPivotgridcellMetaData.EVENTS) || this;
            _this.xtype = 'pivotgridcell';
            return _this;
        }
        ExtPivotgridcellComponent_1 = ExtPivotgridcellComponent;
        ExtPivotgridcellComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPivotgridcellComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPivotgridcellComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPivotgridcellComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPivotgridcellComponent_1;
        ExtPivotgridcellComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPivotgridcellComponent = ExtPivotgridcellComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pivotgridcell',
                inputs: ExtPivotgridcellMetaData.PROPERTIES,
                outputs: ExtPivotgridcellMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPivotgridcellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPivotgridcellComponent);
        return ExtPivotgridcellComponent;
    }(EngBase));

    var Ext_pivot_cell_Group = /** @class */ (function (_super) {
        __extends(Ext_pivot_cell_Group, _super);
        function Ext_pivot_cell_Group() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_pivot_cell_Group.getProperties = function (properties) {
            properties = properties.concat(Ext_pivot_cell_Group.PROPERTIES);
            return Ext_pivot_cell_Cell.getProperties(properties);
        };
        Ext_pivot_cell_Group.getEvents = function (events) {
            events = events.concat(Ext_pivot_cell_Group.EVENTS);
            return Ext_pivot_cell_Cell.getEvents(events);
        };
        Ext_pivot_cell_Group.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_pivot_cell_Group.EVENTS = [
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'pivotgridgroupcell' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotgridgroupcell,event' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'focus', parameters: 'pivotgridgroupcell,event' },
            { name: 'focusenter', parameters: 'pivotgridgroupcell,event' },
            { name: 'focusleave', parameters: 'pivotgridgroupcell,event' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'pivotgridgroupcell' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_pivot_cell_Group;
    }(Ext_pivot_cell_Cell));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_pivot_cell_Group.EVENTNAMES);
    //    return Ext_pivot_cell_Cell.getEventNames(eventnames);
    //}

    var ExtPivotgridgroupcellMetaData = /** @class */ (function (_super) {
        __extends(ExtPivotgridgroupcellMetaData, _super);
        function ExtPivotgridgroupcellMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPivotgridgroupcellMetaData.getAll = function () {
            ExtPivotgridgroupcellMetaData.PROPERTIES = Ext_pivot_cell_Group.getProperties(ExtPivotgridgroupcellMetaData.PROPERTIES);
            ExtPivotgridgroupcellMetaData.EVENTS = Ext_pivot_cell_Group.getEvents(ExtPivotgridgroupcellMetaData.EVENTS);
            ExtPivotgridgroupcellMetaData.EVENTS.forEach(function (event) {
                ExtPivotgridgroupcellMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPivotgridgroupcellMetaData.PROPERTIES = [];
        ExtPivotgridgroupcellMetaData.EVENTS = [];
        ExtPivotgridgroupcellMetaData.EVENTNAMES = [];
        return ExtPivotgridgroupcellMetaData;
    }(Ext_pivot_cell_Group));
    (function () { ExtPivotgridgroupcellMetaData.getAll(); })();
    var ExtPivotgridgroupcellComponent = /** @class */ (function (_super) {
        __extends(ExtPivotgridgroupcellComponent, _super);
        function ExtPivotgridgroupcellComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPivotgridgroupcellMetaData.PROPERTIES, ExtPivotgridgroupcellMetaData.EVENTS) || this;
            _this.xtype = 'pivotgridgroupcell';
            return _this;
        }
        ExtPivotgridgroupcellComponent_1 = ExtPivotgridgroupcellComponent;
        ExtPivotgridgroupcellComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPivotgridgroupcellComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPivotgridgroupcellComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPivotgridgroupcellComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPivotgridgroupcellComponent_1;
        ExtPivotgridgroupcellComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPivotgridgroupcellComponent = ExtPivotgridgroupcellComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pivotgridgroupcell',
                inputs: ExtPivotgridgroupcellMetaData.PROPERTIES,
                outputs: ExtPivotgridgroupcellMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPivotgridgroupcellComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPivotgridgroupcellComponent);
        return ExtPivotgridgroupcellComponent;
    }(EngBase));

    var Ext_pivot_d3_AbstractContainer = /** @class */ (function (_super) {
        __extends(Ext_pivot_d3_AbstractContainer, _super);
        function Ext_pivot_d3_AbstractContainer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_pivot_d3_AbstractContainer.getProperties = function (properties) {
            properties = properties.concat(Ext_pivot_d3_AbstractContainer.PROPERTIES);
            return Ext_panel_Panel.getProperties(properties);
        };
        Ext_pivot_d3_AbstractContainer.getEvents = function (events) {
            events = events.concat(Ext_pivot_d3_AbstractContainer.EVENTS);
            return Ext_panel_Panel.getEvents(events);
        };
        Ext_pivot_d3_AbstractContainer.PROPERTIES = [
            'configurator',
            'drawing',
            'matrix',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_pivot_d3_AbstractContainer.EVENTS = [
            { name: 'ready', parameters: '' }
        ];
        return Ext_pivot_d3_AbstractContainer;
    }(Ext_panel_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_pivot_d3_AbstractContainer.EVENTNAMES);
    //    return Ext_panel_Panel.getEventNames(eventnames);
    //}

    var Ext_pivot_d3_Container = /** @class */ (function (_super) {
        __extends(Ext_pivot_d3_Container, _super);
        function Ext_pivot_d3_Container() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_pivot_d3_Container.getProperties = function (properties) {
            properties = properties.concat(Ext_pivot_d3_Container.PROPERTIES);
            return Ext_pivot_d3_AbstractContainer.getProperties(properties);
        };
        Ext_pivot_d3_Container.getEvents = function (events) {
            events = events.concat(Ext_pivot_d3_Container.EVENTS);
            return Ext_pivot_d3_AbstractContainer.getEvents(events);
        };
        Ext_pivot_d3_Container.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_pivot_d3_Container.EVENTS = [
            { name: 'ready', parameters: '' }
        ];
        return Ext_pivot_d3_Container;
    }(Ext_pivot_d3_AbstractContainer));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_pivot_d3_Container.EVENTNAMES);
    //    return Ext_pivot_d3_AbstractContainer.getEventNames(eventnames);
    //}

    var ExtPivotd3containerMetaData = /** @class */ (function (_super) {
        __extends(ExtPivotd3containerMetaData, _super);
        function ExtPivotd3containerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPivotd3containerMetaData.getAll = function () {
            ExtPivotd3containerMetaData.PROPERTIES = Ext_pivot_d3_Container.getProperties(ExtPivotd3containerMetaData.PROPERTIES);
            ExtPivotd3containerMetaData.EVENTS = Ext_pivot_d3_Container.getEvents(ExtPivotd3containerMetaData.EVENTS);
            ExtPivotd3containerMetaData.EVENTS.forEach(function (event) {
                ExtPivotd3containerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPivotd3containerMetaData.PROPERTIES = [];
        ExtPivotd3containerMetaData.EVENTS = [];
        ExtPivotd3containerMetaData.EVENTNAMES = [];
        return ExtPivotd3containerMetaData;
    }(Ext_pivot_d3_Container));
    (function () { ExtPivotd3containerMetaData.getAll(); })();
    var ExtPivotd3containerComponent = /** @class */ (function (_super) {
        __extends(ExtPivotd3containerComponent, _super);
        function ExtPivotd3containerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPivotd3containerMetaData.PROPERTIES, ExtPivotd3containerMetaData.EVENTS) || this;
            _this.xtype = 'pivotd3container';
            return _this;
        }
        ExtPivotd3containerComponent_1 = ExtPivotd3containerComponent;
        ExtPivotd3containerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPivotd3containerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPivotd3containerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPivotd3containerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPivotd3containerComponent_1;
        ExtPivotd3containerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPivotd3containerComponent = ExtPivotd3containerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pivotd3container',
                inputs: ExtPivotd3containerMetaData.PROPERTIES,
                outputs: ExtPivotd3containerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPivotd3containerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPivotd3containerComponent);
        return ExtPivotd3containerComponent;
    }(EngBase));

    var Ext_pivot_d3_HeatMap = /** @class */ (function (_super) {
        __extends(Ext_pivot_d3_HeatMap, _super);
        function Ext_pivot_d3_HeatMap() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_pivot_d3_HeatMap.getProperties = function (properties) {
            properties = properties.concat(Ext_pivot_d3_HeatMap.PROPERTIES);
            return Ext_d3_HeatMap.getProperties(properties);
        };
        Ext_pivot_d3_HeatMap.getEvents = function (events) {
            events = events.concat(Ext_pivot_d3_HeatMap.EVENTS);
            return Ext_d3_HeatMap.getEvents(events);
        };
        Ext_pivot_d3_HeatMap.PROPERTIES = [
            'defaultFormatter',
            'matrix',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_pivot_d3_HeatMap.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivotheatmap' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotheatmap,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotheatmap,event' },
            { name: 'focusenter', parameters: 'pivotheatmap,event' },
            { name: 'focusleave', parameters: 'pivotheatmap,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivotheatmap' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_pivot_d3_HeatMap;
    }(Ext_d3_HeatMap));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_pivot_d3_HeatMap.EVENTNAMES);
    //    return Ext_d3_HeatMap.getEventNames(eventnames);
    //}

    var ExtPivotheatmapMetaData = /** @class */ (function (_super) {
        __extends(ExtPivotheatmapMetaData, _super);
        function ExtPivotheatmapMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPivotheatmapMetaData.getAll = function () {
            ExtPivotheatmapMetaData.PROPERTIES = Ext_pivot_d3_HeatMap.getProperties(ExtPivotheatmapMetaData.PROPERTIES);
            ExtPivotheatmapMetaData.EVENTS = Ext_pivot_d3_HeatMap.getEvents(ExtPivotheatmapMetaData.EVENTS);
            ExtPivotheatmapMetaData.EVENTS.forEach(function (event) {
                ExtPivotheatmapMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPivotheatmapMetaData.PROPERTIES = [];
        ExtPivotheatmapMetaData.EVENTS = [];
        ExtPivotheatmapMetaData.EVENTNAMES = [];
        return ExtPivotheatmapMetaData;
    }(Ext_pivot_d3_HeatMap));
    (function () { ExtPivotheatmapMetaData.getAll(); })();
    var ExtPivotheatmapComponent = /** @class */ (function (_super) {
        __extends(ExtPivotheatmapComponent, _super);
        function ExtPivotheatmapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPivotheatmapMetaData.PROPERTIES, ExtPivotheatmapMetaData.EVENTS) || this;
            _this.xtype = 'pivotheatmap';
            return _this;
        }
        ExtPivotheatmapComponent_1 = ExtPivotheatmapComponent;
        ExtPivotheatmapComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPivotheatmapComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPivotheatmapComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPivotheatmapComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPivotheatmapComponent_1;
        ExtPivotheatmapComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPivotheatmapComponent = ExtPivotheatmapComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pivotheatmap',
                inputs: ExtPivotheatmapMetaData.PROPERTIES,
                outputs: ExtPivotheatmapMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPivotheatmapComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPivotheatmapComponent);
        return ExtPivotheatmapComponent;
    }(EngBase));

    var Ext_pivot_d3_TreeMap = /** @class */ (function (_super) {
        __extends(Ext_pivot_d3_TreeMap, _super);
        function Ext_pivot_d3_TreeMap() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_pivot_d3_TreeMap.getProperties = function (properties) {
            properties = properties.concat(Ext_pivot_d3_TreeMap.PROPERTIES);
            return Ext_d3_hierarchy_TreeMap.getProperties(properties);
        };
        Ext_pivot_d3_TreeMap.getEvents = function (events) {
            events = events.concat(Ext_pivot_d3_TreeMap.EVENTS);
            return Ext_d3_hierarchy_TreeMap.getEvents(events);
        };
        Ext_pivot_d3_TreeMap.PROPERTIES = [
            'autoExpand',
            'matrix',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_pivot_d3_TreeMap.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivottreemap' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivottreemap,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivottreemap,event' },
            { name: 'focusenter', parameters: 'pivottreemap,event' },
            { name: 'focusleave', parameters: 'pivottreemap,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'layout', parameters: 'component' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'sceneresize', parameters: 'component,scene,size' },
            { name: 'scenesetup', parameters: 'component,scene' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivottreemap' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_pivot_d3_TreeMap;
    }(Ext_d3_hierarchy_TreeMap));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_pivot_d3_TreeMap.EVENTNAMES);
    //    return Ext_d3_hierarchy_TreeMap.getEventNames(eventnames);
    //}

    var ExtPivottreemapMetaData = /** @class */ (function (_super) {
        __extends(ExtPivottreemapMetaData, _super);
        function ExtPivottreemapMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPivottreemapMetaData.getAll = function () {
            ExtPivottreemapMetaData.PROPERTIES = Ext_pivot_d3_TreeMap.getProperties(ExtPivottreemapMetaData.PROPERTIES);
            ExtPivottreemapMetaData.EVENTS = Ext_pivot_d3_TreeMap.getEvents(ExtPivottreemapMetaData.EVENTS);
            ExtPivottreemapMetaData.EVENTS.forEach(function (event) {
                ExtPivottreemapMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPivottreemapMetaData.PROPERTIES = [];
        ExtPivottreemapMetaData.EVENTS = [];
        ExtPivottreemapMetaData.EVENTNAMES = [];
        return ExtPivottreemapMetaData;
    }(Ext_pivot_d3_TreeMap));
    (function () { ExtPivottreemapMetaData.getAll(); })();
    var ExtPivottreemapComponent = /** @class */ (function (_super) {
        __extends(ExtPivottreemapComponent, _super);
        function ExtPivottreemapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPivottreemapMetaData.PROPERTIES, ExtPivottreemapMetaData.EVENTS) || this;
            _this.xtype = 'pivottreemap';
            return _this;
        }
        ExtPivottreemapComponent_1 = ExtPivottreemapComponent;
        ExtPivottreemapComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPivottreemapComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPivottreemapComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPivottreemapComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPivottreemapComponent_1;
        ExtPivottreemapComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPivottreemapComponent = ExtPivottreemapComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pivottreemap',
                inputs: ExtPivottreemapMetaData.PROPERTIES,
                outputs: ExtPivottreemapMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPivottreemapComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPivottreemapComponent);
        return ExtPivottreemapComponent;
    }(EngBase));

    var Ext_pivot_Grid = /** @class */ (function (_super) {
        __extends(Ext_pivot_Grid, _super);
        function Ext_pivot_Grid() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_pivot_Grid.getProperties = function (properties) {
            properties = properties.concat(Ext_pivot_Grid.PROPERTIES);
            return Ext_grid_Grid.getProperties(properties);
        };
        Ext_pivot_Grid.getEvents = function (events) {
            events = events.concat(Ext_pivot_Grid.EVENTS);
            return Ext_grid_Grid.getEvents(events);
        };
        Ext_pivot_Grid.PROPERTIES = [
            'clsGrandTotal',
            'clsGroupTotal',
            'enableColumnSort',
            'enableLoadMask',
            'leftAxisCellConfig',
            'matrix',
            'record',
            'startColGroupsCollapsed',
            'startRowGroupsCollapsed',
            'topAxisCellConfig',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_pivot_Grid.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotgrid,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: '' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecomplete', parameters: 'editor,value,startValue,The' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeedit', parameters: 'sender,location' },
            { name: 'beforegroupcollapse', parameters: 'pivotgrid,group' },
            { name: 'beforegroupexpand', parameters: 'pivotgrid,group' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeselectionextend', parameters: 'grid,An,extension' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforestartedit', parameters: 'editor,boundEl,value,The' },
            { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforetofront', parameters: 'pivotgrid' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotgrid,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'canceledit', parameters: 'editor,value,startValue' },
            { name: 'cellselection', parameters: 'grid,selection' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'childdoubletap', parameters: 'pivotgrid,location' },
            { name: 'childlongpress', parameters: 'pivotgrid,location' },
            { name: 'childmouseenter', parameters: 'pivotgrid,location' },
            { name: 'childmouseleave', parameters: 'pivotgrid,location' },
            { name: 'childsingletap', parameters: 'pivotgrid,location' },
            { name: 'childtap', parameters: 'pivotgrid,location' },
            { name: 'childtaphold', parameters: 'pivotgrid,location' },
            { name: 'childtouchcancel', parameters: 'pivotgrid,location' },
            { name: 'childtouchend', parameters: 'pivotgrid,location' },
            { name: 'childtouchmove', parameters: 'pivotgrid,location' },
            { name: 'childtouchstart', parameters: 'pivotgrid,location' },
            { name: 'columnadd', parameters: 'pivotgrid,column,index' },
            { name: 'columnhide', parameters: 'pivotgrid,column' },
            { name: 'columnmenucreated', parameters: 'grid,column,menu' },
            { name: 'columnmove', parameters: 'pivotgrid,column,fromIndex,toIndex' },
            { name: 'columnremove', parameters: 'pivotgrid,column' },
            { name: 'columnresize', parameters: 'pivotgrid,column,width' },
            { name: 'columnselection', parameters: 'grid,selection' },
            { name: 'columnshow', parameters: 'pivotgrid,column' },
            { name: 'columnsort', parameters: 'pivotgrid,column,direction' },
            { name: 'complete', parameters: 'editor,value,startValue,The' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotgrid,newActiveItem' },
            { name: 'deselect', parameters: 'pivotgrid,records' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'disclose', parameters: 'list,record,target,index,event' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'edit', parameters: 'sender,location' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotgrid,event' },
            { name: 'focusenter', parameters: 'pivotgrid,event' },
            { name: 'focusleave', parameters: 'pivotgrid,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'groupcollapse', parameters: 'pivotgrid,group' },
            { name: 'groupexpand', parameters: 'pivotgrid,group' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'itemaction', parameters: 'pivotgrid,index,record,action' },
            { name: 'itemdoubletap', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemlongpress', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemmouseenter', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemmouseleave', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemsingletap', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemswipe', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtap', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtaphold', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtouchcancel', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtouchend', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtouchmove', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'itemtouchstart', parameters: 'pivotgrid,index,target,record,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: '' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'navigate', parameters: 'pivotgrid,to,from' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pivotbeforereconfigure', parameters: 'matrix,config' },
            { name: 'pivotbeforerequest', parameters: 'matrix,params' },
            { name: 'pivotbuildtotals', parameters: 'matrix,totals' },
            { name: 'pivotcolumnsbuilt', parameters: 'matrix,columns' },
            { name: 'pivotdone', parameters: 'matrix' },
            { name: 'pivotgroupcelldoubletap', parameters: 'params,e' },
            { name: 'pivotgroupcelltap', parameters: 'params,e' },
            { name: 'pivotgroupcelltaphold', parameters: 'params,e' },
            { name: 'pivotgroupcollapse', parameters: 'matrix,type,group' },
            { name: 'pivotgroupdoubletap', parameters: 'params,e' },
            { name: 'pivotgroupexpand', parameters: 'matrix,type,group' },
            { name: 'pivotgrouptap', parameters: 'params,e' },
            { name: 'pivotgrouptaphold', parameters: 'params,e' },
            { name: 'pivotitemcelldoubletap', parameters: 'params,e' },
            { name: 'pivotitemcelltap', parameters: 'params,e' },
            { name: 'pivotitemcelltaphold', parameters: 'params,e' },
            { name: 'pivotitemdoubletap', parameters: 'params,e' },
            { name: 'pivotitemtap', parameters: 'params,e' },
            { name: 'pivotitemtaphold', parameters: 'params,e' },
            { name: 'pivotmodelbuilt', parameters: 'matrix,model' },
            { name: 'pivotprogress', parameters: 'matrix,index,total' },
            { name: 'pivotreconfigure', parameters: 'matrix,config' },
            { name: 'pivotrecordbuilt', parameters: 'matrix,record' },
            { name: 'pivotrequestexception', parameters: 'matrix,response' },
            { name: 'pivotstart', parameters: 'matrix' },
            { name: 'pivotstorebuilt', parameters: 'matrix,store' },
            { name: 'pivottotalcelldoubletap', parameters: 'params,e' },
            { name: 'pivottotalcelltap', parameters: 'params,e' },
            { name: 'pivottotalcelltaphold', parameters: 'params,e' },
            { name: 'pivottotaldoubletap', parameters: 'params,e' },
            { name: 'pivottotaltap', parameters: 'params,e' },
            { name: 'pivottotaltaphold', parameters: 'params,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'refresh', parameters: 'pivotgrid' },
            { name: 'remove', parameters: '' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotgrid,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'select', parameters: 'pivotgrid,selected' },
            { name: 'selectionextenderdrag', parameters: 'grid,An,extension' },
            { name: 'show', parameters: 'sender' },
            { name: 'specialkey', parameters: 'editor,field,event' },
            { name: 'startedit', parameters: 'editor,boundEl,value,The' },
            { name: 'storechange', parameters: 'sender,value,oldValue' },
            { name: 'tofront', parameters: 'pivotgrid' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'validateedit', parameters: 'sender,location' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_pivot_Grid;
    }(Ext_grid_Grid));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_pivot_Grid.EVENTNAMES);
    //    return Ext_grid_Grid.getEventNames(eventnames);
    //}

    var ExtPivotgridMetaData = /** @class */ (function (_super) {
        __extends(ExtPivotgridMetaData, _super);
        function ExtPivotgridMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPivotgridMetaData.getAll = function () {
            ExtPivotgridMetaData.PROPERTIES = Ext_pivot_Grid.getProperties(ExtPivotgridMetaData.PROPERTIES);
            ExtPivotgridMetaData.EVENTS = Ext_pivot_Grid.getEvents(ExtPivotgridMetaData.EVENTS);
            ExtPivotgridMetaData.EVENTS.forEach(function (event) {
                ExtPivotgridMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPivotgridMetaData.PROPERTIES = [];
        ExtPivotgridMetaData.EVENTS = [];
        ExtPivotgridMetaData.EVENTNAMES = [];
        return ExtPivotgridMetaData;
    }(Ext_pivot_Grid));
    (function () { ExtPivotgridMetaData.getAll(); })();
    var ExtPivotgridComponent = /** @class */ (function (_super) {
        __extends(ExtPivotgridComponent, _super);
        function ExtPivotgridComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPivotgridMetaData.PROPERTIES, ExtPivotgridMetaData.EVENTS) || this;
            _this.xtype = 'pivotgrid';
            return _this;
        }
        ExtPivotgridComponent_1 = ExtPivotgridComponent;
        ExtPivotgridComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPivotgridComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPivotgridComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPivotgridComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPivotgridComponent_1;
        ExtPivotgridComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPivotgridComponent = ExtPivotgridComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pivotgrid',
                inputs: ExtPivotgridMetaData.PROPERTIES,
                outputs: ExtPivotgridMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPivotgridComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPivotgridComponent);
        return ExtPivotgridComponent;
    }(EngBase));

    var Ext_pivot_plugin_configurator_Column = /** @class */ (function (_super) {
        __extends(Ext_pivot_plugin_configurator_Column, _super);
        function Ext_pivot_plugin_configurator_Column() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_pivot_plugin_configurator_Column.getProperties = function (properties) {
            properties = properties.concat(Ext_pivot_plugin_configurator_Column.PROPERTIES);
            return Ext_dataview_ListItem.getProperties(properties);
        };
        Ext_pivot_plugin_configurator_Column.getEvents = function (events) {
            events = events.concat(Ext_pivot_plugin_configurator_Column.EVENTS);
            return Ext_dataview_ListItem.getEvents(events);
        };
        Ext_pivot_plugin_configurator_Column.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_pivot_plugin_configurator_Column.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotconfigfield,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotconfigfield,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivotconfigfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotconfigfield,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigfield,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotconfigfield,event' },
            { name: 'focusenter', parameters: 'pivotconfigfield,event' },
            { name: 'focusleave', parameters: 'pivotconfigfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotconfigfield,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotconfigfield,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotconfigfield,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivotconfigfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'dataItem,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_pivot_plugin_configurator_Column;
    }(Ext_dataview_ListItem));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_pivot_plugin_configurator_Column.EVENTNAMES);
    //    return Ext_dataview_ListItem.getEventNames(eventnames);
    //}

    var ExtPivotconfigfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtPivotconfigfieldMetaData, _super);
        function ExtPivotconfigfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPivotconfigfieldMetaData.getAll = function () {
            ExtPivotconfigfieldMetaData.PROPERTIES = Ext_pivot_plugin_configurator_Column.getProperties(ExtPivotconfigfieldMetaData.PROPERTIES);
            ExtPivotconfigfieldMetaData.EVENTS = Ext_pivot_plugin_configurator_Column.getEvents(ExtPivotconfigfieldMetaData.EVENTS);
            ExtPivotconfigfieldMetaData.EVENTS.forEach(function (event) {
                ExtPivotconfigfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPivotconfigfieldMetaData.PROPERTIES = [];
        ExtPivotconfigfieldMetaData.EVENTS = [];
        ExtPivotconfigfieldMetaData.EVENTNAMES = [];
        return ExtPivotconfigfieldMetaData;
    }(Ext_pivot_plugin_configurator_Column));
    (function () { ExtPivotconfigfieldMetaData.getAll(); })();
    var ExtPivotconfigfieldComponent = /** @class */ (function (_super) {
        __extends(ExtPivotconfigfieldComponent, _super);
        function ExtPivotconfigfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPivotconfigfieldMetaData.PROPERTIES, ExtPivotconfigfieldMetaData.EVENTS) || this;
            _this.xtype = 'pivotconfigfield';
            return _this;
        }
        ExtPivotconfigfieldComponent_1 = ExtPivotconfigfieldComponent;
        ExtPivotconfigfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPivotconfigfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPivotconfigfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPivotconfigfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPivotconfigfieldComponent_1;
        ExtPivotconfigfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPivotconfigfieldComponent = ExtPivotconfigfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pivotconfigfield',
                inputs: ExtPivotconfigfieldMetaData.PROPERTIES,
                outputs: ExtPivotconfigfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPivotconfigfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPivotconfigfieldComponent);
        return ExtPivotconfigfieldComponent;
    }(EngBase));

    var Ext_pivot_plugin_configurator_Container = /** @class */ (function (_super) {
        __extends(Ext_pivot_plugin_configurator_Container, _super);
        function Ext_pivot_plugin_configurator_Container() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_pivot_plugin_configurator_Container.getProperties = function (properties) {
            properties = properties.concat(Ext_pivot_plugin_configurator_Container.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_pivot_plugin_configurator_Container.getEvents = function (events) {
            events = events.concat(Ext_pivot_plugin_configurator_Container.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_pivot_plugin_configurator_Container.PROPERTIES = [
            'fieldType',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_pivot_plugin_configurator_Container.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotconfigcontainer,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotconfigcontainer,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'pivotconfigcontainer' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'pivotconfigcontainer' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'pivotconfigcontainer,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivotconfigcontainer' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotconfigcontainer,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'pivotconfigcontainer' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigcontainer,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'pivotconfigcontainer' },
            { name: 'drawershow', parameters: 'pivotconfigcontainer' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'pivotconfigcontainer' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotconfigcontainer,event' },
            { name: 'focusenter', parameters: 'pivotconfigcontainer,event' },
            { name: 'focusleave', parameters: 'pivotconfigcontainer,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotconfigcontainer,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotconfigcontainer,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotconfigcontainer,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'pivotconfigcontainer,context' },
            { name: 'resizedragcancel', parameters: 'pivotconfigcontainer,context' },
            { name: 'resizedragend', parameters: 'pivotconfigcontainer,context' },
            { name: 'resizedragstart', parameters: 'pivotconfigcontainer,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivotconfigcontainer' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_pivot_plugin_configurator_Container;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_pivot_plugin_configurator_Container.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var ExtPivotconfigcontainerMetaData = /** @class */ (function (_super) {
        __extends(ExtPivotconfigcontainerMetaData, _super);
        function ExtPivotconfigcontainerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPivotconfigcontainerMetaData.getAll = function () {
            ExtPivotconfigcontainerMetaData.PROPERTIES = Ext_pivot_plugin_configurator_Container.getProperties(ExtPivotconfigcontainerMetaData.PROPERTIES);
            ExtPivotconfigcontainerMetaData.EVENTS = Ext_pivot_plugin_configurator_Container.getEvents(ExtPivotconfigcontainerMetaData.EVENTS);
            ExtPivotconfigcontainerMetaData.EVENTS.forEach(function (event) {
                ExtPivotconfigcontainerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPivotconfigcontainerMetaData.PROPERTIES = [];
        ExtPivotconfigcontainerMetaData.EVENTS = [];
        ExtPivotconfigcontainerMetaData.EVENTNAMES = [];
        return ExtPivotconfigcontainerMetaData;
    }(Ext_pivot_plugin_configurator_Container));
    (function () { ExtPivotconfigcontainerMetaData.getAll(); })();
    var ExtPivotconfigcontainerComponent = /** @class */ (function (_super) {
        __extends(ExtPivotconfigcontainerComponent, _super);
        function ExtPivotconfigcontainerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPivotconfigcontainerMetaData.PROPERTIES, ExtPivotconfigcontainerMetaData.EVENTS) || this;
            _this.xtype = 'pivotconfigcontainer';
            return _this;
        }
        ExtPivotconfigcontainerComponent_1 = ExtPivotconfigcontainerComponent;
        ExtPivotconfigcontainerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPivotconfigcontainerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPivotconfigcontainerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPivotconfigcontainerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPivotconfigcontainerComponent_1;
        ExtPivotconfigcontainerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPivotconfigcontainerComponent = ExtPivotconfigcontainerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pivotconfigcontainer',
                inputs: ExtPivotconfigcontainerMetaData.PROPERTIES,
                outputs: ExtPivotconfigcontainerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPivotconfigcontainerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPivotconfigcontainerComponent);
        return ExtPivotconfigcontainerComponent;
    }(EngBase));

    var Ext_pivot_plugin_configurator_Form = /** @class */ (function (_super) {
        __extends(Ext_pivot_plugin_configurator_Form, _super);
        function Ext_pivot_plugin_configurator_Form() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_pivot_plugin_configurator_Form.getProperties = function (properties) {
            properties = properties.concat(Ext_pivot_plugin_configurator_Form.PROPERTIES);
            return Ext_form_Panel.getProperties(properties);
        };
        Ext_pivot_plugin_configurator_Form.getEvents = function (events) {
            events = events.concat(Ext_pivot_plugin_configurator_Form.EVENTS);
            return Ext_form_Panel.getEvents(events);
        };
        Ext_pivot_plugin_configurator_Form.PROPERTIES = [
            'controller',
            'defaults',
            'hideAnimation',
            'listeners',
            'showAnimation',
            'viewModel',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_pivot_plugin_configurator_Form.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotconfigform,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotconfigform,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'pivotconfigform' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'pivotconfigform' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'pivotconfigform,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'pivotconfigform,values,options,e' },
            { name: 'beforetofront', parameters: 'pivotconfigform' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotconfigform,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'pivotconfigform' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigform,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'pivotconfigform,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'pivotconfigform' },
            { name: 'drawershow', parameters: 'pivotconfigform' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'pivotconfigform,result' },
            { name: 'expand', parameters: 'pivotconfigform' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotconfigform,event' },
            { name: 'focusenter', parameters: 'pivotconfigform,event' },
            { name: 'focusleave', parameters: 'pivotconfigform,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotconfigform,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotconfigform,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotconfigform,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'pivotconfigform,context' },
            { name: 'resizedragcancel', parameters: 'pivotconfigform,context' },
            { name: 'resizedragend', parameters: 'pivotconfigform,context' },
            { name: 'resizedragstart', parameters: 'pivotconfigform,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'pivotconfigform,result,e' },
            { name: 'tofront', parameters: 'pivotconfigform' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_pivot_plugin_configurator_Form;
    }(Ext_form_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_pivot_plugin_configurator_Form.EVENTNAMES);
    //    return Ext_form_Panel.getEventNames(eventnames);
    //}

    var ExtPivotconfigformMetaData = /** @class */ (function (_super) {
        __extends(ExtPivotconfigformMetaData, _super);
        function ExtPivotconfigformMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPivotconfigformMetaData.getAll = function () {
            ExtPivotconfigformMetaData.PROPERTIES = Ext_pivot_plugin_configurator_Form.getProperties(ExtPivotconfigformMetaData.PROPERTIES);
            ExtPivotconfigformMetaData.EVENTS = Ext_pivot_plugin_configurator_Form.getEvents(ExtPivotconfigformMetaData.EVENTS);
            ExtPivotconfigformMetaData.EVENTS.forEach(function (event) {
                ExtPivotconfigformMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPivotconfigformMetaData.PROPERTIES = [];
        ExtPivotconfigformMetaData.EVENTS = [];
        ExtPivotconfigformMetaData.EVENTNAMES = [];
        return ExtPivotconfigformMetaData;
    }(Ext_pivot_plugin_configurator_Form));
    (function () { ExtPivotconfigformMetaData.getAll(); })();
    var ExtPivotconfigformComponent = /** @class */ (function (_super) {
        __extends(ExtPivotconfigformComponent, _super);
        function ExtPivotconfigformComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPivotconfigformMetaData.PROPERTIES, ExtPivotconfigformMetaData.EVENTS) || this;
            _this.xtype = 'pivotconfigform';
            return _this;
        }
        ExtPivotconfigformComponent_1 = ExtPivotconfigformComponent;
        ExtPivotconfigformComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPivotconfigformComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPivotconfigformComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPivotconfigformComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPivotconfigformComponent_1;
        ExtPivotconfigformComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPivotconfigformComponent = ExtPivotconfigformComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pivotconfigform',
                inputs: ExtPivotconfigformMetaData.PROPERTIES,
                outputs: ExtPivotconfigformMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPivotconfigformComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPivotconfigformComponent);
        return ExtPivotconfigformComponent;
    }(EngBase));

    var Ext_pivot_plugin_configurator_Panel = /** @class */ (function (_super) {
        __extends(Ext_pivot_plugin_configurator_Panel, _super);
        function Ext_pivot_plugin_configurator_Panel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_pivot_plugin_configurator_Panel.getProperties = function (properties) {
            properties = properties.concat(Ext_pivot_plugin_configurator_Panel.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_pivot_plugin_configurator_Panel.getEvents = function (events) {
            events = events.concat(Ext_pivot_plugin_configurator_Panel.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_pivot_plugin_configurator_Panel.PROPERTIES = [
            'panelAggFieldsText',
            'panelAggFieldsTitle',
            'panelAllFieldsText',
            'panelAllFieldsTitle',
            'panelLeftFieldsText',
            'panelLeftFieldsTitle',
            'panelTopFieldsText',
            'panelTopFieldsTitle',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_pivot_plugin_configurator_Panel.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotconfigpanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotconfigpanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'pivotconfigpanel' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'pivotconfigpanel' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'pivotconfigpanel,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivotconfigpanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotconfigpanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'pivotconfigpanel' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigpanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'pivotconfigpanel' },
            { name: 'drawershow', parameters: 'pivotconfigpanel' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'pivotconfigpanel' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotconfigpanel,event' },
            { name: 'focusenter', parameters: 'pivotconfigpanel,event' },
            { name: 'focusleave', parameters: 'pivotconfigpanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotconfigpanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotconfigpanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotconfigpanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'pivotconfigpanel,context' },
            { name: 'resizedragcancel', parameters: 'pivotconfigpanel,context' },
            { name: 'resizedragend', parameters: 'pivotconfigpanel,context' },
            { name: 'resizedragstart', parameters: 'pivotconfigpanel,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivotconfigpanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_pivot_plugin_configurator_Panel;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_pivot_plugin_configurator_Panel.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var ExtPivotconfigpanelMetaData = /** @class */ (function (_super) {
        __extends(ExtPivotconfigpanelMetaData, _super);
        function ExtPivotconfigpanelMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPivotconfigpanelMetaData.getAll = function () {
            ExtPivotconfigpanelMetaData.PROPERTIES = Ext_pivot_plugin_configurator_Panel.getProperties(ExtPivotconfigpanelMetaData.PROPERTIES);
            ExtPivotconfigpanelMetaData.EVENTS = Ext_pivot_plugin_configurator_Panel.getEvents(ExtPivotconfigpanelMetaData.EVENTS);
            ExtPivotconfigpanelMetaData.EVENTS.forEach(function (event) {
                ExtPivotconfigpanelMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPivotconfigpanelMetaData.PROPERTIES = [];
        ExtPivotconfigpanelMetaData.EVENTS = [];
        ExtPivotconfigpanelMetaData.EVENTNAMES = [];
        return ExtPivotconfigpanelMetaData;
    }(Ext_pivot_plugin_configurator_Panel));
    (function () { ExtPivotconfigpanelMetaData.getAll(); })();
    var ExtPivotconfigpanelComponent = /** @class */ (function (_super) {
        __extends(ExtPivotconfigpanelComponent, _super);
        function ExtPivotconfigpanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPivotconfigpanelMetaData.PROPERTIES, ExtPivotconfigpanelMetaData.EVENTS) || this;
            _this.xtype = 'pivotconfigpanel';
            return _this;
        }
        ExtPivotconfigpanelComponent_1 = ExtPivotconfigpanelComponent;
        ExtPivotconfigpanelComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPivotconfigpanelComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPivotconfigpanelComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPivotconfigpanelComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPivotconfigpanelComponent_1;
        ExtPivotconfigpanelComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPivotconfigpanelComponent = ExtPivotconfigpanelComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pivotconfigpanel',
                inputs: ExtPivotconfigpanelMetaData.PROPERTIES,
                outputs: ExtPivotconfigpanelMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPivotconfigpanelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPivotconfigpanelComponent);
        return ExtPivotconfigpanelComponent;
    }(EngBase));

    var Ext_pivot_plugin_configurator_Settings = /** @class */ (function (_super) {
        __extends(Ext_pivot_plugin_configurator_Settings, _super);
        function Ext_pivot_plugin_configurator_Settings() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_pivot_plugin_configurator_Settings.getProperties = function (properties) {
            properties = properties.concat(Ext_pivot_plugin_configurator_Settings.PROPERTIES);
            return Ext_form_Panel.getProperties(properties);
        };
        Ext_pivot_plugin_configurator_Settings.getEvents = function (events) {
            events = events.concat(Ext_pivot_plugin_configurator_Settings.EVENTS);
            return Ext_form_Panel.getEvents(events);
        };
        Ext_pivot_plugin_configurator_Settings.PROPERTIES = [
            'controller',
            'defaults',
            'hideAnimation',
            'listeners',
            'showAnimation',
            'viewModel',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_pivot_plugin_configurator_Settings.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotsettings,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotsettings,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'pivotsettings' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'pivotsettings' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'pivotsettings,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'pivotsettings,values,options,e' },
            { name: 'beforetofront', parameters: 'pivotsettings' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotsettings,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'pivotsettings' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotsettings,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'pivotsettings,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'pivotsettings' },
            { name: 'drawershow', parameters: 'pivotsettings' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'pivotsettings,result' },
            { name: 'expand', parameters: 'pivotsettings' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotsettings,event' },
            { name: 'focusenter', parameters: 'pivotsettings,event' },
            { name: 'focusleave', parameters: 'pivotsettings,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotsettings,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotsettings,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotsettings,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'pivotsettings,context' },
            { name: 'resizedragcancel', parameters: 'pivotsettings,context' },
            { name: 'resizedragend', parameters: 'pivotsettings,context' },
            { name: 'resizedragstart', parameters: 'pivotsettings,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'pivotsettings,result,e' },
            { name: 'tofront', parameters: 'pivotsettings' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_pivot_plugin_configurator_Settings;
    }(Ext_form_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_pivot_plugin_configurator_Settings.EVENTNAMES);
    //    return Ext_form_Panel.getEventNames(eventnames);
    //}

    var ExtPivotsettingsMetaData = /** @class */ (function (_super) {
        __extends(ExtPivotsettingsMetaData, _super);
        function ExtPivotsettingsMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPivotsettingsMetaData.getAll = function () {
            ExtPivotsettingsMetaData.PROPERTIES = Ext_pivot_plugin_configurator_Settings.getProperties(ExtPivotsettingsMetaData.PROPERTIES);
            ExtPivotsettingsMetaData.EVENTS = Ext_pivot_plugin_configurator_Settings.getEvents(ExtPivotsettingsMetaData.EVENTS);
            ExtPivotsettingsMetaData.EVENTS.forEach(function (event) {
                ExtPivotsettingsMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPivotsettingsMetaData.PROPERTIES = [];
        ExtPivotsettingsMetaData.EVENTS = [];
        ExtPivotsettingsMetaData.EVENTNAMES = [];
        return ExtPivotsettingsMetaData;
    }(Ext_pivot_plugin_configurator_Settings));
    (function () { ExtPivotsettingsMetaData.getAll(); })();
    var ExtPivotsettingsComponent = /** @class */ (function (_super) {
        __extends(ExtPivotsettingsComponent, _super);
        function ExtPivotsettingsComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPivotsettingsMetaData.PROPERTIES, ExtPivotsettingsMetaData.EVENTS) || this;
            _this.xtype = 'pivotsettings';
            return _this;
        }
        ExtPivotsettingsComponent_1 = ExtPivotsettingsComponent;
        ExtPivotsettingsComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPivotsettingsComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPivotsettingsComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPivotsettingsComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPivotsettingsComponent_1;
        ExtPivotsettingsComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPivotsettingsComponent = ExtPivotsettingsComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pivotsettings',
                inputs: ExtPivotsettingsMetaData.PROPERTIES,
                outputs: ExtPivotsettingsMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPivotsettingsComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPivotsettingsComponent);
        return ExtPivotsettingsComponent;
    }(EngBase));

    var Ext_pivot_plugin_rangeeditor_Panel = /** @class */ (function (_super) {
        __extends(Ext_pivot_plugin_rangeeditor_Panel, _super);
        function Ext_pivot_plugin_rangeeditor_Panel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_pivot_plugin_rangeeditor_Panel.getProperties = function (properties) {
            properties = properties.concat(Ext_pivot_plugin_rangeeditor_Panel.PROPERTIES);
            return Ext_form_Panel.getProperties(properties);
        };
        Ext_pivot_plugin_rangeeditor_Panel.getEvents = function (events) {
            events = events.concat(Ext_pivot_plugin_rangeeditor_Panel.EVENTS);
            return Ext_form_Panel.getEvents(events);
        };
        Ext_pivot_plugin_rangeeditor_Panel.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_pivot_plugin_rangeeditor_Panel.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,pivotrangeeditor,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'pivotrangeeditor,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'pivotrangeeditor' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'pivotrangeeditor' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'pivotrangeeditor,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforesubmit', parameters: 'pivotrangeeditor,values,options,e' },
            { name: 'beforetofront', parameters: 'pivotrangeeditor' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotrangeeditor,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'pivotrangeeditor' },
            { name: 'deactivate', parameters: 'oldActiveItem,pivotrangeeditor,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'pivotrangeeditor,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'pivotrangeeditor' },
            { name: 'drawershow', parameters: 'pivotrangeeditor' },
            { name: 'erased', parameters: 'sender' },
            { name: 'exception', parameters: 'pivotrangeeditor,result' },
            { name: 'expand', parameters: 'pivotrangeeditor' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotrangeeditor,event' },
            { name: 'focusenter', parameters: 'pivotrangeeditor,event' },
            { name: 'focusleave', parameters: 'pivotrangeeditor,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'pivotrangeeditor,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'pivotrangeeditor,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'pivotrangeeditor,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'pivotrangeeditor,context' },
            { name: 'resizedragcancel', parameters: 'pivotrangeeditor,context' },
            { name: 'resizedragend', parameters: 'pivotrangeeditor,context' },
            { name: 'resizedragstart', parameters: 'pivotrangeeditor,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'submit', parameters: 'pivotrangeeditor,result,e' },
            { name: 'tofront', parameters: 'pivotrangeeditor' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_pivot_plugin_rangeeditor_Panel;
    }(Ext_form_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_pivot_plugin_rangeeditor_Panel.EVENTNAMES);
    //    return Ext_form_Panel.getEventNames(eventnames);
    //}

    var ExtPivotrangeeditorMetaData = /** @class */ (function (_super) {
        __extends(ExtPivotrangeeditorMetaData, _super);
        function ExtPivotrangeeditorMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPivotrangeeditorMetaData.getAll = function () {
            ExtPivotrangeeditorMetaData.PROPERTIES = Ext_pivot_plugin_rangeeditor_Panel.getProperties(ExtPivotrangeeditorMetaData.PROPERTIES);
            ExtPivotrangeeditorMetaData.EVENTS = Ext_pivot_plugin_rangeeditor_Panel.getEvents(ExtPivotrangeeditorMetaData.EVENTS);
            ExtPivotrangeeditorMetaData.EVENTS.forEach(function (event) {
                ExtPivotrangeeditorMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPivotrangeeditorMetaData.PROPERTIES = [];
        ExtPivotrangeeditorMetaData.EVENTS = [];
        ExtPivotrangeeditorMetaData.EVENTNAMES = [];
        return ExtPivotrangeeditorMetaData;
    }(Ext_pivot_plugin_rangeeditor_Panel));
    (function () { ExtPivotrangeeditorMetaData.getAll(); })();
    var ExtPivotrangeeditorComponent = /** @class */ (function (_super) {
        __extends(ExtPivotrangeeditorComponent, _super);
        function ExtPivotrangeeditorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPivotrangeeditorMetaData.PROPERTIES, ExtPivotrangeeditorMetaData.EVENTS) || this;
            _this.xtype = 'pivotrangeeditor';
            return _this;
        }
        ExtPivotrangeeditorComponent_1 = ExtPivotrangeeditorComponent;
        ExtPivotrangeeditorComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPivotrangeeditorComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPivotrangeeditorComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPivotrangeeditorComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPivotrangeeditorComponent_1;
        ExtPivotrangeeditorComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPivotrangeeditorComponent = ExtPivotrangeeditorComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pivotrangeeditor',
                inputs: ExtPivotrangeeditorMetaData.PROPERTIES,
                outputs: ExtPivotrangeeditorMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPivotrangeeditorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPivotrangeeditorComponent);
        return ExtPivotrangeeditorComponent;
    }(EngBase));

    var Ext_pivot_Row = /** @class */ (function (_super) {
        __extends(Ext_pivot_Row, _super);
        function Ext_pivot_Row() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_pivot_Row.getProperties = function (properties) {
            properties = properties.concat(Ext_pivot_Row.PROPERTIES);
            return Ext_grid_Row.getProperties(properties);
        };
        Ext_pivot_Row.getEvents = function (events) {
            events = events.concat(Ext_pivot_Row.EVENTS);
            return Ext_grid_Row.getEvents(events);
        };
        Ext_pivot_Row.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_pivot_Row.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'pivotgridrow' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'pivotgridrow,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'pivotgridrow,event' },
            { name: 'focusenter', parameters: 'pivotgridrow,event' },
            { name: 'focusleave', parameters: 'pivotgridrow,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'pivotgridrow' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_pivot_Row;
    }(Ext_grid_Row));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_pivot_Row.EVENTNAMES);
    //    return Ext_grid_Row.getEventNames(eventnames);
    //}

    var ExtPivotgridrowMetaData = /** @class */ (function (_super) {
        __extends(ExtPivotgridrowMetaData, _super);
        function ExtPivotgridrowMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtPivotgridrowMetaData.getAll = function () {
            ExtPivotgridrowMetaData.PROPERTIES = Ext_pivot_Row.getProperties(ExtPivotgridrowMetaData.PROPERTIES);
            ExtPivotgridrowMetaData.EVENTS = Ext_pivot_Row.getEvents(ExtPivotgridrowMetaData.EVENTS);
            ExtPivotgridrowMetaData.EVENTS.forEach(function (event) {
                ExtPivotgridrowMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtPivotgridrowMetaData.PROPERTIES = [];
        ExtPivotgridrowMetaData.EVENTS = [];
        ExtPivotgridrowMetaData.EVENTNAMES = [];
        return ExtPivotgridrowMetaData;
    }(Ext_pivot_Row));
    (function () { ExtPivotgridrowMetaData.getAll(); })();
    var ExtPivotgridrowComponent = /** @class */ (function (_super) {
        __extends(ExtPivotgridrowComponent, _super);
        function ExtPivotgridrowComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtPivotgridrowMetaData.PROPERTIES, ExtPivotgridrowMetaData.EVENTS) || this;
            _this.xtype = 'pivotgridrow';
            return _this;
        }
        ExtPivotgridrowComponent_1 = ExtPivotgridrowComponent;
        ExtPivotgridrowComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtPivotgridrowComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtPivotgridrowComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtPivotgridrowComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtPivotgridrowComponent_1;
        ExtPivotgridrowComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtPivotgridrowComponent = ExtPivotgridrowComponent_1 = __decorate([
            core.Component({
                selector: 'ext-pivotgridrow',
                inputs: ExtPivotgridrowMetaData.PROPERTIES,
                outputs: ExtPivotgridrowMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtPivotgridrowComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtPivotgridrowComponent);
        return ExtPivotgridrowComponent;
    }(EngBase));

    var Ext_ProgressBarWidget = /** @class */ (function (_super) {
        __extends(Ext_ProgressBarWidget, _super);
        function Ext_ProgressBarWidget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_ProgressBarWidget.getProperties = function (properties) {
            properties = properties.concat(Ext_ProgressBarWidget.PROPERTIES);
            return Ext_Gadget.getProperties(properties);
        };
        Ext_ProgressBarWidget.getEvents = function (events) {
            events = events.concat(Ext_ProgressBarWidget.EVENTS);
            return Ext_Gadget.getEvents(events);
        };
        Ext_ProgressBarWidget.PROPERTIES = [
            'animate',
            'text',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_ProgressBarWidget.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'progress' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'progress,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'progress,event' },
            { name: 'focusenter', parameters: 'progress,event' },
            { name: 'focusleave', parameters: 'progress,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'progress' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_ProgressBarWidget;
    }(Ext_Gadget));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_ProgressBarWidget.EVENTNAMES);
    //    return Ext_Gadget.getEventNames(eventnames);
    //}

    var ExtProgressMetaData = /** @class */ (function (_super) {
        __extends(ExtProgressMetaData, _super);
        function ExtProgressMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtProgressMetaData.getAll = function () {
            ExtProgressMetaData.PROPERTIES = Ext_ProgressBarWidget.getProperties(ExtProgressMetaData.PROPERTIES);
            ExtProgressMetaData.EVENTS = Ext_ProgressBarWidget.getEvents(ExtProgressMetaData.EVENTS);
            ExtProgressMetaData.EVENTS.forEach(function (event) {
                ExtProgressMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtProgressMetaData.PROPERTIES = [];
        ExtProgressMetaData.EVENTS = [];
        ExtProgressMetaData.EVENTNAMES = [];
        return ExtProgressMetaData;
    }(Ext_ProgressBarWidget));
    (function () { ExtProgressMetaData.getAll(); })();
    var ExtProgressComponent = /** @class */ (function (_super) {
        __extends(ExtProgressComponent, _super);
        function ExtProgressComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtProgressMetaData.PROPERTIES, ExtProgressMetaData.EVENTS) || this;
            _this.xtype = 'progress';
            return _this;
        }
        ExtProgressComponent_1 = ExtProgressComponent;
        ExtProgressComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtProgressComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtProgressComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtProgressComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtProgressComponent_1;
        ExtProgressComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtProgressComponent = ExtProgressComponent_1 = __decorate([
            core.Component({
                selector: 'ext-progress',
                inputs: ExtProgressMetaData.PROPERTIES,
                outputs: ExtProgressMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtProgressComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtProgressComponent);
        return ExtProgressComponent;
    }(EngBase));

    var Ext_button_Segmented = /** @class */ (function (_super) {
        __extends(Ext_button_Segmented, _super);
        function Ext_button_Segmented() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_button_Segmented.getProperties = function (properties) {
            properties = properties.concat(Ext_button_Segmented.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_button_Segmented.getEvents = function (events) {
            events = events.concat(Ext_button_Segmented.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_button_Segmented.PROPERTIES = [
            'allowDepress',
            'allowMultiple',
            'allowToggle',
            'autoSize',
            'defaults',
            'defaultType',
            'defaultUI',
            'forceSelection',
            'layout',
            'pressedButtons',
            'publishes',
            'twoWayBindable',
            'value',
            'vertical',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_button_Segmented.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,segmentedbutton,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'segmentedbutton,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'segmentedbutton' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'segmentedbutton,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'segmentedbutton,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,segmentedbutton,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'segmentedbutton,event' },
            { name: 'focusenter', parameters: 'segmentedbutton,event' },
            { name: 'focusleave', parameters: 'segmentedbutton,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'segmentedbutton,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'segmentedbutton,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'segmentedbutton,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'segmentedbutton' },
            { name: 'toggle', parameters: 'segmentedbutton,button,isPressed' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_button_Segmented;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_button_Segmented.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var ExtSegmentedbuttonMetaData = /** @class */ (function (_super) {
        __extends(ExtSegmentedbuttonMetaData, _super);
        function ExtSegmentedbuttonMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSegmentedbuttonMetaData.getAll = function () {
            ExtSegmentedbuttonMetaData.PROPERTIES = Ext_button_Segmented.getProperties(ExtSegmentedbuttonMetaData.PROPERTIES);
            ExtSegmentedbuttonMetaData.EVENTS = Ext_button_Segmented.getEvents(ExtSegmentedbuttonMetaData.EVENTS);
            ExtSegmentedbuttonMetaData.EVENTS.forEach(function (event) {
                ExtSegmentedbuttonMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSegmentedbuttonMetaData.PROPERTIES = [];
        ExtSegmentedbuttonMetaData.EVENTS = [];
        ExtSegmentedbuttonMetaData.EVENTNAMES = [];
        return ExtSegmentedbuttonMetaData;
    }(Ext_button_Segmented));
    (function () { ExtSegmentedbuttonMetaData.getAll(); })();
    var ExtSegmentedbuttonComponent = /** @class */ (function (_super) {
        __extends(ExtSegmentedbuttonComponent, _super);
        function ExtSegmentedbuttonComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSegmentedbuttonMetaData.PROPERTIES, ExtSegmentedbuttonMetaData.EVENTS) || this;
            _this.xtype = 'segmentedbutton';
            return _this;
        }
        ExtSegmentedbuttonComponent_1 = ExtSegmentedbuttonComponent;
        ExtSegmentedbuttonComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSegmentedbuttonComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSegmentedbuttonComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSegmentedbuttonComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSegmentedbuttonComponent_1;
        ExtSegmentedbuttonComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSegmentedbuttonComponent = ExtSegmentedbuttonComponent_1 = __decorate([
            core.Component({
                selector: 'ext-segmentedbutton',
                inputs: ExtSegmentedbuttonMetaData.PROPERTIES,
                outputs: ExtSegmentedbuttonMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSegmentedbuttonComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSegmentedbuttonComponent);
        return ExtSegmentedbuttonComponent;
    }(EngBase));

    var ExtSheetMetaData = /** @class */ (function (_super) {
        __extends(ExtSheetMetaData, _super);
        function ExtSheetMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSheetMetaData.getAll = function () {
            ExtSheetMetaData.PROPERTIES = Ext_Sheet.getProperties(ExtSheetMetaData.PROPERTIES);
            ExtSheetMetaData.EVENTS = Ext_Sheet.getEvents(ExtSheetMetaData.EVENTS);
            ExtSheetMetaData.EVENTS.forEach(function (event) {
                ExtSheetMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSheetMetaData.PROPERTIES = [];
        ExtSheetMetaData.EVENTS = [];
        ExtSheetMetaData.EVENTNAMES = [];
        return ExtSheetMetaData;
    }(Ext_Sheet));
    (function () { ExtSheetMetaData.getAll(); })();
    var ExtSheetComponent = /** @class */ (function (_super) {
        __extends(ExtSheetComponent, _super);
        function ExtSheetComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSheetMetaData.PROPERTIES, ExtSheetMetaData.EVENTS) || this;
            _this.xtype = 'sheet';
            return _this;
        }
        ExtSheetComponent_1 = ExtSheetComponent;
        ExtSheetComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSheetComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSheetComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSheetComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSheetComponent_1;
        ExtSheetComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSheetComponent = ExtSheetComponent_1 = __decorate([
            core.Component({
                selector: 'ext-sheet',
                inputs: ExtSheetMetaData.PROPERTIES,
                outputs: ExtSheetMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSheetComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSheetComponent);
        return ExtSheetComponent;
    }(EngBase));

    var Ext_slider_Slider = /** @class */ (function (_super) {
        __extends(Ext_slider_Slider, _super);
        function Ext_slider_Slider() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_slider_Slider.getProperties = function (properties) {
            properties = properties.concat(Ext_slider_Slider.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_slider_Slider.getEvents = function (events) {
            events = events.concat(Ext_slider_Slider.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_slider_Slider.PROPERTIES = [
            'allowThumbsOverlapping',
            'animation',
            'increment',
            'maxValue',
            'minValue',
            'readOnly',
            'thumbDefaults',
            'value',
            'valueIsArray',
            'values',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_slider_Slider.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'slider' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'slider,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'slider,thumb,newValue,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: 'slider,thumb,e' },
            { name: 'dragend', parameters: 'slider,thumb,value,e' },
            { name: 'dragstart', parameters: 'slider,thumb,value,e' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'slider,event' },
            { name: 'focusenter', parameters: 'slider,event' },
            { name: 'focusleave', parameters: 'slider,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'slider' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_slider_Slider;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_slider_Slider.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtSliderMetaData = /** @class */ (function (_super) {
        __extends(ExtSliderMetaData, _super);
        function ExtSliderMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSliderMetaData.getAll = function () {
            ExtSliderMetaData.PROPERTIES = Ext_slider_Slider.getProperties(ExtSliderMetaData.PROPERTIES);
            ExtSliderMetaData.EVENTS = Ext_slider_Slider.getEvents(ExtSliderMetaData.EVENTS);
            ExtSliderMetaData.EVENTS.forEach(function (event) {
                ExtSliderMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSliderMetaData.PROPERTIES = [];
        ExtSliderMetaData.EVENTS = [];
        ExtSliderMetaData.EVENTNAMES = [];
        return ExtSliderMetaData;
    }(Ext_slider_Slider));
    (function () { ExtSliderMetaData.getAll(); })();
    var ExtSliderComponent = /** @class */ (function (_super) {
        __extends(ExtSliderComponent, _super);
        function ExtSliderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSliderMetaData.PROPERTIES, ExtSliderMetaData.EVENTS) || this;
            _this.xtype = 'slider';
            return _this;
        }
        ExtSliderComponent_1 = ExtSliderComponent;
        ExtSliderComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSliderComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSliderComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSliderComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSliderComponent_1;
        ExtSliderComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSliderComponent = ExtSliderComponent_1 = __decorate([
            core.Component({
                selector: 'ext-slider',
                inputs: ExtSliderMetaData.PROPERTIES,
                outputs: ExtSliderMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSliderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSliderComponent);
        return ExtSliderComponent;
    }(EngBase));

    var Ext_slider_Thumb = /** @class */ (function (_super) {
        __extends(Ext_slider_Thumb, _super);
        function Ext_slider_Thumb() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_slider_Thumb.getProperties = function (properties) {
            properties = properties.concat(Ext_slider_Thumb.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_slider_Thumb.getEvents = function (events) {
            events = events.concat(Ext_slider_Thumb.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_slider_Thumb.PROPERTIES = [
            'draggable',
            'fillCls',
            'fillTrack',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_slider_Thumb.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'thumb' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'thumb,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'thumb,event' },
            { name: 'focusenter', parameters: 'thumb,event' },
            { name: 'focusleave', parameters: 'thumb,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'thumb' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_slider_Thumb;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_slider_Thumb.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtThumbMetaData = /** @class */ (function (_super) {
        __extends(ExtThumbMetaData, _super);
        function ExtThumbMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtThumbMetaData.getAll = function () {
            ExtThumbMetaData.PROPERTIES = Ext_slider_Thumb.getProperties(ExtThumbMetaData.PROPERTIES);
            ExtThumbMetaData.EVENTS = Ext_slider_Thumb.getEvents(ExtThumbMetaData.EVENTS);
            ExtThumbMetaData.EVENTS.forEach(function (event) {
                ExtThumbMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtThumbMetaData.PROPERTIES = [];
        ExtThumbMetaData.EVENTS = [];
        ExtThumbMetaData.EVENTNAMES = [];
        return ExtThumbMetaData;
    }(Ext_slider_Thumb));
    (function () { ExtThumbMetaData.getAll(); })();
    var ExtThumbComponent = /** @class */ (function (_super) {
        __extends(ExtThumbComponent, _super);
        function ExtThumbComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtThumbMetaData.PROPERTIES, ExtThumbMetaData.EVENTS) || this;
            _this.xtype = 'thumb';
            return _this;
        }
        ExtThumbComponent_1 = ExtThumbComponent;
        ExtThumbComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtThumbComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtThumbComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtThumbComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtThumbComponent_1;
        ExtThumbComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtThumbComponent = ExtThumbComponent_1 = __decorate([
            core.Component({
                selector: 'ext-thumb',
                inputs: ExtThumbMetaData.PROPERTIES,
                outputs: ExtThumbMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtThumbComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtThumbComponent);
        return ExtThumbComponent;
    }(EngBase));

    var Ext_slider_Toggle = /** @class */ (function (_super) {
        __extends(Ext_slider_Toggle, _super);
        function Ext_slider_Toggle() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_slider_Toggle.getProperties = function (properties) {
            properties = properties.concat(Ext_slider_Toggle.PROPERTIES);
            return Ext_slider_Slider.getProperties(properties);
        };
        Ext_slider_Toggle.getEvents = function (events) {
            events = events.concat(Ext_slider_Toggle.EVENTS);
            return Ext_slider_Slider.getEvents(events);
        };
        Ext_slider_Toggle.PROPERTIES = [
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_slider_Toggle.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'toggleslider' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'toggleslider,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'toggleslider,thumb,newValue,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drag', parameters: 'toggleslider,thumb,e' },
            { name: 'dragend', parameters: 'toggleslider,thumb,value,e' },
            { name: 'dragstart', parameters: 'toggleslider,thumb,value,e' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'toggleslider,event' },
            { name: 'focusenter', parameters: 'toggleslider,event' },
            { name: 'focusleave', parameters: 'toggleslider,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'toggleslider' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_slider_Toggle;
    }(Ext_slider_Slider));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_slider_Toggle.EVENTNAMES);
    //    return Ext_slider_Slider.getEventNames(eventnames);
    //}

    var ExtTogglesliderMetaData = /** @class */ (function (_super) {
        __extends(ExtTogglesliderMetaData, _super);
        function ExtTogglesliderMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTogglesliderMetaData.getAll = function () {
            ExtTogglesliderMetaData.PROPERTIES = Ext_slider_Toggle.getProperties(ExtTogglesliderMetaData.PROPERTIES);
            ExtTogglesliderMetaData.EVENTS = Ext_slider_Toggle.getEvents(ExtTogglesliderMetaData.EVENTS);
            ExtTogglesliderMetaData.EVENTS.forEach(function (event) {
                ExtTogglesliderMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTogglesliderMetaData.PROPERTIES = [];
        ExtTogglesliderMetaData.EVENTS = [];
        ExtTogglesliderMetaData.EVENTNAMES = [];
        return ExtTogglesliderMetaData;
    }(Ext_slider_Toggle));
    (function () { ExtTogglesliderMetaData.getAll(); })();
    var ExtTogglesliderComponent = /** @class */ (function (_super) {
        __extends(ExtTogglesliderComponent, _super);
        function ExtTogglesliderComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTogglesliderMetaData.PROPERTIES, ExtTogglesliderMetaData.EVENTS) || this;
            _this.xtype = 'toggleslider';
            return _this;
        }
        ExtTogglesliderComponent_1 = ExtTogglesliderComponent;
        ExtTogglesliderComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTogglesliderComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTogglesliderComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTogglesliderComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTogglesliderComponent_1;
        ExtTogglesliderComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTogglesliderComponent = ExtTogglesliderComponent_1 = __decorate([
            core.Component({
                selector: 'ext-toggleslider',
                inputs: ExtTogglesliderMetaData.PROPERTIES,
                outputs: ExtTogglesliderMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTogglesliderComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTogglesliderComponent);
        return ExtTogglesliderComponent;
    }(EngBase));

    var Ext_Spacer = /** @class */ (function (_super) {
        __extends(Ext_Spacer, _super);
        function Ext_Spacer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Spacer.getProperties = function (properties) {
            properties = properties.concat(Ext_Spacer.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_Spacer.getEvents = function (events) {
            events = events.concat(Ext_Spacer.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_Spacer.PROPERTIES = [
            'flex',
            'width',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Spacer.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'spacer' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'spacer,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'spacer,event' },
            { name: 'focusenter', parameters: 'spacer,event' },
            { name: 'focusleave', parameters: 'spacer,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'spacer' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Spacer;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Spacer.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtSpacerMetaData = /** @class */ (function (_super) {
        __extends(ExtSpacerMetaData, _super);
        function ExtSpacerMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSpacerMetaData.getAll = function () {
            ExtSpacerMetaData.PROPERTIES = Ext_Spacer.getProperties(ExtSpacerMetaData.PROPERTIES);
            ExtSpacerMetaData.EVENTS = Ext_Spacer.getEvents(ExtSpacerMetaData.EVENTS);
            ExtSpacerMetaData.EVENTS.forEach(function (event) {
                ExtSpacerMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSpacerMetaData.PROPERTIES = [];
        ExtSpacerMetaData.EVENTS = [];
        ExtSpacerMetaData.EVENTNAMES = [];
        return ExtSpacerMetaData;
    }(Ext_Spacer));
    (function () { ExtSpacerMetaData.getAll(); })();
    var ExtSpacerComponent = /** @class */ (function (_super) {
        __extends(ExtSpacerComponent, _super);
        function ExtSpacerComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSpacerMetaData.PROPERTIES, ExtSpacerMetaData.EVENTS) || this;
            _this.xtype = 'spacer';
            return _this;
        }
        ExtSpacerComponent_1 = ExtSpacerComponent;
        ExtSpacerComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSpacerComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSpacerComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSpacerComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSpacerComponent_1;
        ExtSpacerComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSpacerComponent = ExtSpacerComponent_1 = __decorate([
            core.Component({
                selector: 'ext-spacer',
                inputs: ExtSpacerMetaData.PROPERTIES,
                outputs: ExtSpacerMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSpacerComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSpacerComponent);
        return ExtSpacerComponent;
    }(EngBase));

    var Ext_sparkline_Base = /** @class */ (function (_super) {
        __extends(Ext_sparkline_Base, _super);
        function Ext_sparkline_Base() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_sparkline_Base.getProperties = function (properties) {
            properties = properties.concat(Ext_sparkline_Base.PROPERTIES);
            return Ext_Gadget.getProperties(properties);
        };
        Ext_sparkline_Base.getEvents = function (events) {
            events = events.concat(Ext_sparkline_Base.EVENTS);
            return Ext_Gadget.getEvents(events);
        };
        Ext_sparkline_Base.PROPERTIES = [
            'disableTooltips',
            'highlightColor',
            'highlightLighten',
            'lineColor',
            'tipTpl',
            'tooltipPrefix',
            'tooltipSkipNull',
            'tooltipSuffix',
            'values',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_sparkline_Base.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparkline' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparkline,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparkline,event' },
            { name: 'focusenter', parameters: 'sparkline,event' },
            { name: 'focusleave', parameters: 'sparkline,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparkline' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_sparkline_Base;
    }(Ext_Gadget));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_sparkline_Base.EVENTNAMES);
    //    return Ext_Gadget.getEventNames(eventnames);
    //}

    var Ext_sparkline_BarBase = /** @class */ (function (_super) {
        __extends(Ext_sparkline_BarBase, _super);
        function Ext_sparkline_BarBase() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_sparkline_BarBase.getProperties = function (properties) {
            properties = properties.concat(Ext_sparkline_BarBase.PROPERTIES);
            return Ext_sparkline_Base.getProperties(properties);
        };
        Ext_sparkline_BarBase.getEvents = function (events) {
            events = events.concat(Ext_sparkline_BarBase.EVENTS);
            return Ext_sparkline_Base.getEvents(events);
        };
        Ext_sparkline_BarBase.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_sparkline_BarBase.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'undefined' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'undefined,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'undefined,event' },
            { name: 'focusenter', parameters: 'undefined,event' },
            { name: 'focusleave', parameters: 'undefined,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'undefined' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_sparkline_BarBase;
    }(Ext_sparkline_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_sparkline_BarBase.EVENTNAMES);
    //    return Ext_sparkline_Base.getEventNames(eventnames);
    //}

    var Ext_sparkline_Bar = /** @class */ (function (_super) {
        __extends(Ext_sparkline_Bar, _super);
        function Ext_sparkline_Bar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_sparkline_Bar.getProperties = function (properties) {
            properties = properties.concat(Ext_sparkline_Bar.PROPERTIES);
            return Ext_sparkline_BarBase.getProperties(properties);
        };
        Ext_sparkline_Bar.getEvents = function (events) {
            events = events.concat(Ext_sparkline_Bar.EVENTS);
            return Ext_sparkline_BarBase.getEvents(events);
        };
        Ext_sparkline_Bar.PROPERTIES = [
            'barColor',
            'barSpacing',
            'barWidth',
            'chartRangeClip',
            'chartRangeMax',
            'chartRangeMin',
            'colorMap',
            'negBarColor',
            'nullColor',
            'stackedBarColor',
            'tipTpl',
            'zeroAxis',
            'zeroColor',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_sparkline_Bar.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinebar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinebar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinebar,event' },
            { name: 'focusenter', parameters: 'sparklinebar,event' },
            { name: 'focusleave', parameters: 'sparklinebar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinebar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_sparkline_Bar;
    }(Ext_sparkline_BarBase));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_sparkline_Bar.EVENTNAMES);
    //    return Ext_sparkline_BarBase.getEventNames(eventnames);
    //}

    var ExtSparklinebarMetaData = /** @class */ (function (_super) {
        __extends(ExtSparklinebarMetaData, _super);
        function ExtSparklinebarMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSparklinebarMetaData.getAll = function () {
            ExtSparklinebarMetaData.PROPERTIES = Ext_sparkline_Bar.getProperties(ExtSparklinebarMetaData.PROPERTIES);
            ExtSparklinebarMetaData.EVENTS = Ext_sparkline_Bar.getEvents(ExtSparklinebarMetaData.EVENTS);
            ExtSparklinebarMetaData.EVENTS.forEach(function (event) {
                ExtSparklinebarMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSparklinebarMetaData.PROPERTIES = [];
        ExtSparklinebarMetaData.EVENTS = [];
        ExtSparklinebarMetaData.EVENTNAMES = [];
        return ExtSparklinebarMetaData;
    }(Ext_sparkline_Bar));
    (function () { ExtSparklinebarMetaData.getAll(); })();
    var ExtSparklinebarComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinebarComponent, _super);
        function ExtSparklinebarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSparklinebarMetaData.PROPERTIES, ExtSparklinebarMetaData.EVENTS) || this;
            _this.xtype = 'sparklinebar';
            return _this;
        }
        ExtSparklinebarComponent_1 = ExtSparklinebarComponent;
        ExtSparklinebarComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSparklinebarComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSparklinebarComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSparklinebarComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSparklinebarComponent_1;
        ExtSparklinebarComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSparklinebarComponent = ExtSparklinebarComponent_1 = __decorate([
            core.Component({
                selector: 'ext-sparklinebar',
                inputs: ExtSparklinebarMetaData.PROPERTIES,
                outputs: ExtSparklinebarMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSparklinebarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSparklinebarComponent);
        return ExtSparklinebarComponent;
    }(EngBase));

    var ExtSparklineMetaData = /** @class */ (function (_super) {
        __extends(ExtSparklineMetaData, _super);
        function ExtSparklineMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSparklineMetaData.getAll = function () {
            ExtSparklineMetaData.PROPERTIES = Ext_sparkline_Base.getProperties(ExtSparklineMetaData.PROPERTIES);
            ExtSparklineMetaData.EVENTS = Ext_sparkline_Base.getEvents(ExtSparklineMetaData.EVENTS);
            ExtSparklineMetaData.EVENTS.forEach(function (event) {
                ExtSparklineMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSparklineMetaData.PROPERTIES = [];
        ExtSparklineMetaData.EVENTS = [];
        ExtSparklineMetaData.EVENTNAMES = [];
        return ExtSparklineMetaData;
    }(Ext_sparkline_Base));
    (function () { ExtSparklineMetaData.getAll(); })();
    var ExtSparklineComponent = /** @class */ (function (_super) {
        __extends(ExtSparklineComponent, _super);
        function ExtSparklineComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSparklineMetaData.PROPERTIES, ExtSparklineMetaData.EVENTS) || this;
            _this.xtype = 'sparkline';
            return _this;
        }
        ExtSparklineComponent_1 = ExtSparklineComponent;
        ExtSparklineComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSparklineComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSparklineComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSparklineComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSparklineComponent_1;
        ExtSparklineComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSparklineComponent = ExtSparklineComponent_1 = __decorate([
            core.Component({
                selector: 'ext-sparkline',
                inputs: ExtSparklineMetaData.PROPERTIES,
                outputs: ExtSparklineMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSparklineComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSparklineComponent);
        return ExtSparklineComponent;
    }(EngBase));

    var Ext_sparkline_Box = /** @class */ (function (_super) {
        __extends(Ext_sparkline_Box, _super);
        function Ext_sparkline_Box() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_sparkline_Box.getProperties = function (properties) {
            properties = properties.concat(Ext_sparkline_Box.PROPERTIES);
            return Ext_sparkline_Base.getProperties(properties);
        };
        Ext_sparkline_Box.getEvents = function (events) {
            events = events.concat(Ext_sparkline_Box.EVENTS);
            return Ext_sparkline_Base.getEvents(events);
        };
        Ext_sparkline_Box.PROPERTIES = [
            'boxFillColor',
            'boxLineColor',
            'chartRangeMax',
            'chartRangeMin',
            'medianColor',
            'outlierFillColor',
            'outlierIQR',
            'outlierLineColor',
            'raw',
            'showOutliers',
            'spotRadius',
            'target',
            'targetColor',
            'whiskerColor',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_sparkline_Box.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinebox' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinebox,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinebox,event' },
            { name: 'focusenter', parameters: 'sparklinebox,event' },
            { name: 'focusleave', parameters: 'sparklinebox,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinebox' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_sparkline_Box;
    }(Ext_sparkline_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_sparkline_Box.EVENTNAMES);
    //    return Ext_sparkline_Base.getEventNames(eventnames);
    //}

    var ExtSparklineboxMetaData = /** @class */ (function (_super) {
        __extends(ExtSparklineboxMetaData, _super);
        function ExtSparklineboxMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSparklineboxMetaData.getAll = function () {
            ExtSparklineboxMetaData.PROPERTIES = Ext_sparkline_Box.getProperties(ExtSparklineboxMetaData.PROPERTIES);
            ExtSparklineboxMetaData.EVENTS = Ext_sparkline_Box.getEvents(ExtSparklineboxMetaData.EVENTS);
            ExtSparklineboxMetaData.EVENTS.forEach(function (event) {
                ExtSparklineboxMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSparklineboxMetaData.PROPERTIES = [];
        ExtSparklineboxMetaData.EVENTS = [];
        ExtSparklineboxMetaData.EVENTNAMES = [];
        return ExtSparklineboxMetaData;
    }(Ext_sparkline_Box));
    (function () { ExtSparklineboxMetaData.getAll(); })();
    var ExtSparklineboxComponent = /** @class */ (function (_super) {
        __extends(ExtSparklineboxComponent, _super);
        function ExtSparklineboxComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSparklineboxMetaData.PROPERTIES, ExtSparklineboxMetaData.EVENTS) || this;
            _this.xtype = 'sparklinebox';
            return _this;
        }
        ExtSparklineboxComponent_1 = ExtSparklineboxComponent;
        ExtSparklineboxComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSparklineboxComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSparklineboxComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSparklineboxComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSparklineboxComponent_1;
        ExtSparklineboxComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSparklineboxComponent = ExtSparklineboxComponent_1 = __decorate([
            core.Component({
                selector: 'ext-sparklinebox',
                inputs: ExtSparklineboxMetaData.PROPERTIES,
                outputs: ExtSparklineboxMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSparklineboxComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSparklineboxComponent);
        return ExtSparklineboxComponent;
    }(EngBase));

    var Ext_sparkline_Bullet = /** @class */ (function (_super) {
        __extends(Ext_sparkline_Bullet, _super);
        function Ext_sparkline_Bullet() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_sparkline_Bullet.getProperties = function (properties) {
            properties = properties.concat(Ext_sparkline_Bullet.PROPERTIES);
            return Ext_sparkline_Base.getProperties(properties);
        };
        Ext_sparkline_Bullet.getEvents = function (events) {
            events = events.concat(Ext_sparkline_Bullet.EVENTS);
            return Ext_sparkline_Base.getEvents(events);
        };
        Ext_sparkline_Bullet.PROPERTIES = [
            'base',
            'performanceColor',
            'rangeColors',
            'targetColor',
            'targetWidth',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_sparkline_Bullet.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinebullet' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinebullet,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinebullet,event' },
            { name: 'focusenter', parameters: 'sparklinebullet,event' },
            { name: 'focusleave', parameters: 'sparklinebullet,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinebullet' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_sparkline_Bullet;
    }(Ext_sparkline_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_sparkline_Bullet.EVENTNAMES);
    //    return Ext_sparkline_Base.getEventNames(eventnames);
    //}

    var ExtSparklinebulletMetaData = /** @class */ (function (_super) {
        __extends(ExtSparklinebulletMetaData, _super);
        function ExtSparklinebulletMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSparklinebulletMetaData.getAll = function () {
            ExtSparklinebulletMetaData.PROPERTIES = Ext_sparkline_Bullet.getProperties(ExtSparklinebulletMetaData.PROPERTIES);
            ExtSparklinebulletMetaData.EVENTS = Ext_sparkline_Bullet.getEvents(ExtSparklinebulletMetaData.EVENTS);
            ExtSparklinebulletMetaData.EVENTS.forEach(function (event) {
                ExtSparklinebulletMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSparklinebulletMetaData.PROPERTIES = [];
        ExtSparklinebulletMetaData.EVENTS = [];
        ExtSparklinebulletMetaData.EVENTNAMES = [];
        return ExtSparklinebulletMetaData;
    }(Ext_sparkline_Bullet));
    (function () { ExtSparklinebulletMetaData.getAll(); })();
    var ExtSparklinebulletComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinebulletComponent, _super);
        function ExtSparklinebulletComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSparklinebulletMetaData.PROPERTIES, ExtSparklinebulletMetaData.EVENTS) || this;
            _this.xtype = 'sparklinebullet';
            return _this;
        }
        ExtSparklinebulletComponent_1 = ExtSparklinebulletComponent;
        ExtSparklinebulletComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSparklinebulletComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSparklinebulletComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSparklinebulletComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSparklinebulletComponent_1;
        ExtSparklinebulletComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSparklinebulletComponent = ExtSparklinebulletComponent_1 = __decorate([
            core.Component({
                selector: 'ext-sparklinebullet',
                inputs: ExtSparklinebulletMetaData.PROPERTIES,
                outputs: ExtSparklinebulletMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSparklinebulletComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSparklinebulletComponent);
        return ExtSparklinebulletComponent;
    }(EngBase));

    var Ext_sparkline_Discrete = /** @class */ (function (_super) {
        __extends(Ext_sparkline_Discrete, _super);
        function Ext_sparkline_Discrete() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_sparkline_Discrete.getProperties = function (properties) {
            properties = properties.concat(Ext_sparkline_Discrete.PROPERTIES);
            return Ext_sparkline_BarBase.getProperties(properties);
        };
        Ext_sparkline_Discrete.getEvents = function (events) {
            events = events.concat(Ext_sparkline_Discrete.EVENTS);
            return Ext_sparkline_BarBase.getEvents(events);
        };
        Ext_sparkline_Discrete.PROPERTIES = [
            'chartRangeClip',
            'chartRangeMax',
            'chartRangeMin',
            'lineHeight',
            'thresholdColor',
            'thresholdValue',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_sparkline_Discrete.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinediscrete' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinediscrete,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinediscrete,event' },
            { name: 'focusenter', parameters: 'sparklinediscrete,event' },
            { name: 'focusleave', parameters: 'sparklinediscrete,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinediscrete' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_sparkline_Discrete;
    }(Ext_sparkline_BarBase));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_sparkline_Discrete.EVENTNAMES);
    //    return Ext_sparkline_BarBase.getEventNames(eventnames);
    //}

    var ExtSparklinediscreteMetaData = /** @class */ (function (_super) {
        __extends(ExtSparklinediscreteMetaData, _super);
        function ExtSparklinediscreteMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSparklinediscreteMetaData.getAll = function () {
            ExtSparklinediscreteMetaData.PROPERTIES = Ext_sparkline_Discrete.getProperties(ExtSparklinediscreteMetaData.PROPERTIES);
            ExtSparklinediscreteMetaData.EVENTS = Ext_sparkline_Discrete.getEvents(ExtSparklinediscreteMetaData.EVENTS);
            ExtSparklinediscreteMetaData.EVENTS.forEach(function (event) {
                ExtSparklinediscreteMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSparklinediscreteMetaData.PROPERTIES = [];
        ExtSparklinediscreteMetaData.EVENTS = [];
        ExtSparklinediscreteMetaData.EVENTNAMES = [];
        return ExtSparklinediscreteMetaData;
    }(Ext_sparkline_Discrete));
    (function () { ExtSparklinediscreteMetaData.getAll(); })();
    var ExtSparklinediscreteComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinediscreteComponent, _super);
        function ExtSparklinediscreteComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSparklinediscreteMetaData.PROPERTIES, ExtSparklinediscreteMetaData.EVENTS) || this;
            _this.xtype = 'sparklinediscrete';
            return _this;
        }
        ExtSparklinediscreteComponent_1 = ExtSparklinediscreteComponent;
        ExtSparklinediscreteComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSparklinediscreteComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSparklinediscreteComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSparklinediscreteComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSparklinediscreteComponent_1;
        ExtSparklinediscreteComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSparklinediscreteComponent = ExtSparklinediscreteComponent_1 = __decorate([
            core.Component({
                selector: 'ext-sparklinediscrete',
                inputs: ExtSparklinediscreteMetaData.PROPERTIES,
                outputs: ExtSparklinediscreteMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSparklinediscreteComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSparklinediscreteComponent);
        return ExtSparklinediscreteComponent;
    }(EngBase));

    var Ext_sparkline_Line = /** @class */ (function (_super) {
        __extends(Ext_sparkline_Line, _super);
        function Ext_sparkline_Line() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_sparkline_Line.getProperties = function (properties) {
            properties = properties.concat(Ext_sparkline_Line.PROPERTIES);
            return Ext_sparkline_Base.getProperties(properties);
        };
        Ext_sparkline_Line.getEvents = function (events) {
            events = events.concat(Ext_sparkline_Line.EVENTS);
            return Ext_sparkline_Base.getEvents(events);
        };
        Ext_sparkline_Line.PROPERTIES = [
            'chartRangeMax',
            'chartRangeMaxX',
            'chartRangeMin',
            'chartRangeMinX',
            'drawNormalOnTop',
            'fillColor',
            'highlightLineColor',
            'highlightSpotColor',
            'lineWidth',
            'maxSpotColor',
            'minSpotColor',
            'normalRangeColor',
            'normalRangeMax',
            'normalRangeMin',
            'spotColor',
            'spotRadius',
            'valueSpots',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_sparkline_Line.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklineline' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklineline,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklineline,event' },
            { name: 'focusenter', parameters: 'sparklineline,event' },
            { name: 'focusleave', parameters: 'sparklineline,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklineline' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_sparkline_Line;
    }(Ext_sparkline_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_sparkline_Line.EVENTNAMES);
    //    return Ext_sparkline_Base.getEventNames(eventnames);
    //}

    var ExtSparklinelineMetaData = /** @class */ (function (_super) {
        __extends(ExtSparklinelineMetaData, _super);
        function ExtSparklinelineMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSparklinelineMetaData.getAll = function () {
            ExtSparklinelineMetaData.PROPERTIES = Ext_sparkline_Line.getProperties(ExtSparklinelineMetaData.PROPERTIES);
            ExtSparklinelineMetaData.EVENTS = Ext_sparkline_Line.getEvents(ExtSparklinelineMetaData.EVENTS);
            ExtSparklinelineMetaData.EVENTS.forEach(function (event) {
                ExtSparklinelineMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSparklinelineMetaData.PROPERTIES = [];
        ExtSparklinelineMetaData.EVENTS = [];
        ExtSparklinelineMetaData.EVENTNAMES = [];
        return ExtSparklinelineMetaData;
    }(Ext_sparkline_Line));
    (function () { ExtSparklinelineMetaData.getAll(); })();
    var ExtSparklinelineComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinelineComponent, _super);
        function ExtSparklinelineComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSparklinelineMetaData.PROPERTIES, ExtSparklinelineMetaData.EVENTS) || this;
            _this.xtype = 'sparklineline';
            return _this;
        }
        ExtSparklinelineComponent_1 = ExtSparklinelineComponent;
        ExtSparklinelineComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSparklinelineComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSparklinelineComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSparklinelineComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSparklinelineComponent_1;
        ExtSparklinelineComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSparklinelineComponent = ExtSparklinelineComponent_1 = __decorate([
            core.Component({
                selector: 'ext-sparklineline',
                inputs: ExtSparklinelineMetaData.PROPERTIES,
                outputs: ExtSparklinelineMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSparklinelineComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSparklinelineComponent);
        return ExtSparklinelineComponent;
    }(EngBase));

    var Ext_sparkline_Pie = /** @class */ (function (_super) {
        __extends(Ext_sparkline_Pie, _super);
        function Ext_sparkline_Pie() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_sparkline_Pie.getProperties = function (properties) {
            properties = properties.concat(Ext_sparkline_Pie.PROPERTIES);
            return Ext_sparkline_Base.getProperties(properties);
        };
        Ext_sparkline_Pie.getEvents = function (events) {
            events = events.concat(Ext_sparkline_Pie.EVENTS);
            return Ext_sparkline_Base.getEvents(events);
        };
        Ext_sparkline_Pie.PROPERTIES = [
            'borderColor',
            'borderWidth',
            'offset',
            'sliceColors',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_sparkline_Pie.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinepie' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinepie,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinepie,event' },
            { name: 'focusenter', parameters: 'sparklinepie,event' },
            { name: 'focusleave', parameters: 'sparklinepie,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinepie' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_sparkline_Pie;
    }(Ext_sparkline_Base));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_sparkline_Pie.EVENTNAMES);
    //    return Ext_sparkline_Base.getEventNames(eventnames);
    //}

    var ExtSparklinepieMetaData = /** @class */ (function (_super) {
        __extends(ExtSparklinepieMetaData, _super);
        function ExtSparklinepieMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSparklinepieMetaData.getAll = function () {
            ExtSparklinepieMetaData.PROPERTIES = Ext_sparkline_Pie.getProperties(ExtSparklinepieMetaData.PROPERTIES);
            ExtSparklinepieMetaData.EVENTS = Ext_sparkline_Pie.getEvents(ExtSparklinepieMetaData.EVENTS);
            ExtSparklinepieMetaData.EVENTS.forEach(function (event) {
                ExtSparklinepieMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSparklinepieMetaData.PROPERTIES = [];
        ExtSparklinepieMetaData.EVENTS = [];
        ExtSparklinepieMetaData.EVENTNAMES = [];
        return ExtSparklinepieMetaData;
    }(Ext_sparkline_Pie));
    (function () { ExtSparklinepieMetaData.getAll(); })();
    var ExtSparklinepieComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinepieComponent, _super);
        function ExtSparklinepieComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSparklinepieMetaData.PROPERTIES, ExtSparklinepieMetaData.EVENTS) || this;
            _this.xtype = 'sparklinepie';
            return _this;
        }
        ExtSparklinepieComponent_1 = ExtSparklinepieComponent;
        ExtSparklinepieComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSparklinepieComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSparklinepieComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSparklinepieComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSparklinepieComponent_1;
        ExtSparklinepieComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSparklinepieComponent = ExtSparklinepieComponent_1 = __decorate([
            core.Component({
                selector: 'ext-sparklinepie',
                inputs: ExtSparklinepieMetaData.PROPERTIES,
                outputs: ExtSparklinepieMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSparklinepieComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSparklinepieComponent);
        return ExtSparklinepieComponent;
    }(EngBase));

    var Ext_sparkline_TriState = /** @class */ (function (_super) {
        __extends(Ext_sparkline_TriState, _super);
        function Ext_sparkline_TriState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_sparkline_TriState.getProperties = function (properties) {
            properties = properties.concat(Ext_sparkline_TriState.PROPERTIES);
            return Ext_sparkline_BarBase.getProperties(properties);
        };
        Ext_sparkline_TriState.getEvents = function (events) {
            events = events.concat(Ext_sparkline_TriState.EVENTS);
            return Ext_sparkline_BarBase.getEvents(events);
        };
        Ext_sparkline_TriState.PROPERTIES = [
            'barSpacing',
            'barWidth',
            'colorMap',
            'negBarColor',
            'posBarColor',
            'zeroBarColor',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_sparkline_TriState.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'sparklinetristate' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'sparklinetristate,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'sparklinetristate,event' },
            { name: 'focusenter', parameters: 'sparklinetristate,event' },
            { name: 'focusleave', parameters: 'sparklinetristate,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'sparklinetristate' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_sparkline_TriState;
    }(Ext_sparkline_BarBase));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_sparkline_TriState.EVENTNAMES);
    //    return Ext_sparkline_BarBase.getEventNames(eventnames);
    //}

    var ExtSparklinetristateMetaData = /** @class */ (function (_super) {
        __extends(ExtSparklinetristateMetaData, _super);
        function ExtSparklinetristateMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSparklinetristateMetaData.getAll = function () {
            ExtSparklinetristateMetaData.PROPERTIES = Ext_sparkline_TriState.getProperties(ExtSparklinetristateMetaData.PROPERTIES);
            ExtSparklinetristateMetaData.EVENTS = Ext_sparkline_TriState.getEvents(ExtSparklinetristateMetaData.EVENTS);
            ExtSparklinetristateMetaData.EVENTS.forEach(function (event) {
                ExtSparklinetristateMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSparklinetristateMetaData.PROPERTIES = [];
        ExtSparklinetristateMetaData.EVENTS = [];
        ExtSparklinetristateMetaData.EVENTNAMES = [];
        return ExtSparklinetristateMetaData;
    }(Ext_sparkline_TriState));
    (function () { ExtSparklinetristateMetaData.getAll(); })();
    var ExtSparklinetristateComponent = /** @class */ (function (_super) {
        __extends(ExtSparklinetristateComponent, _super);
        function ExtSparklinetristateComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSparklinetristateMetaData.PROPERTIES, ExtSparklinetristateMetaData.EVENTS) || this;
            _this.xtype = 'sparklinetristate';
            return _this;
        }
        ExtSparklinetristateComponent_1 = ExtSparklinetristateComponent;
        ExtSparklinetristateComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSparklinetristateComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSparklinetristateComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSparklinetristateComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSparklinetristateComponent_1;
        ExtSparklinetristateComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSparklinetristateComponent = ExtSparklinetristateComponent_1 = __decorate([
            core.Component({
                selector: 'ext-sparklinetristate',
                inputs: ExtSparklinetristateMetaData.PROPERTIES,
                outputs: ExtSparklinetristateMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSparklinetristateComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSparklinetristateComponent);
        return ExtSparklinetristateComponent;
    }(EngBase));

    var Ext_SplitButton = /** @class */ (function (_super) {
        __extends(Ext_SplitButton, _super);
        function Ext_SplitButton() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_SplitButton.getProperties = function (properties) {
            properties = properties.concat(Ext_SplitButton.PROPERTIES);
            return Ext_Button.getProperties(properties);
        };
        Ext_SplitButton.getEvents = function (events) {
            events = events.concat(Ext_SplitButton.EVENTS);
            return Ext_Button.getEvents(events);
        };
        Ext_SplitButton.PROPERTIES = [
            'arrowHandler',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_SplitButton.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'arrowclick', parameters: 'splitbutton,e' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'splitbutton' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'splitbutton,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'splitbutton,event' },
            { name: 'focusenter', parameters: 'splitbutton,event' },
            { name: 'focusleave', parameters: 'splitbutton,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'pressedchange', parameters: 'sender,value,oldValue' },
            { name: 'release', parameters: 'splitbutton,e' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'splitbutton,e' },
            { name: 'tofront', parameters: 'splitbutton' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_SplitButton;
    }(Ext_Button));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_SplitButton.EVENTNAMES);
    //    return Ext_Button.getEventNames(eventnames);
    //}

    var ExtSplitbuttonMetaData = /** @class */ (function (_super) {
        __extends(ExtSplitbuttonMetaData, _super);
        function ExtSplitbuttonMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtSplitbuttonMetaData.getAll = function () {
            ExtSplitbuttonMetaData.PROPERTIES = Ext_SplitButton.getProperties(ExtSplitbuttonMetaData.PROPERTIES);
            ExtSplitbuttonMetaData.EVENTS = Ext_SplitButton.getEvents(ExtSplitbuttonMetaData.EVENTS);
            ExtSplitbuttonMetaData.EVENTS.forEach(function (event) {
                ExtSplitbuttonMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtSplitbuttonMetaData.PROPERTIES = [];
        ExtSplitbuttonMetaData.EVENTS = [];
        ExtSplitbuttonMetaData.EVENTNAMES = [];
        return ExtSplitbuttonMetaData;
    }(Ext_SplitButton));
    (function () { ExtSplitbuttonMetaData.getAll(); })();
    var ExtSplitbuttonComponent = /** @class */ (function (_super) {
        __extends(ExtSplitbuttonComponent, _super);
        function ExtSplitbuttonComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtSplitbuttonMetaData.PROPERTIES, ExtSplitbuttonMetaData.EVENTS) || this;
            _this.xtype = 'splitbutton';
            return _this;
        }
        ExtSplitbuttonComponent_1 = ExtSplitbuttonComponent;
        ExtSplitbuttonComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtSplitbuttonComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtSplitbuttonComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtSplitbuttonComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtSplitbuttonComponent_1;
        ExtSplitbuttonComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtSplitbuttonComponent = ExtSplitbuttonComponent_1 = __decorate([
            core.Component({
                selector: 'ext-splitbutton',
                inputs: ExtSplitbuttonMetaData.PROPERTIES,
                outputs: ExtSplitbuttonMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtSplitbuttonComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtSplitbuttonComponent);
        return ExtSplitbuttonComponent;
    }(EngBase));

    var Ext_TabBar = /** @class */ (function (_super) {
        __extends(Ext_TabBar, _super);
        function Ext_TabBar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_TabBar.getProperties = function (properties) {
            properties = properties.concat(Ext_TabBar.PROPERTIES);
            return Ext_Toolbar.getProperties(properties);
        };
        Ext_TabBar.getEvents = function (events) {
            events = events.concat(Ext_TabBar.EVENTS);
            return Ext_Toolbar.getEvents(events);
        };
        Ext_TabBar.PROPERTIES = [
            'activeTab',
            'animateIndicator',
            'defaultTabUI',
            'defaultType',
            'layout',
            'tabRotation',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_TabBar.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,tabbar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'activeTabchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'tabbar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeactiveTabchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tabbar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tabbar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,tabbar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tabbar,event' },
            { name: 'focusenter', parameters: 'tabbar,event' },
            { name: 'focusleave', parameters: 'tabbar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'tabbar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'tabbar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'tabbar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tabchange', parameters: 'tabbar,newTab,oldTab' },
            { name: 'tofront', parameters: 'tabbar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_TabBar;
    }(Ext_Toolbar));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_TabBar.EVENTNAMES);
    //    return Ext_Toolbar.getEventNames(eventnames);
    //}

    var ExtTabbarMetaData = /** @class */ (function (_super) {
        __extends(ExtTabbarMetaData, _super);
        function ExtTabbarMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTabbarMetaData.getAll = function () {
            ExtTabbarMetaData.PROPERTIES = Ext_TabBar.getProperties(ExtTabbarMetaData.PROPERTIES);
            ExtTabbarMetaData.EVENTS = Ext_TabBar.getEvents(ExtTabbarMetaData.EVENTS);
            ExtTabbarMetaData.EVENTS.forEach(function (event) {
                ExtTabbarMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTabbarMetaData.PROPERTIES = [];
        ExtTabbarMetaData.EVENTS = [];
        ExtTabbarMetaData.EVENTNAMES = [];
        return ExtTabbarMetaData;
    }(Ext_TabBar));
    (function () { ExtTabbarMetaData.getAll(); })();
    var ExtTabbarComponent = /** @class */ (function (_super) {
        __extends(ExtTabbarComponent, _super);
        function ExtTabbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTabbarMetaData.PROPERTIES, ExtTabbarMetaData.EVENTS) || this;
            _this.xtype = 'tabbar';
            return _this;
        }
        ExtTabbarComponent_1 = ExtTabbarComponent;
        ExtTabbarComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTabbarComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTabbarComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTabbarComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTabbarComponent_1;
        ExtTabbarComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTabbarComponent = ExtTabbarComponent_1 = __decorate([
            core.Component({
                selector: 'ext-tabbar',
                inputs: ExtTabbarMetaData.PROPERTIES,
                outputs: ExtTabbarMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTabbarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTabbarComponent);
        return ExtTabbarComponent;
    }(EngBase));

    var Ext_TabPanel = /** @class */ (function (_super) {
        __extends(Ext_TabPanel, _super);
        function Ext_TabPanel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_TabPanel.getProperties = function (properties) {
            properties = properties.concat(Ext_TabPanel.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_TabPanel.getEvents = function (events) {
            events = events.concat(Ext_TabPanel.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_TabPanel.PROPERTIES = [
            'autoOrientAnimation',
            'cls',
            'layout',
            'scroll',
            'scrollable',
            'tabBar',
            'tabBarPosition',
            'tabRotation',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_TabPanel.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,tabpanel,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'tabpanel,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tabpanel' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tabpanel,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,tabpanel,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tabpanel,event' },
            { name: 'focusenter', parameters: 'tabpanel,event' },
            { name: 'focusleave', parameters: 'tabpanel,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'tabpanel,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'tabpanel,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'tabpanel,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'tabpanel' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_TabPanel;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_TabPanel.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var ExtTabpanelMetaData = /** @class */ (function (_super) {
        __extends(ExtTabpanelMetaData, _super);
        function ExtTabpanelMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTabpanelMetaData.getAll = function () {
            ExtTabpanelMetaData.PROPERTIES = Ext_TabPanel.getProperties(ExtTabpanelMetaData.PROPERTIES);
            ExtTabpanelMetaData.EVENTS = Ext_TabPanel.getEvents(ExtTabpanelMetaData.EVENTS);
            ExtTabpanelMetaData.EVENTS.forEach(function (event) {
                ExtTabpanelMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTabpanelMetaData.PROPERTIES = [];
        ExtTabpanelMetaData.EVENTS = [];
        ExtTabpanelMetaData.EVENTNAMES = [];
        return ExtTabpanelMetaData;
    }(Ext_TabPanel));
    (function () { ExtTabpanelMetaData.getAll(); })();
    var ExtTabpanelComponent = /** @class */ (function (_super) {
        __extends(ExtTabpanelComponent, _super);
        function ExtTabpanelComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTabpanelMetaData.PROPERTIES, ExtTabpanelMetaData.EVENTS) || this;
            _this.xtype = 'tabpanel';
            return _this;
        }
        ExtTabpanelComponent_1 = ExtTabpanelComponent;
        ExtTabpanelComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTabpanelComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTabpanelComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTabpanelComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTabpanelComponent_1;
        ExtTabpanelComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTabpanelComponent = ExtTabpanelComponent_1 = __decorate([
            core.Component({
                selector: 'ext-tabpanel',
                inputs: ExtTabpanelMetaData.PROPERTIES,
                outputs: ExtTabpanelMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTabpanelComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTabpanelComponent);
        return ExtTabpanelComponent;
    }(EngBase));

    var Ext_Tab = /** @class */ (function (_super) {
        __extends(Ext_Tab, _super);
        function Ext_Tab() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Tab.getProperties = function (properties) {
            properties = properties.concat(Ext_Tab.PROPERTIES);
            return Ext_Button.getProperties(properties);
        };
        Ext_Tab.getEvents = function (events) {
            events = events.concat(Ext_Tab.EVENTS);
            return Ext_Button.getEvents(events);
        };
        Ext_Tab.PROPERTIES = [
            'active',
            'closable',
            'rotation',
            'tabPosition',
            'title',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Tab.EVENTS = [
            { name: 'activate', parameters: 'tab' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tab' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tab,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'tab' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tab,event' },
            { name: 'focusenter', parameters: 'tab,event' },
            { name: 'focusleave', parameters: 'tab,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'pressedchange', parameters: 'sender,value,oldValue' },
            { name: 'release', parameters: 'tab,e' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tap', parameters: 'tab,e' },
            { name: 'tofront', parameters: 'tab' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Tab;
    }(Ext_Button));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Tab.EVENTNAMES);
    //    return Ext_Button.getEventNames(eventnames);
    //}

    var ExtTabMetaData = /** @class */ (function (_super) {
        __extends(ExtTabMetaData, _super);
        function ExtTabMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTabMetaData.getAll = function () {
            ExtTabMetaData.PROPERTIES = Ext_Tab.getProperties(ExtTabMetaData.PROPERTIES);
            ExtTabMetaData.EVENTS = Ext_Tab.getEvents(ExtTabMetaData.EVENTS);
            ExtTabMetaData.EVENTS.forEach(function (event) {
                ExtTabMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTabMetaData.PROPERTIES = [];
        ExtTabMetaData.EVENTS = [];
        ExtTabMetaData.EVENTNAMES = [];
        return ExtTabMetaData;
    }(Ext_Tab));
    (function () { ExtTabMetaData.getAll(); })();
    var ExtTabComponent = /** @class */ (function (_super) {
        __extends(ExtTabComponent, _super);
        function ExtTabComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTabMetaData.PROPERTIES, ExtTabMetaData.EVENTS) || this;
            _this.xtype = 'tab';
            return _this;
        }
        ExtTabComponent_1 = ExtTabComponent;
        ExtTabComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTabComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTabComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTabComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTabComponent_1;
        ExtTabComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTabComponent = ExtTabComponent_1 = __decorate([
            core.Component({
                selector: 'ext-tab',
                inputs: ExtTabMetaData.PROPERTIES,
                outputs: ExtTabMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTabComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTabComponent);
        return ExtTabComponent;
    }(EngBase));

    var Ext_tip_ToolTip = /** @class */ (function (_super) {
        __extends(Ext_tip_ToolTip, _super);
        function Ext_tip_ToolTip() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_tip_ToolTip.getProperties = function (properties) {
            properties = properties.concat(Ext_tip_ToolTip.PROPERTIES);
            return Ext_Panel.getProperties(properties);
        };
        Ext_tip_ToolTip.getEvents = function (events) {
            events = events.concat(Ext_tip_ToolTip.EVENTS);
            return Ext_Panel.getEvents(events);
        };
        Ext_tip_ToolTip.PROPERTIES = [
            'align',
            'alignDelegate',
            'allowOver',
            'anchorToTarget',
            'autoHide',
            'delegate',
            'dismissDelay',
            'hideDelay',
            'mouseOffset',
            'quickShowInterval',
            'showDelay',
            'showOnTap',
            'target',
            'trackMouse',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_tip_ToolTip.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,tooltip,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'tooltip,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecollapse', parameters: 'tooltip' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeexpand', parameters: 'tooltip' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforeresizedragstart', parameters: 'tooltip,context' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tooltip' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tooltip,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'collapse', parameters: 'tooltip' },
            { name: 'deactivate', parameters: 'oldActiveItem,tooltip,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'drawerhide', parameters: 'tooltip' },
            { name: 'drawershow', parameters: 'tooltip' },
            { name: 'erased', parameters: 'sender' },
            { name: 'expand', parameters: 'tooltip' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tooltip,event' },
            { name: 'focusenter', parameters: 'tooltip,event' },
            { name: 'focusleave', parameters: 'tooltip,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'tooltip,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'tooltip,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'tooltip,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'resizedrag', parameters: 'tooltip,context' },
            { name: 'resizedragcancel', parameters: 'tooltip,context' },
            { name: 'resizedragend', parameters: 'tooltip,context' },
            { name: 'resizedragstart', parameters: 'tooltip,context' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'tooltip' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_tip_ToolTip;
    }(Ext_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_tip_ToolTip.EVENTNAMES);
    //    return Ext_Panel.getEventNames(eventnames);
    //}

    var ExtTooltipMetaData = /** @class */ (function (_super) {
        __extends(ExtTooltipMetaData, _super);
        function ExtTooltipMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTooltipMetaData.getAll = function () {
            ExtTooltipMetaData.PROPERTIES = Ext_tip_ToolTip.getProperties(ExtTooltipMetaData.PROPERTIES);
            ExtTooltipMetaData.EVENTS = Ext_tip_ToolTip.getEvents(ExtTooltipMetaData.EVENTS);
            ExtTooltipMetaData.EVENTS.forEach(function (event) {
                ExtTooltipMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTooltipMetaData.PROPERTIES = [];
        ExtTooltipMetaData.EVENTS = [];
        ExtTooltipMetaData.EVENTNAMES = [];
        return ExtTooltipMetaData;
    }(Ext_tip_ToolTip));
    (function () { ExtTooltipMetaData.getAll(); })();
    var ExtTooltipComponent = /** @class */ (function (_super) {
        __extends(ExtTooltipComponent, _super);
        function ExtTooltipComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTooltipMetaData.PROPERTIES, ExtTooltipMetaData.EVENTS) || this;
            _this.xtype = 'tooltip';
            return _this;
        }
        ExtTooltipComponent_1 = ExtTooltipComponent;
        ExtTooltipComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTooltipComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTooltipComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTooltipComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTooltipComponent_1;
        ExtTooltipComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTooltipComponent = ExtTooltipComponent_1 = __decorate([
            core.Component({
                selector: 'ext-tooltip',
                inputs: ExtTooltipMetaData.PROPERTIES,
                outputs: ExtTooltipMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTooltipComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTooltipComponent);
        return ExtTooltipComponent;
    }(EngBase));

    var Ext_Title = /** @class */ (function (_super) {
        __extends(Ext_Title, _super);
        function Ext_Title() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Title.getProperties = function (properties) {
            properties = properties.concat(Ext_Title.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_Title.getEvents = function (events) {
            events = events.concat(Ext_Title.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_Title.PROPERTIES = [
            'title',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Title.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'title' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'title,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'title,event' },
            { name: 'focusenter', parameters: 'title,event' },
            { name: 'focusleave', parameters: 'title,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'title' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Title;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Title.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtTitleMetaData = /** @class */ (function (_super) {
        __extends(ExtTitleMetaData, _super);
        function ExtTitleMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTitleMetaData.getAll = function () {
            ExtTitleMetaData.PROPERTIES = Ext_Title.getProperties(ExtTitleMetaData.PROPERTIES);
            ExtTitleMetaData.EVENTS = Ext_Title.getEvents(ExtTitleMetaData.EVENTS);
            ExtTitleMetaData.EVENTS.forEach(function (event) {
                ExtTitleMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTitleMetaData.PROPERTIES = [];
        ExtTitleMetaData.EVENTS = [];
        ExtTitleMetaData.EVENTNAMES = [];
        return ExtTitleMetaData;
    }(Ext_Title));
    (function () { ExtTitleMetaData.getAll(); })();
    var ExtTitleComponent = /** @class */ (function (_super) {
        __extends(ExtTitleComponent, _super);
        function ExtTitleComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTitleMetaData.PROPERTIES, ExtTitleMetaData.EVENTS) || this;
            _this.xtype = 'title';
            return _this;
        }
        ExtTitleComponent_1 = ExtTitleComponent;
        ExtTitleComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTitleComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTitleComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTitleComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTitleComponent_1;
        ExtTitleComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTitleComponent = ExtTitleComponent_1 = __decorate([
            core.Component({
                selector: 'ext-title',
                inputs: ExtTitleMetaData.PROPERTIES,
                outputs: ExtTitleMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTitleComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTitleComponent);
        return ExtTitleComponent;
    }(EngBase));

    var Ext_TitleBar = /** @class */ (function (_super) {
        __extends(Ext_TitleBar, _super);
        function Ext_TitleBar() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_TitleBar.getProperties = function (properties) {
            properties = properties.concat(Ext_TitleBar.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_TitleBar.getEvents = function (events) {
            events = events.concat(Ext_TitleBar.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_TitleBar.PROPERTIES = [
            'autoSize',
            'border',
            'cls',
            'defaultButtonUI',
            'defaultType',
            'items',
            'layout',
            'maxButtonWidth',
            'minHeight',
            'title',
            'titleAlign',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_TitleBar.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,titlebar,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'titlebar,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'titlebar' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'titlebar,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,titlebar,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'titlebar,event' },
            { name: 'focusenter', parameters: 'titlebar,event' },
            { name: 'focusleave', parameters: 'titlebar,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'titlebar,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'titlebar,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'titlebar,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'titlebar' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_TitleBar;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_TitleBar.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var ExtTitlebarMetaData = /** @class */ (function (_super) {
        __extends(ExtTitlebarMetaData, _super);
        function ExtTitlebarMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtTitlebarMetaData.getAll = function () {
            ExtTitlebarMetaData.PROPERTIES = Ext_TitleBar.getProperties(ExtTitlebarMetaData.PROPERTIES);
            ExtTitlebarMetaData.EVENTS = Ext_TitleBar.getEvents(ExtTitlebarMetaData.EVENTS);
            ExtTitlebarMetaData.EVENTS.forEach(function (event) {
                ExtTitlebarMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtTitlebarMetaData.PROPERTIES = [];
        ExtTitlebarMetaData.EVENTS = [];
        ExtTitlebarMetaData.EVENTNAMES = [];
        return ExtTitlebarMetaData;
    }(Ext_TitleBar));
    (function () { ExtTitlebarMetaData.getAll(); })();
    var ExtTitlebarComponent = /** @class */ (function (_super) {
        __extends(ExtTitlebarComponent, _super);
        function ExtTitlebarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtTitlebarMetaData.PROPERTIES, ExtTitlebarMetaData.EVENTS) || this;
            _this.xtype = 'titlebar';
            return _this;
        }
        ExtTitlebarComponent_1 = ExtTitlebarComponent;
        ExtTitlebarComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtTitlebarComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtTitlebarComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtTitlebarComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtTitlebarComponent_1;
        ExtTitlebarComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtTitlebarComponent = ExtTitlebarComponent_1 = __decorate([
            core.Component({
                selector: 'ext-titlebar',
                inputs: ExtTitlebarMetaData.PROPERTIES,
                outputs: ExtTitlebarMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtTitlebarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtTitlebarComponent);
        return ExtTitlebarComponent;
    }(EngBase));

    var Ext_panel_Tool = /** @class */ (function (_super) {
        __extends(Ext_panel_Tool, _super);
        function Ext_panel_Tool() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_panel_Tool.getProperties = function (properties) {
            properties = properties.concat(Ext_panel_Tool.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_panel_Tool.getEvents = function (events) {
            events = events.concat(Ext_panel_Tool.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_panel_Tool.PROPERTIES = [
            'handler',
            'iconCls',
            'passive',
            'scope',
            'stopEvent',
            'toolOwner',
            'type',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_panel_Tool.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'tool' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'tool,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'click', parameters: 'tool,e,owner' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'tool,event' },
            { name: 'focusenter', parameters: 'tool,event' },
            { name: 'focusleave', parameters: 'tool,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'tool' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_panel_Tool;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_panel_Tool.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtToolMetaData = /** @class */ (function (_super) {
        __extends(ExtToolMetaData, _super);
        function ExtToolMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtToolMetaData.getAll = function () {
            ExtToolMetaData.PROPERTIES = Ext_panel_Tool.getProperties(ExtToolMetaData.PROPERTIES);
            ExtToolMetaData.EVENTS = Ext_panel_Tool.getEvents(ExtToolMetaData.EVENTS);
            ExtToolMetaData.EVENTS.forEach(function (event) {
                ExtToolMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtToolMetaData.PROPERTIES = [];
        ExtToolMetaData.EVENTS = [];
        ExtToolMetaData.EVENTNAMES = [];
        return ExtToolMetaData;
    }(Ext_panel_Tool));
    (function () { ExtToolMetaData.getAll(); })();
    var ExtToolComponent = /** @class */ (function (_super) {
        __extends(ExtToolComponent, _super);
        function ExtToolComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtToolMetaData.PROPERTIES, ExtToolMetaData.EVENTS) || this;
            _this.xtype = 'tool';
            return _this;
        }
        ExtToolComponent_1 = ExtToolComponent;
        ExtToolComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtToolComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtToolComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtToolComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtToolComponent_1;
        ExtToolComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtToolComponent = ExtToolComponent_1 = __decorate([
            core.Component({
                selector: 'ext-tool',
                inputs: ExtToolMetaData.PROPERTIES,
                outputs: ExtToolMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtToolComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtToolComponent);
        return ExtToolComponent;
    }(EngBase));

    var ExtToolbarMetaData = /** @class */ (function (_super) {
        __extends(ExtToolbarMetaData, _super);
        function ExtToolbarMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtToolbarMetaData.getAll = function () {
            ExtToolbarMetaData.PROPERTIES = Ext_Toolbar.getProperties(ExtToolbarMetaData.PROPERTIES);
            ExtToolbarMetaData.EVENTS = Ext_Toolbar.getEvents(ExtToolbarMetaData.EVENTS);
            ExtToolbarMetaData.EVENTS.forEach(function (event) {
                ExtToolbarMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtToolbarMetaData.PROPERTIES = [];
        ExtToolbarMetaData.EVENTS = [];
        ExtToolbarMetaData.EVENTNAMES = [];
        return ExtToolbarMetaData;
    }(Ext_Toolbar));
    (function () { ExtToolbarMetaData.getAll(); })();
    var ExtToolbarComponent = /** @class */ (function (_super) {
        __extends(ExtToolbarComponent, _super);
        function ExtToolbarComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtToolbarMetaData.PROPERTIES, ExtToolbarMetaData.EVENTS) || this;
            _this.xtype = 'toolbar';
            return _this;
        }
        ExtToolbarComponent_1 = ExtToolbarComponent;
        ExtToolbarComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtToolbarComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtToolbarComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtToolbarComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtToolbarComponent_1;
        ExtToolbarComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtToolbarComponent = ExtToolbarComponent_1 = __decorate([
            core.Component({
                selector: 'ext-toolbar',
                inputs: ExtToolbarMetaData.PROPERTIES,
                outputs: ExtToolbarMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtToolbarComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtToolbarComponent);
        return ExtToolbarComponent;
    }(EngBase));

    var Ext_ux_colorpick_Button = /** @class */ (function (_super) {
        __extends(Ext_ux_colorpick_Button, _super);
        function Ext_ux_colorpick_Button() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_ux_colorpick_Button.getProperties = function (properties) {
            properties = properties.concat(Ext_ux_colorpick_Button.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_ux_colorpick_Button.getEvents = function (events) {
            events = events.concat(Ext_ux_colorpick_Button.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_ux_colorpick_Button.PROPERTIES = [
            'popup',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_ux_colorpick_Button.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'colorbutton' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'colorbutton,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'colorbutton,color,previousColor' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'colorbutton,event' },
            { name: 'focusenter', parameters: 'colorbutton,event' },
            { name: 'focusleave', parameters: 'colorbutton,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'colorbutton' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_ux_colorpick_Button;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_ux_colorpick_Button.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtColorbuttonMetaData = /** @class */ (function (_super) {
        __extends(ExtColorbuttonMetaData, _super);
        function ExtColorbuttonMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtColorbuttonMetaData.getAll = function () {
            ExtColorbuttonMetaData.PROPERTIES = Ext_ux_colorpick_Button.getProperties(ExtColorbuttonMetaData.PROPERTIES);
            ExtColorbuttonMetaData.EVENTS = Ext_ux_colorpick_Button.getEvents(ExtColorbuttonMetaData.EVENTS);
            ExtColorbuttonMetaData.EVENTS.forEach(function (event) {
                ExtColorbuttonMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtColorbuttonMetaData.PROPERTIES = [];
        ExtColorbuttonMetaData.EVENTS = [];
        ExtColorbuttonMetaData.EVENTNAMES = [];
        return ExtColorbuttonMetaData;
    }(Ext_ux_colorpick_Button));
    (function () { ExtColorbuttonMetaData.getAll(); })();
    var ExtColorbuttonComponent = /** @class */ (function (_super) {
        __extends(ExtColorbuttonComponent, _super);
        function ExtColorbuttonComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtColorbuttonMetaData.PROPERTIES, ExtColorbuttonMetaData.EVENTS) || this;
            _this.xtype = 'colorbutton';
            return _this;
        }
        ExtColorbuttonComponent_1 = ExtColorbuttonComponent;
        ExtColorbuttonComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtColorbuttonComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtColorbuttonComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtColorbuttonComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtColorbuttonComponent_1;
        ExtColorbuttonComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtColorbuttonComponent = ExtColorbuttonComponent_1 = __decorate([
            core.Component({
                selector: 'ext-colorbutton',
                inputs: ExtColorbuttonMetaData.PROPERTIES,
                outputs: ExtColorbuttonMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtColorbuttonComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtColorbuttonComponent);
        return ExtColorbuttonComponent;
    }(EngBase));

    var Ext_ux_colorpick_ColorPreview = /** @class */ (function (_super) {
        __extends(Ext_ux_colorpick_ColorPreview, _super);
        function Ext_ux_colorpick_ColorPreview() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_ux_colorpick_ColorPreview.getProperties = function (properties) {
            properties = properties.concat(Ext_ux_colorpick_ColorPreview.PROPERTIES);
            return Ext_Component.getProperties(properties);
        };
        Ext_ux_colorpick_ColorPreview.getEvents = function (events) {
            events = events.concat(Ext_ux_colorpick_ColorPreview.EVENTS);
            return Ext_Component.getEvents(events);
        };
        Ext_ux_colorpick_ColorPreview.PROPERTIES = [
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_ux_colorpick_ColorPreview.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'colorpickercolorpreview' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'colorpickercolorpreview,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'colorpickercolorpreview,event' },
            { name: 'focusenter', parameters: 'colorpickercolorpreview,event' },
            { name: 'focusleave', parameters: 'colorpickercolorpreview,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'colorpickercolorpreview' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_ux_colorpick_ColorPreview;
    }(Ext_Component));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_ux_colorpick_ColorPreview.EVENTNAMES);
    //    return Ext_Component.getEventNames(eventnames);
    //}

    var ExtColorpickercolorpreviewMetaData = /** @class */ (function (_super) {
        __extends(ExtColorpickercolorpreviewMetaData, _super);
        function ExtColorpickercolorpreviewMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtColorpickercolorpreviewMetaData.getAll = function () {
            ExtColorpickercolorpreviewMetaData.PROPERTIES = Ext_ux_colorpick_ColorPreview.getProperties(ExtColorpickercolorpreviewMetaData.PROPERTIES);
            ExtColorpickercolorpreviewMetaData.EVENTS = Ext_ux_colorpick_ColorPreview.getEvents(ExtColorpickercolorpreviewMetaData.EVENTS);
            ExtColorpickercolorpreviewMetaData.EVENTS.forEach(function (event) {
                ExtColorpickercolorpreviewMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtColorpickercolorpreviewMetaData.PROPERTIES = [];
        ExtColorpickercolorpreviewMetaData.EVENTS = [];
        ExtColorpickercolorpreviewMetaData.EVENTNAMES = [];
        return ExtColorpickercolorpreviewMetaData;
    }(Ext_ux_colorpick_ColorPreview));
    (function () { ExtColorpickercolorpreviewMetaData.getAll(); })();
    var ExtColorpickercolorpreviewComponent = /** @class */ (function (_super) {
        __extends(ExtColorpickercolorpreviewComponent, _super);
        function ExtColorpickercolorpreviewComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtColorpickercolorpreviewMetaData.PROPERTIES, ExtColorpickercolorpreviewMetaData.EVENTS) || this;
            _this.xtype = 'colorpickercolorpreview';
            return _this;
        }
        ExtColorpickercolorpreviewComponent_1 = ExtColorpickercolorpreviewComponent;
        ExtColorpickercolorpreviewComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtColorpickercolorpreviewComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtColorpickercolorpreviewComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtColorpickercolorpreviewComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtColorpickercolorpreviewComponent_1;
        ExtColorpickercolorpreviewComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtColorpickercolorpreviewComponent = ExtColorpickercolorpreviewComponent_1 = __decorate([
            core.Component({
                selector: 'ext-colorpickercolorpreview',
                inputs: ExtColorpickercolorpreviewMetaData.PROPERTIES,
                outputs: ExtColorpickercolorpreviewMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtColorpickercolorpreviewComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtColorpickercolorpreviewComponent);
        return ExtColorpickercolorpreviewComponent;
    }(EngBase));

    var Ext_ux_colorpick_Field = /** @class */ (function (_super) {
        __extends(Ext_ux_colorpick_Field, _super);
        function Ext_ux_colorpick_Field() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_ux_colorpick_Field.getProperties = function (properties) {
            properties = properties.concat(Ext_ux_colorpick_Field.PROPERTIES);
            return Ext_field_Picker.getProperties(properties);
        };
        Ext_ux_colorpick_Field.getEvents = function (events) {
            events = events.concat(Ext_ux_colorpick_Field.EVENTS);
            return Ext_field_Picker.getEvents(events);
        };
        Ext_ux_colorpick_Field.PROPERTIES = [
            'popup',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_ux_colorpick_Field.EVENTS = [
            { name: 'action', parameters: 'colorfield,e' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'colorfield' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'colorfield,e' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'change', parameters: 'colorfield,color,previousColor' },
            { name: 'clearicontap', parameters: 'colorfield,input,e' },
            { name: 'click', parameters: 'e' },
            { name: 'collapse', parameters: 'field' },
            { name: 'destroy', parameters: '' },
            { name: 'dirtychange', parameters: 'colorfield,dirty' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'errorchange', parameters: 'colorfield,error' },
            { name: 'expand', parameters: 'field' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'colorfield,e' },
            { name: 'focusenter', parameters: 'colorfield,event' },
            { name: 'focusleave', parameters: 'colorfield,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'keydown', parameters: 'colorfield,e' },
            { name: 'keyup', parameters: 'colorfield,e' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'mousedown', parameters: 'colorfield,e' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'paste', parameters: 'colorfield,e' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'colorfield' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_ux_colorpick_Field;
    }(Ext_field_Picker));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_ux_colorpick_Field.EVENTNAMES);
    //    return Ext_field_Picker.getEventNames(eventnames);
    //}

    var ExtColorfieldMetaData = /** @class */ (function (_super) {
        __extends(ExtColorfieldMetaData, _super);
        function ExtColorfieldMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtColorfieldMetaData.getAll = function () {
            ExtColorfieldMetaData.PROPERTIES = Ext_ux_colorpick_Field.getProperties(ExtColorfieldMetaData.PROPERTIES);
            ExtColorfieldMetaData.EVENTS = Ext_ux_colorpick_Field.getEvents(ExtColorfieldMetaData.EVENTS);
            ExtColorfieldMetaData.EVENTS.forEach(function (event) {
                ExtColorfieldMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtColorfieldMetaData.PROPERTIES = [];
        ExtColorfieldMetaData.EVENTS = [];
        ExtColorfieldMetaData.EVENTNAMES = [];
        return ExtColorfieldMetaData;
    }(Ext_ux_colorpick_Field));
    (function () { ExtColorfieldMetaData.getAll(); })();
    var ExtColorfieldComponent = /** @class */ (function (_super) {
        __extends(ExtColorfieldComponent, _super);
        function ExtColorfieldComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtColorfieldMetaData.PROPERTIES, ExtColorfieldMetaData.EVENTS) || this;
            _this.xtype = 'colorfield';
            return _this;
        }
        ExtColorfieldComponent_1 = ExtColorfieldComponent;
        ExtColorfieldComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtColorfieldComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtColorfieldComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtColorfieldComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtColorfieldComponent_1;
        ExtColorfieldComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtColorfieldComponent = ExtColorfieldComponent_1 = __decorate([
            core.Component({
                selector: 'ext-colorfield',
                inputs: ExtColorfieldMetaData.PROPERTIES,
                outputs: ExtColorfieldMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtColorfieldComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtColorfieldComponent);
        return ExtColorfieldComponent;
    }(EngBase));

    var Ext_ux_colorpick_Selector = /** @class */ (function (_super) {
        __extends(Ext_ux_colorpick_Selector, _super);
        function Ext_ux_colorpick_Selector() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_ux_colorpick_Selector.getProperties = function (properties) {
            properties = properties.concat(Ext_ux_colorpick_Selector.PROPERTIES);
            return Ext_panel_Panel.getProperties(properties);
        };
        Ext_ux_colorpick_Selector.getEvents = function (events) {
            events = events.concat(Ext_ux_colorpick_Selector.EVENTS);
            return Ext_panel_Panel.getEvents(events);
        };
        Ext_ux_colorpick_Selector.PROPERTIES = [
            'cancelButtonText',
            'fieldPad',
            'fieldWidth',
            'okButtonText',
            'showOkCancelButtons',
            'showPreviousColor',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_ux_colorpick_Selector.EVENTS = [
            { name: 'cancel', parameters: 'colorselector' },
            { name: 'change', parameters: 'colorselector,color,previousColor' },
            { name: 'ok', parameters: 'colorselector,color' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_ux_colorpick_Selector;
    }(Ext_panel_Panel));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_ux_colorpick_Selector.EVENTNAMES);
    //    return Ext_panel_Panel.getEventNames(eventnames);
    //}

    var ExtColorselectorMetaData = /** @class */ (function (_super) {
        __extends(ExtColorselectorMetaData, _super);
        function ExtColorselectorMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtColorselectorMetaData.getAll = function () {
            ExtColorselectorMetaData.PROPERTIES = Ext_ux_colorpick_Selector.getProperties(ExtColorselectorMetaData.PROPERTIES);
            ExtColorselectorMetaData.EVENTS = Ext_ux_colorpick_Selector.getEvents(ExtColorselectorMetaData.EVENTS);
            ExtColorselectorMetaData.EVENTS.forEach(function (event) {
                ExtColorselectorMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtColorselectorMetaData.PROPERTIES = [];
        ExtColorselectorMetaData.EVENTS = [];
        ExtColorselectorMetaData.EVENTNAMES = [];
        return ExtColorselectorMetaData;
    }(Ext_ux_colorpick_Selector));
    (function () { ExtColorselectorMetaData.getAll(); })();
    var ExtColorselectorComponent = /** @class */ (function (_super) {
        __extends(ExtColorselectorComponent, _super);
        function ExtColorselectorComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtColorselectorMetaData.PROPERTIES, ExtColorselectorMetaData.EVENTS) || this;
            _this.xtype = 'colorselector';
            return _this;
        }
        ExtColorselectorComponent_1 = ExtColorselectorComponent;
        ExtColorselectorComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtColorselectorComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtColorselectorComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtColorselectorComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtColorselectorComponent_1;
        ExtColorselectorComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtColorselectorComponent = ExtColorselectorComponent_1 = __decorate([
            core.Component({
                selector: 'ext-colorselector',
                inputs: ExtColorselectorMetaData.PROPERTIES,
                outputs: ExtColorselectorMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtColorselectorComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtColorselectorComponent);
        return ExtColorselectorComponent;
    }(EngBase));

    var Ext_ux_Gauge = /** @class */ (function (_super) {
        __extends(Ext_ux_Gauge, _super);
        function Ext_ux_Gauge() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_ux_Gauge.getProperties = function (properties) {
            properties = properties.concat(Ext_ux_Gauge.PROPERTIES);
            return Ext_Gadget.getProperties(properties);
        };
        Ext_ux_Gauge.getEvents = function (events) {
            events = events.concat(Ext_ux_Gauge.EVENTS);
            return Ext_Gadget.getEvents(events);
        };
        Ext_ux_Gauge.PROPERTIES = [
            'angleOffset',
            'animation',
            'clockwise',
            'maxValue',
            'minValue',
            'needle',
            'padding',
            'textAlign',
            'textOffset',
            'textTpl',
            'trackLength',
            'trackStart',
            'trackStyle',
            'value',
            'valueStyle',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_ux_Gauge.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'gauge' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'gauge,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'gauge,event' },
            { name: 'focusenter', parameters: 'gauge,event' },
            { name: 'focusleave', parameters: 'gauge,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'gauge' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_ux_Gauge;
    }(Ext_Gadget));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_ux_Gauge.EVENTNAMES);
    //    return Ext_Gadget.getEventNames(eventnames);
    //}

    var ExtGaugeMetaData = /** @class */ (function (_super) {
        __extends(ExtGaugeMetaData, _super);
        function ExtGaugeMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtGaugeMetaData.getAll = function () {
            ExtGaugeMetaData.PROPERTIES = Ext_ux_Gauge.getProperties(ExtGaugeMetaData.PROPERTIES);
            ExtGaugeMetaData.EVENTS = Ext_ux_Gauge.getEvents(ExtGaugeMetaData.EVENTS);
            ExtGaugeMetaData.EVENTS.forEach(function (event) {
                ExtGaugeMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtGaugeMetaData.PROPERTIES = [];
        ExtGaugeMetaData.EVENTS = [];
        ExtGaugeMetaData.EVENTNAMES = [];
        return ExtGaugeMetaData;
    }(Ext_ux_Gauge));
    (function () { ExtGaugeMetaData.getAll(); })();
    var ExtGaugeComponent = /** @class */ (function (_super) {
        __extends(ExtGaugeComponent, _super);
        function ExtGaugeComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtGaugeMetaData.PROPERTIES, ExtGaugeMetaData.EVENTS) || this;
            _this.xtype = 'gauge';
            return _this;
        }
        ExtGaugeComponent_1 = ExtGaugeComponent;
        ExtGaugeComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtGaugeComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtGaugeComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtGaugeComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtGaugeComponent_1;
        ExtGaugeComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtGaugeComponent = ExtGaugeComponent_1 = __decorate([
            core.Component({
                selector: 'ext-gauge',
                inputs: ExtGaugeMetaData.PROPERTIES,
                outputs: ExtGaugeMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtGaugeComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtGaugeComponent);
        return ExtGaugeComponent;
    }(EngBase));

    var Ext_Map = /** @class */ (function (_super) {
        __extends(Ext_Map, _super);
        function Ext_Map() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Map.getProperties = function (properties) {
            properties = properties.concat(Ext_Map.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_Map.getEvents = function (events) {
            events = events.concat(Ext_Map.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_Map.PROPERTIES = [
            'geo',
            'map',
            'mapListeners',
            'mapOptions',
            'markers',
            'markerTemplate',
            'useCurrentLocation',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Map.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,map,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'map,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'map' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'map,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centerchange', parameters: 'map,map,center' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,map,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'map,event' },
            { name: 'focusenter', parameters: 'map,event' },
            { name: 'focusleave', parameters: 'map,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maprender', parameters: 'map,map' },
            { name: 'markerclick', parameters: 'map,info' },
            { name: 'markerdblclick', parameters: 'map,info' },
            { name: 'markerdrag', parameters: 'map,info' },
            { name: 'markerdragend', parameters: 'map,info' },
            { name: 'markerdragstart', parameters: 'map,info' },
            { name: 'markermousedown', parameters: 'map,info' },
            { name: 'markermouseout', parameters: 'map,info' },
            { name: 'markermouseover', parameters: 'map,info' },
            { name: 'markermouseup', parameters: 'map,info' },
            { name: 'markerrightclick', parameters: 'map,info' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'map,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'remove', parameters: 'map,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'map,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'map' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'typechange', parameters: 'map,map,mapType' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'zoomchange', parameters: 'map,map,zoomLevel' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Map;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Map.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var ExtMapMetaData = /** @class */ (function (_super) {
        __extends(ExtMapMetaData, _super);
        function ExtMapMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtMapMetaData.getAll = function () {
            ExtMapMetaData.PROPERTIES = Ext_Map.getProperties(ExtMapMetaData.PROPERTIES);
            ExtMapMetaData.EVENTS = Ext_Map.getEvents(ExtMapMetaData.EVENTS);
            ExtMapMetaData.EVENTS.forEach(function (event) {
                ExtMapMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtMapMetaData.PROPERTIES = [];
        ExtMapMetaData.EVENTS = [];
        ExtMapMetaData.EVENTNAMES = [];
        return ExtMapMetaData;
    }(Ext_Map));
    (function () { ExtMapMetaData.getAll(); })();
    var ExtMapComponent = /** @class */ (function (_super) {
        __extends(ExtMapComponent, _super);
        function ExtMapComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtMapMetaData.PROPERTIES, ExtMapMetaData.EVENTS) || this;
            _this.xtype = 'map';
            return _this;
        }
        ExtMapComponent_1 = ExtMapComponent;
        ExtMapComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtMapComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtMapComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtMapComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtMapComponent_1;
        ExtMapComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtMapComponent = ExtMapComponent_1 = __decorate([
            core.Component({
                selector: 'ext-map',
                inputs: ExtMapMetaData.PROPERTIES,
                outputs: ExtMapMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtMapComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtMapComponent);
        return ExtMapComponent;
    }(EngBase));

    var Ext_ux_rating_Picker = /** @class */ (function (_super) {
        __extends(Ext_ux_rating_Picker, _super);
        function Ext_ux_rating_Picker() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_ux_rating_Picker.getProperties = function (properties) {
            properties = properties.concat(Ext_ux_rating_Picker.PROPERTIES);
            return Ext_Gadget.getProperties(properties);
        };
        Ext_ux_rating_Picker.getEvents = function (events) {
            events = events.concat(Ext_ux_rating_Picker.EVENTS);
            return Ext_Gadget.getEvents(events);
        };
        Ext_ux_rating_Picker.PROPERTIES = [
            'animate',
            'family',
            'glyphs',
            'limit',
            'minimum',
            'overStyle',
            'rounding',
            'scale',
            'selectedStyle',
            'tip',
            'tooltipText',
            'trackingValue',
            'trackOver',
            'value',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_ux_rating_Picker.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'rating' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'rating,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'rating,event' },
            { name: 'focusenter', parameters: 'rating,event' },
            { name: 'focusleave', parameters: 'rating,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'rating' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_ux_rating_Picker;
    }(Ext_Gadget));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_ux_rating_Picker.EVENTNAMES);
    //    return Ext_Gadget.getEventNames(eventnames);
    //}

    var ExtRatingMetaData = /** @class */ (function (_super) {
        __extends(ExtRatingMetaData, _super);
        function ExtRatingMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtRatingMetaData.getAll = function () {
            ExtRatingMetaData.PROPERTIES = Ext_ux_rating_Picker.getProperties(ExtRatingMetaData.PROPERTIES);
            ExtRatingMetaData.EVENTS = Ext_ux_rating_Picker.getEvents(ExtRatingMetaData.EVENTS);
            ExtRatingMetaData.EVENTS.forEach(function (event) {
                ExtRatingMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtRatingMetaData.PROPERTIES = [];
        ExtRatingMetaData.EVENTS = [];
        ExtRatingMetaData.EVENTNAMES = [];
        return ExtRatingMetaData;
    }(Ext_ux_rating_Picker));
    (function () { ExtRatingMetaData.getAll(); })();
    var ExtRatingComponent = /** @class */ (function (_super) {
        __extends(ExtRatingComponent, _super);
        function ExtRatingComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtRatingMetaData.PROPERTIES, ExtRatingMetaData.EVENTS) || this;
            _this.xtype = 'rating';
            return _this;
        }
        ExtRatingComponent_1 = ExtRatingComponent;
        ExtRatingComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtRatingComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtRatingComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtRatingComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtRatingComponent_1;
        ExtRatingComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtRatingComponent = ExtRatingComponent_1 = __decorate([
            core.Component({
                selector: 'ext-rating',
                inputs: ExtRatingMetaData.PROPERTIES,
                outputs: ExtRatingMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtRatingComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtRatingComponent);
        return ExtRatingComponent;
    }(EngBase));

    var Ext_Video = /** @class */ (function (_super) {
        __extends(Ext_Video, _super);
        function Ext_Video() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_Video.getProperties = function (properties) {
            properties = properties.concat(Ext_Video.PROPERTIES);
            return Ext_Media.getProperties(properties);
        };
        Ext_Video.getEvents = function (events) {
            events = events.concat(Ext_Video.EVENTS);
            return Ext_Media.getEvents(events);
        };
        Ext_Video.PROPERTIES = [
            'posterUrl',
            'showPosterOnPause',
            'url',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_Video.EVENTS = [
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'video' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'video,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'ended', parameters: 'video,time' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'video,event' },
            { name: 'focusenter', parameters: 'video,event' },
            { name: 'focusleave', parameters: 'video,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'mutedchange', parameters: 'video,muted' },
            { name: 'orientationchange', parameters: '' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'pause', parameters: 'video,time' },
            { name: 'play', parameters: 'video' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'stop', parameters: 'video' },
            { name: 'timeupdate', parameters: 'video,time' },
            { name: 'tofront', parameters: 'video' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'volumechange', parameters: 'video,volume' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_Video;
    }(Ext_Media));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_Video.EVENTNAMES);
    //    return Ext_Media.getEventNames(eventnames);
    //}

    var ExtVideoMetaData = /** @class */ (function (_super) {
        __extends(ExtVideoMetaData, _super);
        function ExtVideoMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtVideoMetaData.getAll = function () {
            ExtVideoMetaData.PROPERTIES = Ext_Video.getProperties(ExtVideoMetaData.PROPERTIES);
            ExtVideoMetaData.EVENTS = Ext_Video.getEvents(ExtVideoMetaData.EVENTS);
            ExtVideoMetaData.EVENTS.forEach(function (event) {
                ExtVideoMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtVideoMetaData.PROPERTIES = [];
        ExtVideoMetaData.EVENTS = [];
        ExtVideoMetaData.EVENTNAMES = [];
        return ExtVideoMetaData;
    }(Ext_Video));
    (function () { ExtVideoMetaData.getAll(); })();
    var ExtVideoComponent = /** @class */ (function (_super) {
        __extends(ExtVideoComponent, _super);
        function ExtVideoComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtVideoMetaData.PROPERTIES, ExtVideoMetaData.EVENTS) || this;
            _this.xtype = 'video';
            return _this;
        }
        ExtVideoComponent_1 = ExtVideoComponent;
        ExtVideoComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtVideoComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtVideoComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtVideoComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtVideoComponent_1;
        ExtVideoComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtVideoComponent = ExtVideoComponent_1 = __decorate([
            core.Component({
                selector: 'ext-video',
                inputs: ExtVideoMetaData.PROPERTIES,
                outputs: ExtVideoMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtVideoComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtVideoComponent);
        return ExtVideoComponent;
    }(EngBase));

    var Ext_viewport_Default = /** @class */ (function (_super) {
        __extends(Ext_viewport_Default, _super);
        function Ext_viewport_Default() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Ext_viewport_Default.getProperties = function (properties) {
            properties = properties.concat(Ext_viewport_Default.PROPERTIES);
            return Ext_Container.getProperties(properties);
        };
        Ext_viewport_Default.getEvents = function (events) {
            events = events.concat(Ext_viewport_Default.EVENTS);
            return Ext_Container.getEvents(events);
        };
        Ext_viewport_Default.PROPERTIES = [
            'autoBlurInput',
            'autoMaximize',
            'autoRender',
            'height',
            'layout',
            'menus',
            'orientation',
            'preventZooming',
            'swipeThreshold',
            'width',
            'platformConfig',
            'responsiveConfig',
            'fitToParent',
            'config'
        ];
        Ext_viewport_Default.EVENTS = [
            { name: 'activate', parameters: 'newActiveItem,viewport,oldActiveItem' },
            { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
            { name: 'add', parameters: 'viewport,item,index' },
            { name: 'added', parameters: 'sender,container,index' },
            { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforehide', parameters: 'sender' },
            { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeorientationchange', parameters: '' },
            { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforeshow', parameters: 'sender' },
            { name: 'beforetofront', parameters: 'viewport' },
            { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
            { name: 'blur', parameters: 'viewport,event' },
            { name: 'bottomchange', parameters: 'sender,value,oldValue' },
            { name: 'centeredchange', parameters: 'sender,value,oldValue' },
            { name: 'deactivate', parameters: 'oldActiveItem,viewport,newActiveItem' },
            { name: 'destroy', parameters: '' },
            { name: 'disabledchange', parameters: 'sender,value,oldValue' },
            { name: 'dockedchange', parameters: 'sender,value,oldValue' },
            { name: 'erased', parameters: 'sender' },
            { name: 'floatingchange', parameters: 'sender,positioned' },
            { name: 'focus', parameters: 'viewport,event' },
            { name: 'focusenter', parameters: 'viewport,event' },
            { name: 'focusleave', parameters: 'viewport,event' },
            { name: 'fullscreen', parameters: 'sender' },
            { name: 'heightchange', parameters: 'sender,value,oldValue' },
            { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
            { name: 'hide', parameters: 'sender' },
            { name: 'initialize', parameters: 'sender' },
            { name: 'leftchange', parameters: 'sender,value,oldValue' },
            { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'maximize', parameters: 'viewport' },
            { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
            { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
            { name: 'move', parameters: 'viewport,item,toIndex,fromIndex' },
            { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
            { name: 'orientationchange', parameters: 'viewport,newOrientation,width,height' },
            { name: 'painted', parameters: 'sender,element' },
            { name: 'positionedchange', parameters: 'sender,positioned' },
            { name: 'ready', parameters: 'viewport' },
            { name: 'remove', parameters: 'viewport,item,index' },
            { name: 'removed', parameters: 'sender,container,index' },
            { name: 'renderedchange', parameters: 'viewport,item,rendered' },
            { name: 'resize', parameters: 'element,info' },
            { name: 'rightchange', parameters: 'sender,value,oldValue' },
            { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
            { name: 'show', parameters: 'sender' },
            { name: 'tofront', parameters: 'viewport' },
            { name: 'topchange', parameters: 'sender,value,oldValue' },
            { name: 'updatedata', parameters: 'sender,newData' },
            { name: 'widthchange', parameters: 'sender,value,oldValue' },
            { name: 'ready', parameters: '' }
        ];
        return Ext_viewport_Default;
    }(Ext_Container));
    //public static PROPERTIESOBJECT: any = {[object Object]};
    //static METHODS: any[] = [];
    //public static MJGEVENTNAMES: string[] = [];
    //static getEventNames(eventnames) {
    //    eventnames = eventnames.concat(Ext_viewport_Default.EVENTNAMES);
    //    return Ext_Container.getEventNames(eventnames);
    //}

    var ExtViewportMetaData = /** @class */ (function (_super) {
        __extends(ExtViewportMetaData, _super);
        function ExtViewportMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtViewportMetaData.getAll = function () {
            ExtViewportMetaData.PROPERTIES = Ext_viewport_Default.getProperties(ExtViewportMetaData.PROPERTIES);
            ExtViewportMetaData.EVENTS = Ext_viewport_Default.getEvents(ExtViewportMetaData.EVENTS);
            ExtViewportMetaData.EVENTS.forEach(function (event) {
                ExtViewportMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtViewportMetaData.PROPERTIES = [];
        ExtViewportMetaData.EVENTS = [];
        ExtViewportMetaData.EVENTNAMES = [];
        return ExtViewportMetaData;
    }(Ext_viewport_Default));
    (function () { ExtViewportMetaData.getAll(); })();
    var ExtViewportComponent = /** @class */ (function (_super) {
        __extends(ExtViewportComponent, _super);
        function ExtViewportComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtViewportMetaData.PROPERTIES, ExtViewportMetaData.EVENTS) || this;
            _this.xtype = 'viewport';
            return _this;
        }
        ExtViewportComponent_1 = ExtViewportComponent;
        ExtViewportComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtViewportComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtViewportComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtViewportComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtViewportComponent_1;
        ExtViewportComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtViewportComponent = ExtViewportComponent_1 = __decorate([
            core.Component({
                selector: 'ext-viewport',
                inputs: ExtViewportMetaData.PROPERTIES,
                outputs: ExtViewportMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtViewportComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtViewportComponent);
        return ExtViewportComponent;
    }(EngBase));

    var ExtWidgetMetaData = /** @class */ (function (_super) {
        __extends(ExtWidgetMetaData, _super);
        function ExtWidgetMetaData() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ExtWidgetMetaData.getAll = function () {
            ExtWidgetMetaData.PROPERTIES = Ext_Gadget.getProperties(ExtWidgetMetaData.PROPERTIES);
            ExtWidgetMetaData.EVENTS = Ext_Gadget.getEvents(ExtWidgetMetaData.EVENTS);
            ExtWidgetMetaData.EVENTS.forEach(function (event) {
                ExtWidgetMetaData.EVENTNAMES.push(event.name);
            });
        };
        ExtWidgetMetaData.PROPERTIES = [];
        ExtWidgetMetaData.EVENTS = [];
        ExtWidgetMetaData.EVENTNAMES = [];
        return ExtWidgetMetaData;
    }(Ext_Gadget));
    (function () { ExtWidgetMetaData.getAll(); })();
    var ExtWidgetComponent = /** @class */ (function (_super) {
        __extends(ExtWidgetComponent, _super);
        function ExtWidgetComponent(eRef, hostComponent) {
            var _this = _super.call(this, eRef, hostComponent, ExtWidgetMetaData.PROPERTIES, ExtWidgetMetaData.EVENTS) || this;
            _this.xtype = 'widget';
            return _this;
        }
        ExtWidgetComponent_1 = ExtWidgetComponent;
        ExtWidgetComponent.prototype.ngOnInit = function () {
            this.baseOnInit();
        };
        ExtWidgetComponent.prototype.ngAfterViewInit = function () {
            this.baseAfterViewInit();
        };
        ExtWidgetComponent.prototype.ngOnChanges = function (changes) {
            this.baseOnChanges(changes);
        };
        ExtWidgetComponent.prototype.ngOnDestroy = function () {
            this.baseOnDestroy();
        };
        var ExtWidgetComponent_1;
        ExtWidgetComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: EngBase, decorators: [{ type: core.Host }, { type: core.Optional }, { type: core.SkipSelf }] }
        ]; };
        ExtWidgetComponent = ExtWidgetComponent_1 = __decorate([
            core.Component({
                selector: 'ext-widget',
                inputs: ExtWidgetMetaData.PROPERTIES,
                outputs: ExtWidgetMetaData.EVENTNAMES,
                providers: [{ provide: EngBase, useExisting: core.forwardRef(function () { return ExtWidgetComponent_1; }) }],
                template: '<ng-template></ng-template>'
            }),
            __param(1, core.Host()), __param(1, core.Optional()), __param(1, core.SkipSelf()),
            __metadata("design:paramtypes", [core.ElementRef,
                EngBase])
        ], ExtWidgetComponent);
        return ExtWidgetComponent;
    }(EngBase));

    var ExtAngularModule = /** @class */ (function () {
        function ExtAngularModule() {
        }
        ExtAngularModule = __decorate([
            core.NgModule({
                imports: [],
                declarations: [
                    ExtActionsheetComponent,
                    ExtAudioComponent,
                    ExtBreadcrumbbarComponent,
                    ExtButtonComponent,
                    ExtCalendar_eventComponent,
                    ExtCalendar_form_addComponent,
                    ExtCalendar_calendar_pickerComponent,
                    ExtCalendar_form_editComponent,
                    ExtCalendar_timefieldComponent,
                    ExtCalendar_daysheaderComponent,
                    ExtCalendar_weeksheaderComponent,
                    ExtCalendar_listComponent,
                    ExtCalendar_dayComponent,
                    ExtCalendar_daysComponent,
                    ExtCalendar_monthComponent,
                    ExtCalendarComponent,
                    ExtCalendar_weekComponent,
                    ExtCalendar_weeksComponent,
                    ExtCalendar_dayviewComponent,
                    ExtCalendar_daysviewComponent,
                    ExtCalendar_monthviewComponent,
                    ExtCalendar_multiviewComponent,
                    ExtCalendar_weekviewComponent,
                    ExtCalendar_weeksviewComponent,
                    ExtCarouselComponent,
                    ExtCartesianComponent,
                    ExtLegendComponent,
                    ExtChartnavigatorComponent,
                    ExtPolarComponent,
                    ExtSpacefillingComponent,
                    ExtChipComponent,
                    ExtComponentComponent,
                    ExtContainerComponent,
                    ExtD3_canvasComponent,
                    ExtD3_heatmapComponent,
                    ExtD3_packComponent,
                    ExtD3_partitionComponent,
                    ExtD3_sunburstComponent,
                    ExtD3_treeComponent,
                    ExtD3_treemapComponent,
                    ExtD3_svgComponent,
                    ExtBoundlistComponent,
                    ExtChipviewComponent,
                    ExtComponentdataviewComponent,
                    ExtDataitemComponent,
                    ExtDataviewComponent,
                    ExtEmptytextComponent,
                    ExtIndexbarComponent,
                    ExtItemheaderComponent,
                    ExtListComponent,
                    ExtListitemComponent,
                    ExtListitemplaceholderComponent,
                    ExtListswiperitemComponent,
                    ExtListswiperstepperComponent,
                    ExtNestedlistComponent,
                    ExtPullrefreshbarComponent,
                    ExtPullrefreshspinnerComponent,
                    ExtSimplelistitemComponent,
                    ExtDialogComponent,
                    ExtDrawComponent,
                    ExtSurfaceComponent,
                    ExtEditorComponent,
                    ExtCheckboxComponent,
                    ExtCheckboxgroupComponent,
                    ExtComboboxComponent,
                    ExtContainerfieldComponent,
                    ExtDatefieldComponent,
                    ExtDatepickernativefieldComponent,
                    ExtDisplayfieldComponent,
                    ExtEmailfieldComponent,
                    ExtFieldComponent,
                    ExtGroupcontainerComponent,
                    ExtFilefieldComponent,
                    ExtFilebuttonComponent,
                    ExtHiddenfieldComponent,
                    ExtInputfieldComponent,
                    ExtNumberfieldComponent,
                    ExtFieldpanelComponent,
                    ExtPasswordfieldComponent,
                    ExtPickerfieldComponent,
                    ExtRadioComponent,
                    ExtRadiogroupComponent,
                    ExtSearchfieldComponent,
                    ExtSelectfieldComponent,
                    ExtSinglesliderfieldComponent,
                    ExtSliderfieldComponent,
                    ExtSpinnerfieldComponent,
                    ExtTextfieldComponent,
                    ExtTextareafieldComponent,
                    ExtTimefieldComponent,
                    ExtTogglefieldComponent,
                    ExtCleartriggerComponent,
                    ExtDatetriggerComponent,
                    ExtExpandtriggerComponent,
                    ExtMenutriggerComponent,
                    ExtRevealtriggerComponent,
                    ExtSpindowntriggerComponent,
                    ExtSpinuptriggerComponent,
                    ExtTimetriggerComponent,
                    ExtTriggerComponent,
                    ExtUrlfieldComponent,
                    ExtFieldsetComponent,
                    ExtFormpanelComponent,
                    ExtFroalaeditorComponent,
                    ExtFroalaeditorfieldComponent,
                    ExtGridcellbaseComponent,
                    ExtBooleancellComponent,
                    ExtGridcellComponent,
                    ExtCheckcellComponent,
                    ExtDatecellComponent,
                    ExtNumbercellComponent,
                    ExtRownumberercellComponent,
                    ExtTextcellComponent,
                    ExtTreecellComponent,
                    ExtWidgetcellComponent,
                    ExtCelleditorComponent,
                    ExtBooleancolumnComponent,
                    ExtCheckcolumnComponent,
                    ExtGridcolumnComponent,
                    ExtDatecolumnComponent,
                    ExtDragcolumnComponent,
                    ExtNumbercolumnComponent,
                    ExtRownumbererComponent,
                    ExtSelectioncolumnComponent,
                    ExtTextcolumnComponent,
                    ExtTreecolumnComponent,
                    ExtGridComponent,
                    ExtHeadercontainerComponent,
                    ExtLockedgridComponent,
                    ExtLockedgridregionComponent,
                    ExtGridcolumnsmenuComponent,
                    ExtGridgroupbythismenuitemComponent,
                    ExtGridshowingroupsmenuitemComponent,
                    ExtGridsortascmenuitemComponent,
                    ExtGridsortdescmenuitemComponent,
                    ExtPagingtoolbarComponent,
                    ExtGridrowComponent,
                    ExtRowbodyComponent,
                    ExtRoweditorbarComponent,
                    ExtRoweditorcellComponent,
                    ExtRoweditorComponent,
                    ExtRoweditorgapComponent,
                    ExtRowheaderComponent,
                    ExtGridsummaryrowComponent,
                    ExtTreeComponent,
                    ExtImageComponent,
                    ExtIndicatorComponent,
                    ExtLabelComponent,
                    ExtTreelistComponent,
                    ExtTreelistitemComponent,
                    ExtLoadmaskComponent,
                    ExtMaskComponent,
                    ExtMediaComponent,
                    ExtMenucheckitemComponent,
                    ExtMenuitemComponent,
                    ExtMenuComponent,
                    ExtMenuradioitemComponent,
                    ExtMenuseparatorComponent,
                    ExtMessageboxComponent,
                    ExtNavigationviewComponent,
                    ExtPanelComponent,
                    ExtAccordionComponent,
                    ExtDatepanelComponent,
                    ExtDatetitleComponent,
                    ExtPanelheaderComponent,
                    ExtTimepanelComponent,
                    ExtPaneltitleComponent,
                    ExtYearpickerComponent,
                    ExtDatepickerComponent,
                    ExtPickerComponent,
                    ExtSelectpickerComponent,
                    ExtPickerslotComponent,
                    ExtTabletpickerComponent,
                    ExtPivotgridcellComponent,
                    ExtPivotgridgroupcellComponent,
                    ExtPivotd3containerComponent,
                    ExtPivotheatmapComponent,
                    ExtPivottreemapComponent,
                    ExtPivotgridComponent,
                    ExtPivotconfigfieldComponent,
                    ExtPivotconfigcontainerComponent,
                    ExtPivotconfigformComponent,
                    ExtPivotconfigpanelComponent,
                    ExtPivotsettingsComponent,
                    ExtPivotrangeeditorComponent,
                    ExtPivotgridrowComponent,
                    ExtProgressComponent,
                    ExtSegmentedbuttonComponent,
                    ExtSheetComponent,
                    ExtSliderComponent,
                    ExtThumbComponent,
                    ExtTogglesliderComponent,
                    ExtSpacerComponent,
                    ExtSparklinebarComponent,
                    ExtSparklineComponent,
                    ExtSparklineboxComponent,
                    ExtSparklinebulletComponent,
                    ExtSparklinediscreteComponent,
                    ExtSparklinelineComponent,
                    ExtSparklinepieComponent,
                    ExtSparklinetristateComponent,
                    ExtSplitbuttonComponent,
                    ExtTabbarComponent,
                    ExtTabpanelComponent,
                    ExtTabComponent,
                    ExtTooltipComponent,
                    ExtTitleComponent,
                    ExtTitlebarComponent,
                    ExtToolComponent,
                    ExtToolbarComponent,
                    ExtColorbuttonComponent,
                    ExtColorpickercolorpreviewComponent,
                    ExtColorfieldComponent,
                    ExtColorselectorComponent,
                    ExtGaugeComponent,
                    ExtMapComponent,
                    ExtRatingComponent,
                    ExtVideoComponent,
                    ExtViewportComponent,
                    ExtWidgetComponent,
                ],
                providers: [],
                entryComponents: [],
                exports: [
                    ExtActionsheetComponent,
                    ExtAudioComponent,
                    ExtBreadcrumbbarComponent,
                    ExtButtonComponent,
                    ExtCalendar_eventComponent,
                    ExtCalendar_form_addComponent,
                    ExtCalendar_calendar_pickerComponent,
                    ExtCalendar_form_editComponent,
                    ExtCalendar_timefieldComponent,
                    ExtCalendar_daysheaderComponent,
                    ExtCalendar_weeksheaderComponent,
                    ExtCalendar_listComponent,
                    ExtCalendar_dayComponent,
                    ExtCalendar_daysComponent,
                    ExtCalendar_monthComponent,
                    ExtCalendarComponent,
                    ExtCalendar_weekComponent,
                    ExtCalendar_weeksComponent,
                    ExtCalendar_dayviewComponent,
                    ExtCalendar_daysviewComponent,
                    ExtCalendar_monthviewComponent,
                    ExtCalendar_multiviewComponent,
                    ExtCalendar_weekviewComponent,
                    ExtCalendar_weeksviewComponent,
                    ExtCarouselComponent,
                    ExtCartesianComponent,
                    ExtLegendComponent,
                    ExtChartnavigatorComponent,
                    ExtPolarComponent,
                    ExtSpacefillingComponent,
                    ExtChipComponent,
                    ExtComponentComponent,
                    ExtContainerComponent,
                    ExtD3_canvasComponent,
                    ExtD3_heatmapComponent,
                    ExtD3_packComponent,
                    ExtD3_partitionComponent,
                    ExtD3_sunburstComponent,
                    ExtD3_treeComponent,
                    ExtD3_treemapComponent,
                    ExtD3_svgComponent,
                    ExtBoundlistComponent,
                    ExtChipviewComponent,
                    ExtComponentdataviewComponent,
                    ExtDataitemComponent,
                    ExtDataviewComponent,
                    ExtEmptytextComponent,
                    ExtIndexbarComponent,
                    ExtItemheaderComponent,
                    ExtListComponent,
                    ExtListitemComponent,
                    ExtListitemplaceholderComponent,
                    ExtListswiperitemComponent,
                    ExtListswiperstepperComponent,
                    ExtNestedlistComponent,
                    ExtPullrefreshbarComponent,
                    ExtPullrefreshspinnerComponent,
                    ExtSimplelistitemComponent,
                    ExtDialogComponent,
                    ExtDrawComponent,
                    ExtSurfaceComponent,
                    ExtEditorComponent,
                    ExtCheckboxComponent,
                    ExtCheckboxgroupComponent,
                    ExtComboboxComponent,
                    ExtContainerfieldComponent,
                    ExtDatefieldComponent,
                    ExtDatepickernativefieldComponent,
                    ExtDisplayfieldComponent,
                    ExtEmailfieldComponent,
                    ExtFieldComponent,
                    ExtGroupcontainerComponent,
                    ExtFilefieldComponent,
                    ExtFilebuttonComponent,
                    ExtHiddenfieldComponent,
                    ExtInputfieldComponent,
                    ExtNumberfieldComponent,
                    ExtFieldpanelComponent,
                    ExtPasswordfieldComponent,
                    ExtPickerfieldComponent,
                    ExtRadioComponent,
                    ExtRadiogroupComponent,
                    ExtSearchfieldComponent,
                    ExtSelectfieldComponent,
                    ExtSinglesliderfieldComponent,
                    ExtSliderfieldComponent,
                    ExtSpinnerfieldComponent,
                    ExtTextfieldComponent,
                    ExtTextareafieldComponent,
                    ExtTimefieldComponent,
                    ExtTogglefieldComponent,
                    ExtCleartriggerComponent,
                    ExtDatetriggerComponent,
                    ExtExpandtriggerComponent,
                    ExtMenutriggerComponent,
                    ExtRevealtriggerComponent,
                    ExtSpindowntriggerComponent,
                    ExtSpinuptriggerComponent,
                    ExtTimetriggerComponent,
                    ExtTriggerComponent,
                    ExtUrlfieldComponent,
                    ExtFieldsetComponent,
                    ExtFormpanelComponent,
                    ExtFroalaeditorComponent,
                    ExtFroalaeditorfieldComponent,
                    ExtGridcellbaseComponent,
                    ExtBooleancellComponent,
                    ExtGridcellComponent,
                    ExtCheckcellComponent,
                    ExtDatecellComponent,
                    ExtNumbercellComponent,
                    ExtRownumberercellComponent,
                    ExtTextcellComponent,
                    ExtTreecellComponent,
                    ExtWidgetcellComponent,
                    ExtCelleditorComponent,
                    ExtBooleancolumnComponent,
                    ExtCheckcolumnComponent,
                    ExtGridcolumnComponent,
                    ExtDatecolumnComponent,
                    ExtDragcolumnComponent,
                    ExtNumbercolumnComponent,
                    ExtRownumbererComponent,
                    ExtSelectioncolumnComponent,
                    ExtTextcolumnComponent,
                    ExtTreecolumnComponent,
                    ExtGridComponent,
                    ExtHeadercontainerComponent,
                    ExtLockedgridComponent,
                    ExtLockedgridregionComponent,
                    ExtGridcolumnsmenuComponent,
                    ExtGridgroupbythismenuitemComponent,
                    ExtGridshowingroupsmenuitemComponent,
                    ExtGridsortascmenuitemComponent,
                    ExtGridsortdescmenuitemComponent,
                    ExtPagingtoolbarComponent,
                    ExtGridrowComponent,
                    ExtRowbodyComponent,
                    ExtRoweditorbarComponent,
                    ExtRoweditorcellComponent,
                    ExtRoweditorComponent,
                    ExtRoweditorgapComponent,
                    ExtRowheaderComponent,
                    ExtGridsummaryrowComponent,
                    ExtTreeComponent,
                    ExtImageComponent,
                    ExtIndicatorComponent,
                    ExtLabelComponent,
                    ExtTreelistComponent,
                    ExtTreelistitemComponent,
                    ExtLoadmaskComponent,
                    ExtMaskComponent,
                    ExtMediaComponent,
                    ExtMenucheckitemComponent,
                    ExtMenuitemComponent,
                    ExtMenuComponent,
                    ExtMenuradioitemComponent,
                    ExtMenuseparatorComponent,
                    ExtMessageboxComponent,
                    ExtNavigationviewComponent,
                    ExtPanelComponent,
                    ExtAccordionComponent,
                    ExtDatepanelComponent,
                    ExtDatetitleComponent,
                    ExtPanelheaderComponent,
                    ExtTimepanelComponent,
                    ExtPaneltitleComponent,
                    ExtYearpickerComponent,
                    ExtDatepickerComponent,
                    ExtPickerComponent,
                    ExtSelectpickerComponent,
                    ExtPickerslotComponent,
                    ExtTabletpickerComponent,
                    ExtPivotgridcellComponent,
                    ExtPivotgridgroupcellComponent,
                    ExtPivotd3containerComponent,
                    ExtPivotheatmapComponent,
                    ExtPivottreemapComponent,
                    ExtPivotgridComponent,
                    ExtPivotconfigfieldComponent,
                    ExtPivotconfigcontainerComponent,
                    ExtPivotconfigformComponent,
                    ExtPivotconfigpanelComponent,
                    ExtPivotsettingsComponent,
                    ExtPivotrangeeditorComponent,
                    ExtPivotgridrowComponent,
                    ExtProgressComponent,
                    ExtSegmentedbuttonComponent,
                    ExtSheetComponent,
                    ExtSliderComponent,
                    ExtThumbComponent,
                    ExtTogglesliderComponent,
                    ExtSpacerComponent,
                    ExtSparklinebarComponent,
                    ExtSparklineComponent,
                    ExtSparklineboxComponent,
                    ExtSparklinebulletComponent,
                    ExtSparklinediscreteComponent,
                    ExtSparklinelineComponent,
                    ExtSparklinepieComponent,
                    ExtSparklinetristateComponent,
                    ExtSplitbuttonComponent,
                    ExtTabbarComponent,
                    ExtTabpanelComponent,
                    ExtTabComponent,
                    ExtTooltipComponent,
                    ExtTitleComponent,
                    ExtTitlebarComponent,
                    ExtToolComponent,
                    ExtToolbarComponent,
                    ExtColorbuttonComponent,
                    ExtColorpickercolorpreviewComponent,
                    ExtColorfieldComponent,
                    ExtColorselectorComponent,
                    ExtGaugeComponent,
                    ExtMapComponent,
                    ExtRatingComponent,
                    ExtVideoComponent,
                    ExtViewportComponent,
                    ExtWidgetComponent,
                ]
            })
        ], ExtAngularModule);
        return ExtAngularModule;
    }());

    exports.ExtAngularModule = ExtAngularModule;
    exports.ɵa = ExtActionsheetMetaData;
    exports.ɵb = ExtActionsheetComponent;
    exports.ɵba = Ext_Gadget;
    exports.ɵbaa = ExtToolComponent;
    exports.ɵbab = Ext_panel_Tool;
    exports.ɵbac = ExtToolbarMetaData;
    exports.ɵbad = ExtToolbarComponent;
    exports.ɵbae = ExtColorbuttonMetaData;
    exports.ɵbaf = ExtColorbuttonComponent;
    exports.ɵbag = Ext_ux_colorpick_Button;
    exports.ɵbah = ExtColorpickercolorpreviewMetaData;
    exports.ɵbai = ExtColorpickercolorpreviewComponent;
    exports.ɵbaj = Ext_ux_colorpick_ColorPreview;
    exports.ɵbak = ExtColorfieldMetaData;
    exports.ɵbal = ExtColorfieldComponent;
    exports.ɵbam = Ext_ux_colorpick_Field;
    exports.ɵban = ExtColorselectorMetaData;
    exports.ɵbao = ExtColorselectorComponent;
    exports.ɵbap = Ext_ux_colorpick_Selector;
    exports.ɵbaq = ExtGaugeMetaData;
    exports.ɵbar = ExtGaugeComponent;
    exports.ɵbas = Ext_ux_Gauge;
    exports.ɵbat = ExtMapMetaData;
    exports.ɵbau = ExtMapComponent;
    exports.ɵbav = Ext_Map;
    exports.ɵbaw = ExtRatingMetaData;
    exports.ɵbax = ExtRatingComponent;
    exports.ɵbay = Ext_ux_rating_Picker;
    exports.ɵbaz = ExtVideoMetaData;
    exports.ɵbb = ExtCalendar_form_addMetaData;
    exports.ɵbba = ExtVideoComponent;
    exports.ɵbbb = Ext_Video;
    exports.ɵbbc = ExtViewportMetaData;
    exports.ɵbbd = ExtViewportComponent;
    exports.ɵbbe = Ext_viewport_Default;
    exports.ɵbbf = ExtWidgetMetaData;
    exports.ɵbbg = ExtWidgetComponent;
    exports.ɵbc = ExtCalendar_form_addComponent;
    exports.ɵbd = Ext_calendar_form_Add;
    exports.ɵbe = Ext_calendar_form_Form;
    exports.ɵbf = Ext_calendar_form_AbstractForm;
    exports.ɵbg = Ext_form_Panel;
    exports.ɵbh = Ext_field_Panel;
    exports.ɵbi = ExtCalendar_calendar_pickerMetaData;
    exports.ɵbj = ExtCalendar_calendar_pickerComponent;
    exports.ɵbk = Ext_calendar_form_CalendarPicker;
    exports.ɵbl = Ext_field_Select;
    exports.ɵbm = Ext_field_Picker;
    exports.ɵbn = Ext_field_Text;
    exports.ɵbo = Ext_field_Input;
    exports.ɵbp = Ext_field_Field;
    exports.ɵbq = ExtCalendar_form_editMetaData;
    exports.ɵbr = ExtCalendar_form_editComponent;
    exports.ɵbs = Ext_calendar_form_Edit;
    exports.ɵbt = ExtCalendar_timefieldMetaData;
    exports.ɵbu = ExtCalendar_timefieldComponent;
    exports.ɵbv = Ext_calendar_form_TimeField;
    exports.ɵbw = ExtCalendar_daysheaderMetaData;
    exports.ɵbx = ExtCalendar_daysheaderComponent;
    exports.ɵby = Ext_calendar_header_Days;
    exports.ɵbz = Ext_calendar_header_Base;
    exports.ɵc = EngBase;
    exports.ɵca = ExtCalendar_weeksheaderMetaData;
    exports.ɵcb = ExtCalendar_weeksheaderComponent;
    exports.ɵcc = Ext_calendar_header_Weeks;
    exports.ɵcd = ExtCalendar_listMetaData;
    exports.ɵce = ExtCalendar_listComponent;
    exports.ɵcf = Ext_calendar_List;
    exports.ɵcg = Ext_calendar_AbstractList;
    exports.ɵch = Ext_dataview_DataView;
    exports.ɵci = Ext_dataview_Abstract;
    exports.ɵcj = ExtCalendar_dayMetaData;
    exports.ɵck = ExtCalendar_dayComponent;
    exports.ɵcl = Ext_calendar_panel_Day;
    exports.ɵcm = Ext_calendar_panel_Days;
    exports.ɵcn = Ext_calendar_panel_Base;
    exports.ɵco = Ext_calendar_panel_AbstractBase;
    exports.ɵcp = ExtCalendar_daysMetaData;
    exports.ɵcq = ExtCalendar_daysComponent;
    exports.ɵcr = ExtCalendar_monthMetaData;
    exports.ɵcs = ExtCalendar_monthComponent;
    exports.ɵct = Ext_calendar_panel_Month;
    exports.ɵcu = Ext_calendar_panel_Weeks;
    exports.ɵcv = ExtCalendarMetaData;
    exports.ɵcw = ExtCalendarComponent;
    exports.ɵcx = Ext_calendar_panel_Panel;
    exports.ɵcy = Ext_calendar_panel_AbstractPanel;
    exports.ɵcz = ExtCalendar_weekMetaData;
    exports.ɵd = Ext_ActionSheet;
    exports.ɵda = ExtCalendar_weekComponent;
    exports.ɵdb = Ext_calendar_panel_Week;
    exports.ɵdc = ExtCalendar_weeksMetaData;
    exports.ɵdd = ExtCalendar_weeksComponent;
    exports.ɵde = ExtCalendar_dayviewMetaData;
    exports.ɵdf = ExtCalendar_dayviewComponent;
    exports.ɵdg = Ext_calendar_view_Day;
    exports.ɵdh = Ext_calendar_view_Days;
    exports.ɵdi = Ext_calendar_view_Base;
    exports.ɵdj = ExtCalendar_daysviewMetaData;
    exports.ɵdk = ExtCalendar_daysviewComponent;
    exports.ɵdl = ExtCalendar_monthviewMetaData;
    exports.ɵdm = ExtCalendar_monthviewComponent;
    exports.ɵdn = Ext_calendar_view_Month;
    exports.ɵdo = Ext_calendar_view_Weeks;
    exports.ɵdp = ExtCalendar_multiviewMetaData;
    exports.ɵdq = ExtCalendar_multiviewComponent;
    exports.ɵdr = Ext_calendar_view_Multi;
    exports.ɵds = Ext_container_Container;
    exports.ɵdt = ExtCalendar_weekviewMetaData;
    exports.ɵdu = ExtCalendar_weekviewComponent;
    exports.ɵdv = Ext_calendar_view_Week;
    exports.ɵdw = ExtCalendar_weeksviewMetaData;
    exports.ɵdx = ExtCalendar_weeksviewComponent;
    exports.ɵdy = ExtCarouselMetaData;
    exports.ɵdz = ExtCarouselComponent;
    exports.ɵe = Ext_Sheet;
    exports.ɵea = Ext_Carousel;
    exports.ɵeb = ExtCartesianMetaData;
    exports.ɵec = ExtCartesianComponent;
    exports.ɵed = Ext_chart_Chart;
    exports.ɵee = Ext_chart_AbstractChart;
    exports.ɵef = Ext_draw_Container;
    exports.ɵeg = Ext_draw_ContainerBase;
    exports.ɵeh = ExtLegendMetaData;
    exports.ɵei = ExtLegendComponent;
    exports.ɵej = Ext_chart_Legend;
    exports.ɵek = Ext_chart_legend_LegendBase;
    exports.ɵel = ExtChartnavigatorMetaData;
    exports.ɵem = ExtChartnavigatorComponent;
    exports.ɵen = Ext_chart_navigator_Container;
    exports.ɵeo = Ext_chart_navigator_ContainerBase;
    exports.ɵep = ExtPolarMetaData;
    exports.ɵeq = ExtPolarComponent;
    exports.ɵer = Ext_chart_PolarChart;
    exports.ɵes = ExtSpacefillingMetaData;
    exports.ɵet = ExtSpacefillingComponent;
    exports.ɵeu = Ext_chart_SpaceFillingChart;
    exports.ɵev = ExtChipMetaData;
    exports.ɵew = ExtChipComponent;
    exports.ɵex = Ext_Chip;
    exports.ɵey = ExtComponentMetaData;
    exports.ɵez = ExtComponentComponent;
    exports.ɵf = Ext_Panel;
    exports.ɵfa = ExtContainerMetaData;
    exports.ɵfb = ExtContainerComponent;
    exports.ɵfc = ExtD3_canvasMetaData;
    exports.ɵfd = ExtD3_canvasComponent;
    exports.ɵfe = Ext_d3_canvas_Canvas;
    exports.ɵff = Ext_d3_Component;
    exports.ɵfg = Ext_d3_ComponentBase;
    exports.ɵfh = ExtD3_heatmapMetaData;
    exports.ɵfi = ExtD3_heatmapComponent;
    exports.ɵfj = Ext_d3_HeatMap;
    exports.ɵfk = Ext_d3_svg_Svg;
    exports.ɵfl = ExtD3_packMetaData;
    exports.ɵfm = ExtD3_packComponent;
    exports.ɵfn = Ext_d3_hierarchy_Pack;
    exports.ɵfo = Ext_d3_hierarchy_Hierarchy;
    exports.ɵfp = ExtD3_partitionMetaData;
    exports.ɵfq = ExtD3_partitionComponent;
    exports.ɵfr = Ext_d3_hierarchy_partition_Partition;
    exports.ɵfs = ExtD3_sunburstMetaData;
    exports.ɵft = ExtD3_sunburstComponent;
    exports.ɵfu = Ext_d3_hierarchy_partition_Sunburst;
    exports.ɵfv = ExtD3_treeMetaData;
    exports.ɵfw = ExtD3_treeComponent;
    exports.ɵfx = Ext_d3_hierarchy_tree_HorizontalTree;
    exports.ɵfy = Ext_d3_hierarchy_tree_Tree;
    exports.ɵfz = ExtD3_treemapMetaData;
    exports.ɵg = Ext_Container;
    exports.ɵga = ExtD3_treemapComponent;
    exports.ɵgb = Ext_d3_hierarchy_TreeMap;
    exports.ɵgc = ExtD3_svgMetaData;
    exports.ɵgd = ExtD3_svgComponent;
    exports.ɵge = ExtBoundlistMetaData;
    exports.ɵgf = ExtBoundlistComponent;
    exports.ɵgg = Ext_dataview_BoundList;
    exports.ɵgh = Ext_dataview_List;
    exports.ɵgi = Ext_dataview_Component;
    exports.ɵgj = ExtChipviewMetaData;
    exports.ɵgk = ExtChipviewComponent;
    exports.ɵgl = Ext_dataview_ChipView;
    exports.ɵgm = ExtComponentdataviewMetaData;
    exports.ɵgn = ExtComponentdataviewComponent;
    exports.ɵgo = ExtDataitemMetaData;
    exports.ɵgp = ExtDataitemComponent;
    exports.ɵgq = Ext_dataview_component_DataItem;
    exports.ɵgr = ExtDataviewMetaData;
    exports.ɵgs = ExtDataviewComponent;
    exports.ɵgt = Ext_DataView;
    exports.ɵgu = ExtEmptytextMetaData;
    exports.ɵgv = ExtEmptytextComponent;
    exports.ɵgw = Ext_dataview_EmptyText;
    exports.ɵgx = ExtIndexbarMetaData;
    exports.ɵgy = ExtIndexbarComponent;
    exports.ɵgz = Ext_IndexBar;
    exports.ɵh = Ext_Component;
    exports.ɵha = ExtItemheaderMetaData;
    exports.ɵhb = ExtItemheaderComponent;
    exports.ɵhc = Ext_dataview_ItemHeader;
    exports.ɵhd = ExtListMetaData;
    exports.ɵhe = ExtListComponent;
    exports.ɵhf = Ext_List;
    exports.ɵhg = ExtListitemMetaData;
    exports.ɵhh = ExtListitemComponent;
    exports.ɵhi = Ext_dataview_component_ListItem;
    exports.ɵhj = Ext_dataview_DataItem;
    exports.ɵhk = ExtListitemplaceholderMetaData;
    exports.ɵhl = ExtListitemplaceholderComponent;
    exports.ɵhm = Ext_dataview_ListItemPlaceholder;
    exports.ɵhn = Ext_dataview_SimpleListItem;
    exports.ɵho = ExtListswiperitemMetaData;
    exports.ɵhp = ExtListswiperitemComponent;
    exports.ɵhq = Ext_dataview_listswiper_Item;
    exports.ɵhr = ExtListswiperstepperMetaData;
    exports.ɵhs = ExtListswiperstepperComponent;
    exports.ɵht = Ext_dataview_listswiper_Stepper;
    exports.ɵhu = ExtNestedlistMetaData;
    exports.ɵhv = ExtNestedlistComponent;
    exports.ɵhw = Ext_NestedList;
    exports.ɵhx = ExtPullrefreshbarMetaData;
    exports.ɵhy = ExtPullrefreshbarComponent;
    exports.ɵhz = Ext_dataview_pullrefresh_Bar;
    exports.ɵi = Ext_Widget;
    exports.ɵia = Ext_dataview_pullrefresh_Item;
    exports.ɵib = ExtPullrefreshspinnerMetaData;
    exports.ɵic = ExtPullrefreshspinnerComponent;
    exports.ɵid = Ext_dataview_pullrefresh_Spinner;
    exports.ɵie = ExtSimplelistitemMetaData;
    exports.ɵif = ExtSimplelistitemComponent;
    exports.ɵig = Ext_dataview_component_SimpleListItem;
    exports.ɵih = ExtDialogMetaData;
    exports.ɵii = ExtDialogComponent;
    exports.ɵij = Ext_window_Window;
    exports.ɵik = ExtDrawMetaData;
    exports.ɵil = ExtDrawComponent;
    exports.ɵim = Ext_draw_Component;
    exports.ɵin = ExtSurfaceMetaData;
    exports.ɵio = ExtSurfaceComponent;
    exports.ɵip = Ext_draw_Surface;
    exports.ɵiq = Ext_draw_SurfaceBase;
    exports.ɵir = ExtEditorMetaData;
    exports.ɵis = ExtEditorComponent;
    exports.ɵit = Ext_Editor;
    exports.ɵiu = ExtCheckboxMetaData;
    exports.ɵiv = ExtCheckboxComponent;
    exports.ɵiw = Ext_form_Checkbox;
    exports.ɵix = ExtCheckboxgroupMetaData;
    exports.ɵiy = ExtCheckboxgroupComponent;
    exports.ɵiz = Ext_field_CheckboxGroup;
    exports.ɵj = Ext_Evented;
    exports.ɵja = Ext_field_FieldGroupContainer;
    exports.ɵjb = Ext_field_Container;
    exports.ɵjc = ExtComboboxMetaData;
    exports.ɵjd = ExtComboboxComponent;
    exports.ɵje = Ext_form_field_ComboBox;
    exports.ɵjf = ExtContainerfieldMetaData;
    exports.ɵjg = ExtContainerfieldComponent;
    exports.ɵjh = ExtDatefieldMetaData;
    exports.ɵji = ExtDatefieldComponent;
    exports.ɵjj = Ext_field_DatePicker;
    exports.ɵjk = ExtDatepickernativefieldMetaData;
    exports.ɵjl = ExtDatepickernativefieldComponent;
    exports.ɵjm = Ext_form_DatePickerNative;
    exports.ɵjn = Ext_field_Date;
    exports.ɵjo = ExtDisplayfieldMetaData;
    exports.ɵjp = ExtDisplayfieldComponent;
    exports.ɵjq = Ext_form_Display;
    exports.ɵjr = ExtEmailfieldMetaData;
    exports.ɵjs = ExtEmailfieldComponent;
    exports.ɵjt = Ext_form_Email;
    exports.ɵju = ExtFieldMetaData;
    exports.ɵjv = ExtFieldComponent;
    exports.ɵjw = Ext_form_Field;
    exports.ɵjx = ExtGroupcontainerMetaData;
    exports.ɵjy = ExtGroupcontainerComponent;
    exports.ɵjz = ExtFilefieldMetaData;
    exports.ɵk = Ext_Base;
    exports.ɵka = ExtFilefieldComponent;
    exports.ɵkb = Ext_field_File;
    exports.ɵkc = ExtFilebuttonMetaData;
    exports.ɵkd = ExtFilebuttonComponent;
    exports.ɵke = Ext_field_FileButton;
    exports.ɵkf = ExtHiddenfieldMetaData;
    exports.ɵkg = ExtHiddenfieldComponent;
    exports.ɵkh = Ext_form_Hidden;
    exports.ɵki = ExtInputfieldMetaData;
    exports.ɵkj = ExtInputfieldComponent;
    exports.ɵkk = ExtNumberfieldMetaData;
    exports.ɵkl = ExtNumberfieldComponent;
    exports.ɵkm = Ext_form_Number;
    exports.ɵkn = ExtFieldpanelMetaData;
    exports.ɵko = ExtFieldpanelComponent;
    exports.ɵkp = ExtPasswordfieldMetaData;
    exports.ɵkq = ExtPasswordfieldComponent;
    exports.ɵkr = Ext_form_Password;
    exports.ɵks = ExtPickerfieldMetaData;
    exports.ɵkt = ExtPickerfieldComponent;
    exports.ɵku = ExtRadioMetaData;
    exports.ɵkv = ExtRadioComponent;
    exports.ɵkw = Ext_form_Radio;
    exports.ɵkx = Ext_field_Checkbox;
    exports.ɵky = ExtRadiogroupMetaData;
    exports.ɵkz = ExtRadiogroupComponent;
    exports.ɵl = ExtAudioMetaData;
    exports.ɵla = Ext_field_RadioGroup;
    exports.ɵlb = ExtSearchfieldMetaData;
    exports.ɵlc = ExtSearchfieldComponent;
    exports.ɵld = Ext_form_Search;
    exports.ɵle = ExtSelectfieldMetaData;
    exports.ɵlf = ExtSelectfieldComponent;
    exports.ɵlg = Ext_form_Select;
    exports.ɵlh = ExtSinglesliderfieldMetaData;
    exports.ɵli = ExtSinglesliderfieldComponent;
    exports.ɵlj = Ext_field_SingleSlider;
    exports.ɵlk = Ext_field_Slider;
    exports.ɵll = ExtSliderfieldMetaData;
    exports.ɵlm = ExtSliderfieldComponent;
    exports.ɵln = Ext_form_Slider;
    exports.ɵlo = ExtSpinnerfieldMetaData;
    exports.ɵlp = ExtSpinnerfieldComponent;
    exports.ɵlq = Ext_form_Spinner;
    exports.ɵlr = Ext_field_Number;
    exports.ɵls = ExtTextfieldMetaData;
    exports.ɵlt = ExtTextfieldComponent;
    exports.ɵlu = Ext_form_Text;
    exports.ɵlv = ExtTextareafieldMetaData;
    exports.ɵlw = ExtTextareafieldComponent;
    exports.ɵlx = Ext_form_TextArea;
    exports.ɵly = ExtTimefieldMetaData;
    exports.ɵlz = ExtTimefieldComponent;
    exports.ɵm = ExtAudioComponent;
    exports.ɵma = Ext_field_Time;
    exports.ɵmb = ExtTogglefieldMetaData;
    exports.ɵmc = ExtTogglefieldComponent;
    exports.ɵmd = Ext_form_Toggle;
    exports.ɵme = ExtCleartriggerMetaData;
    exports.ɵmf = ExtCleartriggerComponent;
    exports.ɵmg = Ext_field_trigger_Clear;
    exports.ɵmh = Ext_field_trigger_Trigger;
    exports.ɵmi = Ext_field_trigger_Base;
    exports.ɵmj = ExtDatetriggerMetaData;
    exports.ɵmk = ExtDatetriggerComponent;
    exports.ɵml = Ext_field_trigger_Date;
    exports.ɵmm = Ext_field_trigger_Expand;
    exports.ɵmn = ExtExpandtriggerMetaData;
    exports.ɵmo = ExtExpandtriggerComponent;
    exports.ɵmp = ExtMenutriggerMetaData;
    exports.ɵmq = ExtMenutriggerComponent;
    exports.ɵmr = Ext_field_trigger_Menu;
    exports.ɵms = ExtRevealtriggerMetaData;
    exports.ɵmt = ExtRevealtriggerComponent;
    exports.ɵmu = Ext_field_trigger_Reveal;
    exports.ɵmv = ExtSpindowntriggerMetaData;
    exports.ɵmw = ExtSpindowntriggerComponent;
    exports.ɵmx = Ext_field_trigger_SpinDown;
    exports.ɵmy = ExtSpinuptriggerMetaData;
    exports.ɵmz = ExtSpinuptriggerComponent;
    exports.ɵn = Ext_Audio;
    exports.ɵna = Ext_field_trigger_SpinUp;
    exports.ɵnb = ExtTimetriggerMetaData;
    exports.ɵnc = ExtTimetriggerComponent;
    exports.ɵnd = Ext_field_trigger_Time;
    exports.ɵne = ExtTriggerMetaData;
    exports.ɵnf = ExtTriggerComponent;
    exports.ɵng = ExtUrlfieldMetaData;
    exports.ɵnh = ExtUrlfieldComponent;
    exports.ɵni = Ext_form_Url;
    exports.ɵnj = ExtFieldsetMetaData;
    exports.ɵnk = ExtFieldsetComponent;
    exports.ɵnl = Ext_form_FieldSet;
    exports.ɵnm = ExtFormpanelMetaData;
    exports.ɵnn = ExtFormpanelComponent;
    exports.ɵno = Ext_form_FormPanel;
    exports.ɵnp = ExtFroalaeditorMetaData;
    exports.ɵnq = ExtFroalaeditorComponent;
    exports.ɵnr = Ext_froala_Editor;
    exports.ɵns = ExtFroalaeditorfieldMetaData;
    exports.ɵnt = ExtFroalaeditorfieldComponent;
    exports.ɵnu = Ext_froala_EditorField;
    exports.ɵnv = ExtGridcellbaseMetaData;
    exports.ɵnw = ExtGridcellbaseComponent;
    exports.ɵnx = Ext_grid_cell_Base;
    exports.ɵny = ExtBooleancellMetaData;
    exports.ɵnz = ExtBooleancellComponent;
    exports.ɵo = Ext_Media;
    exports.ɵoa = Ext_grid_cell_Boolean;
    exports.ɵob = Ext_grid_cell_Text;
    exports.ɵoc = ExtGridcellMetaData;
    exports.ɵod = ExtGridcellComponent;
    exports.ɵoe = Ext_grid_cell_Cell;
    exports.ɵof = ExtCheckcellMetaData;
    exports.ɵog = ExtCheckcellComponent;
    exports.ɵoh = Ext_grid_cell_Check;
    exports.ɵoi = ExtDatecellMetaData;
    exports.ɵoj = ExtDatecellComponent;
    exports.ɵok = Ext_grid_cell_Date;
    exports.ɵol = ExtNumbercellMetaData;
    exports.ɵom = ExtNumbercellComponent;
    exports.ɵon = Ext_grid_cell_Number;
    exports.ɵoo = ExtRownumberercellMetaData;
    exports.ɵop = ExtRownumberercellComponent;
    exports.ɵoq = Ext_grid_cell_RowNumberer;
    exports.ɵor = ExtTextcellMetaData;
    exports.ɵos = ExtTextcellComponent;
    exports.ɵot = ExtTreecellMetaData;
    exports.ɵou = ExtTreecellComponent;
    exports.ɵov = Ext_grid_cell_Tree;
    exports.ɵow = ExtWidgetcellMetaData;
    exports.ɵox = ExtWidgetcellComponent;
    exports.ɵoy = Ext_grid_cell_Widget;
    exports.ɵoz = ExtCelleditorMetaData;
    exports.ɵp = ExtBreadcrumbbarMetaData;
    exports.ɵpa = ExtCelleditorComponent;
    exports.ɵpb = Ext_grid_CellEditor;
    exports.ɵpc = ExtBooleancolumnMetaData;
    exports.ɵpd = ExtBooleancolumnComponent;
    exports.ɵpe = Ext_grid_column_Boolean;
    exports.ɵpf = Ext_grid_column_Column;
    exports.ɵpg = Ext_grid_HeaderContainer;
    exports.ɵph = ExtCheckcolumnMetaData;
    exports.ɵpi = ExtCheckcolumnComponent;
    exports.ɵpj = Ext_grid_column_Check;
    exports.ɵpk = ExtGridcolumnMetaData;
    exports.ɵpl = ExtGridcolumnComponent;
    exports.ɵpm = Ext_grid_column_Template;
    exports.ɵpn = ExtDatecolumnMetaData;
    exports.ɵpo = ExtDatecolumnComponent;
    exports.ɵpp = Ext_grid_column_Date;
    exports.ɵpq = ExtDragcolumnMetaData;
    exports.ɵpr = ExtDragcolumnComponent;
    exports.ɵps = Ext_grid_column_Drag;
    exports.ɵpt = ExtNumbercolumnMetaData;
    exports.ɵpu = ExtNumbercolumnComponent;
    exports.ɵpv = Ext_grid_column_Number;
    exports.ɵpw = ExtRownumbererMetaData;
    exports.ɵpx = ExtRownumbererComponent;
    exports.ɵpy = Ext_grid_column_RowNumberer;
    exports.ɵpz = ExtSelectioncolumnMetaData;
    exports.ɵq = ExtBreadcrumbbarComponent;
    exports.ɵqa = ExtSelectioncolumnComponent;
    exports.ɵqb = Ext_grid_column_Selection;
    exports.ɵqc = ExtTextcolumnMetaData;
    exports.ɵqd = ExtTextcolumnComponent;
    exports.ɵqe = Ext_grid_column_Text;
    exports.ɵqf = ExtTreecolumnMetaData;
    exports.ɵqg = ExtTreecolumnComponent;
    exports.ɵqh = Ext_grid_column_Tree;
    exports.ɵqi = ExtGridMetaData;
    exports.ɵqj = ExtGridComponent;
    exports.ɵqk = Ext_grid_Grid;
    exports.ɵql = ExtHeadercontainerMetaData;
    exports.ɵqm = ExtHeadercontainerComponent;
    exports.ɵqn = ExtLockedgridMetaData;
    exports.ɵqo = ExtLockedgridComponent;
    exports.ɵqp = Ext_grid_LockedGrid;
    exports.ɵqq = ExtLockedgridregionMetaData;
    exports.ɵqr = ExtLockedgridregionComponent;
    exports.ɵqs = Ext_grid_LockedGridRegion;
    exports.ɵqt = ExtGridcolumnsmenuMetaData;
    exports.ɵqu = ExtGridcolumnsmenuComponent;
    exports.ɵqv = Ext_grid_menu_Columns;
    exports.ɵqw = Ext_grid_menu_Shared;
    exports.ɵqx = Ext_menu_Item;
    exports.ɵqy = ExtGridgroupbythismenuitemMetaData;
    exports.ɵqz = ExtGridgroupbythismenuitemComponent;
    exports.ɵr = Ext_BreadcrumbBar;
    exports.ɵra = Ext_grid_menu_GroupByThis;
    exports.ɵrb = ExtGridshowingroupsmenuitemMetaData;
    exports.ɵrc = ExtGridshowingroupsmenuitemComponent;
    exports.ɵrd = Ext_grid_menu_ShowInGroups;
    exports.ɵre = Ext_menu_CheckItem;
    exports.ɵrf = ExtGridsortascmenuitemMetaData;
    exports.ɵrg = ExtGridsortascmenuitemComponent;
    exports.ɵrh = Ext_grid_menu_SortAsc;
    exports.ɵri = Ext_menu_RadioItem;
    exports.ɵrj = ExtGridsortdescmenuitemMetaData;
    exports.ɵrk = ExtGridsortdescmenuitemComponent;
    exports.ɵrl = Ext_grid_menu_SortDesc;
    exports.ɵrm = ExtPagingtoolbarMetaData;
    exports.ɵrn = ExtPagingtoolbarComponent;
    exports.ɵro = Ext_grid_PagingToolbar;
    exports.ɵrp = ExtGridrowMetaData;
    exports.ɵrq = ExtGridrowComponent;
    exports.ɵrr = Ext_grid_Row;
    exports.ɵrs = ExtRowbodyMetaData;
    exports.ɵrt = ExtRowbodyComponent;
    exports.ɵru = Ext_grid_RowBody;
    exports.ɵrv = ExtRoweditorbarMetaData;
    exports.ɵrw = ExtRoweditorbarComponent;
    exports.ɵrx = Ext_grid_rowedit_Bar;
    exports.ɵry = ExtRoweditorcellMetaData;
    exports.ɵrz = ExtRoweditorcellComponent;
    exports.ɵs = Ext_Toolbar;
    exports.ɵsa = Ext_grid_rowedit_Cell;
    exports.ɵsb = ExtRoweditorMetaData;
    exports.ɵsc = ExtRoweditorComponent;
    exports.ɵsd = Ext_grid_rowedit_Editor;
    exports.ɵse = Ext_dataview_ListItem;
    exports.ɵsf = ExtRoweditorgapMetaData;
    exports.ɵsg = ExtRoweditorgapComponent;
    exports.ɵsh = Ext_grid_rowedit_Gap;
    exports.ɵsi = ExtRowheaderMetaData;
    exports.ɵsj = ExtRowheaderComponent;
    exports.ɵsk = Ext_grid_RowHeader;
    exports.ɵsl = ExtGridsummaryrowMetaData;
    exports.ɵsm = ExtGridsummaryrowComponent;
    exports.ɵsn = Ext_grid_SummaryRow;
    exports.ɵso = ExtTreeMetaData;
    exports.ɵsp = ExtTreeComponent;
    exports.ɵsq = Ext_tree_Tree;
    exports.ɵsr = ExtImageMetaData;
    exports.ɵss = ExtImageComponent;
    exports.ɵst = Ext_Image;
    exports.ɵsu = ExtIndicatorMetaData;
    exports.ɵsv = ExtIndicatorComponent;
    exports.ɵsw = Ext_Indicator;
    exports.ɵsx = ExtLabelMetaData;
    exports.ɵsy = ExtLabelComponent;
    exports.ɵsz = Ext_Label;
    exports.ɵt = ExtButtonMetaData;
    exports.ɵta = ExtTreelistMetaData;
    exports.ɵtb = ExtTreelistComponent;
    exports.ɵtc = Ext_list_Tree;
    exports.ɵtd = ExtTreelistitemMetaData;
    exports.ɵte = ExtTreelistitemComponent;
    exports.ɵtf = Ext_list_TreeItem;
    exports.ɵtg = Ext_list_AbstractTreeItem;
    exports.ɵth = ExtLoadmaskMetaData;
    exports.ɵti = ExtLoadmaskComponent;
    exports.ɵtj = Ext_LoadMask;
    exports.ɵtk = Ext_Mask;
    exports.ɵtl = ExtMaskMetaData;
    exports.ɵtm = ExtMaskComponent;
    exports.ɵtn = ExtMediaMetaData;
    exports.ɵto = ExtMediaComponent;
    exports.ɵtp = ExtMenucheckitemMetaData;
    exports.ɵtq = ExtMenucheckitemComponent;
    exports.ɵtr = ExtMenuitemMetaData;
    exports.ɵts = ExtMenuitemComponent;
    exports.ɵtt = Ext_menu_TextItem;
    exports.ɵtu = ExtMenuMetaData;
    exports.ɵtv = ExtMenuComponent;
    exports.ɵtw = Ext_menu_Menu;
    exports.ɵtx = ExtMenuradioitemMetaData;
    exports.ɵty = ExtMenuradioitemComponent;
    exports.ɵtz = ExtMenuseparatorMetaData;
    exports.ɵu = ExtButtonComponent;
    exports.ɵua = ExtMenuseparatorComponent;
    exports.ɵub = Ext_menu_Separator;
    exports.ɵuc = ExtMessageboxMetaData;
    exports.ɵud = ExtMessageboxComponent;
    exports.ɵue = Ext_MessageBox;
    exports.ɵuf = Ext_Dialog;
    exports.ɵug = ExtNavigationviewMetaData;
    exports.ɵuh = ExtNavigationviewComponent;
    exports.ɵui = Ext_NavigationView;
    exports.ɵuj = ExtPanelMetaData;
    exports.ɵuk = ExtPanelComponent;
    exports.ɵul = Ext_panel_Panel;
    exports.ɵum = ExtAccordionMetaData;
    exports.ɵun = ExtAccordionComponent;
    exports.ɵuo = Ext_panel_Accordion;
    exports.ɵup = ExtDatepanelMetaData;
    exports.ɵuq = ExtDatepanelComponent;
    exports.ɵur = Ext_panel_Date;
    exports.ɵus = ExtDatetitleMetaData;
    exports.ɵut = ExtDatetitleComponent;
    exports.ɵuu = Ext_panel_DateTitle;
    exports.ɵuv = Ext_panel_Title;
    exports.ɵuw = ExtPanelheaderMetaData;
    exports.ɵux = ExtPanelheaderComponent;
    exports.ɵuy = Ext_panel_Header;
    exports.ɵuz = ExtTimepanelMetaData;
    exports.ɵv = Ext_Button;
    exports.ɵva = ExtTimepanelComponent;
    exports.ɵvb = Ext_panel_Time;
    exports.ɵvc = ExtPaneltitleMetaData;
    exports.ɵvd = ExtPaneltitleComponent;
    exports.ɵve = ExtYearpickerMetaData;
    exports.ɵvf = ExtYearpickerComponent;
    exports.ɵvg = Ext_panel_YearPicker;
    exports.ɵvh = ExtDatepickerMetaData;
    exports.ɵvi = ExtDatepickerComponent;
    exports.ɵvj = Ext_DatePicker;
    exports.ɵvk = Ext_picker_Picker;
    exports.ɵvl = ExtPickerMetaData;
    exports.ɵvm = ExtPickerComponent;
    exports.ɵvn = Ext_Picker;
    exports.ɵvo = ExtSelectpickerMetaData;
    exports.ɵvp = ExtSelectpickerComponent;
    exports.ɵvq = Ext_picker_SelectPicker;
    exports.ɵvr = ExtPickerslotMetaData;
    exports.ɵvs = ExtPickerslotComponent;
    exports.ɵvt = Ext_picker_Slot;
    exports.ɵvu = ExtTabletpickerMetaData;
    exports.ɵvv = ExtTabletpickerComponent;
    exports.ɵvw = Ext_picker_Tablet;
    exports.ɵvx = ExtPivotgridcellMetaData;
    exports.ɵvy = ExtPivotgridcellComponent;
    exports.ɵvz = Ext_pivot_cell_Cell;
    exports.ɵw = ExtCalendar_eventMetaData;
    exports.ɵwa = ExtPivotgridgroupcellMetaData;
    exports.ɵwb = ExtPivotgridgroupcellComponent;
    exports.ɵwc = Ext_pivot_cell_Group;
    exports.ɵwd = ExtPivotd3containerMetaData;
    exports.ɵwe = ExtPivotd3containerComponent;
    exports.ɵwf = Ext_pivot_d3_Container;
    exports.ɵwg = Ext_pivot_d3_AbstractContainer;
    exports.ɵwh = ExtPivotheatmapMetaData;
    exports.ɵwi = ExtPivotheatmapComponent;
    exports.ɵwj = Ext_pivot_d3_HeatMap;
    exports.ɵwk = ExtPivottreemapMetaData;
    exports.ɵwl = ExtPivottreemapComponent;
    exports.ɵwm = Ext_pivot_d3_TreeMap;
    exports.ɵwn = ExtPivotgridMetaData;
    exports.ɵwo = ExtPivotgridComponent;
    exports.ɵwp = Ext_pivot_Grid;
    exports.ɵwq = ExtPivotconfigfieldMetaData;
    exports.ɵwr = ExtPivotconfigfieldComponent;
    exports.ɵws = Ext_pivot_plugin_configurator_Column;
    exports.ɵwt = ExtPivotconfigcontainerMetaData;
    exports.ɵwu = ExtPivotconfigcontainerComponent;
    exports.ɵwv = Ext_pivot_plugin_configurator_Container;
    exports.ɵww = ExtPivotconfigformMetaData;
    exports.ɵwx = ExtPivotconfigformComponent;
    exports.ɵwy = Ext_pivot_plugin_configurator_Form;
    exports.ɵwz = ExtPivotconfigpanelMetaData;
    exports.ɵx = ExtCalendar_eventComponent;
    exports.ɵxa = ExtPivotconfigpanelComponent;
    exports.ɵxb = Ext_pivot_plugin_configurator_Panel;
    exports.ɵxc = ExtPivotsettingsMetaData;
    exports.ɵxd = ExtPivotsettingsComponent;
    exports.ɵxe = Ext_pivot_plugin_configurator_Settings;
    exports.ɵxf = ExtPivotrangeeditorMetaData;
    exports.ɵxg = ExtPivotrangeeditorComponent;
    exports.ɵxh = Ext_pivot_plugin_rangeeditor_Panel;
    exports.ɵxi = ExtPivotgridrowMetaData;
    exports.ɵxj = ExtPivotgridrowComponent;
    exports.ɵxk = Ext_pivot_Row;
    exports.ɵxl = ExtProgressMetaData;
    exports.ɵxm = ExtProgressComponent;
    exports.ɵxn = Ext_ProgressBarWidget;
    exports.ɵxo = ExtSegmentedbuttonMetaData;
    exports.ɵxp = ExtSegmentedbuttonComponent;
    exports.ɵxq = Ext_button_Segmented;
    exports.ɵxr = ExtSheetMetaData;
    exports.ɵxs = ExtSheetComponent;
    exports.ɵxt = ExtSliderMetaData;
    exports.ɵxu = ExtSliderComponent;
    exports.ɵxv = Ext_slider_Slider;
    exports.ɵxw = ExtThumbMetaData;
    exports.ɵxx = ExtThumbComponent;
    exports.ɵxy = Ext_slider_Thumb;
    exports.ɵxz = ExtTogglesliderMetaData;
    exports.ɵy = Ext_calendar_Event;
    exports.ɵya = ExtTogglesliderComponent;
    exports.ɵyb = Ext_slider_Toggle;
    exports.ɵyc = ExtSpacerMetaData;
    exports.ɵyd = ExtSpacerComponent;
    exports.ɵye = Ext_Spacer;
    exports.ɵyf = ExtSparklinebarMetaData;
    exports.ɵyg = ExtSparklinebarComponent;
    exports.ɵyh = Ext_sparkline_Bar;
    exports.ɵyi = Ext_sparkline_BarBase;
    exports.ɵyj = Ext_sparkline_Base;
    exports.ɵyk = ExtSparklineMetaData;
    exports.ɵyl = ExtSparklineComponent;
    exports.ɵym = ExtSparklineboxMetaData;
    exports.ɵyn = ExtSparklineboxComponent;
    exports.ɵyo = Ext_sparkline_Box;
    exports.ɵyp = ExtSparklinebulletMetaData;
    exports.ɵyq = ExtSparklinebulletComponent;
    exports.ɵyr = Ext_sparkline_Bullet;
    exports.ɵys = ExtSparklinediscreteMetaData;
    exports.ɵyt = ExtSparklinediscreteComponent;
    exports.ɵyu = Ext_sparkline_Discrete;
    exports.ɵyv = ExtSparklinelineMetaData;
    exports.ɵyw = ExtSparklinelineComponent;
    exports.ɵyx = Ext_sparkline_Line;
    exports.ɵyy = ExtSparklinepieMetaData;
    exports.ɵyz = ExtSparklinepieComponent;
    exports.ɵz = Ext_calendar_EventBase;
    exports.ɵza = Ext_sparkline_Pie;
    exports.ɵzb = ExtSparklinetristateMetaData;
    exports.ɵzc = ExtSparklinetristateComponent;
    exports.ɵzd = Ext_sparkline_TriState;
    exports.ɵze = ExtSplitbuttonMetaData;
    exports.ɵzf = ExtSplitbuttonComponent;
    exports.ɵzg = Ext_SplitButton;
    exports.ɵzh = ExtTabbarMetaData;
    exports.ɵzi = ExtTabbarComponent;
    exports.ɵzj = Ext_TabBar;
    exports.ɵzk = ExtTabpanelMetaData;
    exports.ɵzl = ExtTabpanelComponent;
    exports.ɵzm = Ext_TabPanel;
    exports.ɵzn = ExtTabMetaData;
    exports.ɵzo = ExtTabComponent;
    exports.ɵzp = Ext_Tab;
    exports.ɵzq = ExtTooltipMetaData;
    exports.ɵzr = ExtTooltipComponent;
    exports.ɵzs = Ext_tip_ToolTip;
    exports.ɵzt = ExtTitleMetaData;
    exports.ɵzu = ExtTitleComponent;
    exports.ɵzv = Ext_Title;
    exports.ɵzw = ExtTitlebarMetaData;
    exports.ɵzx = ExtTitlebarComponent;
    exports.ɵzy = Ext_TitleBar;
    exports.ɵzz = ExtToolMetaData;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=sencha-ext-angular.umd.js.map
