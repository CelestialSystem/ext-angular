import { __decorate, __metadata, __param } from 'tslib';
import { EventEmitter, ContentChild, ContentChildren, QueryList, ElementRef, Host, Optional, SkipSelf, Component, forwardRef, NgModule } from '@angular/core';

class Ext_Base {
    static getProperties(properties) {
        return properties.concat(Ext_Base.PROPERTIES);
    }
    static getEvents(events) {
        return events.concat(Ext_Base.EVENTS);
    }
}
Ext_Base.PROPERTIES = [
    'eng',
    'viewport',
    'align',
    'plugins',
    'responsiveConfig',
    'responsiveFormulas',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Base.EVENTS = [
    { name: 'ready', parameters: '' }
];
//public static XTYPE: string = '';
//public static PROPERTIESOBJECT: any = {
//[object Object]
//"ext": ["string"],
//"ewc": ["string"],
//"viewport":["boolean"],
//"plugins":["Array","Ext.enums.Plugin","Object","Ext.plugin.Abstract"],
//"responsiveFormulas":["Object"]
//};
//static METHODS: any[] = [];
//public static EVENTNAMES: string[] = [];

class Ext_Evented extends Ext_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_Evented.PROPERTIES);
        return Ext_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Evented.EVENTS);
        return Ext_Base.getEvents(events);
    }
}
Ext_Evented.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Evented.EVENTS = [
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Evented.EVENTNAMES);
//    return Ext_Base.getEventNames(eventnames);
//}

class Ext_Widget extends Ext_Evented {
    static getProperties(properties) {
        properties = properties.concat(Ext_Widget.PROPERTIES);
        return Ext_Evented.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Widget.EVENTS);
        return Ext_Evented.getEvents(events);
    }
}
Ext_Widget.PROPERTIES = [
    'alignSelf',
    'alwaysOnTop',
    'border',
    'cls',
    'constrainAlign',
    'disabled',
    'flex',
    'floated',
    'height',
    'hidden',
    'hideMode',
    'id',
    'instanceCls',
    'itemId',
    'margin',
    'name',
    'relative',
    'renderTo',
    'ripple',
    'shadow',
    'shim',
    'style',
    'toFrontOnShow',
    'touchAction',
    'translatable',
    'ui',
    'userCls',
    'width',
    'x',
    'y',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Widget.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'widget' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'widget,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'widget,event' },
    { name: 'focusenter', parameters: 'widget,event' },
    { name: 'focusleave', parameters: 'widget,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'widget' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Widget.EVENTNAMES);
//    return Ext_Evented.getEventNames(eventnames);
//}

class Ext_Component extends Ext_Widget {
    static getProperties(properties) {
        properties = properties.concat(Ext_Component.PROPERTIES);
        return Ext_Widget.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Component.EVENTS);
        return Ext_Widget.getEvents(events);
    }
}
Ext_Component.PROPERTIES = [
    'axisLock',
    'bottom',
    'centered',
    'contentEl',
    'data',
    'displayed',
    'docked',
    'draggable',
    'fullscreen',
    'hideAnimation',
    'hideOnMaskTap',
    'html',
    'left',
    'maxHeight',
    'maxWidth',
    'minHeight',
    'minWidth',
    'modal',
    'modelValidation',
    'padding',
    'record',
    'right',
    'scrollable',
    'showAnimation',
    'tabIndex',
    'tooltip',
    'top',
    'tpl',
    'tplWriteMode',
    'userSelectable',
    'weight',
    'xtype',
    'zIndex',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Component.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'component' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'component,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'component,event' },
    { name: 'focusenter', parameters: 'component,event' },
    { name: 'focusleave', parameters: 'component,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'component' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Component.EVENTNAMES);
//    return Ext_Widget.getEventNames(eventnames);
//}

class Ext_Container extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_Container.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Container.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_Container.PROPERTIES = [
    'activeItem',
    'autoDestroy',
    'autoSize',
    'bodyCls',
    'cardSwitchAnimation',
    'control',
    'defaultFocus',
    'defaults',
    'defaultType',
    'innerCls',
    'items',
    'layout',
    'manageBorders',
    'masked',
    'weighted',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Container.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,container,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'container,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'container' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'container,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,container,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'container,event' },
    { name: 'focusenter', parameters: 'container,event' },
    { name: 'focusleave', parameters: 'container,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'container,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'container,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'container,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'container' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Container.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

class Ext_Panel extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_Panel.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Panel.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_Panel.PROPERTIES = [
    'anchor',
    'anchorPosition',
    'bbar',
    'bodyBorder',
    'bodyPadding',
    'bodyStyle',
    'border',
    'buttons',
    'buttonToolbar',
    'closable',
    'closeAction',
    'closeToolText',
    'collapsed',
    'collapsible',
    'header',
    'headerPosition',
    'icon',
    'iconAlign',
    'iconCls',
    'lbar',
    'manageBorders',
    'rbar',
    'resizable',
    'tbar',
    'title',
    'titleAlign',
    'titleCollapse',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Panel.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,panel,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'panel,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'panel' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'panel' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'panel,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'panel' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'panel,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'panel' },
    { name: 'deactivate', parameters: 'oldActiveItem,panel,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'panel' },
    { name: 'drawershow', parameters: 'panel' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'panel' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'panel,event' },
    { name: 'focusenter', parameters: 'panel,event' },
    { name: 'focusleave', parameters: 'panel,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'panel,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'panel,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'panel,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'panel,context' },
    { name: 'resizedragcancel', parameters: 'panel,context' },
    { name: 'resizedragend', parameters: 'panel,context' },
    { name: 'resizedragstart', parameters: 'panel,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'panel' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Panel.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

class Ext_Sheet extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_Sheet.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Sheet.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_Sheet.PROPERTIES = [
    'centered',
    'cover',
    'enter',
    'exit',
    'reveal',
    'side',
    'stretchX',
    'stretchY',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Sheet.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,sheet,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'sheet,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'sheet' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'sheet' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'sheet,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'sheet' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'sheet,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'sheet' },
    { name: 'deactivate', parameters: 'oldActiveItem,sheet,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'sheet' },
    { name: 'drawershow', parameters: 'sheet' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'sheet' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'sheet,event' },
    { name: 'focusenter', parameters: 'sheet,event' },
    { name: 'focusleave', parameters: 'sheet,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'sheet,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'sheet,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'sheet,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'sheet,context' },
    { name: 'resizedragcancel', parameters: 'sheet,context' },
    { name: 'resizedragend', parameters: 'sheet,context' },
    { name: 'resizedragstart', parameters: 'sheet,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'sheet' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Sheet.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

class Ext_ActionSheet extends Ext_Sheet {
    static getProperties(properties) {
        properties = properties.concat(Ext_ActionSheet.PROPERTIES);
        return Ext_Sheet.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_ActionSheet.EVENTS);
        return Ext_Sheet.getEvents(events);
    }
}
Ext_ActionSheet.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_ActionSheet.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,actionsheet,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'actionsheet,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'actionsheet' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'actionsheet' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'actionsheet,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'actionsheet' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'actionsheet,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'actionsheet' },
    { name: 'deactivate', parameters: 'oldActiveItem,actionsheet,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'actionsheet' },
    { name: 'drawershow', parameters: 'actionsheet' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'actionsheet' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'actionsheet,event' },
    { name: 'focusenter', parameters: 'actionsheet,event' },
    { name: 'focusleave', parameters: 'actionsheet,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'actionsheet,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'actionsheet,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'actionsheet,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'actionsheet,context' },
    { name: 'resizedragcancel', parameters: 'actionsheet,context' },
    { name: 'resizedragend', parameters: 'actionsheet,context' },
    { name: 'resizedragstart', parameters: 'actionsheet,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'actionsheet' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_ActionSheet.EVENTNAMES);
//    return Ext_Sheet.getEventNames(eventnames);
//}

class EngBase {
    constructor(eRef, hostComponent, properties, events) {
        this.node = eRef.nativeElement;
        this.parentNode = hostComponent;
        this.properties = properties;
        this.events = events;
        this.events.forEach((event, n) => {
            if (event.name != 'fullscreen') {
                this[event.name] = new EventEmitter();
            }
            else {
                this[event.name + 'event'] = new EventEmitter();
            }
        });
        this.newDiv = document.createElement('div');
        //var t = document.createTextNode("newDiv");
        //this.newDiv.appendChild(t);
        this.node.insertAdjacentElement('beforebegin', this.newDiv);
        this.base = EngBase;
    }
    get childComponents() {
        return this._childComponents.filter(item => item !== this);
    }
    baseOnInit() { }
    baseAfterViewInit() {
        this.initMe();
    }
    //******* base start */
    initMe() {
        //console.log('');console.log('*** initMe for ' + this.currentElName);
        this.createRawChildren();
        this.setParentType();
        this.setDirection();
        this.figureOutA();
        this.createProps(this.properties, this.events);
        this.createExtComponent();
    }
    createRawChildren() {
        if (this.currentEl.isAngular) {
            this.currentEl.rawChildren = this.currentEl.childComponents;
        }
        else {
            this.currentEl.ewcChildren = Array.from(this.currentEl.children);
            this.currentEl.rawChildren = [];
            var num = 0;
            for (var i = 0; i < this.currentEl.ewcChildren.length; i++) {
                if (this.currentEl.ewcChildren[i].xtype != undefined) {
                    this.currentEl.rawChildren[num] = this.currentEl.ewcChildren[i];
                    num++;
                }
                else {
                    //do something with div (add an Ext.widget...)
                }
            }
        }
    }
    setParentType() {
        // if (this.parentEl == null) {
        //     this.hasParent = false;
        // }
        // else {
        //     if (this.parentElName.substring(0, 4) == 'EXT-') {
        //         this.hasParent = true;
        //     }
        //     else {
        //         this.hasParent = false;
        //     }
        // }
        if (this.parentNode == null) {
            this.parentType = 'html';
        }
        else {
            if (this.parentElName.substring(0, 4) == 'EXT-') {
                this.parentType = 'ext';
            }
            else {
                this.parentType = 'html';
            }
        }
    }
    setDirection() {
        if (this.base.count == 0) {
            this.base.count++;
            //        if (this.hasParent == false) {
            if (this.parentType != 'ext') {
                this.base.DIRECTION = 'TopToBottom';
            }
            else {
                //if (this.parentElName.substring(0, 4) == 'EXT-') {
                this.base.DIRECTION = 'BottomToTop';
                //}
                //else {
                //    this.base.DIRECTION = 'TopToBottom';
                //}
            }
        }
        //console.log(this.base.DIRECTION);
    }
    figureOutA() {
        if (this.parentType == 'ext' &&
            this.parentEl.A == undefined &&
            this.parentEl.nodeName.substring(0, 4) == 'EXT-') {
            this.init(this.parentEl);
        }
        if (this.currentEl.A == undefined) {
            this.init(this.currentEl);
        }
    }
    init(component) {
        component.A = {};
        component.A.props = {};
        component.A.xtype = component.xtype;
        component.A.CHILDRENCOMPONENTS = Array.from(this.currentEl.rawChildren);
        component.A.CHILDRENCOMPONENTSCOUNT = this.currentEl.rawChildren.length;
        component.A.CHILDRENCOMPONENTSADDED = component.A.CHILDRENCOMPONENTSCOUNT;
        component.A.CHILDRENCOMPONENTSLEFT = component.A.CHILDRENCOMPONENTSCOUNT;
    }
    createExtComponent() {
        var A = this.currentEl.A;
        //console.dir(A)
        var meA = A;
        var methis = this;
        if (methis.base.DIRECTION == 'BottomToTop') {
            if (A.props['viewport'] == true) {
                //this.newDiv.parentNode.removeChild(this.newDiv);
                if (this.parentType == 'html') {
                    Ext.onReady(function () {
                        methis.currentEl.A.ext = Ext.create(meA.props);
                        //console.log('0-Ext.application: ' + meA.props.xtype);
                        methis.assessChildren(methis.base, methis.xtype);
                        Ext.application({
                            name: 'MyEWCApp',
                            launch: function () {
                                Ext.Viewport.add([methis.currentEl.A.ext]);
                                if (window['router']) {
                                    window['router'].init();
                                }
                                methis.sendReadyEvent(methis);
                            }
                        });
                    });
                }
                else {
                    console.error('error: viewport not allowed on this element');
                }
            }
            else {
                if (this.parentType == 'html') {
                    meA.props.renderTo = this.newDiv;
                }
                Ext.onReady(function () {
                    //console.log(methis.parentType + ' - Ext.create: ' + methis.currentElName + ' HTML parent: ' + methis.currentElName);
                    methis.currentEl.A.ext = Ext.create(meA.props);
                    methis.assessChildren(methis.base, methis.xtype);
                });
            }
        }
        else {
            console.log('TopToBottom');
            if (A.props['viewport'] == true) {
                //this.newDiv.parentNode.removeChild(this.newDiv);
                if (this.parentType == 'html') {
                    Ext.onReady(function () {
                        methis.currentEl.A.ext = Ext.create(meA.props);
                        //console.log('0-Ext.application: ' + meA.props.xtype);
                        methis.assessChildren(methis.base, methis.xtype);
                        Ext.application({
                            name: 'MyEWCApp',
                            launch: function () {
                                Ext.Viewport.add([methis.currentEl.A.ext]);
                                if (window['router']) {
                                    window['router'].init();
                                }
                                methis.sendReadyEvent(methis);
                            }
                        });
                    });
                }
                else {
                    console.error('error: viewport not allowed on this element');
                }
            }
            else {
                if (this.parentType == 'html') {
                    meA.props.renderTo = this.newDiv;
                }
                Ext.onReady(function () {
                    //console.log(this.parentType + ' - Ext.create: ' + methis.currentElName + ' HTML parent: ' + methis.currentElName);
                    methis.currentEl.A.ext = Ext.create(meA.props);
                    methis.assessChildren(methis.base, methis.xtype);
                });
            }
        }
    }
    assessAngularChildren(base, xtype, A) {
        if (this._extitems != undefined) {
            if (this._extitems.length == 1) {
                var el = Ext.get(this._extitem.nativeElement);
                var w = Ext.create({ xtype: 'widget', element: el });
                this.addTheChild(A.ext, w, null);
            }
        }
        // if (this._extitems != undefined) {
        //     if (this._extroutes.length == 1) {
        //         A.ext.setHtml(this._extroute.nativeElement);
        //     }
        // }
    }
    assessChildren(base, xtype) {
        //console.log('assessChildren for: ' + xtype);
        var A = this.currentEl.A;
        this.assessAngularChildren(base, xtype, A);
        if (base.DIRECTION == 'BottomToTop') {
            if (A.CHILDRENCOMPONENTSCOUNT == 0 &&
                A.CHILDRENCOMPONENTS.length == 0 &&
                this.parentType == 'html') {
                //console.log('Solo');
                //console.log('1- ready event for ' + this.currentElName);
                this.sendReadyEvent(this);
            }
            else if (A.CHILDRENCOMPONENTSADDED > 0) {
                this.addChildren(this, A.CHILDRENCOMPONENTS);
                //this.node.remove(); ?? is this needed??
            }
            if (this.parentType != 'ext') {
                if (base.DIRECTION == 'BottomToTop') {
                    //console.log('5- ready event for ' + this.currentElName);
                    this.sendReadyEvent(this);
                }
            }
            if (this.parentType == 'ext') {
                if (base.DIRECTION == 'BottomToTop') {
                    this.parentEl.A.CHILDRENCOMPONENTS.push(this.currentEl);
                    this.parentEl.A.CHILDRENCOMPONENTSADDED++;
                    //console.log('4- ready event for ' + this.currentElName);
                    this.sendReadyEvent(this);
                }
                else {
                    this.parentEl.A.CHILDRENCOMPONENTSLEFT--;
                    if (this.parentEl.A.CHILDRENCOMPONENTSLEFT == 0) {
                        this.addChildren(this.parentEl, this.parentEl.A.CHILDRENCOMPONENTS);
                        //console.log('3- ready event for ' + this.parentElName + '(parent)');
                        this.sendReadyEvent(this.parentEl);
                    }
                }
            }
        }
        else { //base.DIRECTION == 'TopToBottom'
            if (this.parentType == 'ext') {
                //console.log('this: ' + A.xtype + ' ' + A.props.title + ' parent: ' + this.parentEl.A.xtype)
                //console.log('length=0, send ready for ' + this.xtype)
                this.sendReadyEvent(this);
            }
            // else {
            //     //console.log(A.props)
            //     //console.log('this: ' + A.xtype + ' ' + A.props.title + ' root: ')
            // }
            if (A.CHILDRENCOMPONENTS.length == 0) {
                this.checkParent(this.parentEl, base, this);
            }
            // else {
            //     //base.COMPONENTCOUNT = base.COMPONENTCOUNT + A.CHILDRENCOMPONENTS.length;
            // }
        }
    }
    checkParent(component, base, me) {
        //if (component.A == null) {
        if (component == null) {
            me.sendReadyEvent(me);
        }
        else {
            component.A.CHILDRENCOMPONENTSLEFT--;
            //base.COMPONENTLEFTCOUNT = base.COMPONENTLEFTCOUNT + 1;
            if (component.A.CHILDRENCOMPONENTSLEFT == 0) {
                this.addChildren(component, component.A.CHILDRENCOMPONENTS);
                this.checkParent(component.parentEl, base, component);
            }
        }
    }
    addChildren(child, children) {
        for (var i = 0; i < children.length; i++) {
            //why is this created as an object??
            var childItem = { parentCmp: {}, childCmp: {} };
            childItem.parentCmp = child.currentEl.A.ext;
            var A2;
            if (children[i]._extitems != undefined) {
                A2 = children[i].node.A;
            }
            else {
                A2 = children[i].A;
            }
            childItem.childCmp = A2.ext;
            this.addTheChild(childItem.parentCmp, childItem.childCmp, null);
        }
    }
    addTheChild(parentCmp, childCmp, location) {
        var parentxtype = parentCmp.xtype;
        var childxtype = childCmp.xtype;
        //console.log('addTheChild: ' + parentxtype + '(' + parentCmp.ext + ')' + ' - ' + childxtype + '(' + childCmp.ext + ')');
        //if (childxtype == 'widget')
        if (this.currentEl.A.ext.initialConfig.align != undefined) {
            if (parentxtype != 'tooltip' && parentxtype != 'titlebar' && parentxtype != 'grid' && parentxtype != 'lockedgrid' && parentxtype != 'button') {
                console.error('Can only use align property if parent is a Titlebar or Grid or Button');
                return;
            }
        }
        var defaultparent = false;
        var defaultchild = false;
        switch (parentxtype) {
            case 'button':
                switch (childxtype) {
                    case 'menu':
                        parentCmp.setMenu(childCmp);
                        break;
                    default:
                        defaultparent = true;
                        break;
                }
                break;
            case 'booleancolumn':
            case 'checkcolumn':
            case 'gridcolumn':
            case 'column':
            case 'templatecolumn':
            case 'gridcolumn':
            case 'column':
            case 'templatecolumn':
            case 'datecolumn':
            case 'dragcolumn':
            case 'numbercolumn':
            case 'selectioncolumn':
            case 'textcolumn':
            case 'treecolumn':
            case 'rownumberer':
                switch (childxtype) {
                    case 'renderercell':
                        parentCmp.setCell(childCmp);
                        break;
                    case 'column':
                    case 'gridcolumn':
                        parentCmp.add(childCmp);
                        break;
                    default:
                        defaultparent = true;
                        break;
                }
                break;
            case 'grid':
            case 'lockedgrid':
                switch (childxtype) {
                    case 'gridcolumn':
                    case 'column':
                    case 'treecolumn':
                    case 'textcolumn':
                    case 'checkcolumn':
                    case 'datecolumn':
                    case 'rownumberer':
                    case 'numbercolumn':
                    case 'booleancolumn':
                        if (location == null) {
                            if (parentxtype == 'grid') {
                                parentCmp.addColumn(childCmp);
                            }
                            else {
                                parentCmp.add(childCmp);
                            }
                        }
                        else {
                            var regCols = 0;
                            if (parentCmp.registeredColumns != undefined) {
                                regCols = parentCmp.registeredColumns.length;
                            }
                            if (parentxtype == 'grid') {
                                //mjg console.log(parentCmp)
                                parentCmp.insertColumn(location + regCols, childCmp);
                            }
                            else {
                                parentCmp.insert(location + regCols, childCmp);
                            }
                        }
                        break;
                    default:
                        defaultparent = true;
                        break;
                }
                break;
            default:
                defaultparent = true;
                break;
        }
        ;
        switch (childxtype) {
            case 'toolbar':
            case 'titlebar':
                if (parentCmp.getHideHeaders != undefined) {
                    if (parentCmp.getHideHeaders() === false) {
                        parentCmp.insert(1, childCmp);
                    }
                    else {
                        parentCmp.add(childCmp);
                    }
                }
                else {
                    if (parentCmp.add != undefined) {
                        if (location == null) {
                            parentCmp.add(childCmp);
                        }
                        else {
                            parentCmp.insert(location, childCmp);
                        }
                    }
                    else {
                        parentCmp.add(childCmp);
                    }
                }
                break;
            case 'tooltip':
                parentCmp.setTooltip(childCmp);
                break;
            case 'plugin':
                parentCmp.setPlugin(childCmp);
                break;
            default:
                defaultchild = true;
                break;
        }
        if (defaultparent == true && defaultchild == true) {
            //console.log(parentxtype + '.add(' + childxtype + ')')
            parentCmp.add(childCmp);
        }
        // if (this.parentNode.childrenYetToBeDefined > 0) {
        //     this.parentNode.childrenYetToBeDefined--
        // }
        // //console.log('childrenYetToBeDefined(after) '  + this.parentNode.childrenYetToBeDefined)
        // if (this.parentNode.childrenYetToBeDefined == 0) {
        //     this.parentNode.dispatchEvent(new CustomEvent('ready',{detail:{cmp: this.parentNode.ext}}))
        // }
    }
    atEnd() {
        //console.log('*** at end');
        //console.log('this - ' + this.currentElName);
        //console.dir(this.currentEl.A);
        if (this.parentEl != null) {
            //console.log('parent - ' + this.parentElName);
            //console.dir(this.parentEl.A);
        }
        else {
            //console.log('No EXT parent');
        }
    }
    get currentEl() {
        if (this._extitems != undefined) {
            return this.node;
        }
        else {
            return this;
        }
    }
    getCurrentElName(component) {
        if (component._extitems != undefined) {
            return component.node.nodeName;
        }
        else {
            return component.nodeName;
        }
    }
    get currentElName() {
        if (this._extitems != undefined) {
            return this.node.nodeName;
        }
        else {
            return this.nodeName;
        }
    }
    get isAngular() {
        if (this._extitems != undefined) {
            return true;
        }
        else {
            return false;
        }
    }
    get parentEl() {
        if (this.isAngular) {
            if (this.parentNode == null) {
                return null;
            }
            return this.parentNode.node;
        }
        else {
            return this.parentNode;
        }
    }
    get parentElName() {
        if (this.isAngular) {
            if (this.parentNode == null) {
                return null;
            }
            return this.parentNode.node.nodeName;
        }
        else {
            return this.parentNode.nodeName;
        }
    }
    sendReadyEvent(component) {
        var cmp = component.currentEl.A.ext;
        if (component._extitems != undefined) {
            component['ready'].emit({ detail: { cmp: cmp } });
        }
        else {
            component.dispatchEvent(new CustomEvent('ready', { detail: { cmp: cmp } }));
        }
    }
    //******* base end */
    //******* props start */
    //createProps(properties, propertiesobject, events, eventnames) {
    createProps(properties, events) {
        var props = this.currentEl.A.props;
        props.xtype = this.xtype;
        let listenersProvided = false;
        for (var i = 0; i < properties.length; i++) {
            var prop = properties[i];
            if (prop == 'handler') {
                if (this[prop] != undefined) {
                    props[prop] = this[prop];
                }
            }
            //need to handle listeners coming in here
            if ((props.xtype === 'cartesian' || props.xtype === 'polar') && prop === 'layout') {
            }
            else if (prop == 'listeners' && this[prop] != undefined) {
                props[prop] = this[prop];
                listenersProvided = true;
            }
            else {
                if (this[prop] != undefined &&
                    prop != 'listeners' &&
                    prop != 'config' &&
                    prop != 'handler' &&
                    prop != 'fitToParent') {
                    props[prop] = this[prop];
                }
            }
        }
        if (true === this['fitToParent']) {
            props.top = 0,
                props.left = 0,
                props.width = '100%',
                props.height = '100%';
        }
        if (this['config'] !== {}) {
            Ext.apply(props, this['config']);
        }
        if (!listenersProvided) {
            props.listeners = {};
            var me = this;
            events.forEach(function (event) {
                let eventname = event.name;
                let eventparameters = event.parameters;
                me.currentEl.A.props.listeners[eventname] = function () {
                    //console.log('in the event ' + eventname)
                    let parameters = eventparameters;
                    let parms = parameters.split(',');
                    let args = Array.prototype.slice.call(arguments);
                    let emitparms = {};
                    if (me._extitems != undefined) {
                        for (let i = 0, j = parms.length; i < j; i++) {
                            emitparms[parms[i]] = args[i];
                        }
                        me[eventname].emit(emitparms);
                    }
                    else {
                    }
                };
            });
        }
        //dup??
        if (this._extitems != undefined) {
            events.forEach((event, n) => {
                if (event != 'fullscreen') {
                    this[event] = new EventEmitter();
                }
                else {
                    this[event + 'event'] = new EventEmitter();
                }
            });
        }
    }
    //******* props end */
    baseOnChanges(changes) {
        //console.log(`ngOnChanges`)
        //console.log(changes)
        let changesMsgs = [];
        for (let propName in changes) {
            let verb = '';
            if (changes[propName].firstChange === true) {
                verb = 'initialized';
            }
            else {
                verb = 'changed';
            }
            let val = changes[propName].currentValue;
            if (this.currentEl.A != undefined) {
                //console.dir(this.currentEl.A.ext)
                var capPropName = propName.charAt(0).toUpperCase() + propName.slice(1);
                var setFunction = 'set' + capPropName;
                //console.log(setFunction)
                if (this.currentEl.A.ext[setFunction] != undefined) {
                    this.currentEl.A.ext[setFunction](val);
                }
                else {
                    console.error(setFunction + ' not found for ' + this.currentEl.A.ext.xtype);
                }
            }
            else {
                if (verb == 'changed') {
                    //mjg console.log('change needed and ext not defined')
                }
            }
            changesMsgs.push(`$ $ to "$"`);
        }
        //console.log(`OnChanges: ${changesMsgs.join('; ')}`)
    }
    baseOnDestroy() {
        var childCmp;
        var parentCmp;
        if (childCmp == undefined || parentCmp == undefined) {
            return;
        }
        try {
            childCmp = this.currentEl.A.ext;
            if (this.parentEl != null) {
                parentCmp = this.parentEl.A.ext;
                //console.log(childCmp)
                //console.log(parentCmp)
                if (childCmp == undefined || parentCmp == undefined)
                    if (parentCmp.xtype == 'button' && childCmp.xtype == 'menu') {
                        //console.log('button/menu not deleted')
                    }
                    else if (parentCmp.xtype == 'carousel') {
                        //console.log('carousel parent not deleted')
                    }
                    else if (parentCmp.xtype == 'grid' && childCmp.xtype == 'column') {
                        //console.log('grid/column not deleted')
                        //console.log(childCmp)
                    }
                    else if (parentCmp.xtype == 'segmentedbutton' && childCmp.xtype == 'button') {
                        //console.log('segmentedbutton/button not deleted')
                    }
                    else if (parentCmp.xtype == 'button' && childCmp.xtype == 'tooltip') {
                        //console.log('button/tooltip not deleted')
                    }
                    else if (parentCmp.xtype == 'titlebar' && childCmp.xtype == 'button') {
                        //console.log('titlebar/button not deleted')
                    }
                    else if (parentCmp.xtype == 'titlebar' && childCmp.xtype == 'searchfield') {
                        //console.log('titlebar/searchfield not deleted')
                    }
                    else {
                        parentCmp.remove([childCmp]);
                        childCmp.destroy();
                    }
            }
            else {
                if (childCmp != undefined) {
                    childCmp.destroy();
                }
                else {
                    console.log('no destroy');
                }
            }
        }
        catch (e) {
            console.error(e);
            //mjg console.log('*****')
            //mjg console.log(parentCmp)
            //mjg console.log(childCmp)
            //mjg console.log('*****')
        }
    }
}
EngBase.count = 0;
EngBase.DIRECTION = '';
__decorate([
    ContentChild('extroute', { static: false }),
    __metadata("design:type", Object)
], EngBase.prototype, "_extroute", void 0);
__decorate([
    ContentChildren('extroute'),
    __metadata("design:type", QueryList)
], EngBase.prototype, "_extroutes", void 0);
__decorate([
    ContentChild('extitem', { static: false }),
    __metadata("design:type", Object)
], EngBase.prototype, "_extitem", void 0);
__decorate([
    ContentChildren('extitem'),
    __metadata("design:type", QueryList)
], EngBase.prototype, "_extitems", void 0);
__decorate([
    ContentChildren(EngBase),
    __metadata("design:type", QueryList)
], EngBase.prototype, "_childComponents", void 0);

var ExtActionsheetComponent_1;
class ExtActionsheetMetaData extends Ext_ActionSheet {
    static getAll() {
        ExtActionsheetMetaData.PROPERTIES = Ext_ActionSheet.getProperties(ExtActionsheetMetaData.PROPERTIES);
        ExtActionsheetMetaData.EVENTS = Ext_ActionSheet.getEvents(ExtActionsheetMetaData.EVENTS);
        ExtActionsheetMetaData.EVENTS.forEach((event) => {
            ExtActionsheetMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtActionsheetMetaData.PROPERTIES = [];
ExtActionsheetMetaData.EVENTS = [];
ExtActionsheetMetaData.EVENTNAMES = [];
(function () { ExtActionsheetMetaData.getAll(); })();
let ExtActionsheetComponent = ExtActionsheetComponent_1 = class ExtActionsheetComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtActionsheetMetaData.PROPERTIES, ExtActionsheetMetaData.EVENTS);
        this.xtype = 'actionsheet';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtActionsheetComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtActionsheetComponent = ExtActionsheetComponent_1 = __decorate([
    Component({
        selector: 'ext-actionsheet',
        inputs: ExtActionsheetMetaData.PROPERTIES,
        outputs: ExtActionsheetMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtActionsheetComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtActionsheetComponent);

class Ext_Media extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_Media.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Media.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_Media.PROPERTIES = [
    'autoPause',
    'autoResume',
    'controls',
    'loop',
    'media',
    'muted',
    'preload',
    'url',
    'volume',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Media.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'media' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'media,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'ended', parameters: 'media,time' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'media,event' },
    { name: 'focusenter', parameters: 'media,event' },
    { name: 'focusleave', parameters: 'media,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'mutedchange', parameters: 'media,muted' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'pause', parameters: 'media,time' },
    { name: 'play', parameters: 'media' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'stop', parameters: 'media' },
    { name: 'timeupdate', parameters: 'media,time' },
    { name: 'tofront', parameters: 'media' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'volumechange', parameters: 'media,volume' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Media.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

class Ext_Audio extends Ext_Media {
    static getProperties(properties) {
        properties = properties.concat(Ext_Audio.PROPERTIES);
        return Ext_Media.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Audio.EVENTS);
        return Ext_Media.getEvents(events);
    }
}
Ext_Audio.PROPERTIES = [
    'cls',
    'url',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Audio.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'audio' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'audio,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'ended', parameters: 'audio,time' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'audio,event' },
    { name: 'focusenter', parameters: 'audio,event' },
    { name: 'focusleave', parameters: 'audio,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'mutedchange', parameters: 'audio,muted' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'pause', parameters: 'audio,time' },
    { name: 'play', parameters: 'audio' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'stop', parameters: 'audio' },
    { name: 'timeupdate', parameters: 'audio,time' },
    { name: 'tofront', parameters: 'audio' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'volumechange', parameters: 'audio,volume' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Audio.EVENTNAMES);
//    return Ext_Media.getEventNames(eventnames);
//}

var ExtAudioComponent_1;
class ExtAudioMetaData extends Ext_Audio {
    static getAll() {
        ExtAudioMetaData.PROPERTIES = Ext_Audio.getProperties(ExtAudioMetaData.PROPERTIES);
        ExtAudioMetaData.EVENTS = Ext_Audio.getEvents(ExtAudioMetaData.EVENTS);
        ExtAudioMetaData.EVENTS.forEach((event) => {
            ExtAudioMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtAudioMetaData.PROPERTIES = [];
ExtAudioMetaData.EVENTS = [];
ExtAudioMetaData.EVENTNAMES = [];
(function () { ExtAudioMetaData.getAll(); })();
let ExtAudioComponent = ExtAudioComponent_1 = class ExtAudioComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtAudioMetaData.PROPERTIES, ExtAudioMetaData.EVENTS);
        this.xtype = 'audio';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtAudioComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtAudioComponent = ExtAudioComponent_1 = __decorate([
    Component({
        selector: 'ext-audio',
        inputs: ExtAudioMetaData.PROPERTIES,
        outputs: ExtAudioMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtAudioComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtAudioComponent);

class Ext_Toolbar extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_Toolbar.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Toolbar.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_Toolbar.PROPERTIES = [
    'defaultButtonUI',
    'defaultType',
    'docked',
    'layout',
    'minHeight',
    'title',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Toolbar.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,toolbar,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'toolbar,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'toolbar' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'toolbar,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,toolbar,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'toolbar,event' },
    { name: 'focusenter', parameters: 'toolbar,event' },
    { name: 'focusleave', parameters: 'toolbar,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'toolbar,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'toolbar,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'toolbar,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'toolbar' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Toolbar.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

class Ext_BreadcrumbBar extends Ext_Toolbar {
    static getProperties(properties) {
        properties = properties.concat(Ext_BreadcrumbBar.PROPERTIES);
        return Ext_Toolbar.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_BreadcrumbBar.EVENTS);
        return Ext_Toolbar.getEvents(events);
    }
}
Ext_BreadcrumbBar.PROPERTIES = [
    'btnCls',
    'buttonConfig',
    'buttonUI',
    'displayField',
    'menu',
    'publishes',
    'selection',
    'showIcons',
    'showMenuIcons',
    'store',
    'twoWayBindable',
    'useSplitButtons',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_BreadcrumbBar.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,breadcrumbbar,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'breadcrumbbar,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'breadcrumbbar' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'breadcrumbbar,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'breadcrumbbar,node,prevNode' },
    { name: 'deactivate', parameters: 'oldActiveItem,breadcrumbbar,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'breadcrumbbar,event' },
    { name: 'focusenter', parameters: 'breadcrumbbar,event' },
    { name: 'focusleave', parameters: 'breadcrumbbar,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'breadcrumbbar,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'breadcrumbbar,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'breadcrumbbar,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'selectionchange', parameters: 'breadcrumbbar,node,prevNode' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'breadcrumbbar' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_BreadcrumbBar.EVENTNAMES);
//    return Ext_Toolbar.getEventNames(eventnames);
//}

var ExtBreadcrumbbarComponent_1;
class ExtBreadcrumbbarMetaData extends Ext_BreadcrumbBar {
    static getAll() {
        ExtBreadcrumbbarMetaData.PROPERTIES = Ext_BreadcrumbBar.getProperties(ExtBreadcrumbbarMetaData.PROPERTIES);
        ExtBreadcrumbbarMetaData.EVENTS = Ext_BreadcrumbBar.getEvents(ExtBreadcrumbbarMetaData.EVENTS);
        ExtBreadcrumbbarMetaData.EVENTS.forEach((event) => {
            ExtBreadcrumbbarMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtBreadcrumbbarMetaData.PROPERTIES = [];
ExtBreadcrumbbarMetaData.EVENTS = [];
ExtBreadcrumbbarMetaData.EVENTNAMES = [];
(function () { ExtBreadcrumbbarMetaData.getAll(); })();
let ExtBreadcrumbbarComponent = ExtBreadcrumbbarComponent_1 = class ExtBreadcrumbbarComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtBreadcrumbbarMetaData.PROPERTIES, ExtBreadcrumbbarMetaData.EVENTS);
        this.xtype = 'breadcrumbbar';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtBreadcrumbbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtBreadcrumbbarComponent = ExtBreadcrumbbarComponent_1 = __decorate([
    Component({
        selector: 'ext-breadcrumbbar',
        inputs: ExtBreadcrumbbarMetaData.PROPERTIES,
        outputs: ExtBreadcrumbbarMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtBreadcrumbbarComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtBreadcrumbbarComponent);

class Ext_Button extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_Button.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Button.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_Button.PROPERTIES = [
    'allowDepress',
    'arrow',
    'arrowAlign',
    'autoEvent',
    'badgeText',
    'buttonType',
    'destroyMenu',
    'enableToggle',
    'handler',
    'html',
    'icon',
    'iconAlign',
    'iconCls',
    'menu',
    'menuAlign',
    'pressed',
    'pressedDelay',
    'publishes',
    'scope',
    'stretchMenu',
    'text',
    'textAlign',
    'toggleHandler',
    'ui',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Button.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'button' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'button,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'button,event' },
    { name: 'focusenter', parameters: 'button,event' },
    { name: 'focusleave', parameters: 'button,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'pressedchange', parameters: 'sender,value,oldValue' },
    { name: 'release', parameters: 'button,e' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tap', parameters: 'button,e' },
    { name: 'tofront', parameters: 'button' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Button.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtButtonComponent_1;
class ExtButtonMetaData extends Ext_Button {
    static getAll() {
        ExtButtonMetaData.PROPERTIES = Ext_Button.getProperties(ExtButtonMetaData.PROPERTIES);
        ExtButtonMetaData.EVENTS = Ext_Button.getEvents(ExtButtonMetaData.EVENTS);
        ExtButtonMetaData.EVENTS.forEach((event) => {
            ExtButtonMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtButtonMetaData.PROPERTIES = [];
ExtButtonMetaData.EVENTS = [];
ExtButtonMetaData.EVENTNAMES = [];
(function () { ExtButtonMetaData.getAll(); })();
let ExtButtonComponent = ExtButtonComponent_1 = class ExtButtonComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtButtonMetaData.PROPERTIES, ExtButtonMetaData.EVENTS);
        this.xtype = 'button';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtButtonComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtButtonComponent = ExtButtonComponent_1 = __decorate([
    Component({
        selector: 'ext-button',
        inputs: ExtButtonMetaData.PROPERTIES,
        outputs: ExtButtonMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtButtonComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtButtonComponent);

class Ext_Gadget extends Ext_Evented {
    static getProperties(properties) {
        properties = properties.concat(Ext_Gadget.PROPERTIES);
        return Ext_Evented.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Gadget.EVENTS);
        return Ext_Evented.getEvents(events);
    }
}
Ext_Gadget.PROPERTIES = [
    'alignSelf',
    'alwaysOnTop',
    'border',
    'cls',
    'constrainAlign',
    'disabled',
    'flex',
    'floated',
    'height',
    'hidden',
    'hideMode',
    'id',
    'instanceCls',
    'itemId',
    'margin',
    'name',
    'relative',
    'renderTo',
    'ripple',
    'shadow',
    'shim',
    'style',
    'toFrontOnShow',
    'touchAction',
    'translatable',
    'ui',
    'userCls',
    'width',
    'x',
    'y',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Gadget.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'widget' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'widget,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'widget,event' },
    { name: 'focusenter', parameters: 'widget,event' },
    { name: 'focusleave', parameters: 'widget,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'widget' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Gadget.EVENTNAMES);
//    return Ext_Evented.getEventNames(eventnames);
//}

class Ext_calendar_EventBase extends Ext_Gadget {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_EventBase.PROPERTIES);
        return Ext_Gadget.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_EventBase.EVENTS);
        return Ext_Gadget.getEvents(events);
    }
}
Ext_calendar_EventBase.PROPERTIES = [
    'defaultTitle',
    'endDate',
    'mode',
    'model',
    'palette',
    'resize',
    'startDate',
    'title',
    'touchAction',
    'view',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_EventBase.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_EventBase.EVENTNAMES);
//    return Ext_Gadget.getEventNames(eventnames);
//}

class Ext_calendar_Event extends Ext_calendar_EventBase {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_Event.PROPERTIES);
        return Ext_calendar_EventBase.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_Event.EVENTS);
        return Ext_calendar_EventBase.getEvents(events);
    }
}
Ext_calendar_Event.PROPERTIES = [
    'timeFormat',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_Event.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar-event' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-event,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-event,event' },
    { name: 'focusenter', parameters: 'calendar-event,event' },
    { name: 'focusleave', parameters: 'calendar-event,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar-event' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_Event.EVENTNAMES);
//    return Ext_calendar_EventBase.getEventNames(eventnames);
//}

var ExtCalendar_eventComponent_1;
class ExtCalendar_eventMetaData extends Ext_calendar_Event {
    static getAll() {
        ExtCalendar_eventMetaData.PROPERTIES = Ext_calendar_Event.getProperties(ExtCalendar_eventMetaData.PROPERTIES);
        ExtCalendar_eventMetaData.EVENTS = Ext_calendar_Event.getEvents(ExtCalendar_eventMetaData.EVENTS);
        ExtCalendar_eventMetaData.EVENTS.forEach((event) => {
            ExtCalendar_eventMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_eventMetaData.PROPERTIES = [];
ExtCalendar_eventMetaData.EVENTS = [];
ExtCalendar_eventMetaData.EVENTNAMES = [];
(function () { ExtCalendar_eventMetaData.getAll(); })();
let ExtCalendar_eventComponent = ExtCalendar_eventComponent_1 = class ExtCalendar_eventComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_eventMetaData.PROPERTIES, ExtCalendar_eventMetaData.EVENTS);
        this.xtype = 'calendar-event';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_eventComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_eventComponent = ExtCalendar_eventComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-event',
        inputs: ExtCalendar_eventMetaData.PROPERTIES,
        outputs: ExtCalendar_eventMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_eventComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_eventComponent);

class Ext_field_Panel extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_Panel.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_Panel.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_field_Panel.PROPERTIES = [
    'api',
    'baseParams',
    'nameable',
    'nameHolder',
    'paramOrder',
    'paramsAsHash',
    'scrollable',
    'shareableName',
    'timeout',
    'url',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_Panel.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,fieldpanel,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'fieldpanel,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'fieldpanel' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'fieldpanel' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'fieldpanel,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'fieldpanel' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'fieldpanel,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'fieldpanel' },
    { name: 'deactivate', parameters: 'oldActiveItem,fieldpanel,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'fieldpanel,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'fieldpanel' },
    { name: 'drawershow', parameters: 'fieldpanel' },
    { name: 'erased', parameters: 'sender' },
    { name: 'exception', parameters: 'fieldpanel,result' },
    { name: 'expand', parameters: 'fieldpanel' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'fieldpanel,event' },
    { name: 'focusenter', parameters: 'fieldpanel,event' },
    { name: 'focusleave', parameters: 'fieldpanel,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'fieldpanel,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'fieldpanel,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'fieldpanel,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'fieldpanel,context' },
    { name: 'resizedragcancel', parameters: 'fieldpanel,context' },
    { name: 'resizedragend', parameters: 'fieldpanel,context' },
    { name: 'resizedragstart', parameters: 'fieldpanel,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'fieldpanel' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_Panel.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

class Ext_form_Panel extends Ext_field_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Panel.PROPERTIES);
        return Ext_field_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Panel.EVENTS);
        return Ext_field_Panel.getEvents(events);
    }
}
Ext_form_Panel.PROPERTIES = [
    'enableSubmissionForm',
    'enctype',
    'fieldDefaults',
    'jsonSubmit',
    'method',
    'multipartDetection',
    'standardSubmit',
    'submitOnAction',
    'trackResetOnLoad',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Panel.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,formpanel,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'formpanel,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'formpanel' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'formpanel' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'formpanel,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforesubmit', parameters: 'formpanel,values,options,e' },
    { name: 'beforetofront', parameters: 'formpanel' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'formpanel,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'formpanel' },
    { name: 'deactivate', parameters: 'oldActiveItem,formpanel,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'formpanel,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'formpanel' },
    { name: 'drawershow', parameters: 'formpanel' },
    { name: 'erased', parameters: 'sender' },
    { name: 'exception', parameters: 'formpanel,result' },
    { name: 'expand', parameters: 'formpanel' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'formpanel,event' },
    { name: 'focusenter', parameters: 'formpanel,event' },
    { name: 'focusleave', parameters: 'formpanel,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'formpanel,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'formpanel,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'formpanel,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'formpanel,context' },
    { name: 'resizedragcancel', parameters: 'formpanel,context' },
    { name: 'resizedragend', parameters: 'formpanel,context' },
    { name: 'resizedragstart', parameters: 'formpanel,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'submit', parameters: 'formpanel,result,e' },
    { name: 'tofront', parameters: 'formpanel' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Panel.EVENTNAMES);
//    return Ext_field_Panel.getEventNames(eventnames);
//}

class Ext_calendar_form_AbstractForm extends Ext_form_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_form_AbstractForm.PROPERTIES);
        return Ext_form_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_form_AbstractForm.EVENTS);
        return Ext_form_Panel.getEvents(events);
    }
}
Ext_calendar_form_AbstractForm.PROPERTIES = [
    'allDayField',
    'calendarField',
    'cancelButton',
    'descriptionField',
    'dropButton',
    'endDateField',
    'endTimeField',
    'saveButton',
    'startDateField',
    'startTimeField',
    'titleField',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_form_AbstractForm.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'undefined,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'undefined,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforesubmit', parameters: 'undefined,values,options,e' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'undefined' },
    { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'undefined,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'undefined' },
    { name: 'drawershow', parameters: 'undefined' },
    { name: 'erased', parameters: 'sender' },
    { name: 'exception', parameters: 'undefined,result' },
    { name: 'expand', parameters: 'undefined' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'undefined,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'undefined,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'undefined,context' },
    { name: 'resizedragcancel', parameters: 'undefined,context' },
    { name: 'resizedragend', parameters: 'undefined,context' },
    { name: 'resizedragstart', parameters: 'undefined,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'submit', parameters: 'undefined,result,e' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_form_AbstractForm.EVENTNAMES);
//    return Ext_form_Panel.getEventNames(eventnames);
//}

class Ext_calendar_form_Form extends Ext_calendar_form_AbstractForm {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_form_Form.PROPERTIES);
        return Ext_calendar_form_AbstractForm.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_form_Form.EVENTS);
        return Ext_calendar_form_AbstractForm.getEvents(events);
    }
}
Ext_calendar_form_Form.PROPERTIES = [
    'defaultEndTime',
    'defaultStartTime',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_form_Form.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'undefined,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'undefined,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforesubmit', parameters: 'undefined,values,options,e' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'cancel', parameters: 'undefined' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'undefined' },
    { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'undefined,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'undefined' },
    { name: 'drawershow', parameters: 'undefined' },
    { name: 'drop', parameters: 'undefined' },
    { name: 'erased', parameters: 'sender' },
    { name: 'exception', parameters: 'undefined,result' },
    { name: 'expand', parameters: 'undefined' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'undefined,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'undefined,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'undefined,context' },
    { name: 'resizedragcancel', parameters: 'undefined,context' },
    { name: 'resizedragend', parameters: 'undefined,context' },
    { name: 'resizedragstart', parameters: 'undefined,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'save', parameters: 'undefined,context' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'submit', parameters: 'undefined,result,e' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_form_Form.EVENTNAMES);
//    return Ext_calendar_form_AbstractForm.getEventNames(eventnames);
//}

class Ext_calendar_form_Add extends Ext_calendar_form_Form {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_form_Add.PROPERTIES);
        return Ext_calendar_form_Form.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_form_Add.EVENTS);
        return Ext_calendar_form_Form.getEvents(events);
    }
}
Ext_calendar_form_Add.PROPERTIES = [
    'title',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_form_Add.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,calendar-form-add,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'calendar-form-add,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'calendar-form-add' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'calendar-form-add' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'calendar-form-add,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforesubmit', parameters: 'calendar-form-add,values,options,e' },
    { name: 'beforetofront', parameters: 'calendar-form-add' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-form-add,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'cancel', parameters: 'calendar-form-add' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'calendar-form-add' },
    { name: 'deactivate', parameters: 'oldActiveItem,calendar-form-add,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'calendar-form-add,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'calendar-form-add' },
    { name: 'drawershow', parameters: 'calendar-form-add' },
    { name: 'drop', parameters: 'calendar-form-add' },
    { name: 'erased', parameters: 'sender' },
    { name: 'exception', parameters: 'calendar-form-add,result' },
    { name: 'expand', parameters: 'calendar-form-add' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-form-add,event' },
    { name: 'focusenter', parameters: 'calendar-form-add,event' },
    { name: 'focusleave', parameters: 'calendar-form-add,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'calendar-form-add,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'calendar-form-add,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'calendar-form-add,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'calendar-form-add,context' },
    { name: 'resizedragcancel', parameters: 'calendar-form-add,context' },
    { name: 'resizedragend', parameters: 'calendar-form-add,context' },
    { name: 'resizedragstart', parameters: 'calendar-form-add,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'save', parameters: 'calendar-form-add,context' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'submit', parameters: 'calendar-form-add,result,e' },
    { name: 'tofront', parameters: 'calendar-form-add' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_form_Add.EVENTNAMES);
//    return Ext_calendar_form_Form.getEventNames(eventnames);
//}

var ExtCalendar_form_addComponent_1;
class ExtCalendar_form_addMetaData extends Ext_calendar_form_Add {
    static getAll() {
        ExtCalendar_form_addMetaData.PROPERTIES = Ext_calendar_form_Add.getProperties(ExtCalendar_form_addMetaData.PROPERTIES);
        ExtCalendar_form_addMetaData.EVENTS = Ext_calendar_form_Add.getEvents(ExtCalendar_form_addMetaData.EVENTS);
        ExtCalendar_form_addMetaData.EVENTS.forEach((event) => {
            ExtCalendar_form_addMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_form_addMetaData.PROPERTIES = [];
ExtCalendar_form_addMetaData.EVENTS = [];
ExtCalendar_form_addMetaData.EVENTNAMES = [];
(function () { ExtCalendar_form_addMetaData.getAll(); })();
let ExtCalendar_form_addComponent = ExtCalendar_form_addComponent_1 = class ExtCalendar_form_addComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_form_addMetaData.PROPERTIES, ExtCalendar_form_addMetaData.EVENTS);
        this.xtype = 'calendar-form-add';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_form_addComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_form_addComponent = ExtCalendar_form_addComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-form-add',
        inputs: ExtCalendar_form_addMetaData.PROPERTIES,
        outputs: ExtCalendar_form_addMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_form_addComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_form_addComponent);

class Ext_field_Field extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_Field.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_Field.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_field_Field.PROPERTIES = [
    'autoFitErrors',
    'bodyAlign',
    'dataType',
    'disabled',
    'error',
    'errorMessage',
    'errorTarget',
    'errorTip',
    'errorTpl',
    'fullscreen',
    'inline',
    'label',
    'labelAlign',
    'labelCls',
    'labelMinWidth',
    'labelTextAlign',
    'labelWidth',
    'labelWrap',
    'name',
    'required',
    'requiredMessage',
    'sideError',
    'tipError',
    'titleError',
    'underError',
    'validateDisabled',
    'validationMessage',
    'validators',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_Field.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'field' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'field,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'field,newValue,oldValue' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'field,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'field,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'field,event' },
    { name: 'focusenter', parameters: 'field,event' },
    { name: 'focusleave', parameters: 'field,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'field' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_Field.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

class Ext_field_Input extends Ext_field_Field {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_Input.PROPERTIES);
        return Ext_field_Field.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_Input.EVENTS);
        return Ext_field_Field.getEvents(events);
    }
}
Ext_field_Input.PROPERTIES = [
    'inputType',
    'inputValue',
    'readOnly',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_Input.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'inputfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'inputfield,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'inputfield,newValue,oldValue' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'inputfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'inputfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'inputfield,event' },
    { name: 'focusenter', parameters: 'inputfield,event' },
    { name: 'focusleave', parameters: 'inputfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'inputfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_Input.EVENTNAMES);
//    return Ext_field_Field.getEventNames(eventnames);
//}

class Ext_field_Text extends Ext_field_Input {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_Text.PROPERTIES);
        return Ext_field_Input.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_Text.EVENTS);
        return Ext_field_Input.getEvents(events);
    }
}
Ext_field_Text.PROPERTIES = [
    'animateUnderline',
    'autoCapitalize',
    'autoComplete',
    'autoCorrect',
    'autoHideInputMask',
    'badFormatMessage',
    'bodyAlign',
    'clearable',
    'editable',
    'inputMask',
    'inputType',
    'labelAlign',
    'labelInPlaceholder',
    'maxLength',
    'parseValidator',
    'pattern',
    'placeholder',
    'publishes',
    'stripCharsRe',
    'textAlign',
    'triggers',
    'twoWayBindable',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_Text.EVENTS = [
    { name: 'action', parameters: 'textfield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'textfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'textfield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'textfield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'textfield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'textfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'textfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'textfield,e' },
    { name: 'focusenter', parameters: 'textfield,event' },
    { name: 'focusleave', parameters: 'textfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'textfield,e' },
    { name: 'keyup', parameters: 'textfield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'textfield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'textfield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'textfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_Text.EVENTNAMES);
//    return Ext_field_Input.getEventNames(eventnames);
//}

class Ext_field_Picker extends Ext_field_Text {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_Picker.PROPERTIES);
        return Ext_field_Text.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_Picker.EVENTS);
        return Ext_field_Text.getEvents(events);
    }
}
Ext_field_Picker.PROPERTIES = [
    'alignTarget',
    'autoComplete',
    'edgePicker',
    'floatedPicker',
    'floatedPickerAlign',
    'focusTrap',
    'hideTrigger',
    'matchFieldWidth',
    'picker',
    'pickerSlotAlign',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_Picker.EVENTS = [
    { name: 'action', parameters: 'pickerfield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'pickerfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pickerfield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'pickerfield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'pickerfield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'collapse', parameters: 'field' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'pickerfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'pickerfield,error' },
    { name: 'expand', parameters: 'field' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'pickerfield,e' },
    { name: 'focusenter', parameters: 'pickerfield,event' },
    { name: 'focusleave', parameters: 'pickerfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'pickerfield,e' },
    { name: 'keyup', parameters: 'pickerfield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'pickerfield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'pickerfield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'pickerfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_Picker.EVENTNAMES);
//    return Ext_field_Text.getEventNames(eventnames);
//}

class Ext_field_Select extends Ext_field_Picker {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_Select.PROPERTIES);
        return Ext_field_Picker.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_Select.EVENTS);
        return Ext_field_Picker.getEvents(events);
    }
}
Ext_field_Select.PROPERTIES = [
    'autoFocus',
    'autoFocusLast',
    'autoLoadOnValue',
    'autoSelect',
    'chipView',
    'collapseOnSelect',
    'delimiter',
    'displayField',
    'displayTpl',
    'edgePicker',
    'editable',
    'floatedPicker',
    'forceSelection',
    'hiddenName',
    'itemCls',
    'itemTpl',
    'multiSelect',
    'options',
    'publishes',
    'recordCreator',
    'recordCreatorScope',
    'selection',
    'selectOnTab',
    'store',
    'twoWayBindable',
    'valueCollection',
    'valueField',
    'valueNotFoundText',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_Select.EVENTS = [
    { name: 'action', parameters: 'selectfield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'selectfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'selectfield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'selectfield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'selectfield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'collapse', parameters: 'field' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'selectfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'selectfield,error' },
    { name: 'expand', parameters: 'field' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'selectfield,e' },
    { name: 'focusenter', parameters: 'selectfield,event' },
    { name: 'focusleave', parameters: 'selectfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'selectfield,e' },
    { name: 'keyup', parameters: 'selectfield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'selectfield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'selectfield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'selectfield,newValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'selectfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_Select.EVENTNAMES);
//    return Ext_field_Picker.getEventNames(eventnames);
//}

class Ext_calendar_form_CalendarPicker extends Ext_field_Select {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_form_CalendarPicker.PROPERTIES);
        return Ext_field_Select.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_form_CalendarPicker.EVENTS);
        return Ext_field_Select.getEvents(events);
    }
}
Ext_calendar_form_CalendarPicker.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_form_CalendarPicker.EVENTS = [
    { name: 'action', parameters: 'calendar-calendar-picker,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar-calendar-picker' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-calendar-picker,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'calendar-calendar-picker,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'calendar-calendar-picker,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'collapse', parameters: 'field' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'calendar-calendar-picker,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'calendar-calendar-picker,error' },
    { name: 'expand', parameters: 'field' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-calendar-picker,e' },
    { name: 'focusenter', parameters: 'calendar-calendar-picker,event' },
    { name: 'focusleave', parameters: 'calendar-calendar-picker,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'calendar-calendar-picker,e' },
    { name: 'keyup', parameters: 'calendar-calendar-picker,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'calendar-calendar-picker,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'calendar-calendar-picker,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'calendar-calendar-picker,newValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar-calendar-picker' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_form_CalendarPicker.EVENTNAMES);
//    return Ext_field_Select.getEventNames(eventnames);
//}

var ExtCalendar_calendar_pickerComponent_1;
class ExtCalendar_calendar_pickerMetaData extends Ext_calendar_form_CalendarPicker {
    static getAll() {
        ExtCalendar_calendar_pickerMetaData.PROPERTIES = Ext_calendar_form_CalendarPicker.getProperties(ExtCalendar_calendar_pickerMetaData.PROPERTIES);
        ExtCalendar_calendar_pickerMetaData.EVENTS = Ext_calendar_form_CalendarPicker.getEvents(ExtCalendar_calendar_pickerMetaData.EVENTS);
        ExtCalendar_calendar_pickerMetaData.EVENTS.forEach((event) => {
            ExtCalendar_calendar_pickerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_calendar_pickerMetaData.PROPERTIES = [];
ExtCalendar_calendar_pickerMetaData.EVENTS = [];
ExtCalendar_calendar_pickerMetaData.EVENTNAMES = [];
(function () { ExtCalendar_calendar_pickerMetaData.getAll(); })();
let ExtCalendar_calendar_pickerComponent = ExtCalendar_calendar_pickerComponent_1 = class ExtCalendar_calendar_pickerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_calendar_pickerMetaData.PROPERTIES, ExtCalendar_calendar_pickerMetaData.EVENTS);
        this.xtype = 'calendar-calendar-picker';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_calendar_pickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_calendar_pickerComponent = ExtCalendar_calendar_pickerComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-calendar-picker',
        inputs: ExtCalendar_calendar_pickerMetaData.PROPERTIES,
        outputs: ExtCalendar_calendar_pickerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_calendar_pickerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_calendar_pickerComponent);

class Ext_calendar_form_Edit extends Ext_calendar_form_Form {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_form_Edit.PROPERTIES);
        return Ext_calendar_form_Form.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_form_Edit.EVENTS);
        return Ext_calendar_form_Form.getEvents(events);
    }
}
Ext_calendar_form_Edit.PROPERTIES = [
    'title',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_form_Edit.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,calendar-form-edit,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'calendar-form-edit,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'calendar-form-edit' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'calendar-form-edit' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'calendar-form-edit,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforesubmit', parameters: 'calendar-form-edit,values,options,e' },
    { name: 'beforetofront', parameters: 'calendar-form-edit' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-form-edit,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'cancel', parameters: 'calendar-form-edit' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'calendar-form-edit' },
    { name: 'deactivate', parameters: 'oldActiveItem,calendar-form-edit,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'calendar-form-edit,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'calendar-form-edit' },
    { name: 'drawershow', parameters: 'calendar-form-edit' },
    { name: 'drop', parameters: 'calendar-form-edit' },
    { name: 'erased', parameters: 'sender' },
    { name: 'exception', parameters: 'calendar-form-edit,result' },
    { name: 'expand', parameters: 'calendar-form-edit' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-form-edit,event' },
    { name: 'focusenter', parameters: 'calendar-form-edit,event' },
    { name: 'focusleave', parameters: 'calendar-form-edit,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'calendar-form-edit,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'calendar-form-edit,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'calendar-form-edit,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'calendar-form-edit,context' },
    { name: 'resizedragcancel', parameters: 'calendar-form-edit,context' },
    { name: 'resizedragend', parameters: 'calendar-form-edit,context' },
    { name: 'resizedragstart', parameters: 'calendar-form-edit,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'save', parameters: 'calendar-form-edit,context' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'submit', parameters: 'calendar-form-edit,result,e' },
    { name: 'tofront', parameters: 'calendar-form-edit' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_form_Edit.EVENTNAMES);
//    return Ext_calendar_form_Form.getEventNames(eventnames);
//}

var ExtCalendar_form_editComponent_1;
class ExtCalendar_form_editMetaData extends Ext_calendar_form_Edit {
    static getAll() {
        ExtCalendar_form_editMetaData.PROPERTIES = Ext_calendar_form_Edit.getProperties(ExtCalendar_form_editMetaData.PROPERTIES);
        ExtCalendar_form_editMetaData.EVENTS = Ext_calendar_form_Edit.getEvents(ExtCalendar_form_editMetaData.EVENTS);
        ExtCalendar_form_editMetaData.EVENTS.forEach((event) => {
            ExtCalendar_form_editMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_form_editMetaData.PROPERTIES = [];
ExtCalendar_form_editMetaData.EVENTS = [];
ExtCalendar_form_editMetaData.EVENTNAMES = [];
(function () { ExtCalendar_form_editMetaData.getAll(); })();
let ExtCalendar_form_editComponent = ExtCalendar_form_editComponent_1 = class ExtCalendar_form_editComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_form_editMetaData.PROPERTIES, ExtCalendar_form_editMetaData.EVENTS);
        this.xtype = 'calendar-form-edit';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_form_editComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_form_editComponent = ExtCalendar_form_editComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-form-edit',
        inputs: ExtCalendar_form_editMetaData.PROPERTIES,
        outputs: ExtCalendar_form_editMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_form_editComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_form_editComponent);

class Ext_calendar_form_TimeField extends Ext_field_Select {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_form_TimeField.PROPERTIES);
        return Ext_field_Select.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_form_TimeField.EVENTS);
        return Ext_field_Select.getEvents(events);
    }
}
Ext_calendar_form_TimeField.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_form_TimeField.EVENTS = [
    { name: 'action', parameters: 'calendar-timefield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar-timefield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-timefield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'calendar-timefield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'calendar-timefield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'collapse', parameters: 'field' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'calendar-timefield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'calendar-timefield,error' },
    { name: 'expand', parameters: 'field' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-timefield,e' },
    { name: 'focusenter', parameters: 'calendar-timefield,event' },
    { name: 'focusleave', parameters: 'calendar-timefield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'calendar-timefield,e' },
    { name: 'keyup', parameters: 'calendar-timefield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'calendar-timefield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'calendar-timefield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'calendar-timefield,newValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar-timefield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_form_TimeField.EVENTNAMES);
//    return Ext_field_Select.getEventNames(eventnames);
//}

var ExtCalendar_timefieldComponent_1;
class ExtCalendar_timefieldMetaData extends Ext_calendar_form_TimeField {
    static getAll() {
        ExtCalendar_timefieldMetaData.PROPERTIES = Ext_calendar_form_TimeField.getProperties(ExtCalendar_timefieldMetaData.PROPERTIES);
        ExtCalendar_timefieldMetaData.EVENTS = Ext_calendar_form_TimeField.getEvents(ExtCalendar_timefieldMetaData.EVENTS);
        ExtCalendar_timefieldMetaData.EVENTS.forEach((event) => {
            ExtCalendar_timefieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_timefieldMetaData.PROPERTIES = [];
ExtCalendar_timefieldMetaData.EVENTS = [];
ExtCalendar_timefieldMetaData.EVENTNAMES = [];
(function () { ExtCalendar_timefieldMetaData.getAll(); })();
let ExtCalendar_timefieldComponent = ExtCalendar_timefieldComponent_1 = class ExtCalendar_timefieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_timefieldMetaData.PROPERTIES, ExtCalendar_timefieldMetaData.EVENTS);
        this.xtype = 'calendar-timefield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_timefieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_timefieldComponent = ExtCalendar_timefieldComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-timefield',
        inputs: ExtCalendar_timefieldMetaData.PROPERTIES,
        outputs: ExtCalendar_timefieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_timefieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_timefieldComponent);

class Ext_calendar_header_Base extends Ext_Gadget {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_header_Base.PROPERTIES);
        return Ext_Gadget.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_header_Base.EVENTS);
        return Ext_Gadget.getEvents(events);
    }
}
Ext_calendar_header_Base.PROPERTIES = [
    'cellCls',
    'compact',
    'compactOptions',
    'format',
    'value',
    'visibleDays',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_header_Base.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_header_Base.EVENTNAMES);
//    return Ext_Gadget.getEventNames(eventnames);
//}

class Ext_calendar_header_Days extends Ext_calendar_header_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_header_Days.PROPERTIES);
        return Ext_calendar_header_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_header_Days.EVENTS);
        return Ext_calendar_header_Base.getEvents(events);
    }
}
Ext_calendar_header_Days.PROPERTIES = [
    'compactOptions',
    'format',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_header_Days.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar-daysheader' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-daysheader,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-daysheader,event' },
    { name: 'focusenter', parameters: 'calendar-daysheader,event' },
    { name: 'focusleave', parameters: 'calendar-daysheader,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar-daysheader' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_header_Days.EVENTNAMES);
//    return Ext_calendar_header_Base.getEventNames(eventnames);
//}

var ExtCalendar_daysheaderComponent_1;
class ExtCalendar_daysheaderMetaData extends Ext_calendar_header_Days {
    static getAll() {
        ExtCalendar_daysheaderMetaData.PROPERTIES = Ext_calendar_header_Days.getProperties(ExtCalendar_daysheaderMetaData.PROPERTIES);
        ExtCalendar_daysheaderMetaData.EVENTS = Ext_calendar_header_Days.getEvents(ExtCalendar_daysheaderMetaData.EVENTS);
        ExtCalendar_daysheaderMetaData.EVENTS.forEach((event) => {
            ExtCalendar_daysheaderMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_daysheaderMetaData.PROPERTIES = [];
ExtCalendar_daysheaderMetaData.EVENTS = [];
ExtCalendar_daysheaderMetaData.EVENTNAMES = [];
(function () { ExtCalendar_daysheaderMetaData.getAll(); })();
let ExtCalendar_daysheaderComponent = ExtCalendar_daysheaderComponent_1 = class ExtCalendar_daysheaderComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_daysheaderMetaData.PROPERTIES, ExtCalendar_daysheaderMetaData.EVENTS);
        this.xtype = 'calendar-daysheader';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_daysheaderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_daysheaderComponent = ExtCalendar_daysheaderComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-daysheader',
        inputs: ExtCalendar_daysheaderMetaData.PROPERTIES,
        outputs: ExtCalendar_daysheaderMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_daysheaderComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_daysheaderComponent);

class Ext_calendar_header_Weeks extends Ext_calendar_header_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_header_Weeks.PROPERTIES);
        return Ext_calendar_header_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_header_Weeks.EVENTS);
        return Ext_calendar_header_Base.getEvents(events);
    }
}
Ext_calendar_header_Weeks.PROPERTIES = [
    'format',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_header_Weeks.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar-weeksheader' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-weeksheader,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-weeksheader,event' },
    { name: 'focusenter', parameters: 'calendar-weeksheader,event' },
    { name: 'focusleave', parameters: 'calendar-weeksheader,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar-weeksheader' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_header_Weeks.EVENTNAMES);
//    return Ext_calendar_header_Base.getEventNames(eventnames);
//}

var ExtCalendar_weeksheaderComponent_1;
class ExtCalendar_weeksheaderMetaData extends Ext_calendar_header_Weeks {
    static getAll() {
        ExtCalendar_weeksheaderMetaData.PROPERTIES = Ext_calendar_header_Weeks.getProperties(ExtCalendar_weeksheaderMetaData.PROPERTIES);
        ExtCalendar_weeksheaderMetaData.EVENTS = Ext_calendar_header_Weeks.getEvents(ExtCalendar_weeksheaderMetaData.EVENTS);
        ExtCalendar_weeksheaderMetaData.EVENTS.forEach((event) => {
            ExtCalendar_weeksheaderMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_weeksheaderMetaData.PROPERTIES = [];
ExtCalendar_weeksheaderMetaData.EVENTS = [];
ExtCalendar_weeksheaderMetaData.EVENTNAMES = [];
(function () { ExtCalendar_weeksheaderMetaData.getAll(); })();
let ExtCalendar_weeksheaderComponent = ExtCalendar_weeksheaderComponent_1 = class ExtCalendar_weeksheaderComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_weeksheaderMetaData.PROPERTIES, ExtCalendar_weeksheaderMetaData.EVENTS);
        this.xtype = 'calendar-weeksheader';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_weeksheaderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_weeksheaderComponent = ExtCalendar_weeksheaderComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-weeksheader',
        inputs: ExtCalendar_weeksheaderMetaData.PROPERTIES,
        outputs: ExtCalendar_weeksheaderMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_weeksheaderComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_weeksheaderComponent);

class Ext_dataview_Abstract extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_Abstract.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_Abstract.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_dataview_Abstract.PROPERTIES = [
    'associatedData',
    'autoSize',
    'data',
    'deferEmptyText',
    'deselectOnContainerClick',
    'disableSelection',
    'emptyItemText',
    'emptyState',
    'emptyText',
    'emptyTextDefaults',
    'emptyTextProperty',
    'inline',
    'itemButtonMode',
    'itemCls',
    'itemsFocusable',
    'itemTpl',
    'loadingHeight',
    'loadingText',
    'markDirty',
    'pressedDelay',
    'publishes',
    'scrollable',
    'scrollDock',
    'scrollToTopOnRefresh',
    'selectable',
    'selection',
    'store',
    'tabIndex',
    'triggerCtEvent',
    'triggerEvent',
    'twoWayBindable',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_Abstract.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
    { name: 'deselect', parameters: 'undefined,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemdoubletap', parameters: 'undefined,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'undefined,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'undefined,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'undefined,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'undefined,index,target,record,e' },
    { name: 'itemswipe', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtap', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'undefined,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'undefined,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'undefined' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'undefined,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'undefined,selected' },
    { name: 'show', parameters: 'sender' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_Abstract.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

class Ext_dataview_DataView extends Ext_dataview_Abstract {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_DataView.PROPERTIES);
        return Ext_dataview_Abstract.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_DataView.EVENTS);
        return Ext_dataview_Abstract.getEvents(events);
    }
}
Ext_dataview_DataView.PROPERTIES = [
    'lastSelected',
    'selected',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_DataView.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,dataview,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'dataview' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'dataview,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'childdoubletap', parameters: 'dataview,location' },
    { name: 'childlongpress', parameters: 'dataview,location' },
    { name: 'childmouseenter', parameters: 'dataview,location' },
    { name: 'childmouseleave', parameters: 'dataview,location' },
    { name: 'childsingletap', parameters: 'dataview,location' },
    { name: 'childtap', parameters: 'dataview,location' },
    { name: 'childtaphold', parameters: 'dataview,location' },
    { name: 'childtouchcancel', parameters: 'dataview,location' },
    { name: 'childtouchend', parameters: 'dataview,location' },
    { name: 'childtouchmove', parameters: 'dataview,location' },
    { name: 'childtouchstart', parameters: 'dataview,location' },
    { name: 'deactivate', parameters: 'oldActiveItem,dataview,newActiveItem' },
    { name: 'deselect', parameters: 'dataview,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'dataview,event' },
    { name: 'focusenter', parameters: 'dataview,event' },
    { name: 'focusleave', parameters: 'dataview,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemdoubletap', parameters: 'dataview,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'dataview,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'dataview,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'dataview,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'dataview,index,target,record,e' },
    { name: 'itemswipe', parameters: 'dataview,index,target,record,e' },
    { name: 'itemtap', parameters: 'dataview,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'dataview,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'dataview,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'dataview,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'dataview,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'dataview,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'dataview,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'dataview' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'dataview,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'rowselection', parameters: 'view,selection' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'dataview,selected' },
    { name: 'selectionchange', parameters: 'view,records,selected,selection' },
    { name: 'show', parameters: 'sender' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'dataview' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_DataView.EVENTNAMES);
//    return Ext_dataview_Abstract.getEventNames(eventnames);
//}

class Ext_calendar_AbstractList extends Ext_dataview_DataView {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_AbstractList.PROPERTIES);
        return Ext_dataview_DataView.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_AbstractList.EVENTS);
        return Ext_dataview_DataView.getEvents(events);
    }
}
Ext_calendar_AbstractList.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_AbstractList.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'childdoubletap', parameters: 'undefined,location' },
    { name: 'childlongpress', parameters: 'undefined,location' },
    { name: 'childmouseenter', parameters: 'undefined,location' },
    { name: 'childmouseleave', parameters: 'undefined,location' },
    { name: 'childsingletap', parameters: 'undefined,location' },
    { name: 'childtap', parameters: 'undefined,location' },
    { name: 'childtaphold', parameters: 'undefined,location' },
    { name: 'childtouchcancel', parameters: 'undefined,location' },
    { name: 'childtouchend', parameters: 'undefined,location' },
    { name: 'childtouchmove', parameters: 'undefined,location' },
    { name: 'childtouchstart', parameters: 'undefined,location' },
    { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
    { name: 'deselect', parameters: 'undefined,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemdoubletap', parameters: 'undefined,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'undefined,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'undefined,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'undefined,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'undefined,index,target,record,e' },
    { name: 'itemswipe', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtap', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'undefined,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'undefined,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'undefined' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'undefined,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'rowselection', parameters: 'view,selection' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'undefined,selected' },
    { name: 'selectionchange', parameters: 'view,records,selected,selection' },
    { name: 'show', parameters: 'sender' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_AbstractList.EVENTNAMES);
//    return Ext_dataview_DataView.getEventNames(eventnames);
//}

class Ext_calendar_List extends Ext_calendar_AbstractList {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_List.PROPERTIES);
        return Ext_calendar_AbstractList.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_List.EVENTS);
        return Ext_calendar_AbstractList.getEvents(events);
    }
}
Ext_calendar_List.PROPERTIES = [
    'enableToggle',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_List.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,calendar-list,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'calendar-list' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-list,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'childdoubletap', parameters: 'calendar-list,location' },
    { name: 'childlongpress', parameters: 'calendar-list,location' },
    { name: 'childmouseenter', parameters: 'calendar-list,location' },
    { name: 'childmouseleave', parameters: 'calendar-list,location' },
    { name: 'childsingletap', parameters: 'calendar-list,location' },
    { name: 'childtap', parameters: 'calendar-list,location' },
    { name: 'childtaphold', parameters: 'calendar-list,location' },
    { name: 'childtouchcancel', parameters: 'calendar-list,location' },
    { name: 'childtouchend', parameters: 'calendar-list,location' },
    { name: 'childtouchmove', parameters: 'calendar-list,location' },
    { name: 'childtouchstart', parameters: 'calendar-list,location' },
    { name: 'deactivate', parameters: 'oldActiveItem,calendar-list,newActiveItem' },
    { name: 'deselect', parameters: 'calendar-list,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-list,event' },
    { name: 'focusenter', parameters: 'calendar-list,event' },
    { name: 'focusleave', parameters: 'calendar-list,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemdoubletap', parameters: 'calendar-list,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'calendar-list,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'calendar-list,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'calendar-list,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'calendar-list,index,target,record,e' },
    { name: 'itemswipe', parameters: 'calendar-list,index,target,record,e' },
    { name: 'itemtap', parameters: 'calendar-list,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'calendar-list,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'calendar-list,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'calendar-list,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'calendar-list,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'calendar-list,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'calendar-list,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'calendar-list' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'calendar-list,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'rowselection', parameters: 'view,selection' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'calendar-list,selected' },
    { name: 'selectionchange', parameters: 'view,records,selected,selection' },
    { name: 'show', parameters: 'sender' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'calendar-list' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_List.EVENTNAMES);
//    return Ext_calendar_AbstractList.getEventNames(eventnames);
//}

var ExtCalendar_listComponent_1;
class ExtCalendar_listMetaData extends Ext_calendar_List {
    static getAll() {
        ExtCalendar_listMetaData.PROPERTIES = Ext_calendar_List.getProperties(ExtCalendar_listMetaData.PROPERTIES);
        ExtCalendar_listMetaData.EVENTS = Ext_calendar_List.getEvents(ExtCalendar_listMetaData.EVENTS);
        ExtCalendar_listMetaData.EVENTS.forEach((event) => {
            ExtCalendar_listMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_listMetaData.PROPERTIES = [];
ExtCalendar_listMetaData.EVENTS = [];
ExtCalendar_listMetaData.EVENTNAMES = [];
(function () { ExtCalendar_listMetaData.getAll(); })();
let ExtCalendar_listComponent = ExtCalendar_listComponent_1 = class ExtCalendar_listComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_listMetaData.PROPERTIES, ExtCalendar_listMetaData.EVENTS);
        this.xtype = 'calendar-list';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_listComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_listComponent = ExtCalendar_listComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-list',
        inputs: ExtCalendar_listMetaData.PROPERTIES,
        outputs: ExtCalendar_listMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_listComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_listComponent);

class Ext_calendar_panel_AbstractBase extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_panel_AbstractBase.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_panel_AbstractBase.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_calendar_panel_AbstractBase.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_panel_AbstractBase.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'undefined,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'undefined,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'undefined' },
    { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'undefined' },
    { name: 'drawershow', parameters: 'undefined' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'undefined' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'undefined,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'undefined,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'undefined,context' },
    { name: 'resizedragcancel', parameters: 'undefined,context' },
    { name: 'resizedragend', parameters: 'undefined,context' },
    { name: 'resizedragstart', parameters: 'undefined,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_panel_AbstractBase.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

class Ext_calendar_panel_Base extends Ext_calendar_panel_AbstractBase {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_panel_Base.PROPERTIES);
        return Ext_calendar_panel_AbstractBase.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_panel_Base.EVENTS);
        return Ext_calendar_panel_AbstractBase.getEvents(events);
    }
}
Ext_calendar_panel_Base.PROPERTIES = [
    'addForm',
    'cls',
    'compact',
    'compactOptions',
    'controlStoreRange',
    'dayHeader',
    'editForm',
    'eventDefaults',
    'eventRelayers',
    'gestureNavigation',
    'store',
    'timezoneOffset',
    'twoWayBindable',
    'value',
    'view',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_panel_Base.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'undefined,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeeventadd', parameters: 'undefined,context' },
    { name: 'beforeeventedit', parameters: 'undefined,context' },
    { name: 'beforeexpand', parameters: 'undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'undefined,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'undefined' },
    { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'undefined' },
    { name: 'drawershow', parameters: 'undefined' },
    { name: 'erased', parameters: 'sender' },
    { name: 'eventadd', parameters: 'undefined,context' },
    { name: 'eventdrop', parameters: 'undefined,context' },
    { name: 'eventedit', parameters: 'undefined,context' },
    { name: 'eventtap', parameters: 'undefined,context' },
    { name: 'expand', parameters: 'undefined' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'undefined,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'undefined,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'undefined,context' },
    { name: 'resizedragcancel', parameters: 'undefined,context' },
    { name: 'resizedragend', parameters: 'undefined,context' },
    { name: 'resizedragstart', parameters: 'undefined,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'validateeventadd', parameters: 'undefined,context' },
    { name: 'validateeventdrop', parameters: 'undefined,context' },
    { name: 'validateeventedit', parameters: 'undefined,context' },
    { name: 'valuechange', parameters: 'undefined,context' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_panel_Base.EVENTNAMES);
//    return Ext_calendar_panel_AbstractBase.getEventNames(eventnames);
//}

class Ext_calendar_panel_Days extends Ext_calendar_panel_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_panel_Days.PROPERTIES);
        return Ext_calendar_panel_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_panel_Days.EVENTS);
        return Ext_calendar_panel_Base.getEvents(events);
    }
}
Ext_calendar_panel_Days.PROPERTIES = [
    'allowSelection',
    'dayHeader',
    'dayHeaderFormat',
    'displayOverlap',
    'draggable',
    'droppable',
    'endTime',
    'eventRelayers',
    'highlightToday',
    'resizeEvents',
    'showNowMarker',
    'startTime',
    'timeFormat',
    'view',
    'visibleDays',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_panel_Days.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,calendar-days,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'calendar-days,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'calendar-days' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeeventadd', parameters: 'calendar-days,context' },
    { name: 'beforeeventdragstart', parameters: 'calendar-days,context' },
    { name: 'beforeeventedit', parameters: 'calendar-days,context' },
    { name: 'beforeeventresizestart', parameters: 'calendar-days,context' },
    { name: 'beforeexpand', parameters: 'calendar-days' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'calendar-days,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar-days' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-days,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'calendar-days' },
    { name: 'deactivate', parameters: 'oldActiveItem,calendar-days,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'calendar-days' },
    { name: 'drawershow', parameters: 'calendar-days' },
    { name: 'erased', parameters: 'sender' },
    { name: 'eventadd', parameters: 'calendar-days,context' },
    { name: 'eventdrop', parameters: 'calendar-days,context' },
    { name: 'eventedit', parameters: 'calendar-days,context' },
    { name: 'eventresize', parameters: 'calendar-days,context' },
    { name: 'eventtap', parameters: 'calendar-days,context' },
    { name: 'expand', parameters: 'calendar-days' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-days,event' },
    { name: 'focusenter', parameters: 'calendar-days,event' },
    { name: 'focusleave', parameters: 'calendar-days,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'calendar-days,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'calendar-days,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'calendar-days,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'calendar-days,context' },
    { name: 'resizedragcancel', parameters: 'calendar-days,context' },
    { name: 'resizedragend', parameters: 'calendar-days,context' },
    { name: 'resizedragstart', parameters: 'calendar-days,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar-days' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'validateeventadd', parameters: 'calendar-days,context' },
    { name: 'validateeventdrop', parameters: 'calendar-days,context' },
    { name: 'validateeventedit', parameters: 'calendar-days,context' },
    { name: 'validateeventresize', parameters: 'calendar-days,context' },
    { name: 'valuechange', parameters: 'calendar-days,context' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_panel_Days.EVENTNAMES);
//    return Ext_calendar_panel_Base.getEventNames(eventnames);
//}

class Ext_calendar_panel_Day extends Ext_calendar_panel_Days {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_panel_Day.PROPERTIES);
        return Ext_calendar_panel_Days.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_panel_Day.EVENTS);
        return Ext_calendar_panel_Days.getEvents(events);
    }
}
Ext_calendar_panel_Day.PROPERTIES = [
    'view',
    'visibleDays',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_panel_Day.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,calendar-day,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'calendar-day,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'calendar-day' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeeventadd', parameters: 'calendar-day,context' },
    { name: 'beforeeventdragstart', parameters: 'calendar-day,context' },
    { name: 'beforeeventedit', parameters: 'calendar-day,context' },
    { name: 'beforeeventresizestart', parameters: 'calendar-day,context' },
    { name: 'beforeexpand', parameters: 'calendar-day' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'calendar-day,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar-day' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-day,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'calendar-day' },
    { name: 'deactivate', parameters: 'oldActiveItem,calendar-day,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'calendar-day' },
    { name: 'drawershow', parameters: 'calendar-day' },
    { name: 'erased', parameters: 'sender' },
    { name: 'eventadd', parameters: 'calendar-day,context' },
    { name: 'eventdrop', parameters: 'calendar-day,context' },
    { name: 'eventedit', parameters: 'calendar-day,context' },
    { name: 'eventresize', parameters: 'calendar-day,context' },
    { name: 'eventtap', parameters: 'calendar-day,context' },
    { name: 'expand', parameters: 'calendar-day' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-day,event' },
    { name: 'focusenter', parameters: 'calendar-day,event' },
    { name: 'focusleave', parameters: 'calendar-day,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'calendar-day,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'calendar-day,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'calendar-day,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'calendar-day,context' },
    { name: 'resizedragcancel', parameters: 'calendar-day,context' },
    { name: 'resizedragend', parameters: 'calendar-day,context' },
    { name: 'resizedragstart', parameters: 'calendar-day,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar-day' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'validateeventadd', parameters: 'calendar-day,context' },
    { name: 'validateeventdrop', parameters: 'calendar-day,context' },
    { name: 'validateeventedit', parameters: 'calendar-day,context' },
    { name: 'validateeventresize', parameters: 'calendar-day,context' },
    { name: 'valuechange', parameters: 'calendar-day,context' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_panel_Day.EVENTNAMES);
//    return Ext_calendar_panel_Days.getEventNames(eventnames);
//}

var ExtCalendar_dayComponent_1;
class ExtCalendar_dayMetaData extends Ext_calendar_panel_Day {
    static getAll() {
        ExtCalendar_dayMetaData.PROPERTIES = Ext_calendar_panel_Day.getProperties(ExtCalendar_dayMetaData.PROPERTIES);
        ExtCalendar_dayMetaData.EVENTS = Ext_calendar_panel_Day.getEvents(ExtCalendar_dayMetaData.EVENTS);
        ExtCalendar_dayMetaData.EVENTS.forEach((event) => {
            ExtCalendar_dayMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_dayMetaData.PROPERTIES = [];
ExtCalendar_dayMetaData.EVENTS = [];
ExtCalendar_dayMetaData.EVENTNAMES = [];
(function () { ExtCalendar_dayMetaData.getAll(); })();
let ExtCalendar_dayComponent = ExtCalendar_dayComponent_1 = class ExtCalendar_dayComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_dayMetaData.PROPERTIES, ExtCalendar_dayMetaData.EVENTS);
        this.xtype = 'calendar-day';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_dayComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_dayComponent = ExtCalendar_dayComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-day',
        inputs: ExtCalendar_dayMetaData.PROPERTIES,
        outputs: ExtCalendar_dayMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_dayComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_dayComponent);

var ExtCalendar_daysComponent_1;
class ExtCalendar_daysMetaData extends Ext_calendar_panel_Days {
    static getAll() {
        ExtCalendar_daysMetaData.PROPERTIES = Ext_calendar_panel_Days.getProperties(ExtCalendar_daysMetaData.PROPERTIES);
        ExtCalendar_daysMetaData.EVENTS = Ext_calendar_panel_Days.getEvents(ExtCalendar_daysMetaData.EVENTS);
        ExtCalendar_daysMetaData.EVENTS.forEach((event) => {
            ExtCalendar_daysMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_daysMetaData.PROPERTIES = [];
ExtCalendar_daysMetaData.EVENTS = [];
ExtCalendar_daysMetaData.EVENTNAMES = [];
(function () { ExtCalendar_daysMetaData.getAll(); })();
let ExtCalendar_daysComponent = ExtCalendar_daysComponent_1 = class ExtCalendar_daysComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_daysMetaData.PROPERTIES, ExtCalendar_daysMetaData.EVENTS);
        this.xtype = 'calendar-days';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_daysComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_daysComponent = ExtCalendar_daysComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-days',
        inputs: ExtCalendar_daysMetaData.PROPERTIES,
        outputs: ExtCalendar_daysMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_daysComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_daysComponent);

class Ext_calendar_panel_Weeks extends Ext_calendar_panel_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_panel_Weeks.PROPERTIES);
        return Ext_calendar_panel_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_panel_Weeks.EVENTS);
        return Ext_calendar_panel_Base.getEvents(events);
    }
}
Ext_calendar_panel_Weeks.PROPERTIES = [
    'addOnSelect',
    'allowSelection',
    'dayFormat',
    'dayHeader',
    'dayHeaderFormat',
    'draggable',
    'droppable',
    'eventRelayers',
    'firstDayOfWeek',
    'highlightToday',
    'overflowText',
    'showOverflow',
    'view',
    'visibleDays',
    'visibleWeeks',
    'weekendDays',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_panel_Weeks.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,calendar-weeks,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'calendar-weeks,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'calendar-weeks' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeeventadd', parameters: 'calendar-weeks,context' },
    { name: 'beforeeventdragstart', parameters: 'calendar-weeks,context' },
    { name: 'beforeeventedit', parameters: 'calendar-weeks,context' },
    { name: 'beforeexpand', parameters: 'calendar-weeks' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'calendar-weeks,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar-weeks' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-weeks,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'calendar-weeks' },
    { name: 'deactivate', parameters: 'oldActiveItem,calendar-weeks,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'calendar-weeks' },
    { name: 'drawershow', parameters: 'calendar-weeks' },
    { name: 'erased', parameters: 'sender' },
    { name: 'eventadd', parameters: 'calendar-weeks,context' },
    { name: 'eventdrop', parameters: 'calendar-weeks,context' },
    { name: 'eventedit', parameters: 'calendar-weeks,context' },
    { name: 'eventtap', parameters: 'calendar-weeks,context' },
    { name: 'expand', parameters: 'calendar-weeks' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-weeks,event' },
    { name: 'focusenter', parameters: 'calendar-weeks,event' },
    { name: 'focusleave', parameters: 'calendar-weeks,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'calendar-weeks,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'calendar-weeks,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'calendar-weeks,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'calendar-weeks,context' },
    { name: 'resizedragcancel', parameters: 'calendar-weeks,context' },
    { name: 'resizedragend', parameters: 'calendar-weeks,context' },
    { name: 'resizedragstart', parameters: 'calendar-weeks,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar-weeks' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'validateeventadd', parameters: 'calendar-weeks,context' },
    { name: 'validateeventdrop', parameters: 'calendar-weeks,context' },
    { name: 'validateeventedit', parameters: 'calendar-weeks,context' },
    { name: 'valuechange', parameters: 'calendar-weeks,context' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_panel_Weeks.EVENTNAMES);
//    return Ext_calendar_panel_Base.getEventNames(eventnames);
//}

class Ext_calendar_panel_Month extends Ext_calendar_panel_Weeks {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_panel_Month.PROPERTIES);
        return Ext_calendar_panel_Weeks.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_panel_Month.EVENTS);
        return Ext_calendar_panel_Weeks.getEvents(events);
    }
}
Ext_calendar_panel_Month.PROPERTIES = [
    'value',
    'view',
    'visibleWeeks',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_panel_Month.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,calendar-month,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'calendar-month,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'calendar-month' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeeventadd', parameters: 'calendar-month,context' },
    { name: 'beforeeventdragstart', parameters: 'calendar-month,context' },
    { name: 'beforeeventedit', parameters: 'calendar-month,context' },
    { name: 'beforeexpand', parameters: 'calendar-month' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'calendar-month,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar-month' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-month,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'calendar-month' },
    { name: 'deactivate', parameters: 'oldActiveItem,calendar-month,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'calendar-month' },
    { name: 'drawershow', parameters: 'calendar-month' },
    { name: 'erased', parameters: 'sender' },
    { name: 'eventadd', parameters: 'calendar-month,context' },
    { name: 'eventdrop', parameters: 'calendar-month,context' },
    { name: 'eventedit', parameters: 'calendar-month,context' },
    { name: 'eventtap', parameters: 'calendar-month,context' },
    { name: 'expand', parameters: 'calendar-month' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-month,event' },
    { name: 'focusenter', parameters: 'calendar-month,event' },
    { name: 'focusleave', parameters: 'calendar-month,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'calendar-month,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'calendar-month,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'calendar-month,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'calendar-month,context' },
    { name: 'resizedragcancel', parameters: 'calendar-month,context' },
    { name: 'resizedragend', parameters: 'calendar-month,context' },
    { name: 'resizedragstart', parameters: 'calendar-month,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar-month' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'validateeventadd', parameters: 'calendar-month,context' },
    { name: 'validateeventdrop', parameters: 'calendar-month,context' },
    { name: 'validateeventedit', parameters: 'calendar-month,context' },
    { name: 'valuechange', parameters: 'calendar-month,context' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_panel_Month.EVENTNAMES);
//    return Ext_calendar_panel_Weeks.getEventNames(eventnames);
//}

var ExtCalendar_monthComponent_1;
class ExtCalendar_monthMetaData extends Ext_calendar_panel_Month {
    static getAll() {
        ExtCalendar_monthMetaData.PROPERTIES = Ext_calendar_panel_Month.getProperties(ExtCalendar_monthMetaData.PROPERTIES);
        ExtCalendar_monthMetaData.EVENTS = Ext_calendar_panel_Month.getEvents(ExtCalendar_monthMetaData.EVENTS);
        ExtCalendar_monthMetaData.EVENTS.forEach((event) => {
            ExtCalendar_monthMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_monthMetaData.PROPERTIES = [];
ExtCalendar_monthMetaData.EVENTS = [];
ExtCalendar_monthMetaData.EVENTNAMES = [];
(function () { ExtCalendar_monthMetaData.getAll(); })();
let ExtCalendar_monthComponent = ExtCalendar_monthComponent_1 = class ExtCalendar_monthComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_monthMetaData.PROPERTIES, ExtCalendar_monthMetaData.EVENTS);
        this.xtype = 'calendar-month';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_monthComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_monthComponent = ExtCalendar_monthComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-month',
        inputs: ExtCalendar_monthMetaData.PROPERTIES,
        outputs: ExtCalendar_monthMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_monthComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_monthComponent);

class Ext_calendar_panel_AbstractPanel extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_panel_AbstractPanel.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_panel_AbstractPanel.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_calendar_panel_AbstractPanel.PROPERTIES = [
    'menuButton',
    'sheet',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_panel_AbstractPanel.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'undefined,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'undefined,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'undefined' },
    { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'undefined' },
    { name: 'drawershow', parameters: 'undefined' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'undefined' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'undefined,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'undefined,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'undefined,context' },
    { name: 'resizedragcancel', parameters: 'undefined,context' },
    { name: 'resizedragend', parameters: 'undefined,context' },
    { name: 'resizedragstart', parameters: 'undefined,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_panel_AbstractPanel.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

class Ext_calendar_panel_Panel extends Ext_calendar_panel_AbstractPanel {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_panel_Panel.PROPERTIES);
        return Ext_calendar_panel_AbstractPanel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_panel_Panel.EVENTS);
        return Ext_calendar_panel_AbstractPanel.getEvents(events);
    }
}
Ext_calendar_panel_Panel.PROPERTIES = [
    'calendarList',
    'cls',
    'compact',
    'compactOptions',
    'createButton',
    'createButtonPosition',
    'dateTitle',
    'defaultView',
    'highlightToday',
    'nextButton',
    'previousButton',
    'referenceHolder',
    'sideBar',
    'store',
    'switcher',
    'switcherPosition',
    'timezoneOffset',
    'titleBar',
    'todayButton',
    'value',
    'views',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_panel_Panel.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,calendar,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'calendar,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'calendar' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'calendar' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'calendar,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'calendar' },
    { name: 'deactivate', parameters: 'oldActiveItem,calendar,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'calendar' },
    { name: 'drawershow', parameters: 'calendar' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'calendar' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar,event' },
    { name: 'focusenter', parameters: 'calendar,event' },
    { name: 'focusleave', parameters: 'calendar,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'calendar,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'calendar,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'calendar,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'calendar,context' },
    { name: 'resizedragcancel', parameters: 'calendar,context' },
    { name: 'resizedragend', parameters: 'calendar,context' },
    { name: 'resizedragstart', parameters: 'calendar,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_panel_Panel.EVENTNAMES);
//    return Ext_calendar_panel_AbstractPanel.getEventNames(eventnames);
//}

var ExtCalendarComponent_1;
class ExtCalendarMetaData extends Ext_calendar_panel_Panel {
    static getAll() {
        ExtCalendarMetaData.PROPERTIES = Ext_calendar_panel_Panel.getProperties(ExtCalendarMetaData.PROPERTIES);
        ExtCalendarMetaData.EVENTS = Ext_calendar_panel_Panel.getEvents(ExtCalendarMetaData.EVENTS);
        ExtCalendarMetaData.EVENTS.forEach((event) => {
            ExtCalendarMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendarMetaData.PROPERTIES = [];
ExtCalendarMetaData.EVENTS = [];
ExtCalendarMetaData.EVENTNAMES = [];
(function () { ExtCalendarMetaData.getAll(); })();
let ExtCalendarComponent = ExtCalendarComponent_1 = class ExtCalendarComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendarMetaData.PROPERTIES, ExtCalendarMetaData.EVENTS);
        this.xtype = 'calendar';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendarComponent = ExtCalendarComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar',
        inputs: ExtCalendarMetaData.PROPERTIES,
        outputs: ExtCalendarMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendarComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendarComponent);

class Ext_calendar_panel_Week extends Ext_calendar_panel_Days {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_panel_Week.PROPERTIES);
        return Ext_calendar_panel_Days.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_panel_Week.EVENTS);
        return Ext_calendar_panel_Days.getEvents(events);
    }
}
Ext_calendar_panel_Week.PROPERTIES = [
    'firstDayOfWeek',
    'value',
    'view',
    'visibleDays',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_panel_Week.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,calendar-week,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'calendar-week,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'calendar-week' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeeventadd', parameters: 'calendar-week,context' },
    { name: 'beforeeventdragstart', parameters: 'calendar-week,context' },
    { name: 'beforeeventedit', parameters: 'calendar-week,context' },
    { name: 'beforeeventresizestart', parameters: 'calendar-week,context' },
    { name: 'beforeexpand', parameters: 'calendar-week' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'calendar-week,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar-week' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-week,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'calendar-week' },
    { name: 'deactivate', parameters: 'oldActiveItem,calendar-week,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'calendar-week' },
    { name: 'drawershow', parameters: 'calendar-week' },
    { name: 'erased', parameters: 'sender' },
    { name: 'eventadd', parameters: 'calendar-week,context' },
    { name: 'eventdrop', parameters: 'calendar-week,context' },
    { name: 'eventedit', parameters: 'calendar-week,context' },
    { name: 'eventresize', parameters: 'calendar-week,context' },
    { name: 'eventtap', parameters: 'calendar-week,context' },
    { name: 'expand', parameters: 'calendar-week' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-week,event' },
    { name: 'focusenter', parameters: 'calendar-week,event' },
    { name: 'focusleave', parameters: 'calendar-week,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'calendar-week,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'calendar-week,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'calendar-week,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'calendar-week,context' },
    { name: 'resizedragcancel', parameters: 'calendar-week,context' },
    { name: 'resizedragend', parameters: 'calendar-week,context' },
    { name: 'resizedragstart', parameters: 'calendar-week,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar-week' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'validateeventadd', parameters: 'calendar-week,context' },
    { name: 'validateeventdrop', parameters: 'calendar-week,context' },
    { name: 'validateeventedit', parameters: 'calendar-week,context' },
    { name: 'validateeventresize', parameters: 'calendar-week,context' },
    { name: 'valuechange', parameters: 'calendar-week,context' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_panel_Week.EVENTNAMES);
//    return Ext_calendar_panel_Days.getEventNames(eventnames);
//}

var ExtCalendar_weekComponent_1;
class ExtCalendar_weekMetaData extends Ext_calendar_panel_Week {
    static getAll() {
        ExtCalendar_weekMetaData.PROPERTIES = Ext_calendar_panel_Week.getProperties(ExtCalendar_weekMetaData.PROPERTIES);
        ExtCalendar_weekMetaData.EVENTS = Ext_calendar_panel_Week.getEvents(ExtCalendar_weekMetaData.EVENTS);
        ExtCalendar_weekMetaData.EVENTS.forEach((event) => {
            ExtCalendar_weekMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_weekMetaData.PROPERTIES = [];
ExtCalendar_weekMetaData.EVENTS = [];
ExtCalendar_weekMetaData.EVENTNAMES = [];
(function () { ExtCalendar_weekMetaData.getAll(); })();
let ExtCalendar_weekComponent = ExtCalendar_weekComponent_1 = class ExtCalendar_weekComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_weekMetaData.PROPERTIES, ExtCalendar_weekMetaData.EVENTS);
        this.xtype = 'calendar-week';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_weekComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_weekComponent = ExtCalendar_weekComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-week',
        inputs: ExtCalendar_weekMetaData.PROPERTIES,
        outputs: ExtCalendar_weekMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_weekComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_weekComponent);

var ExtCalendar_weeksComponent_1;
class ExtCalendar_weeksMetaData extends Ext_calendar_panel_Weeks {
    static getAll() {
        ExtCalendar_weeksMetaData.PROPERTIES = Ext_calendar_panel_Weeks.getProperties(ExtCalendar_weeksMetaData.PROPERTIES);
        ExtCalendar_weeksMetaData.EVENTS = Ext_calendar_panel_Weeks.getEvents(ExtCalendar_weeksMetaData.EVENTS);
        ExtCalendar_weeksMetaData.EVENTS.forEach((event) => {
            ExtCalendar_weeksMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_weeksMetaData.PROPERTIES = [];
ExtCalendar_weeksMetaData.EVENTS = [];
ExtCalendar_weeksMetaData.EVENTNAMES = [];
(function () { ExtCalendar_weeksMetaData.getAll(); })();
let ExtCalendar_weeksComponent = ExtCalendar_weeksComponent_1 = class ExtCalendar_weeksComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_weeksMetaData.PROPERTIES, ExtCalendar_weeksMetaData.EVENTS);
        this.xtype = 'calendar-weeks';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_weeksComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_weeksComponent = ExtCalendar_weeksComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-weeks',
        inputs: ExtCalendar_weeksMetaData.PROPERTIES,
        outputs: ExtCalendar_weeksMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_weeksComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_weeksComponent);

class Ext_calendar_view_Base extends Ext_Gadget {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_view_Base.PROPERTIES);
        return Ext_Gadget.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_view_Base.EVENTS);
        return Ext_Gadget.getEvents(events);
    }
}
Ext_calendar_view_Base.PROPERTIES = [
    'addForm',
    'compact',
    'compactOptions',
    'controlStoreRange',
    'editForm',
    'eventDefaults',
    'gestureNavigation',
    'header',
    'store',
    'timezoneOffset',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_view_Base.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeeventadd', parameters: 'undefined,context' },
    { name: 'beforeeventedit', parameters: 'undefined,context' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'eventadd', parameters: 'undefined,context' },
    { name: 'eventdrop', parameters: 'undefined,context' },
    { name: 'eventedit', parameters: 'undefined,context' },
    { name: 'eventtap', parameters: 'undefined,context' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'validateeventadd', parameters: 'undefined,context' },
    { name: 'validateeventdrop', parameters: 'undefined,context' },
    { name: 'validateeventedit', parameters: 'undefined,context' },
    { name: 'valuechange', parameters: 'undefined,context' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_view_Base.EVENTNAMES);
//    return Ext_Gadget.getEventNames(eventnames);
//}

class Ext_calendar_view_Days extends Ext_calendar_view_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_view_Days.PROPERTIES);
        return Ext_calendar_view_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_view_Days.EVENTS);
        return Ext_calendar_view_Base.getEvents(events);
    }
}
Ext_calendar_view_Days.PROPERTIES = [
    'allowSelection',
    'displayOverlap',
    'draggable',
    'droppable',
    'endTime',
    'resizeEvents',
    'showNowMarker',
    'startTime',
    'timeFormat',
    'timeRenderer',
    'value',
    'visibleDays',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_view_Days.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeeventadd', parameters: 'calendar-daysview,context' },
    { name: 'beforeeventdragstart', parameters: 'calendar-daysview,context' },
    { name: 'beforeeventedit', parameters: 'calendar-daysview,context' },
    { name: 'beforeeventresizestart', parameters: 'calendar-daysview,context' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar-daysview' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-daysview,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'eventadd', parameters: 'calendar-daysview,context' },
    { name: 'eventdrop', parameters: 'calendar-daysview,context' },
    { name: 'eventedit', parameters: 'calendar-daysview,context' },
    { name: 'eventresize', parameters: 'calendar-daysview,context' },
    { name: 'eventtap', parameters: 'calendar-daysview,context' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-daysview,event' },
    { name: 'focusenter', parameters: 'calendar-daysview,event' },
    { name: 'focusleave', parameters: 'calendar-daysview,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar-daysview' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'validateeventadd', parameters: 'calendar-daysview,context' },
    { name: 'validateeventdrop', parameters: 'calendar-daysview,context' },
    { name: 'validateeventedit', parameters: 'calendar-daysview,context' },
    { name: 'validateeventresize', parameters: 'calendar-daysview,context' },
    { name: 'valuechange', parameters: 'calendar-daysview,context' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_view_Days.EVENTNAMES);
//    return Ext_calendar_view_Base.getEventNames(eventnames);
//}

class Ext_calendar_view_Day extends Ext_calendar_view_Days {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_view_Day.PROPERTIES);
        return Ext_calendar_view_Days.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_view_Day.EVENTS);
        return Ext_calendar_view_Days.getEvents(events);
    }
}
Ext_calendar_view_Day.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_view_Day.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeeventadd', parameters: 'calendar-dayview,context' },
    { name: 'beforeeventdragstart', parameters: 'calendar-dayview,context' },
    { name: 'beforeeventedit', parameters: 'calendar-dayview,context' },
    { name: 'beforeeventresizestart', parameters: 'calendar-dayview,context' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar-dayview' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-dayview,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'eventadd', parameters: 'calendar-dayview,context' },
    { name: 'eventdrop', parameters: 'calendar-dayview,context' },
    { name: 'eventedit', parameters: 'calendar-dayview,context' },
    { name: 'eventresize', parameters: 'calendar-dayview,context' },
    { name: 'eventtap', parameters: 'calendar-dayview,context' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-dayview,event' },
    { name: 'focusenter', parameters: 'calendar-dayview,event' },
    { name: 'focusleave', parameters: 'calendar-dayview,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar-dayview' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'validateeventadd', parameters: 'calendar-dayview,context' },
    { name: 'validateeventdrop', parameters: 'calendar-dayview,context' },
    { name: 'validateeventedit', parameters: 'calendar-dayview,context' },
    { name: 'validateeventresize', parameters: 'calendar-dayview,context' },
    { name: 'valuechange', parameters: 'calendar-dayview,context' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_view_Day.EVENTNAMES);
//    return Ext_calendar_view_Days.getEventNames(eventnames);
//}

var ExtCalendar_dayviewComponent_1;
class ExtCalendar_dayviewMetaData extends Ext_calendar_view_Day {
    static getAll() {
        ExtCalendar_dayviewMetaData.PROPERTIES = Ext_calendar_view_Day.getProperties(ExtCalendar_dayviewMetaData.PROPERTIES);
        ExtCalendar_dayviewMetaData.EVENTS = Ext_calendar_view_Day.getEvents(ExtCalendar_dayviewMetaData.EVENTS);
        ExtCalendar_dayviewMetaData.EVENTS.forEach((event) => {
            ExtCalendar_dayviewMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_dayviewMetaData.PROPERTIES = [];
ExtCalendar_dayviewMetaData.EVENTS = [];
ExtCalendar_dayviewMetaData.EVENTNAMES = [];
(function () { ExtCalendar_dayviewMetaData.getAll(); })();
let ExtCalendar_dayviewComponent = ExtCalendar_dayviewComponent_1 = class ExtCalendar_dayviewComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_dayviewMetaData.PROPERTIES, ExtCalendar_dayviewMetaData.EVENTS);
        this.xtype = 'calendar-dayview';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_dayviewComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_dayviewComponent = ExtCalendar_dayviewComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-dayview',
        inputs: ExtCalendar_dayviewMetaData.PROPERTIES,
        outputs: ExtCalendar_dayviewMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_dayviewComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_dayviewComponent);

var ExtCalendar_daysviewComponent_1;
class ExtCalendar_daysviewMetaData extends Ext_calendar_view_Days {
    static getAll() {
        ExtCalendar_daysviewMetaData.PROPERTIES = Ext_calendar_view_Days.getProperties(ExtCalendar_daysviewMetaData.PROPERTIES);
        ExtCalendar_daysviewMetaData.EVENTS = Ext_calendar_view_Days.getEvents(ExtCalendar_daysviewMetaData.EVENTS);
        ExtCalendar_daysviewMetaData.EVENTS.forEach((event) => {
            ExtCalendar_daysviewMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_daysviewMetaData.PROPERTIES = [];
ExtCalendar_daysviewMetaData.EVENTS = [];
ExtCalendar_daysviewMetaData.EVENTNAMES = [];
(function () { ExtCalendar_daysviewMetaData.getAll(); })();
let ExtCalendar_daysviewComponent = ExtCalendar_daysviewComponent_1 = class ExtCalendar_daysviewComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_daysviewMetaData.PROPERTIES, ExtCalendar_daysviewMetaData.EVENTS);
        this.xtype = 'calendar-daysview';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_daysviewComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_daysviewComponent = ExtCalendar_daysviewComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-daysview',
        inputs: ExtCalendar_daysviewMetaData.PROPERTIES,
        outputs: ExtCalendar_daysviewMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_daysviewComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_daysviewComponent);

class Ext_calendar_view_Weeks extends Ext_calendar_view_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_view_Weeks.PROPERTIES);
        return Ext_calendar_view_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_view_Weeks.EVENTS);
        return Ext_calendar_view_Base.getEvents(events);
    }
}
Ext_calendar_view_Weeks.PROPERTIES = [
    'addOnSelect',
    'allowSelection',
    'compactOptions',
    'dayFormat',
    'draggable',
    'droppable',
    'firstDayOfWeek',
    'overflowText',
    'showOverflow',
    'value',
    'visibleDays',
    'visibleWeeks',
    'weekendDays',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_view_Weeks.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeeventadd', parameters: 'calendar-weeksview,context' },
    { name: 'beforeeventdragstart', parameters: 'calendar-weeksview,context' },
    { name: 'beforeeventedit', parameters: 'calendar-weeksview,context' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar-weeksview' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-weeksview,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'eventadd', parameters: 'calendar-weeksview,context' },
    { name: 'eventdrop', parameters: 'calendar-weeksview,context' },
    { name: 'eventedit', parameters: 'calendar-weeksview,context' },
    { name: 'eventtap', parameters: 'calendar-weeksview,context' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-weeksview,event' },
    { name: 'focusenter', parameters: 'calendar-weeksview,event' },
    { name: 'focusleave', parameters: 'calendar-weeksview,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'calendar-weeksview,context' },
    { name: 'selectrange', parameters: 'calendar-weeksview,context' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar-weeksview' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'validateeventadd', parameters: 'calendar-weeksview,context' },
    { name: 'validateeventdrop', parameters: 'calendar-weeksview,context' },
    { name: 'validateeventedit', parameters: 'calendar-weeksview,context' },
    { name: 'valuechange', parameters: 'calendar-weeksview,context' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_view_Weeks.EVENTNAMES);
//    return Ext_calendar_view_Base.getEventNames(eventnames);
//}

class Ext_calendar_view_Month extends Ext_calendar_view_Weeks {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_view_Month.PROPERTIES);
        return Ext_calendar_view_Weeks.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_view_Month.EVENTS);
        return Ext_calendar_view_Weeks.getEvents(events);
    }
}
Ext_calendar_view_Month.PROPERTIES = [
    'value',
    'visibleWeeks',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_view_Month.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeeventadd', parameters: 'calendar-monthview,context' },
    { name: 'beforeeventdragstart', parameters: 'calendar-monthview,context' },
    { name: 'beforeeventedit', parameters: 'calendar-monthview,context' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar-monthview' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-monthview,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'eventadd', parameters: 'calendar-monthview,context' },
    { name: 'eventdrop', parameters: 'calendar-monthview,context' },
    { name: 'eventedit', parameters: 'calendar-monthview,context' },
    { name: 'eventtap', parameters: 'calendar-monthview,context' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-monthview,event' },
    { name: 'focusenter', parameters: 'calendar-monthview,event' },
    { name: 'focusleave', parameters: 'calendar-monthview,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'calendar-monthview,context' },
    { name: 'selectrange', parameters: 'calendar-monthview,context' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar-monthview' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'validateeventadd', parameters: 'calendar-monthview,context' },
    { name: 'validateeventdrop', parameters: 'calendar-monthview,context' },
    { name: 'validateeventedit', parameters: 'calendar-monthview,context' },
    { name: 'valuechange', parameters: 'calendar-monthview,context' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_view_Month.EVENTNAMES);
//    return Ext_calendar_view_Weeks.getEventNames(eventnames);
//}

var ExtCalendar_monthviewComponent_1;
class ExtCalendar_monthviewMetaData extends Ext_calendar_view_Month {
    static getAll() {
        ExtCalendar_monthviewMetaData.PROPERTIES = Ext_calendar_view_Month.getProperties(ExtCalendar_monthviewMetaData.PROPERTIES);
        ExtCalendar_monthviewMetaData.EVENTS = Ext_calendar_view_Month.getEvents(ExtCalendar_monthviewMetaData.EVENTS);
        ExtCalendar_monthviewMetaData.EVENTS.forEach((event) => {
            ExtCalendar_monthviewMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_monthviewMetaData.PROPERTIES = [];
ExtCalendar_monthviewMetaData.EVENTS = [];
ExtCalendar_monthviewMetaData.EVENTNAMES = [];
(function () { ExtCalendar_monthviewMetaData.getAll(); })();
let ExtCalendar_monthviewComponent = ExtCalendar_monthviewComponent_1 = class ExtCalendar_monthviewComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_monthviewMetaData.PROPERTIES, ExtCalendar_monthviewMetaData.EVENTS);
        this.xtype = 'calendar-monthview';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_monthviewComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_monthviewComponent = ExtCalendar_monthviewComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-monthview',
        inputs: ExtCalendar_monthviewMetaData.PROPERTIES,
        outputs: ExtCalendar_monthviewMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_monthviewComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_monthviewComponent);

class Ext_container_Container extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_container_Container.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_container_Container.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_container_Container.PROPERTIES = [
    'activeItem',
    'autoDestroy',
    'autoSize',
    'bodyCls',
    'cardSwitchAnimation',
    'control',
    'defaultFocus',
    'defaults',
    'defaultType',
    'innerCls',
    'items',
    'layout',
    'manageBorders',
    'masked',
    'weighted',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_container_Container.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,container,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'container,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'container' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'container,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,container,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'container,event' },
    { name: 'focusenter', parameters: 'container,event' },
    { name: 'focusleave', parameters: 'container,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'container,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'container,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'container,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'container' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_container_Container.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

class Ext_calendar_view_Multi extends Ext_container_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_view_Multi.PROPERTIES);
        return Ext_container_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_view_Multi.EVENTS);
        return Ext_container_Container.getEvents(events);
    }
}
Ext_calendar_view_Multi.PROPERTIES = [
    'compact',
    'compactOptions',
    'defaultView',
    'layout',
    'store',
    'timezoneOffset',
    'value',
    'views',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_view_Multi.EVENTS = [
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_view_Multi.EVENTNAMES);
//    return Ext_container_Container.getEventNames(eventnames);
//}

var ExtCalendar_multiviewComponent_1;
class ExtCalendar_multiviewMetaData extends Ext_calendar_view_Multi {
    static getAll() {
        ExtCalendar_multiviewMetaData.PROPERTIES = Ext_calendar_view_Multi.getProperties(ExtCalendar_multiviewMetaData.PROPERTIES);
        ExtCalendar_multiviewMetaData.EVENTS = Ext_calendar_view_Multi.getEvents(ExtCalendar_multiviewMetaData.EVENTS);
        ExtCalendar_multiviewMetaData.EVENTS.forEach((event) => {
            ExtCalendar_multiviewMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_multiviewMetaData.PROPERTIES = [];
ExtCalendar_multiviewMetaData.EVENTS = [];
ExtCalendar_multiviewMetaData.EVENTNAMES = [];
(function () { ExtCalendar_multiviewMetaData.getAll(); })();
let ExtCalendar_multiviewComponent = ExtCalendar_multiviewComponent_1 = class ExtCalendar_multiviewComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_multiviewMetaData.PROPERTIES, ExtCalendar_multiviewMetaData.EVENTS);
        this.xtype = 'calendar-multiview';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_multiviewComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_multiviewComponent = ExtCalendar_multiviewComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-multiview',
        inputs: ExtCalendar_multiviewMetaData.PROPERTIES,
        outputs: ExtCalendar_multiviewMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_multiviewComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_multiviewComponent);

class Ext_calendar_view_Week extends Ext_calendar_view_Days {
    static getProperties(properties) {
        properties = properties.concat(Ext_calendar_view_Week.PROPERTIES);
        return Ext_calendar_view_Days.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_calendar_view_Week.EVENTS);
        return Ext_calendar_view_Days.getEvents(events);
    }
}
Ext_calendar_view_Week.PROPERTIES = [
    'firstDayOfWeek',
    'value',
    'visibleDays',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_calendar_view_Week.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeeventadd', parameters: 'calendar-weekview,context' },
    { name: 'beforeeventdragstart', parameters: 'calendar-weekview,context' },
    { name: 'beforeeventedit', parameters: 'calendar-weekview,context' },
    { name: 'beforeeventresizestart', parameters: 'calendar-weekview,context' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'calendar-weekview' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'calendar-weekview,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'eventadd', parameters: 'calendar-weekview,context' },
    { name: 'eventdrop', parameters: 'calendar-weekview,context' },
    { name: 'eventedit', parameters: 'calendar-weekview,context' },
    { name: 'eventresize', parameters: 'calendar-weekview,context' },
    { name: 'eventtap', parameters: 'calendar-weekview,context' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'calendar-weekview,event' },
    { name: 'focusenter', parameters: 'calendar-weekview,event' },
    { name: 'focusleave', parameters: 'calendar-weekview,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'calendar-weekview' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'validateeventadd', parameters: 'calendar-weekview,context' },
    { name: 'validateeventdrop', parameters: 'calendar-weekview,context' },
    { name: 'validateeventedit', parameters: 'calendar-weekview,context' },
    { name: 'validateeventresize', parameters: 'calendar-weekview,context' },
    { name: 'valuechange', parameters: 'calendar-weekview,context' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_calendar_view_Week.EVENTNAMES);
//    return Ext_calendar_view_Days.getEventNames(eventnames);
//}

var ExtCalendar_weekviewComponent_1;
class ExtCalendar_weekviewMetaData extends Ext_calendar_view_Week {
    static getAll() {
        ExtCalendar_weekviewMetaData.PROPERTIES = Ext_calendar_view_Week.getProperties(ExtCalendar_weekviewMetaData.PROPERTIES);
        ExtCalendar_weekviewMetaData.EVENTS = Ext_calendar_view_Week.getEvents(ExtCalendar_weekviewMetaData.EVENTS);
        ExtCalendar_weekviewMetaData.EVENTS.forEach((event) => {
            ExtCalendar_weekviewMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_weekviewMetaData.PROPERTIES = [];
ExtCalendar_weekviewMetaData.EVENTS = [];
ExtCalendar_weekviewMetaData.EVENTNAMES = [];
(function () { ExtCalendar_weekviewMetaData.getAll(); })();
let ExtCalendar_weekviewComponent = ExtCalendar_weekviewComponent_1 = class ExtCalendar_weekviewComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_weekviewMetaData.PROPERTIES, ExtCalendar_weekviewMetaData.EVENTS);
        this.xtype = 'calendar-weekview';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_weekviewComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_weekviewComponent = ExtCalendar_weekviewComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-weekview',
        inputs: ExtCalendar_weekviewMetaData.PROPERTIES,
        outputs: ExtCalendar_weekviewMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_weekviewComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_weekviewComponent);

var ExtCalendar_weeksviewComponent_1;
class ExtCalendar_weeksviewMetaData extends Ext_calendar_view_Weeks {
    static getAll() {
        ExtCalendar_weeksviewMetaData.PROPERTIES = Ext_calendar_view_Weeks.getProperties(ExtCalendar_weeksviewMetaData.PROPERTIES);
        ExtCalendar_weeksviewMetaData.EVENTS = Ext_calendar_view_Weeks.getEvents(ExtCalendar_weeksviewMetaData.EVENTS);
        ExtCalendar_weeksviewMetaData.EVENTS.forEach((event) => {
            ExtCalendar_weeksviewMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_weeksviewMetaData.PROPERTIES = [];
ExtCalendar_weeksviewMetaData.EVENTS = [];
ExtCalendar_weeksviewMetaData.EVENTNAMES = [];
(function () { ExtCalendar_weeksviewMetaData.getAll(); })();
let ExtCalendar_weeksviewComponent = ExtCalendar_weeksviewComponent_1 = class ExtCalendar_weeksviewComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_weeksviewMetaData.PROPERTIES, ExtCalendar_weeksviewMetaData.EVENTS);
        this.xtype = 'calendar-weeksview';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_weeksviewComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_weeksviewComponent = ExtCalendar_weeksviewComponent_1 = __decorate([
    Component({
        selector: 'ext-calendar-weeksview',
        inputs: ExtCalendar_weeksviewMetaData.PROPERTIES,
        outputs: ExtCalendar_weeksviewMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_weeksviewComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_weeksviewComponent);

class Ext_Carousel extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_Carousel.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Carousel.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_Carousel.PROPERTIES = [
    'direction',
    'draggable',
    'indicator',
    'layout',
    'ui',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Carousel.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,carousel,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'carousel,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'carousel' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'carousel,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,carousel,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'carousel,event' },
    { name: 'focusenter', parameters: 'carousel,event' },
    { name: 'focusleave', parameters: 'carousel,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'carousel,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'carousel,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'carousel,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'carousel' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Carousel.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

var ExtCarouselComponent_1;
class ExtCarouselMetaData extends Ext_Carousel {
    static getAll() {
        ExtCarouselMetaData.PROPERTIES = Ext_Carousel.getProperties(ExtCarouselMetaData.PROPERTIES);
        ExtCarouselMetaData.EVENTS = Ext_Carousel.getEvents(ExtCarouselMetaData.EVENTS);
        ExtCarouselMetaData.EVENTS.forEach((event) => {
            ExtCarouselMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCarouselMetaData.PROPERTIES = [];
ExtCarouselMetaData.EVENTS = [];
ExtCarouselMetaData.EVENTNAMES = [];
(function () { ExtCarouselMetaData.getAll(); })();
let ExtCarouselComponent = ExtCarouselComponent_1 = class ExtCarouselComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCarouselMetaData.PROPERTIES, ExtCarouselMetaData.EVENTS);
        this.xtype = 'carousel';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCarouselComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCarouselComponent = ExtCarouselComponent_1 = __decorate([
    Component({
        selector: 'ext-carousel',
        inputs: ExtCarouselMetaData.PROPERTIES,
        outputs: ExtCarouselMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCarouselComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCarouselComponent);

class Ext_draw_ContainerBase extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_draw_ContainerBase.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_draw_ContainerBase.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_draw_ContainerBase.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_draw_ContainerBase.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'undefined,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'undefined,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'undefined,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_draw_ContainerBase.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

class Ext_draw_Container extends Ext_draw_ContainerBase {
    static getProperties(properties) {
        properties = properties.concat(Ext_draw_Container.PROPERTIES);
        return Ext_draw_ContainerBase.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_draw_Container.EVENTS);
        return Ext_draw_ContainerBase.getEvents(events);
    }
}
Ext_draw_Container.PROPERTIES = [
    'downloadServerUrl',
    'engine',
    'gradients',
    'resizeHandler',
    'sprites',
    'surfaceZIndexes',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_draw_Container.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,draw,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'draw,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'draw' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'draw,event' },
    { name: 'bodyresize', parameters: 'size' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,draw,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'draw,event' },
    { name: 'focusenter', parameters: 'draw,event' },
    { name: 'focusleave', parameters: 'draw,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'draw,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'draw,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'draw,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'spriteclick', parameters: 'sprite,event' },
    { name: 'spritedblclick', parameters: 'sprite,event' },
    { name: 'spritemousedown', parameters: 'sprite,event' },
    { name: 'spritemousemove', parameters: 'sprite,event' },
    { name: 'spritemouseout', parameters: 'sprite,event' },
    { name: 'spritemouseover', parameters: 'sprite,event' },
    { name: 'spritemouseup', parameters: 'sprite,event' },
    { name: 'spritetap', parameters: 'sprite,event' },
    { name: 'tofront', parameters: 'draw' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_draw_Container.EVENTNAMES);
//    return Ext_draw_ContainerBase.getEventNames(eventnames);
//}

class Ext_chart_AbstractChart extends Ext_draw_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_chart_AbstractChart.PROPERTIES);
        return Ext_draw_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_chart_AbstractChart.EVENTS);
        return Ext_draw_Container.getEvents(events);
    }
}
Ext_chart_AbstractChart.PROPERTIES = [
    'animation',
    'axes',
    'background',
    'captions',
    'colors',
    'highlightItem',
    'insetPadding',
    'interactions',
    'legend',
    'mainRect',
    'resizeHandler',
    'series',
    'store',
    'style',
    'theme',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_chart_AbstractChart.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'undefined,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerefresh', parameters: 'undefined' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bodyresize', parameters: 'size' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemclick', parameters: 'chart,item,event' },
    { name: 'itemdblclick', parameters: 'chart,item,event' },
    { name: 'itemhighlight', parameters: 'undefined,newItem,oldItem' },
    { name: 'itemhighlightchange', parameters: 'undefined,newItem,oldItem' },
    { name: 'itemmousedown', parameters: 'chart,item,event' },
    { name: 'itemmousemove', parameters: 'chart,item,event' },
    { name: 'itemmouseout', parameters: 'chart,item,event' },
    { name: 'itemmouseover', parameters: 'chart,item,event' },
    { name: 'itemmouseup', parameters: 'chart,item,event' },
    { name: 'itemtap', parameters: 'chart,item,event' },
    { name: 'layout', parameters: 'undefined' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'redraw', parameters: 'undefined' },
    { name: 'refresh', parameters: 'undefined' },
    { name: 'remove', parameters: 'undefined,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'undefined,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'spriteclick', parameters: 'sprite,event' },
    { name: 'spritedblclick', parameters: 'sprite,event' },
    { name: 'spritemousedown', parameters: 'sprite,event' },
    { name: 'spritemousemove', parameters: 'sprite,event' },
    { name: 'spritemouseout', parameters: 'sprite,event' },
    { name: 'spritemouseover', parameters: 'sprite,event' },
    { name: 'spritemouseup', parameters: 'sprite,event' },
    { name: 'spritetap', parameters: 'sprite,event' },
    { name: 'storechange', parameters: 'chart,newStore,oldStore' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_chart_AbstractChart.EVENTNAMES);
//    return Ext_draw_Container.getEventNames(eventnames);
//}

class Ext_chart_Chart extends Ext_chart_AbstractChart {
    static getProperties(properties) {
        properties = properties.concat(Ext_chart_Chart.PROPERTIES);
        return Ext_chart_AbstractChart.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_chart_Chart.EVENTS);
        return Ext_chart_AbstractChart.getEvents(events);
    }
}
Ext_chart_Chart.PROPERTIES = [
    'flipXY',
    'innerPadding',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_chart_Chart.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,cartesian,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'cartesian,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerefresh', parameters: 'cartesian' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'cartesian' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'cartesian,event' },
    { name: 'bodyresize', parameters: 'size' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,cartesian,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'cartesian,event' },
    { name: 'focusenter', parameters: 'cartesian,event' },
    { name: 'focusleave', parameters: 'cartesian,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemclick', parameters: 'chart,item,event' },
    { name: 'itemdblclick', parameters: 'chart,item,event' },
    { name: 'itemhighlight', parameters: 'cartesian,newItem,oldItem' },
    { name: 'itemhighlightchange', parameters: 'cartesian,newItem,oldItem' },
    { name: 'itemmousedown', parameters: 'chart,item,event' },
    { name: 'itemmousemove', parameters: 'chart,item,event' },
    { name: 'itemmouseout', parameters: 'chart,item,event' },
    { name: 'itemmouseover', parameters: 'chart,item,event' },
    { name: 'itemmouseup', parameters: 'chart,item,event' },
    { name: 'itemtap', parameters: 'chart,item,event' },
    { name: 'layout', parameters: 'cartesian' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'cartesian,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'redraw', parameters: 'cartesian' },
    { name: 'refresh', parameters: 'cartesian' },
    { name: 'remove', parameters: 'cartesian,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'cartesian,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'spriteclick', parameters: 'sprite,event' },
    { name: 'spritedblclick', parameters: 'sprite,event' },
    { name: 'spritemousedown', parameters: 'sprite,event' },
    { name: 'spritemousemove', parameters: 'sprite,event' },
    { name: 'spritemouseout', parameters: 'sprite,event' },
    { name: 'spritemouseover', parameters: 'sprite,event' },
    { name: 'spritemouseup', parameters: 'sprite,event' },
    { name: 'spritetap', parameters: 'sprite,event' },
    { name: 'storechange', parameters: 'chart,newStore,oldStore' },
    { name: 'tofront', parameters: 'cartesian' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_chart_Chart.EVENTNAMES);
//    return Ext_chart_AbstractChart.getEventNames(eventnames);
//}

var ExtCartesianComponent_1;
class ExtCartesianMetaData extends Ext_chart_Chart {
    static getAll() {
        ExtCartesianMetaData.PROPERTIES = Ext_chart_Chart.getProperties(ExtCartesianMetaData.PROPERTIES);
        ExtCartesianMetaData.EVENTS = Ext_chart_Chart.getEvents(ExtCartesianMetaData.EVENTS);
        ExtCartesianMetaData.EVENTS.forEach((event) => {
            ExtCartesianMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCartesianMetaData.PROPERTIES = [];
ExtCartesianMetaData.EVENTS = [];
ExtCartesianMetaData.EVENTNAMES = [];
(function () { ExtCartesianMetaData.getAll(); })();
let ExtCartesianComponent = ExtCartesianComponent_1 = class ExtCartesianComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCartesianMetaData.PROPERTIES, ExtCartesianMetaData.EVENTS);
        this.xtype = 'cartesian';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCartesianComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCartesianComponent = ExtCartesianComponent_1 = __decorate([
    Component({
        selector: 'ext-cartesian',
        inputs: ExtCartesianMetaData.PROPERTIES,
        outputs: ExtCartesianMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCartesianComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCartesianComponent);

class Ext_chart_legend_LegendBase extends Ext_dataview_DataView {
    static getProperties(properties) {
        properties = properties.concat(Ext_chart_legend_LegendBase.PROPERTIES);
        return Ext_dataview_DataView.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_chart_legend_LegendBase.EVENTS);
        return Ext_dataview_DataView.getEvents(events);
    }
}
Ext_chart_legend_LegendBase.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_chart_legend_LegendBase.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'childdoubletap', parameters: 'undefined,location' },
    { name: 'childlongpress', parameters: 'undefined,location' },
    { name: 'childmouseenter', parameters: 'undefined,location' },
    { name: 'childmouseleave', parameters: 'undefined,location' },
    { name: 'childsingletap', parameters: 'undefined,location' },
    { name: 'childtap', parameters: 'undefined,location' },
    { name: 'childtaphold', parameters: 'undefined,location' },
    { name: 'childtouchcancel', parameters: 'undefined,location' },
    { name: 'childtouchend', parameters: 'undefined,location' },
    { name: 'childtouchmove', parameters: 'undefined,location' },
    { name: 'childtouchstart', parameters: 'undefined,location' },
    { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
    { name: 'deselect', parameters: 'undefined,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemdoubletap', parameters: 'undefined,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'undefined,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'undefined,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'undefined,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'undefined,index,target,record,e' },
    { name: 'itemswipe', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtap', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'undefined,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'undefined,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'undefined,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'undefined' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'undefined,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'rowselection', parameters: 'view,selection' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'undefined,selected' },
    { name: 'selectionchange', parameters: 'view,records,selected,selection' },
    { name: 'show', parameters: 'sender' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_chart_legend_LegendBase.EVENTNAMES);
//    return Ext_dataview_DataView.getEventNames(eventnames);
//}

class Ext_chart_Legend extends Ext_chart_legend_LegendBase {
    static getProperties(properties) {
        properties = properties.concat(Ext_chart_Legend.PROPERTIES);
        return Ext_chart_legend_LegendBase.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_chart_Legend.EVENTS);
        return Ext_chart_legend_LegendBase.getEvents(events);
    }
}
Ext_chart_Legend.PROPERTIES = [
    'rect',
    'store',
    'toggleable',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_chart_Legend.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,legend,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'legend' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'legend,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'childdoubletap', parameters: 'legend,location' },
    { name: 'childlongpress', parameters: 'legend,location' },
    { name: 'childmouseenter', parameters: 'legend,location' },
    { name: 'childmouseleave', parameters: 'legend,location' },
    { name: 'childsingletap', parameters: 'legend,location' },
    { name: 'childtap', parameters: 'legend,location' },
    { name: 'childtaphold', parameters: 'legend,location' },
    { name: 'childtouchcancel', parameters: 'legend,location' },
    { name: 'childtouchend', parameters: 'legend,location' },
    { name: 'childtouchmove', parameters: 'legend,location' },
    { name: 'childtouchstart', parameters: 'legend,location' },
    { name: 'deactivate', parameters: 'oldActiveItem,legend,newActiveItem' },
    { name: 'deselect', parameters: 'legend,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'legend,event' },
    { name: 'focusenter', parameters: 'legend,event' },
    { name: 'focusleave', parameters: 'legend,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemdoubletap', parameters: 'legend,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'legend,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'legend,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'legend,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'legend,index,target,record,e' },
    { name: 'itemswipe', parameters: 'legend,index,target,record,e' },
    { name: 'itemtap', parameters: 'legend,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'legend,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'legend,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'legend,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'legend,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'legend,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'legend,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'legend' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'legend,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'rowselection', parameters: 'view,selection' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'legend,selected' },
    { name: 'selectionchange', parameters: 'view,records,selected,selection' },
    { name: 'show', parameters: 'sender' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'legend' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_chart_Legend.EVENTNAMES);
//    return Ext_chart_legend_LegendBase.getEventNames(eventnames);
//}

var ExtLegendComponent_1;
class ExtLegendMetaData extends Ext_chart_Legend {
    static getAll() {
        ExtLegendMetaData.PROPERTIES = Ext_chart_Legend.getProperties(ExtLegendMetaData.PROPERTIES);
        ExtLegendMetaData.EVENTS = Ext_chart_Legend.getEvents(ExtLegendMetaData.EVENTS);
        ExtLegendMetaData.EVENTS.forEach((event) => {
            ExtLegendMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtLegendMetaData.PROPERTIES = [];
ExtLegendMetaData.EVENTS = [];
ExtLegendMetaData.EVENTNAMES = [];
(function () { ExtLegendMetaData.getAll(); })();
let ExtLegendComponent = ExtLegendComponent_1 = class ExtLegendComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtLegendMetaData.PROPERTIES, ExtLegendMetaData.EVENTS);
        this.xtype = 'legend';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtLegendComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtLegendComponent = ExtLegendComponent_1 = __decorate([
    Component({
        selector: 'ext-legend',
        inputs: ExtLegendMetaData.PROPERTIES,
        outputs: ExtLegendMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtLegendComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtLegendComponent);

class Ext_chart_navigator_ContainerBase extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_chart_navigator_ContainerBase.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_chart_navigator_ContainerBase.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_chart_navigator_ContainerBase.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_chart_navigator_ContainerBase.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,undefined,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'undefined,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,undefined,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'undefined,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'undefined,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'undefined,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_chart_navigator_ContainerBase.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

class Ext_chart_navigator_Container extends Ext_chart_navigator_ContainerBase {
    static getProperties(properties) {
        properties = properties.concat(Ext_chart_navigator_Container.PROPERTIES);
        return Ext_chart_navigator_ContainerBase.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_chart_navigator_Container.EVENTS);
        return Ext_chart_navigator_ContainerBase.getEvents(events);
    }
}
Ext_chart_navigator_Container.PROPERTIES = [
    'chart',
    'navigator',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_chart_navigator_Container.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,chartnavigator,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'chartnavigator,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'chartnavigator' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'chartnavigator,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,chartnavigator,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'chartnavigator,event' },
    { name: 'focusenter', parameters: 'chartnavigator,event' },
    { name: 'focusleave', parameters: 'chartnavigator,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'chartnavigator,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'chartnavigator,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'chartnavigator,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'chartnavigator' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_chart_navigator_Container.EVENTNAMES);
//    return Ext_chart_navigator_ContainerBase.getEventNames(eventnames);
//}

var ExtChartnavigatorComponent_1;
class ExtChartnavigatorMetaData extends Ext_chart_navigator_Container {
    static getAll() {
        ExtChartnavigatorMetaData.PROPERTIES = Ext_chart_navigator_Container.getProperties(ExtChartnavigatorMetaData.PROPERTIES);
        ExtChartnavigatorMetaData.EVENTS = Ext_chart_navigator_Container.getEvents(ExtChartnavigatorMetaData.EVENTS);
        ExtChartnavigatorMetaData.EVENTS.forEach((event) => {
            ExtChartnavigatorMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtChartnavigatorMetaData.PROPERTIES = [];
ExtChartnavigatorMetaData.EVENTS = [];
ExtChartnavigatorMetaData.EVENTNAMES = [];
(function () { ExtChartnavigatorMetaData.getAll(); })();
let ExtChartnavigatorComponent = ExtChartnavigatorComponent_1 = class ExtChartnavigatorComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtChartnavigatorMetaData.PROPERTIES, ExtChartnavigatorMetaData.EVENTS);
        this.xtype = 'chartnavigator';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtChartnavigatorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtChartnavigatorComponent = ExtChartnavigatorComponent_1 = __decorate([
    Component({
        selector: 'ext-chartnavigator',
        inputs: ExtChartnavigatorMetaData.PROPERTIES,
        outputs: ExtChartnavigatorMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtChartnavigatorComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtChartnavigatorComponent);

class Ext_chart_PolarChart extends Ext_chart_AbstractChart {
    static getProperties(properties) {
        properties = properties.concat(Ext_chart_PolarChart.PROPERTIES);
        return Ext_chart_AbstractChart.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_chart_PolarChart.EVENTS);
        return Ext_chart_AbstractChart.getEvents(events);
    }
}
Ext_chart_PolarChart.PROPERTIES = [
    'center',
    'innerPadding',
    'radius',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_chart_PolarChart.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,polar,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'polar,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerefresh', parameters: 'polar' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'polar' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'polar,event' },
    { name: 'bodyresize', parameters: 'size' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,polar,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'polar,event' },
    { name: 'focusenter', parameters: 'polar,event' },
    { name: 'focusleave', parameters: 'polar,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemclick', parameters: 'chart,item,event' },
    { name: 'itemdblclick', parameters: 'chart,item,event' },
    { name: 'itemhighlight', parameters: 'polar,newItem,oldItem' },
    { name: 'itemhighlightchange', parameters: 'polar,newItem,oldItem' },
    { name: 'itemmousedown', parameters: 'chart,item,event' },
    { name: 'itemmousemove', parameters: 'chart,item,event' },
    { name: 'itemmouseout', parameters: 'chart,item,event' },
    { name: 'itemmouseover', parameters: 'chart,item,event' },
    { name: 'itemmouseup', parameters: 'chart,item,event' },
    { name: 'itemtap', parameters: 'chart,item,event' },
    { name: 'layout', parameters: 'polar' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'polar,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'redraw', parameters: 'polar' },
    { name: 'refresh', parameters: 'polar' },
    { name: 'remove', parameters: 'polar,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'polar,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'spriteclick', parameters: 'sprite,event' },
    { name: 'spritedblclick', parameters: 'sprite,event' },
    { name: 'spritemousedown', parameters: 'sprite,event' },
    { name: 'spritemousemove', parameters: 'sprite,event' },
    { name: 'spritemouseout', parameters: 'sprite,event' },
    { name: 'spritemouseover', parameters: 'sprite,event' },
    { name: 'spritemouseup', parameters: 'sprite,event' },
    { name: 'spritetap', parameters: 'sprite,event' },
    { name: 'storechange', parameters: 'chart,newStore,oldStore' },
    { name: 'tofront', parameters: 'polar' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_chart_PolarChart.EVENTNAMES);
//    return Ext_chart_AbstractChart.getEventNames(eventnames);
//}

var ExtPolarComponent_1;
class ExtPolarMetaData extends Ext_chart_PolarChart {
    static getAll() {
        ExtPolarMetaData.PROPERTIES = Ext_chart_PolarChart.getProperties(ExtPolarMetaData.PROPERTIES);
        ExtPolarMetaData.EVENTS = Ext_chart_PolarChart.getEvents(ExtPolarMetaData.EVENTS);
        ExtPolarMetaData.EVENTS.forEach((event) => {
            ExtPolarMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPolarMetaData.PROPERTIES = [];
ExtPolarMetaData.EVENTS = [];
ExtPolarMetaData.EVENTNAMES = [];
(function () { ExtPolarMetaData.getAll(); })();
let ExtPolarComponent = ExtPolarComponent_1 = class ExtPolarComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPolarMetaData.PROPERTIES, ExtPolarMetaData.EVENTS);
        this.xtype = 'polar';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPolarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPolarComponent = ExtPolarComponent_1 = __decorate([
    Component({
        selector: 'ext-polar',
        inputs: ExtPolarMetaData.PROPERTIES,
        outputs: ExtPolarMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPolarComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPolarComponent);

class Ext_chart_SpaceFillingChart extends Ext_chart_AbstractChart {
    static getProperties(properties) {
        properties = properties.concat(Ext_chart_SpaceFillingChart.PROPERTIES);
        return Ext_chart_AbstractChart.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_chart_SpaceFillingChart.EVENTS);
        return Ext_chart_AbstractChart.getEvents(events);
    }
}
Ext_chart_SpaceFillingChart.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_chart_SpaceFillingChart.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,spacefilling,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'spacefilling,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerefresh', parameters: 'spacefilling' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'spacefilling' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'spacefilling,event' },
    { name: 'bodyresize', parameters: 'size' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,spacefilling,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'spacefilling,event' },
    { name: 'focusenter', parameters: 'spacefilling,event' },
    { name: 'focusleave', parameters: 'spacefilling,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemclick', parameters: 'chart,item,event' },
    { name: 'itemdblclick', parameters: 'chart,item,event' },
    { name: 'itemhighlight', parameters: 'spacefilling,newItem,oldItem' },
    { name: 'itemhighlightchange', parameters: 'spacefilling,newItem,oldItem' },
    { name: 'itemmousedown', parameters: 'chart,item,event' },
    { name: 'itemmousemove', parameters: 'chart,item,event' },
    { name: 'itemmouseout', parameters: 'chart,item,event' },
    { name: 'itemmouseover', parameters: 'chart,item,event' },
    { name: 'itemmouseup', parameters: 'chart,item,event' },
    { name: 'itemtap', parameters: 'chart,item,event' },
    { name: 'layout', parameters: 'spacefilling' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'spacefilling,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'redraw', parameters: 'spacefilling' },
    { name: 'refresh', parameters: 'spacefilling' },
    { name: 'remove', parameters: 'spacefilling,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'spacefilling,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'spriteclick', parameters: 'sprite,event' },
    { name: 'spritedblclick', parameters: 'sprite,event' },
    { name: 'spritemousedown', parameters: 'sprite,event' },
    { name: 'spritemousemove', parameters: 'sprite,event' },
    { name: 'spritemouseout', parameters: 'sprite,event' },
    { name: 'spritemouseover', parameters: 'sprite,event' },
    { name: 'spritemouseup', parameters: 'sprite,event' },
    { name: 'spritetap', parameters: 'sprite,event' },
    { name: 'storechange', parameters: 'chart,newStore,oldStore' },
    { name: 'tofront', parameters: 'spacefilling' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_chart_SpaceFillingChart.EVENTNAMES);
//    return Ext_chart_AbstractChart.getEventNames(eventnames);
//}

var ExtSpacefillingComponent_1;
class ExtSpacefillingMetaData extends Ext_chart_SpaceFillingChart {
    static getAll() {
        ExtSpacefillingMetaData.PROPERTIES = Ext_chart_SpaceFillingChart.getProperties(ExtSpacefillingMetaData.PROPERTIES);
        ExtSpacefillingMetaData.EVENTS = Ext_chart_SpaceFillingChart.getEvents(ExtSpacefillingMetaData.EVENTS);
        ExtSpacefillingMetaData.EVENTS.forEach((event) => {
            ExtSpacefillingMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSpacefillingMetaData.PROPERTIES = [];
ExtSpacefillingMetaData.EVENTS = [];
ExtSpacefillingMetaData.EVENTNAMES = [];
(function () { ExtSpacefillingMetaData.getAll(); })();
let ExtSpacefillingComponent = ExtSpacefillingComponent_1 = class ExtSpacefillingComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSpacefillingMetaData.PROPERTIES, ExtSpacefillingMetaData.EVENTS);
        this.xtype = 'spacefilling';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSpacefillingComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSpacefillingComponent = ExtSpacefillingComponent_1 = __decorate([
    Component({
        selector: 'ext-spacefilling',
        inputs: ExtSpacefillingMetaData.PROPERTIES,
        outputs: ExtSpacefillingMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSpacefillingComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSpacefillingComponent);

class Ext_Chip extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_Chip.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Chip.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_Chip.PROPERTIES = [
    'closable',
    'closeHandler',
    'icon',
    'iconCls',
    'scope',
    'text',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Chip.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'chip' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'chip,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'chip,event' },
    { name: 'focusenter', parameters: 'chip,event' },
    { name: 'focusleave', parameters: 'chip,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'chip' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Chip.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtChipComponent_1;
class ExtChipMetaData extends Ext_Chip {
    static getAll() {
        ExtChipMetaData.PROPERTIES = Ext_Chip.getProperties(ExtChipMetaData.PROPERTIES);
        ExtChipMetaData.EVENTS = Ext_Chip.getEvents(ExtChipMetaData.EVENTS);
        ExtChipMetaData.EVENTS.forEach((event) => {
            ExtChipMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtChipMetaData.PROPERTIES = [];
ExtChipMetaData.EVENTS = [];
ExtChipMetaData.EVENTNAMES = [];
(function () { ExtChipMetaData.getAll(); })();
let ExtChipComponent = ExtChipComponent_1 = class ExtChipComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtChipMetaData.PROPERTIES, ExtChipMetaData.EVENTS);
        this.xtype = 'chip';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtChipComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtChipComponent = ExtChipComponent_1 = __decorate([
    Component({
        selector: 'ext-chip',
        inputs: ExtChipMetaData.PROPERTIES,
        outputs: ExtChipMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtChipComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtChipComponent);

var ExtComponentComponent_1;
class ExtComponentMetaData extends Ext_Gadget {
    static getAll() {
        ExtComponentMetaData.PROPERTIES = Ext_Gadget.getProperties(ExtComponentMetaData.PROPERTIES);
        ExtComponentMetaData.EVENTS = Ext_Gadget.getEvents(ExtComponentMetaData.EVENTS);
        ExtComponentMetaData.EVENTS.forEach((event) => {
            ExtComponentMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtComponentMetaData.PROPERTIES = [];
ExtComponentMetaData.EVENTS = [];
ExtComponentMetaData.EVENTNAMES = [];
(function () { ExtComponentMetaData.getAll(); })();
let ExtComponentComponent = ExtComponentComponent_1 = class ExtComponentComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtComponentMetaData.PROPERTIES, ExtComponentMetaData.EVENTS);
        this.xtype = 'component';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtComponentComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtComponentComponent = ExtComponentComponent_1 = __decorate([
    Component({
        selector: 'ext-component',
        inputs: ExtComponentMetaData.PROPERTIES,
        outputs: ExtComponentMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtComponentComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtComponentComponent);

var ExtContainerComponent_1;
class ExtContainerMetaData extends Ext_container_Container {
    static getAll() {
        ExtContainerMetaData.PROPERTIES = Ext_container_Container.getProperties(ExtContainerMetaData.PROPERTIES);
        ExtContainerMetaData.EVENTS = Ext_container_Container.getEvents(ExtContainerMetaData.EVENTS);
        ExtContainerMetaData.EVENTS.forEach((event) => {
            ExtContainerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtContainerMetaData.PROPERTIES = [];
ExtContainerMetaData.EVENTS = [];
ExtContainerMetaData.EVENTNAMES = [];
(function () { ExtContainerMetaData.getAll(); })();
let ExtContainerComponent = ExtContainerComponent_1 = class ExtContainerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtContainerMetaData.PROPERTIES, ExtContainerMetaData.EVENTS);
        this.xtype = 'container';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtContainerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtContainerComponent = ExtContainerComponent_1 = __decorate([
    Component({
        selector: 'ext-container',
        inputs: ExtContainerMetaData.PROPERTIES,
        outputs: ExtContainerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtContainerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtContainerComponent);

class Ext_d3_ComponentBase extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_d3_ComponentBase.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_d3_ComponentBase.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_d3_ComponentBase.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_d3_ComponentBase.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_d3_ComponentBase.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

class Ext_d3_Component extends Ext_d3_ComponentBase {
    static getProperties(properties) {
        properties = properties.concat(Ext_d3_Component.PROPERTIES);
        return Ext_d3_ComponentBase.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_d3_Component.EVENTS);
        return Ext_d3_ComponentBase.getEvents(events);
    }
}
Ext_d3_Component.PROPERTIES = [
    'componentCls',
    'interactions',
    'store',
    'transitions',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_d3_Component.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_d3_Component.EVENTNAMES);
//    return Ext_d3_ComponentBase.getEventNames(eventnames);
//}

class Ext_d3_canvas_Canvas extends Ext_d3_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_d3_canvas_Canvas.PROPERTIES);
        return Ext_d3_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_d3_canvas_Canvas.EVENTS);
        return Ext_d3_Component.getEvents(events);
    }
}
Ext_d3_canvas_Canvas.PROPERTIES = [
    'hdpi',
    'size',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_d3_canvas_Canvas.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'd3-canvas' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'd3-canvas,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'd3-canvas,event' },
    { name: 'focusenter', parameters: 'd3-canvas,event' },
    { name: 'focusleave', parameters: 'd3-canvas,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'sceneresize', parameters: 'component,canvas,size' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'd3-canvas' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_d3_canvas_Canvas.EVENTNAMES);
//    return Ext_d3_Component.getEventNames(eventnames);
//}

var ExtD3_canvasComponent_1;
class ExtD3_canvasMetaData extends Ext_d3_canvas_Canvas {
    static getAll() {
        ExtD3_canvasMetaData.PROPERTIES = Ext_d3_canvas_Canvas.getProperties(ExtD3_canvasMetaData.PROPERTIES);
        ExtD3_canvasMetaData.EVENTS = Ext_d3_canvas_Canvas.getEvents(ExtD3_canvasMetaData.EVENTS);
        ExtD3_canvasMetaData.EVENTS.forEach((event) => {
            ExtD3_canvasMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtD3_canvasMetaData.PROPERTIES = [];
ExtD3_canvasMetaData.EVENTS = [];
ExtD3_canvasMetaData.EVENTNAMES = [];
(function () { ExtD3_canvasMetaData.getAll(); })();
let ExtD3_canvasComponent = ExtD3_canvasComponent_1 = class ExtD3_canvasComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtD3_canvasMetaData.PROPERTIES, ExtD3_canvasMetaData.EVENTS);
        this.xtype = 'd3-canvas';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtD3_canvasComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtD3_canvasComponent = ExtD3_canvasComponent_1 = __decorate([
    Component({
        selector: 'ext-d3-canvas',
        inputs: ExtD3_canvasMetaData.PROPERTIES,
        outputs: ExtD3_canvasMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtD3_canvasComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtD3_canvasComponent);

class Ext_d3_svg_Svg extends Ext_d3_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_d3_svg_Svg.PROPERTIES);
        return Ext_d3_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_d3_svg_Svg.EVENTS);
        return Ext_d3_Component.getEvents(events);
    }
}
Ext_d3_svg_Svg.PROPERTIES = [
    'clipScene',
    'padding',
    'size',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_d3_svg_Svg.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'd3-svg' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'd3-svg,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'd3-svg,event' },
    { name: 'focusenter', parameters: 'd3-svg,event' },
    { name: 'focusleave', parameters: 'd3-svg,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'sceneresize', parameters: 'component,scene,size' },
    { name: 'scenesetup', parameters: 'component,scene' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'd3-svg' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_d3_svg_Svg.EVENTNAMES);
//    return Ext_d3_Component.getEventNames(eventnames);
//}

class Ext_d3_HeatMap extends Ext_d3_svg_Svg {
    static getProperties(properties) {
        properties = properties.concat(Ext_d3_HeatMap.PROPERTIES);
        return Ext_d3_svg_Svg.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_d3_HeatMap.EVENTS);
        return Ext_d3_svg_Svg.getEvents(events);
    }
}
Ext_d3_HeatMap.PROPERTIES = [
    'colorAxis',
    'labels',
    'legend',
    'tiles',
    'xAxis',
    'yAxis',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_d3_HeatMap.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'd3-heatmap' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'd3-heatmap,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'd3-heatmap,event' },
    { name: 'focusenter', parameters: 'd3-heatmap,event' },
    { name: 'focusleave', parameters: 'd3-heatmap,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'sceneresize', parameters: 'component,scene,size' },
    { name: 'scenesetup', parameters: 'component,scene' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'd3-heatmap' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_d3_HeatMap.EVENTNAMES);
//    return Ext_d3_svg_Svg.getEventNames(eventnames);
//}

var ExtD3_heatmapComponent_1;
class ExtD3_heatmapMetaData extends Ext_d3_HeatMap {
    static getAll() {
        ExtD3_heatmapMetaData.PROPERTIES = Ext_d3_HeatMap.getProperties(ExtD3_heatmapMetaData.PROPERTIES);
        ExtD3_heatmapMetaData.EVENTS = Ext_d3_HeatMap.getEvents(ExtD3_heatmapMetaData.EVENTS);
        ExtD3_heatmapMetaData.EVENTS.forEach((event) => {
            ExtD3_heatmapMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtD3_heatmapMetaData.PROPERTIES = [];
ExtD3_heatmapMetaData.EVENTS = [];
ExtD3_heatmapMetaData.EVENTNAMES = [];
(function () { ExtD3_heatmapMetaData.getAll(); })();
let ExtD3_heatmapComponent = ExtD3_heatmapComponent_1 = class ExtD3_heatmapComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtD3_heatmapMetaData.PROPERTIES, ExtD3_heatmapMetaData.EVENTS);
        this.xtype = 'd3-heatmap';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtD3_heatmapComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtD3_heatmapComponent = ExtD3_heatmapComponent_1 = __decorate([
    Component({
        selector: 'ext-d3-heatmap',
        inputs: ExtD3_heatmapMetaData.PROPERTIES,
        outputs: ExtD3_heatmapMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtD3_heatmapComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtD3_heatmapComponent);

class Ext_d3_hierarchy_Hierarchy extends Ext_d3_svg_Svg {
    static getProperties(properties) {
        properties = properties.concat(Ext_d3_hierarchy_Hierarchy.PROPERTIES);
        return Ext_d3_svg_Svg.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_d3_hierarchy_Hierarchy.EVENTS);
        return Ext_d3_svg_Svg.getEvents(events);
    }
}
Ext_d3_hierarchy_Hierarchy.PROPERTIES = [
    'colorAxis',
    'expandEventName',
    'hierarchyCls',
    'layout',
    'linkKey',
    'nodeChildren',
    'nodeClass',
    'nodeKey',
    'nodeText',
    'nodeTransform',
    'nodeValue',
    'noParentValue',
    'noSizeLayout',
    'publishes',
    'renderLinks',
    'rootVisible',
    'selectEventName',
    'selection',
    'sorter',
    'transitions',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_d3_hierarchy_Hierarchy.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'layout', parameters: 'component' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'sceneresize', parameters: 'component,scene,size' },
    { name: 'scenesetup', parameters: 'component,scene' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_d3_hierarchy_Hierarchy.EVENTNAMES);
//    return Ext_d3_svg_Svg.getEventNames(eventnames);
//}

class Ext_d3_hierarchy_Pack extends Ext_d3_hierarchy_Hierarchy {
    static getProperties(properties) {
        properties = properties.concat(Ext_d3_hierarchy_Pack.PROPERTIES);
        return Ext_d3_hierarchy_Hierarchy.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_d3_hierarchy_Pack.EVENTS);
        return Ext_d3_hierarchy_Hierarchy.getEvents(events);
    }
}
Ext_d3_hierarchy_Pack.PROPERTIES = [
    'clipText',
    'nodeValue',
    'noSizeLayout',
    'textPadding',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_d3_hierarchy_Pack.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'd3-pack' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'd3-pack,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'd3-pack,event' },
    { name: 'focusenter', parameters: 'd3-pack,event' },
    { name: 'focusleave', parameters: 'd3-pack,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'layout', parameters: 'component' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'sceneresize', parameters: 'component,scene,size' },
    { name: 'scenesetup', parameters: 'component,scene' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'd3-pack' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_d3_hierarchy_Pack.EVENTNAMES);
//    return Ext_d3_hierarchy_Hierarchy.getEventNames(eventnames);
//}

var ExtD3_packComponent_1;
class ExtD3_packMetaData extends Ext_d3_hierarchy_Pack {
    static getAll() {
        ExtD3_packMetaData.PROPERTIES = Ext_d3_hierarchy_Pack.getProperties(ExtD3_packMetaData.PROPERTIES);
        ExtD3_packMetaData.EVENTS = Ext_d3_hierarchy_Pack.getEvents(ExtD3_packMetaData.EVENTS);
        ExtD3_packMetaData.EVENTS.forEach((event) => {
            ExtD3_packMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtD3_packMetaData.PROPERTIES = [];
ExtD3_packMetaData.EVENTS = [];
ExtD3_packMetaData.EVENTNAMES = [];
(function () { ExtD3_packMetaData.getAll(); })();
let ExtD3_packComponent = ExtD3_packComponent_1 = class ExtD3_packComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtD3_packMetaData.PROPERTIES, ExtD3_packMetaData.EVENTS);
        this.xtype = 'd3-pack';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtD3_packComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtD3_packComponent = ExtD3_packComponent_1 = __decorate([
    Component({
        selector: 'ext-d3-pack',
        inputs: ExtD3_packMetaData.PROPERTIES,
        outputs: ExtD3_packMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtD3_packComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtD3_packComponent);

class Ext_d3_hierarchy_partition_Partition extends Ext_d3_hierarchy_Hierarchy {
    static getProperties(properties) {
        properties = properties.concat(Ext_d3_hierarchy_partition_Partition.PROPERTIES);
        return Ext_d3_hierarchy_Hierarchy.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_d3_hierarchy_partition_Partition.EVENTS);
        return Ext_d3_hierarchy_Hierarchy.getEvents(events);
    }
}
Ext_d3_hierarchy_partition_Partition.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_d3_hierarchy_partition_Partition.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'd3-partition' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'd3-partition,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'd3-partition,event' },
    { name: 'focusenter', parameters: 'd3-partition,event' },
    { name: 'focusleave', parameters: 'd3-partition,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'layout', parameters: 'component' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'sceneresize', parameters: 'component,scene,size' },
    { name: 'scenesetup', parameters: 'component,scene' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'd3-partition' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_d3_hierarchy_partition_Partition.EVENTNAMES);
//    return Ext_d3_hierarchy_Hierarchy.getEventNames(eventnames);
//}

var ExtD3_partitionComponent_1;
class ExtD3_partitionMetaData extends Ext_d3_hierarchy_partition_Partition {
    static getAll() {
        ExtD3_partitionMetaData.PROPERTIES = Ext_d3_hierarchy_partition_Partition.getProperties(ExtD3_partitionMetaData.PROPERTIES);
        ExtD3_partitionMetaData.EVENTS = Ext_d3_hierarchy_partition_Partition.getEvents(ExtD3_partitionMetaData.EVENTS);
        ExtD3_partitionMetaData.EVENTS.forEach((event) => {
            ExtD3_partitionMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtD3_partitionMetaData.PROPERTIES = [];
ExtD3_partitionMetaData.EVENTS = [];
ExtD3_partitionMetaData.EVENTNAMES = [];
(function () { ExtD3_partitionMetaData.getAll(); })();
let ExtD3_partitionComponent = ExtD3_partitionComponent_1 = class ExtD3_partitionComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtD3_partitionMetaData.PROPERTIES, ExtD3_partitionMetaData.EVENTS);
        this.xtype = 'd3-partition';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtD3_partitionComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtD3_partitionComponent = ExtD3_partitionComponent_1 = __decorate([
    Component({
        selector: 'ext-d3-partition',
        inputs: ExtD3_partitionMetaData.PROPERTIES,
        outputs: ExtD3_partitionMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtD3_partitionComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtD3_partitionComponent);

class Ext_d3_hierarchy_partition_Sunburst extends Ext_d3_hierarchy_partition_Partition {
    static getProperties(properties) {
        properties = properties.concat(Ext_d3_hierarchy_partition_Sunburst.PROPERTIES);
        return Ext_d3_hierarchy_partition_Partition.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_d3_hierarchy_partition_Sunburst.EVENTS);
        return Ext_d3_hierarchy_partition_Partition.getEvents(events);
    }
}
Ext_d3_hierarchy_partition_Sunburst.PROPERTIES = [
    'textPadding',
    'zoomParentDotRadius',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_d3_hierarchy_partition_Sunburst.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'd3-sunburst' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'd3-sunburst,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'd3-sunburst,event' },
    { name: 'focusenter', parameters: 'd3-sunburst,event' },
    { name: 'focusleave', parameters: 'd3-sunburst,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'layout', parameters: 'component' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'sceneresize', parameters: 'component,scene,size' },
    { name: 'scenesetup', parameters: 'component,scene' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'd3-sunburst' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_d3_hierarchy_partition_Sunburst.EVENTNAMES);
//    return Ext_d3_hierarchy_partition_Partition.getEventNames(eventnames);
//}

var ExtD3_sunburstComponent_1;
class ExtD3_sunburstMetaData extends Ext_d3_hierarchy_partition_Sunburst {
    static getAll() {
        ExtD3_sunburstMetaData.PROPERTIES = Ext_d3_hierarchy_partition_Sunburst.getProperties(ExtD3_sunburstMetaData.PROPERTIES);
        ExtD3_sunburstMetaData.EVENTS = Ext_d3_hierarchy_partition_Sunburst.getEvents(ExtD3_sunburstMetaData.EVENTS);
        ExtD3_sunburstMetaData.EVENTS.forEach((event) => {
            ExtD3_sunburstMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtD3_sunburstMetaData.PROPERTIES = [];
ExtD3_sunburstMetaData.EVENTS = [];
ExtD3_sunburstMetaData.EVENTNAMES = [];
(function () { ExtD3_sunburstMetaData.getAll(); })();
let ExtD3_sunburstComponent = ExtD3_sunburstComponent_1 = class ExtD3_sunburstComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtD3_sunburstMetaData.PROPERTIES, ExtD3_sunburstMetaData.EVENTS);
        this.xtype = 'd3-sunburst';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtD3_sunburstComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtD3_sunburstComponent = ExtD3_sunburstComponent_1 = __decorate([
    Component({
        selector: 'ext-d3-sunburst',
        inputs: ExtD3_sunburstMetaData.PROPERTIES,
        outputs: ExtD3_sunburstMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtD3_sunburstComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtD3_sunburstComponent);

class Ext_d3_hierarchy_tree_Tree extends Ext_d3_hierarchy_Hierarchy {
    static getProperties(properties) {
        properties = properties.concat(Ext_d3_hierarchy_tree_Tree.PROPERTIES);
        return Ext_d3_hierarchy_Hierarchy.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_d3_hierarchy_tree_Tree.EVENTS);
        return Ext_d3_hierarchy_Hierarchy.getEvents(events);
    }
}
Ext_d3_hierarchy_tree_Tree.PROPERTIES = [
    'depth',
    'nodeRadius',
    'nodeSize',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_d3_hierarchy_tree_Tree.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'layout', parameters: 'component' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'sceneresize', parameters: 'component,scene,size' },
    { name: 'scenesetup', parameters: 'component,scene' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_d3_hierarchy_tree_Tree.EVENTNAMES);
//    return Ext_d3_hierarchy_Hierarchy.getEventNames(eventnames);
//}

class Ext_d3_hierarchy_tree_HorizontalTree extends Ext_d3_hierarchy_tree_Tree {
    static getProperties(properties) {
        properties = properties.concat(Ext_d3_hierarchy_tree_HorizontalTree.PROPERTIES);
        return Ext_d3_hierarchy_tree_Tree.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_d3_hierarchy_tree_HorizontalTree.EVENTS);
        return Ext_d3_hierarchy_tree_Tree.getEvents(events);
    }
}
Ext_d3_hierarchy_tree_HorizontalTree.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_d3_hierarchy_tree_HorizontalTree.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'd3-tree' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'd3-tree,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'd3-tree,event' },
    { name: 'focusenter', parameters: 'd3-tree,event' },
    { name: 'focusleave', parameters: 'd3-tree,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'layout', parameters: 'component' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'sceneresize', parameters: 'component,scene,size' },
    { name: 'scenesetup', parameters: 'component,scene' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'd3-tree' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_d3_hierarchy_tree_HorizontalTree.EVENTNAMES);
//    return Ext_d3_hierarchy_tree_Tree.getEventNames(eventnames);
//}

var ExtD3_treeComponent_1;
class ExtD3_treeMetaData extends Ext_d3_hierarchy_tree_HorizontalTree {
    static getAll() {
        ExtD3_treeMetaData.PROPERTIES = Ext_d3_hierarchy_tree_HorizontalTree.getProperties(ExtD3_treeMetaData.PROPERTIES);
        ExtD3_treeMetaData.EVENTS = Ext_d3_hierarchy_tree_HorizontalTree.getEvents(ExtD3_treeMetaData.EVENTS);
        ExtD3_treeMetaData.EVENTS.forEach((event) => {
            ExtD3_treeMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtD3_treeMetaData.PROPERTIES = [];
ExtD3_treeMetaData.EVENTS = [];
ExtD3_treeMetaData.EVENTNAMES = [];
(function () { ExtD3_treeMetaData.getAll(); })();
let ExtD3_treeComponent = ExtD3_treeComponent_1 = class ExtD3_treeComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtD3_treeMetaData.PROPERTIES, ExtD3_treeMetaData.EVENTS);
        this.xtype = 'd3-tree';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtD3_treeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtD3_treeComponent = ExtD3_treeComponent_1 = __decorate([
    Component({
        selector: 'ext-d3-tree',
        inputs: ExtD3_treeMetaData.PROPERTIES,
        outputs: ExtD3_treeMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtD3_treeComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtD3_treeComponent);

class Ext_d3_hierarchy_TreeMap extends Ext_d3_hierarchy_Hierarchy {
    static getProperties(properties) {
        properties = properties.concat(Ext_d3_hierarchy_TreeMap.PROPERTIES);
        return Ext_d3_hierarchy_Hierarchy.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_d3_hierarchy_TreeMap.EVENTS);
        return Ext_d3_hierarchy_Hierarchy.getEvents(events);
    }
}
Ext_d3_hierarchy_TreeMap.PROPERTIES = [
    'busyLayoutText',
    'leafTile',
    'parentTile',
    'scaleLabels',
    'tiling',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_d3_hierarchy_TreeMap.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'd3-treemap' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'd3-treemap,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'd3-treemap,event' },
    { name: 'focusenter', parameters: 'd3-treemap,event' },
    { name: 'focusleave', parameters: 'd3-treemap,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'layout', parameters: 'component' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'sceneresize', parameters: 'component,scene,size' },
    { name: 'scenesetup', parameters: 'component,scene' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'd3-treemap' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_d3_hierarchy_TreeMap.EVENTNAMES);
//    return Ext_d3_hierarchy_Hierarchy.getEventNames(eventnames);
//}

var ExtD3_treemapComponent_1;
class ExtD3_treemapMetaData extends Ext_d3_hierarchy_TreeMap {
    static getAll() {
        ExtD3_treemapMetaData.PROPERTIES = Ext_d3_hierarchy_TreeMap.getProperties(ExtD3_treemapMetaData.PROPERTIES);
        ExtD3_treemapMetaData.EVENTS = Ext_d3_hierarchy_TreeMap.getEvents(ExtD3_treemapMetaData.EVENTS);
        ExtD3_treemapMetaData.EVENTS.forEach((event) => {
            ExtD3_treemapMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtD3_treemapMetaData.PROPERTIES = [];
ExtD3_treemapMetaData.EVENTS = [];
ExtD3_treemapMetaData.EVENTNAMES = [];
(function () { ExtD3_treemapMetaData.getAll(); })();
let ExtD3_treemapComponent = ExtD3_treemapComponent_1 = class ExtD3_treemapComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtD3_treemapMetaData.PROPERTIES, ExtD3_treemapMetaData.EVENTS);
        this.xtype = 'd3-treemap';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtD3_treemapComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtD3_treemapComponent = ExtD3_treemapComponent_1 = __decorate([
    Component({
        selector: 'ext-d3-treemap',
        inputs: ExtD3_treemapMetaData.PROPERTIES,
        outputs: ExtD3_treemapMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtD3_treemapComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtD3_treemapComponent);

var ExtD3_svgComponent_1;
class ExtD3_svgMetaData extends Ext_d3_svg_Svg {
    static getAll() {
        ExtD3_svgMetaData.PROPERTIES = Ext_d3_svg_Svg.getProperties(ExtD3_svgMetaData.PROPERTIES);
        ExtD3_svgMetaData.EVENTS = Ext_d3_svg_Svg.getEvents(ExtD3_svgMetaData.EVENTS);
        ExtD3_svgMetaData.EVENTS.forEach((event) => {
            ExtD3_svgMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtD3_svgMetaData.PROPERTIES = [];
ExtD3_svgMetaData.EVENTS = [];
ExtD3_svgMetaData.EVENTNAMES = [];
(function () { ExtD3_svgMetaData.getAll(); })();
let ExtD3_svgComponent = ExtD3_svgComponent_1 = class ExtD3_svgComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtD3_svgMetaData.PROPERTIES, ExtD3_svgMetaData.EVENTS);
        this.xtype = 'd3-svg';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtD3_svgComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtD3_svgComponent = ExtD3_svgComponent_1 = __decorate([
    Component({
        selector: 'ext-d3-svg',
        inputs: ExtD3_svgMetaData.PROPERTIES,
        outputs: ExtD3_svgMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtD3_svgComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtD3_svgComponent);

class Ext_dataview_Component extends Ext_dataview_Abstract {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_Component.PROPERTIES);
        return Ext_dataview_Abstract.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_Component.EVENTS);
        return Ext_dataview_Abstract.getEvents(events);
    }
}
Ext_dataview_Component.PROPERTIES = [
    'defaultType',
    'itemConfig',
    'itemContentCls',
    'itemDataMap',
    'itemInnerCls',
    'maxItemCache',
    'striped',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_Component.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,componentdataview,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'componentdataview' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'componentdataview,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'childdoubletap', parameters: 'componentdataview,location' },
    { name: 'childlongpress', parameters: 'componentdataview,location' },
    { name: 'childmouseenter', parameters: 'componentdataview,location' },
    { name: 'childmouseleave', parameters: 'componentdataview,location' },
    { name: 'childsingletap', parameters: 'componentdataview,location' },
    { name: 'childtap', parameters: 'componentdataview,location' },
    { name: 'childtaphold', parameters: 'componentdataview,location' },
    { name: 'childtouchcancel', parameters: 'componentdataview,location' },
    { name: 'childtouchend', parameters: 'componentdataview,location' },
    { name: 'childtouchmove', parameters: 'componentdataview,location' },
    { name: 'childtouchstart', parameters: 'componentdataview,location' },
    { name: 'deactivate', parameters: 'oldActiveItem,componentdataview,newActiveItem' },
    { name: 'deselect', parameters: 'componentdataview,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'componentdataview,event' },
    { name: 'focusenter', parameters: 'componentdataview,event' },
    { name: 'focusleave', parameters: 'componentdataview,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemdoubletap', parameters: 'componentdataview,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'componentdataview,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'componentdataview,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'componentdataview,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'componentdataview,index,target,record,e' },
    { name: 'itemswipe', parameters: 'componentdataview,index,target,record,e' },
    { name: 'itemtap', parameters: 'componentdataview,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'componentdataview,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'componentdataview,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'componentdataview,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'componentdataview,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'componentdataview,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'componentdataview,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'componentdataview' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'componentdataview,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'componentdataview,selected' },
    { name: 'show', parameters: 'sender' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'componentdataview' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_Component.EVENTNAMES);
//    return Ext_dataview_Abstract.getEventNames(eventnames);
//}

class Ext_dataview_List extends Ext_dataview_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_List.PROPERTIES);
        return Ext_dataview_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_List.EVENTS);
        return Ext_dataview_Component.getEvents(events);
    }
}
Ext_dataview_List.PROPERTIES = [
    'bufferSize',
    'collapseDefaults',
    'collapsible',
    'disclosureProperty',
    'grouped',
    'groupFooter',
    'groupHeader',
    'grouping',
    'groupPlaceholder',
    'horizontalOverflow',
    'indexBar',
    'infinite',
    'innerCtHeight',
    'innerWidth',
    'itemConfig',
    'maintainChildNodes',
    'minimumBufferDistance',
    'onItemDisclosure',
    'pinFooters',
    'pinHeaders',
    'pinnedFooter',
    'pinnedFooterHeight',
    'pinnedHeader',
    'pinnedHeaderHeight',
    'preventSelectionOnDisclose',
    'preventSelectionOnTool',
    'rowLines',
    'scrollable',
    'topRenderedIndex',
    'variableHeights',
    'verticalOverflow',
    'visibleHeight',
    'visibleLeft',
    'visibleTop',
    'visibleWidth',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_List.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,list,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforegroupcollapse', parameters: 'list,group' },
    { name: 'beforegroupexpand', parameters: 'list,group' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'list' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'list,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'childdoubletap', parameters: 'list,location' },
    { name: 'childlongpress', parameters: 'list,location' },
    { name: 'childmouseenter', parameters: 'list,location' },
    { name: 'childmouseleave', parameters: 'list,location' },
    { name: 'childsingletap', parameters: 'list,location' },
    { name: 'childtap', parameters: 'list,location' },
    { name: 'childtaphold', parameters: 'list,location' },
    { name: 'childtouchcancel', parameters: 'list,location' },
    { name: 'childtouchend', parameters: 'list,location' },
    { name: 'childtouchmove', parameters: 'list,location' },
    { name: 'childtouchstart', parameters: 'list,location' },
    { name: 'deactivate', parameters: 'oldActiveItem,list,newActiveItem' },
    { name: 'deselect', parameters: 'list,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'disclose', parameters: 'list,record,target,index,event' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'list,event' },
    { name: 'focusenter', parameters: 'list,event' },
    { name: 'focusleave', parameters: 'list,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'groupcollapse', parameters: 'list,group' },
    { name: 'groupexpand', parameters: 'list,group' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemaction', parameters: 'list,index,record,action' },
    { name: 'itemdoubletap', parameters: 'list,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'list,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'list,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'list,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'list,index,target,record,e' },
    { name: 'itemswipe', parameters: 'list,index,target,record,e' },
    { name: 'itemtap', parameters: 'list,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'list,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'list,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'list,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'list,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'list,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'list,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'list' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'list,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'list,selected' },
    { name: 'show', parameters: 'sender' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'list' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_List.EVENTNAMES);
//    return Ext_dataview_Component.getEventNames(eventnames);
//}

class Ext_dataview_BoundList extends Ext_dataview_List {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_BoundList.PROPERTIES);
        return Ext_dataview_List.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_BoundList.EVENTS);
        return Ext_dataview_List.getEvents(events);
    }
}
Ext_dataview_BoundList.PROPERTIES = [
    'triggerEvent',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_BoundList.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,boundlist,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforegroupcollapse', parameters: 'boundlist,group' },
    { name: 'beforegroupexpand', parameters: 'boundlist,group' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'boundlist' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'boundlist,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'childdoubletap', parameters: 'boundlist,location' },
    { name: 'childlongpress', parameters: 'boundlist,location' },
    { name: 'childmouseenter', parameters: 'boundlist,location' },
    { name: 'childmouseleave', parameters: 'boundlist,location' },
    { name: 'childsingletap', parameters: 'boundlist,location' },
    { name: 'childtap', parameters: 'boundlist,location' },
    { name: 'childtaphold', parameters: 'boundlist,location' },
    { name: 'childtouchcancel', parameters: 'boundlist,location' },
    { name: 'childtouchend', parameters: 'boundlist,location' },
    { name: 'childtouchmove', parameters: 'boundlist,location' },
    { name: 'childtouchstart', parameters: 'boundlist,location' },
    { name: 'deactivate', parameters: 'oldActiveItem,boundlist,newActiveItem' },
    { name: 'deselect', parameters: 'boundlist,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'disclose', parameters: 'list,record,target,index,event' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'boundlist,event' },
    { name: 'focusenter', parameters: 'boundlist,event' },
    { name: 'focusleave', parameters: 'boundlist,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'groupcollapse', parameters: 'boundlist,group' },
    { name: 'groupexpand', parameters: 'boundlist,group' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemaction', parameters: 'boundlist,index,record,action' },
    { name: 'itemdoubletap', parameters: 'boundlist,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'boundlist,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'boundlist,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'boundlist,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'boundlist,index,target,record,e' },
    { name: 'itemswipe', parameters: 'boundlist,index,target,record,e' },
    { name: 'itemtap', parameters: 'boundlist,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'boundlist,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'boundlist,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'boundlist,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'boundlist,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'boundlist,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'boundlist,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'boundlist' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'boundlist,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'boundlist,selected' },
    { name: 'show', parameters: 'sender' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'boundlist' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_BoundList.EVENTNAMES);
//    return Ext_dataview_List.getEventNames(eventnames);
//}

var ExtBoundlistComponent_1;
class ExtBoundlistMetaData extends Ext_dataview_BoundList {
    static getAll() {
        ExtBoundlistMetaData.PROPERTIES = Ext_dataview_BoundList.getProperties(ExtBoundlistMetaData.PROPERTIES);
        ExtBoundlistMetaData.EVENTS = Ext_dataview_BoundList.getEvents(ExtBoundlistMetaData.EVENTS);
        ExtBoundlistMetaData.EVENTS.forEach((event) => {
            ExtBoundlistMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtBoundlistMetaData.PROPERTIES = [];
ExtBoundlistMetaData.EVENTS = [];
ExtBoundlistMetaData.EVENTNAMES = [];
(function () { ExtBoundlistMetaData.getAll(); })();
let ExtBoundlistComponent = ExtBoundlistComponent_1 = class ExtBoundlistComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtBoundlistMetaData.PROPERTIES, ExtBoundlistMetaData.EVENTS);
        this.xtype = 'boundlist';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtBoundlistComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtBoundlistComponent = ExtBoundlistComponent_1 = __decorate([
    Component({
        selector: 'ext-boundlist',
        inputs: ExtBoundlistMetaData.PROPERTIES,
        outputs: ExtBoundlistMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtBoundlistComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtBoundlistComponent);

class Ext_dataview_ChipView extends Ext_dataview_DataView {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_ChipView.PROPERTIES);
        return Ext_dataview_DataView.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_ChipView.EVENTS);
        return Ext_dataview_DataView.getEvents(events);
    }
}
Ext_dataview_ChipView.PROPERTIES = [
    'closable',
    'closableField',
    'closeHandler',
    'displayField',
    'displayTpl',
    'iconClsField',
    'iconField',
    'itemTpl',
    'scope',
    'ui',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_ChipView.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,chipview,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'chipview' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'chipview,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'childdoubletap', parameters: 'chipview,location' },
    { name: 'childlongpress', parameters: 'chipview,location' },
    { name: 'childmouseenter', parameters: 'chipview,location' },
    { name: 'childmouseleave', parameters: 'chipview,location' },
    { name: 'childsingletap', parameters: 'chipview,location' },
    { name: 'childtap', parameters: 'chipview,location' },
    { name: 'childtaphold', parameters: 'chipview,location' },
    { name: 'childtouchcancel', parameters: 'chipview,location' },
    { name: 'childtouchend', parameters: 'chipview,location' },
    { name: 'childtouchmove', parameters: 'chipview,location' },
    { name: 'childtouchstart', parameters: 'chipview,location' },
    { name: 'deactivate', parameters: 'oldActiveItem,chipview,newActiveItem' },
    { name: 'deselect', parameters: 'chipview,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'chipview,event' },
    { name: 'focusenter', parameters: 'chipview,event' },
    { name: 'focusleave', parameters: 'chipview,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemdoubletap', parameters: 'chipview,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'chipview,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'chipview,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'chipview,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'chipview,index,target,record,e' },
    { name: 'itemswipe', parameters: 'chipview,index,target,record,e' },
    { name: 'itemtap', parameters: 'chipview,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'chipview,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'chipview,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'chipview,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'chipview,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'chipview,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'chipview,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'chipview' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'chipview,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'rowselection', parameters: 'view,selection' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'chipview,selected' },
    { name: 'selectionchange', parameters: 'view,records,selected,selection' },
    { name: 'show', parameters: 'sender' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'chipview' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_ChipView.EVENTNAMES);
//    return Ext_dataview_DataView.getEventNames(eventnames);
//}

var ExtChipviewComponent_1;
class ExtChipviewMetaData extends Ext_dataview_ChipView {
    static getAll() {
        ExtChipviewMetaData.PROPERTIES = Ext_dataview_ChipView.getProperties(ExtChipviewMetaData.PROPERTIES);
        ExtChipviewMetaData.EVENTS = Ext_dataview_ChipView.getEvents(ExtChipviewMetaData.EVENTS);
        ExtChipviewMetaData.EVENTS.forEach((event) => {
            ExtChipviewMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtChipviewMetaData.PROPERTIES = [];
ExtChipviewMetaData.EVENTS = [];
ExtChipviewMetaData.EVENTNAMES = [];
(function () { ExtChipviewMetaData.getAll(); })();
let ExtChipviewComponent = ExtChipviewComponent_1 = class ExtChipviewComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtChipviewMetaData.PROPERTIES, ExtChipviewMetaData.EVENTS);
        this.xtype = 'chipview';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtChipviewComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtChipviewComponent = ExtChipviewComponent_1 = __decorate([
    Component({
        selector: 'ext-chipview',
        inputs: ExtChipviewMetaData.PROPERTIES,
        outputs: ExtChipviewMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtChipviewComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtChipviewComponent);

var ExtComponentdataviewComponent_1;
class ExtComponentdataviewMetaData extends Ext_dataview_Component {
    static getAll() {
        ExtComponentdataviewMetaData.PROPERTIES = Ext_dataview_Component.getProperties(ExtComponentdataviewMetaData.PROPERTIES);
        ExtComponentdataviewMetaData.EVENTS = Ext_dataview_Component.getEvents(ExtComponentdataviewMetaData.EVENTS);
        ExtComponentdataviewMetaData.EVENTS.forEach((event) => {
            ExtComponentdataviewMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtComponentdataviewMetaData.PROPERTIES = [];
ExtComponentdataviewMetaData.EVENTS = [];
ExtComponentdataviewMetaData.EVENTNAMES = [];
(function () { ExtComponentdataviewMetaData.getAll(); })();
let ExtComponentdataviewComponent = ExtComponentdataviewComponent_1 = class ExtComponentdataviewComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtComponentdataviewMetaData.PROPERTIES, ExtComponentdataviewMetaData.EVENTS);
        this.xtype = 'componentdataview';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtComponentdataviewComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtComponentdataviewComponent = ExtComponentdataviewComponent_1 = __decorate([
    Component({
        selector: 'ext-componentdataview',
        inputs: ExtComponentdataviewMetaData.PROPERTIES,
        outputs: ExtComponentdataviewMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtComponentdataviewComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtComponentdataviewComponent);

class Ext_dataview_component_DataItem extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_component_DataItem.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_component_DataItem.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_dataview_component_DataItem.PROPERTIES = [
    'dataMap',
    'itemCls',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_component_DataItem.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,dataitem,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'dataitem,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'dataitem' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'dataitem,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,dataitem,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'dataitem,event' },
    { name: 'focusenter', parameters: 'dataitem,event' },
    { name: 'focusleave', parameters: 'dataitem,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'dataitem,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'dataitem,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'dataitem,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'dataitem' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'dataItem,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_component_DataItem.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

var ExtDataitemComponent_1;
class ExtDataitemMetaData extends Ext_dataview_component_DataItem {
    static getAll() {
        ExtDataitemMetaData.PROPERTIES = Ext_dataview_component_DataItem.getProperties(ExtDataitemMetaData.PROPERTIES);
        ExtDataitemMetaData.EVENTS = Ext_dataview_component_DataItem.getEvents(ExtDataitemMetaData.EVENTS);
        ExtDataitemMetaData.EVENTS.forEach((event) => {
            ExtDataitemMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtDataitemMetaData.PROPERTIES = [];
ExtDataitemMetaData.EVENTS = [];
ExtDataitemMetaData.EVENTNAMES = [];
(function () { ExtDataitemMetaData.getAll(); })();
let ExtDataitemComponent = ExtDataitemComponent_1 = class ExtDataitemComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtDataitemMetaData.PROPERTIES, ExtDataitemMetaData.EVENTS);
        this.xtype = 'dataitem';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtDataitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtDataitemComponent = ExtDataitemComponent_1 = __decorate([
    Component({
        selector: 'ext-dataitem',
        inputs: ExtDataitemMetaData.PROPERTIES,
        outputs: ExtDataitemMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtDataitemComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtDataitemComponent);

class Ext_DataView extends Ext_dataview_Abstract {
    static getProperties(properties) {
        properties = properties.concat(Ext_DataView.PROPERTIES);
        return Ext_dataview_Abstract.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_DataView.EVENTS);
        return Ext_dataview_Abstract.getEvents(events);
    }
}
Ext_DataView.PROPERTIES = [
    'lastSelected',
    'selected',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_DataView.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,dataview,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'dataview' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'dataview,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'childdoubletap', parameters: 'dataview,location' },
    { name: 'childlongpress', parameters: 'dataview,location' },
    { name: 'childmouseenter', parameters: 'dataview,location' },
    { name: 'childmouseleave', parameters: 'dataview,location' },
    { name: 'childsingletap', parameters: 'dataview,location' },
    { name: 'childtap', parameters: 'dataview,location' },
    { name: 'childtaphold', parameters: 'dataview,location' },
    { name: 'childtouchcancel', parameters: 'dataview,location' },
    { name: 'childtouchend', parameters: 'dataview,location' },
    { name: 'childtouchmove', parameters: 'dataview,location' },
    { name: 'childtouchstart', parameters: 'dataview,location' },
    { name: 'deactivate', parameters: 'oldActiveItem,dataview,newActiveItem' },
    { name: 'deselect', parameters: 'dataview,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'dataview,event' },
    { name: 'focusenter', parameters: 'dataview,event' },
    { name: 'focusleave', parameters: 'dataview,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemdoubletap', parameters: 'dataview,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'dataview,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'dataview,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'dataview,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'dataview,index,target,record,e' },
    { name: 'itemswipe', parameters: 'dataview,index,target,record,e' },
    { name: 'itemtap', parameters: 'dataview,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'dataview,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'dataview,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'dataview,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'dataview,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'dataview,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'dataview,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'dataview' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'dataview,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'rowselection', parameters: 'view,selection' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'dataview,selected' },
    { name: 'selectionchange', parameters: 'view,records,selected,selection' },
    { name: 'show', parameters: 'sender' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'dataview' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_DataView.EVENTNAMES);
//    return Ext_dataview_Abstract.getEventNames(eventnames);
//}

var ExtDataviewComponent_1;
class ExtDataviewMetaData extends Ext_DataView {
    static getAll() {
        ExtDataviewMetaData.PROPERTIES = Ext_DataView.getProperties(ExtDataviewMetaData.PROPERTIES);
        ExtDataviewMetaData.EVENTS = Ext_DataView.getEvents(ExtDataviewMetaData.EVENTS);
        ExtDataviewMetaData.EVENTS.forEach((event) => {
            ExtDataviewMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtDataviewMetaData.PROPERTIES = [];
ExtDataviewMetaData.EVENTS = [];
ExtDataviewMetaData.EVENTNAMES = [];
(function () { ExtDataviewMetaData.getAll(); })();
let ExtDataviewComponent = ExtDataviewComponent_1 = class ExtDataviewComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtDataviewMetaData.PROPERTIES, ExtDataviewMetaData.EVENTS);
        this.xtype = 'dataview';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtDataviewComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtDataviewComponent = ExtDataviewComponent_1 = __decorate([
    Component({
        selector: 'ext-dataview',
        inputs: ExtDataviewMetaData.PROPERTIES,
        outputs: ExtDataviewMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtDataviewComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtDataviewComponent);

class Ext_dataview_EmptyText extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_EmptyText.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_EmptyText.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_dataview_EmptyText.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_EmptyText.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'emptytext' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'emptytext,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'emptytext,event' },
    { name: 'focusenter', parameters: 'emptytext,event' },
    { name: 'focusleave', parameters: 'emptytext,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'emptytext' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_EmptyText.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtEmptytextComponent_1;
class ExtEmptytextMetaData extends Ext_dataview_EmptyText {
    static getAll() {
        ExtEmptytextMetaData.PROPERTIES = Ext_dataview_EmptyText.getProperties(ExtEmptytextMetaData.PROPERTIES);
        ExtEmptytextMetaData.EVENTS = Ext_dataview_EmptyText.getEvents(ExtEmptytextMetaData.EVENTS);
        ExtEmptytextMetaData.EVENTS.forEach((event) => {
            ExtEmptytextMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtEmptytextMetaData.PROPERTIES = [];
ExtEmptytextMetaData.EVENTS = [];
ExtEmptytextMetaData.EVENTNAMES = [];
(function () { ExtEmptytextMetaData.getAll(); })();
let ExtEmptytextComponent = ExtEmptytextComponent_1 = class ExtEmptytextComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtEmptytextMetaData.PROPERTIES, ExtEmptytextMetaData.EVENTS);
        this.xtype = 'emptytext';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtEmptytextComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtEmptytextComponent = ExtEmptytextComponent_1 = __decorate([
    Component({
        selector: 'ext-emptytext',
        inputs: ExtEmptytextMetaData.PROPERTIES,
        outputs: ExtEmptytextMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtEmptytextComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtEmptytextComponent);

class Ext_IndexBar extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_IndexBar.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_IndexBar.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_IndexBar.PROPERTIES = [
    'animation',
    'autoHide',
    'direction',
    'dynamic',
    'indicator',
    'letters',
    'listPrefix',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_IndexBar.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedirectionchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'indexbar' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'indexbar,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'directionchange', parameters: 'sender,value,oldValue' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'indexbar,event' },
    { name: 'focusenter', parameters: 'indexbar,event' },
    { name: 'focusleave', parameters: 'indexbar,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'index', parameters: 'indexbar,html,target' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'indexbar' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_IndexBar.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtIndexbarComponent_1;
class ExtIndexbarMetaData extends Ext_IndexBar {
    static getAll() {
        ExtIndexbarMetaData.PROPERTIES = Ext_IndexBar.getProperties(ExtIndexbarMetaData.PROPERTIES);
        ExtIndexbarMetaData.EVENTS = Ext_IndexBar.getEvents(ExtIndexbarMetaData.EVENTS);
        ExtIndexbarMetaData.EVENTS.forEach((event) => {
            ExtIndexbarMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtIndexbarMetaData.PROPERTIES = [];
ExtIndexbarMetaData.EVENTS = [];
ExtIndexbarMetaData.EVENTNAMES = [];
(function () { ExtIndexbarMetaData.getAll(); })();
let ExtIndexbarComponent = ExtIndexbarComponent_1 = class ExtIndexbarComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtIndexbarMetaData.PROPERTIES, ExtIndexbarMetaData.EVENTS);
        this.xtype = 'indexbar';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtIndexbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtIndexbarComponent = ExtIndexbarComponent_1 = __decorate([
    Component({
        selector: 'ext-indexbar',
        inputs: ExtIndexbarMetaData.PROPERTIES,
        outputs: ExtIndexbarMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtIndexbarComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtIndexbarComponent);

class Ext_dataview_ItemHeader extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_ItemHeader.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_ItemHeader.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_dataview_ItemHeader.PROPERTIES = [
    'group',
    'tpl',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_ItemHeader.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'itemheader' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'itemheader,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'itemheader,event' },
    { name: 'focusenter', parameters: 'itemheader,event' },
    { name: 'focusleave', parameters: 'itemheader,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'itemheader' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_ItemHeader.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtItemheaderComponent_1;
class ExtItemheaderMetaData extends Ext_dataview_ItemHeader {
    static getAll() {
        ExtItemheaderMetaData.PROPERTIES = Ext_dataview_ItemHeader.getProperties(ExtItemheaderMetaData.PROPERTIES);
        ExtItemheaderMetaData.EVENTS = Ext_dataview_ItemHeader.getEvents(ExtItemheaderMetaData.EVENTS);
        ExtItemheaderMetaData.EVENTS.forEach((event) => {
            ExtItemheaderMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtItemheaderMetaData.PROPERTIES = [];
ExtItemheaderMetaData.EVENTS = [];
ExtItemheaderMetaData.EVENTNAMES = [];
(function () { ExtItemheaderMetaData.getAll(); })();
let ExtItemheaderComponent = ExtItemheaderComponent_1 = class ExtItemheaderComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtItemheaderMetaData.PROPERTIES, ExtItemheaderMetaData.EVENTS);
        this.xtype = 'itemheader';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtItemheaderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtItemheaderComponent = ExtItemheaderComponent_1 = __decorate([
    Component({
        selector: 'ext-itemheader',
        inputs: ExtItemheaderMetaData.PROPERTIES,
        outputs: ExtItemheaderMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtItemheaderComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtItemheaderComponent);

class Ext_List extends Ext_dataview_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_List.PROPERTIES);
        return Ext_dataview_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_List.EVENTS);
        return Ext_dataview_Component.getEvents(events);
    }
}
Ext_List.PROPERTIES = [
    'bufferSize',
    'collapseDefaults',
    'collapsible',
    'disclosureProperty',
    'grouped',
    'groupFooter',
    'groupHeader',
    'grouping',
    'groupPlaceholder',
    'horizontalOverflow',
    'indexBar',
    'infinite',
    'innerCtHeight',
    'innerWidth',
    'itemConfig',
    'maintainChildNodes',
    'minimumBufferDistance',
    'onItemDisclosure',
    'pinFooters',
    'pinHeaders',
    'pinnedFooter',
    'pinnedFooterHeight',
    'pinnedHeader',
    'pinnedHeaderHeight',
    'preventSelectionOnDisclose',
    'preventSelectionOnTool',
    'rowLines',
    'scrollable',
    'topRenderedIndex',
    'variableHeights',
    'verticalOverflow',
    'visibleHeight',
    'visibleLeft',
    'visibleTop',
    'visibleWidth',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_List.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,list,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforegroupcollapse', parameters: 'list,group' },
    { name: 'beforegroupexpand', parameters: 'list,group' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'list' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'list,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'childdoubletap', parameters: 'list,location' },
    { name: 'childlongpress', parameters: 'list,location' },
    { name: 'childmouseenter', parameters: 'list,location' },
    { name: 'childmouseleave', parameters: 'list,location' },
    { name: 'childsingletap', parameters: 'list,location' },
    { name: 'childtap', parameters: 'list,location' },
    { name: 'childtaphold', parameters: 'list,location' },
    { name: 'childtouchcancel', parameters: 'list,location' },
    { name: 'childtouchend', parameters: 'list,location' },
    { name: 'childtouchmove', parameters: 'list,location' },
    { name: 'childtouchstart', parameters: 'list,location' },
    { name: 'deactivate', parameters: 'oldActiveItem,list,newActiveItem' },
    { name: 'deselect', parameters: 'list,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'disclose', parameters: 'list,record,target,index,event' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'list,event' },
    { name: 'focusenter', parameters: 'list,event' },
    { name: 'focusleave', parameters: 'list,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'groupcollapse', parameters: 'list,group' },
    { name: 'groupexpand', parameters: 'list,group' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemaction', parameters: 'list,index,record,action' },
    { name: 'itemdoubletap', parameters: 'list,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'list,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'list,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'list,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'list,index,target,record,e' },
    { name: 'itemswipe', parameters: 'list,index,target,record,e' },
    { name: 'itemtap', parameters: 'list,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'list,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'list,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'list,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'list,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'list,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'list,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'list' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'list,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'list,selected' },
    { name: 'show', parameters: 'sender' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'list' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_List.EVENTNAMES);
//    return Ext_dataview_Component.getEventNames(eventnames);
//}

var ExtListComponent_1;
class ExtListMetaData extends Ext_List {
    static getAll() {
        ExtListMetaData.PROPERTIES = Ext_List.getProperties(ExtListMetaData.PROPERTIES);
        ExtListMetaData.EVENTS = Ext_List.getEvents(ExtListMetaData.EVENTS);
        ExtListMetaData.EVENTS.forEach((event) => {
            ExtListMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtListMetaData.PROPERTIES = [];
ExtListMetaData.EVENTS = [];
ExtListMetaData.EVENTNAMES = [];
(function () { ExtListMetaData.getAll(); })();
let ExtListComponent = ExtListComponent_1 = class ExtListComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtListMetaData.PROPERTIES, ExtListMetaData.EVENTS);
        this.xtype = 'list';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtListComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtListComponent = ExtListComponent_1 = __decorate([
    Component({
        selector: 'ext-list',
        inputs: ExtListMetaData.PROPERTIES,
        outputs: ExtListMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtListComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtListComponent);

class Ext_dataview_DataItem extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_DataItem.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_DataItem.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_dataview_DataItem.PROPERTIES = [
    'dataMap',
    'itemCls',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_DataItem.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,dataitem,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'dataitem,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'dataitem' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'dataitem,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,dataitem,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'dataitem,event' },
    { name: 'focusenter', parameters: 'dataitem,event' },
    { name: 'focusleave', parameters: 'dataitem,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'dataitem,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'dataitem,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'dataitem,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'dataitem' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'dataItem,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_DataItem.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

class Ext_dataview_component_ListItem extends Ext_dataview_DataItem {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_component_ListItem.PROPERTIES);
        return Ext_dataview_DataItem.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_component_ListItem.EVENTS);
        return Ext_dataview_DataItem.getEvents(events);
    }
}
Ext_dataview_component_ListItem.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_component_ListItem.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,listitem,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'listitem,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'listitem' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'listitem,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,listitem,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'listitem,event' },
    { name: 'focusenter', parameters: 'listitem,event' },
    { name: 'focusleave', parameters: 'listitem,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'listitem,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'listitem,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'listitem,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'listitem' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'dataItem,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_component_ListItem.EVENTNAMES);
//    return Ext_dataview_DataItem.getEventNames(eventnames);
//}

var ExtListitemComponent_1;
class ExtListitemMetaData extends Ext_dataview_component_ListItem {
    static getAll() {
        ExtListitemMetaData.PROPERTIES = Ext_dataview_component_ListItem.getProperties(ExtListitemMetaData.PROPERTIES);
        ExtListitemMetaData.EVENTS = Ext_dataview_component_ListItem.getEvents(ExtListitemMetaData.EVENTS);
        ExtListitemMetaData.EVENTS.forEach((event) => {
            ExtListitemMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtListitemMetaData.PROPERTIES = [];
ExtListitemMetaData.EVENTS = [];
ExtListitemMetaData.EVENTNAMES = [];
(function () { ExtListitemMetaData.getAll(); })();
let ExtListitemComponent = ExtListitemComponent_1 = class ExtListitemComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtListitemMetaData.PROPERTIES, ExtListitemMetaData.EVENTS);
        this.xtype = 'listitem';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtListitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtListitemComponent = ExtListitemComponent_1 = __decorate([
    Component({
        selector: 'ext-listitem',
        inputs: ExtListitemMetaData.PROPERTIES,
        outputs: ExtListitemMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtListitemComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtListitemComponent);

class Ext_dataview_SimpleListItem extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_SimpleListItem.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_SimpleListItem.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_dataview_SimpleListItem.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_SimpleListItem.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'simplelistitem' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'simplelistitem,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'simplelistitem,event' },
    { name: 'focusenter', parameters: 'simplelistitem,event' },
    { name: 'focusleave', parameters: 'simplelistitem,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'simplelistitem' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_SimpleListItem.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

class Ext_dataview_ListItemPlaceholder extends Ext_dataview_SimpleListItem {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_ListItemPlaceholder.PROPERTIES);
        return Ext_dataview_SimpleListItem.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_ListItemPlaceholder.EVENTS);
        return Ext_dataview_SimpleListItem.getEvents(events);
    }
}
Ext_dataview_ListItemPlaceholder.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_ListItemPlaceholder.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'listitemplaceholder' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'listitemplaceholder,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'listitemplaceholder,event' },
    { name: 'focusenter', parameters: 'listitemplaceholder,event' },
    { name: 'focusleave', parameters: 'listitemplaceholder,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'listitemplaceholder' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_ListItemPlaceholder.EVENTNAMES);
//    return Ext_dataview_SimpleListItem.getEventNames(eventnames);
//}

var ExtListitemplaceholderComponent_1;
class ExtListitemplaceholderMetaData extends Ext_dataview_ListItemPlaceholder {
    static getAll() {
        ExtListitemplaceholderMetaData.PROPERTIES = Ext_dataview_ListItemPlaceholder.getProperties(ExtListitemplaceholderMetaData.PROPERTIES);
        ExtListitemplaceholderMetaData.EVENTS = Ext_dataview_ListItemPlaceholder.getEvents(ExtListitemplaceholderMetaData.EVENTS);
        ExtListitemplaceholderMetaData.EVENTS.forEach((event) => {
            ExtListitemplaceholderMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtListitemplaceholderMetaData.PROPERTIES = [];
ExtListitemplaceholderMetaData.EVENTS = [];
ExtListitemplaceholderMetaData.EVENTNAMES = [];
(function () { ExtListitemplaceholderMetaData.getAll(); })();
let ExtListitemplaceholderComponent = ExtListitemplaceholderComponent_1 = class ExtListitemplaceholderComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtListitemplaceholderMetaData.PROPERTIES, ExtListitemplaceholderMetaData.EVENTS);
        this.xtype = 'listitemplaceholder';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtListitemplaceholderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtListitemplaceholderComponent = ExtListitemplaceholderComponent_1 = __decorate([
    Component({
        selector: 'ext-listitemplaceholder',
        inputs: ExtListitemplaceholderMetaData.PROPERTIES,
        outputs: ExtListitemplaceholderMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtListitemplaceholderComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtListitemplaceholderComponent);

class Ext_dataview_listswiper_Item extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_listswiper_Item.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_listswiper_Item.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_dataview_listswiper_Item.PROPERTIES = [
    'action',
    'state',
    'translationTarget',
    'undo',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_listswiper_Item.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,listswiperitem,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'listswiperitem,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'listswiperitem' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'listswiperitem,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,listswiperitem,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'listswiperitem,event' },
    { name: 'focusenter', parameters: 'listswiperitem,event' },
    { name: 'focusleave', parameters: 'listswiperitem,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'listswiperitem,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'listswiperitem,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'listswiperitem,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'listswiperitem' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_listswiper_Item.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

var ExtListswiperitemComponent_1;
class ExtListswiperitemMetaData extends Ext_dataview_listswiper_Item {
    static getAll() {
        ExtListswiperitemMetaData.PROPERTIES = Ext_dataview_listswiper_Item.getProperties(ExtListswiperitemMetaData.PROPERTIES);
        ExtListswiperitemMetaData.EVENTS = Ext_dataview_listswiper_Item.getEvents(ExtListswiperitemMetaData.EVENTS);
        ExtListswiperitemMetaData.EVENTS.forEach((event) => {
            ExtListswiperitemMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtListswiperitemMetaData.PROPERTIES = [];
ExtListswiperitemMetaData.EVENTS = [];
ExtListswiperitemMetaData.EVENTNAMES = [];
(function () { ExtListswiperitemMetaData.getAll(); })();
let ExtListswiperitemComponent = ExtListswiperitemComponent_1 = class ExtListswiperitemComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtListswiperitemMetaData.PROPERTIES, ExtListswiperitemMetaData.EVENTS);
        this.xtype = 'listswiperitem';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtListswiperitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtListswiperitemComponent = ExtListswiperitemComponent_1 = __decorate([
    Component({
        selector: 'ext-listswiperitem',
        inputs: ExtListswiperitemMetaData.PROPERTIES,
        outputs: ExtListswiperitemMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtListswiperitemComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtListswiperitemComponent);

class Ext_dataview_listswiper_Stepper extends Ext_dataview_listswiper_Item {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_listswiper_Stepper.PROPERTIES);
        return Ext_dataview_listswiper_Item.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_listswiper_Stepper.EVENTS);
        return Ext_dataview_listswiper_Item.getEvents(events);
    }
}
Ext_dataview_listswiper_Stepper.PROPERTIES = [
    'animation',
    'iconCls',
    'side',
    'step',
    'text',
    'undo',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_listswiper_Stepper.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,listswiperstepper,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'listswiperstepper,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'listswiperstepper' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'listswiperstepper,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,listswiperstepper,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'listswiperstepper,event' },
    { name: 'focusenter', parameters: 'listswiperstepper,event' },
    { name: 'focusleave', parameters: 'listswiperstepper,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'listswiperstepper,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'listswiperstepper,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'listswiperstepper,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'listswiperstepper' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_listswiper_Stepper.EVENTNAMES);
//    return Ext_dataview_listswiper_Item.getEventNames(eventnames);
//}

var ExtListswiperstepperComponent_1;
class ExtListswiperstepperMetaData extends Ext_dataview_listswiper_Stepper {
    static getAll() {
        ExtListswiperstepperMetaData.PROPERTIES = Ext_dataview_listswiper_Stepper.getProperties(ExtListswiperstepperMetaData.PROPERTIES);
        ExtListswiperstepperMetaData.EVENTS = Ext_dataview_listswiper_Stepper.getEvents(ExtListswiperstepperMetaData.EVENTS);
        ExtListswiperstepperMetaData.EVENTS.forEach((event) => {
            ExtListswiperstepperMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtListswiperstepperMetaData.PROPERTIES = [];
ExtListswiperstepperMetaData.EVENTS = [];
ExtListswiperstepperMetaData.EVENTNAMES = [];
(function () { ExtListswiperstepperMetaData.getAll(); })();
let ExtListswiperstepperComponent = ExtListswiperstepperComponent_1 = class ExtListswiperstepperComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtListswiperstepperMetaData.PROPERTIES, ExtListswiperstepperMetaData.EVENTS);
        this.xtype = 'listswiperstepper';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtListswiperstepperComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtListswiperstepperComponent = ExtListswiperstepperComponent_1 = __decorate([
    Component({
        selector: 'ext-listswiperstepper',
        inputs: ExtListswiperstepperMetaData.PROPERTIES,
        outputs: ExtListswiperstepperMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtListswiperstepperComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtListswiperstepperComponent);

class Ext_NestedList extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_NestedList.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_NestedList.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_NestedList.PROPERTIES = [
    'allowDeselect',
    'backButton',
    'backText',
    'cardSwitchAnimation',
    'detailCard',
    'detailContainer',
    'displayField',
    'emptyText',
    'lastActiveList',
    'lastNode',
    'layout',
    'listConfig',
    'loadingText',
    'onItemDisclosure',
    'store',
    'title',
    'toolbar',
    'updateTitleText',
    'useTitleAsBackText',
    'variableHeights',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_NestedList.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,nestedlist,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'nestedlist,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'back', parameters: 'nestedlist,node,lastActiveList,detailCardActive' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeload', parameters: 'nestedlist,store,operation' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeselectionchange', parameters: 'nestedlist,list,node,selections' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'nestedlist' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'nestedlist,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'containertap', parameters: 'nestedlist,list,e' },
    { name: 'deactivate', parameters: 'oldActiveItem,nestedlist,newActiveItem' },
    { name: 'deselect', parameters: 'nestedlist,list,selections' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'nestedlist,event' },
    { name: 'focusenter', parameters: 'nestedlist,event' },
    { name: 'focusleave', parameters: 'nestedlist,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemdoubletap', parameters: 'nestedlist,list,index,target,record,e' },
    { name: 'itemtap', parameters: 'nestedlist,list,index,target,record,e' },
    { name: 'leafitemtap', parameters: 'nestedlist,list,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'listchange', parameters: 'nestedlist,listitem' },
    { name: 'load', parameters: 'nestedlist,store,records,successful,operation' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'nestedlist,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'nestedlist,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'nestedlist,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'nestedlist,list,selections' },
    { name: 'selectionchange', parameters: 'nestedlist,list,selections' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'nestedlist' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_NestedList.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

var ExtNestedlistComponent_1;
class ExtNestedlistMetaData extends Ext_NestedList {
    static getAll() {
        ExtNestedlistMetaData.PROPERTIES = Ext_NestedList.getProperties(ExtNestedlistMetaData.PROPERTIES);
        ExtNestedlistMetaData.EVENTS = Ext_NestedList.getEvents(ExtNestedlistMetaData.EVENTS);
        ExtNestedlistMetaData.EVENTS.forEach((event) => {
            ExtNestedlistMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtNestedlistMetaData.PROPERTIES = [];
ExtNestedlistMetaData.EVENTS = [];
ExtNestedlistMetaData.EVENTNAMES = [];
(function () { ExtNestedlistMetaData.getAll(); })();
let ExtNestedlistComponent = ExtNestedlistComponent_1 = class ExtNestedlistComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtNestedlistMetaData.PROPERTIES, ExtNestedlistMetaData.EVENTS);
        this.xtype = 'nestedlist';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtNestedlistComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtNestedlistComponent = ExtNestedlistComponent_1 = __decorate([
    Component({
        selector: 'ext-nestedlist',
        inputs: ExtNestedlistMetaData.PROPERTIES,
        outputs: ExtNestedlistMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtNestedlistComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtNestedlistComponent);

class Ext_dataview_pullrefresh_Item extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_pullrefresh_Item.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_pullrefresh_Item.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_dataview_pullrefresh_Item.PROPERTIES = [
    'lastUpdated',
    'pull',
    'state',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_pullrefresh_Item.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_pullrefresh_Item.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

class Ext_dataview_pullrefresh_Bar extends Ext_dataview_pullrefresh_Item {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_pullrefresh_Bar.PROPERTIES);
        return Ext_dataview_pullrefresh_Item.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_pullrefresh_Bar.EVENTS);
        return Ext_dataview_pullrefresh_Item.getEvents(events);
    }
}
Ext_dataview_pullrefresh_Bar.PROPERTIES = [
    'lastUpdatedDateFormat',
    'lastUpdatedText',
    'loadedText',
    'loadingText',
    'mode',
    'pullText',
    'releaseText',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_pullrefresh_Bar.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'pullrefreshbar' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pullrefreshbar,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'pullrefreshbar,event' },
    { name: 'focusenter', parameters: 'pullrefreshbar,event' },
    { name: 'focusleave', parameters: 'pullrefreshbar,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'pullrefreshbar' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_pullrefresh_Bar.EVENTNAMES);
//    return Ext_dataview_pullrefresh_Item.getEventNames(eventnames);
//}

var ExtPullrefreshbarComponent_1;
class ExtPullrefreshbarMetaData extends Ext_dataview_pullrefresh_Bar {
    static getAll() {
        ExtPullrefreshbarMetaData.PROPERTIES = Ext_dataview_pullrefresh_Bar.getProperties(ExtPullrefreshbarMetaData.PROPERTIES);
        ExtPullrefreshbarMetaData.EVENTS = Ext_dataview_pullrefresh_Bar.getEvents(ExtPullrefreshbarMetaData.EVENTS);
        ExtPullrefreshbarMetaData.EVENTS.forEach((event) => {
            ExtPullrefreshbarMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPullrefreshbarMetaData.PROPERTIES = [];
ExtPullrefreshbarMetaData.EVENTS = [];
ExtPullrefreshbarMetaData.EVENTNAMES = [];
(function () { ExtPullrefreshbarMetaData.getAll(); })();
let ExtPullrefreshbarComponent = ExtPullrefreshbarComponent_1 = class ExtPullrefreshbarComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPullrefreshbarMetaData.PROPERTIES, ExtPullrefreshbarMetaData.EVENTS);
        this.xtype = 'pullrefreshbar';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPullrefreshbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPullrefreshbarComponent = ExtPullrefreshbarComponent_1 = __decorate([
    Component({
        selector: 'ext-pullrefreshbar',
        inputs: ExtPullrefreshbarMetaData.PROPERTIES,
        outputs: ExtPullrefreshbarMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPullrefreshbarComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPullrefreshbarComponent);

class Ext_dataview_pullrefresh_Spinner extends Ext_dataview_pullrefresh_Item {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_pullrefresh_Spinner.PROPERTIES);
        return Ext_dataview_pullrefresh_Item.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_pullrefresh_Spinner.EVENTS);
        return Ext_dataview_pullrefresh_Item.getEvents(events);
    }
}
Ext_dataview_pullrefresh_Spinner.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_pullrefresh_Spinner.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'pullrefreshspinner' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pullrefreshspinner,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'pullrefreshspinner,event' },
    { name: 'focusenter', parameters: 'pullrefreshspinner,event' },
    { name: 'focusleave', parameters: 'pullrefreshspinner,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'pullrefreshspinner' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_pullrefresh_Spinner.EVENTNAMES);
//    return Ext_dataview_pullrefresh_Item.getEventNames(eventnames);
//}

var ExtPullrefreshspinnerComponent_1;
class ExtPullrefreshspinnerMetaData extends Ext_dataview_pullrefresh_Spinner {
    static getAll() {
        ExtPullrefreshspinnerMetaData.PROPERTIES = Ext_dataview_pullrefresh_Spinner.getProperties(ExtPullrefreshspinnerMetaData.PROPERTIES);
        ExtPullrefreshspinnerMetaData.EVENTS = Ext_dataview_pullrefresh_Spinner.getEvents(ExtPullrefreshspinnerMetaData.EVENTS);
        ExtPullrefreshspinnerMetaData.EVENTS.forEach((event) => {
            ExtPullrefreshspinnerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPullrefreshspinnerMetaData.PROPERTIES = [];
ExtPullrefreshspinnerMetaData.EVENTS = [];
ExtPullrefreshspinnerMetaData.EVENTNAMES = [];
(function () { ExtPullrefreshspinnerMetaData.getAll(); })();
let ExtPullrefreshspinnerComponent = ExtPullrefreshspinnerComponent_1 = class ExtPullrefreshspinnerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPullrefreshspinnerMetaData.PROPERTIES, ExtPullrefreshspinnerMetaData.EVENTS);
        this.xtype = 'pullrefreshspinner';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPullrefreshspinnerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPullrefreshspinnerComponent = ExtPullrefreshspinnerComponent_1 = __decorate([
    Component({
        selector: 'ext-pullrefreshspinner',
        inputs: ExtPullrefreshspinnerMetaData.PROPERTIES,
        outputs: ExtPullrefreshspinnerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPullrefreshspinnerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPullrefreshspinnerComponent);

class Ext_dataview_component_SimpleListItem extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_component_SimpleListItem.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_component_SimpleListItem.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_dataview_component_SimpleListItem.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_component_SimpleListItem.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'simplelistitem' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'simplelistitem,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'simplelistitem,event' },
    { name: 'focusenter', parameters: 'simplelistitem,event' },
    { name: 'focusleave', parameters: 'simplelistitem,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'simplelistitem' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_component_SimpleListItem.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtSimplelistitemComponent_1;
class ExtSimplelistitemMetaData extends Ext_dataview_component_SimpleListItem {
    static getAll() {
        ExtSimplelistitemMetaData.PROPERTIES = Ext_dataview_component_SimpleListItem.getProperties(ExtSimplelistitemMetaData.PROPERTIES);
        ExtSimplelistitemMetaData.EVENTS = Ext_dataview_component_SimpleListItem.getEvents(ExtSimplelistitemMetaData.EVENTS);
        ExtSimplelistitemMetaData.EVENTS.forEach((event) => {
            ExtSimplelistitemMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSimplelistitemMetaData.PROPERTIES = [];
ExtSimplelistitemMetaData.EVENTS = [];
ExtSimplelistitemMetaData.EVENTNAMES = [];
(function () { ExtSimplelistitemMetaData.getAll(); })();
let ExtSimplelistitemComponent = ExtSimplelistitemComponent_1 = class ExtSimplelistitemComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSimplelistitemMetaData.PROPERTIES, ExtSimplelistitemMetaData.EVENTS);
        this.xtype = 'simplelistitem';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSimplelistitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSimplelistitemComponent = ExtSimplelistitemComponent_1 = __decorate([
    Component({
        selector: 'ext-simplelistitem',
        inputs: ExtSimplelistitemMetaData.PROPERTIES,
        outputs: ExtSimplelistitemMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSimplelistitemComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSimplelistitemComponent);

class Ext_window_Window extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_window_Window.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_window_Window.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_window_Window.PROPERTIES = [
    'bodyBorder',
    'border',
    'centered',
    'constrainDrag',
    'dismissAction',
    'dismissHandler',
    'draggable',
    'floated',
    'hideAnimation',
    'hideMode',
    'keyMap',
    'maskTapHandler',
    'maximizable',
    'maximizeAnimation',
    'maximized',
    'maximizeProxy',
    'maximizeTool',
    'modal',
    'restorable',
    'restoreAnimation',
    'restoreTool',
    'shadow',
    'showAnimation',
    'tabIndex',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_window_Window.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,dialog,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'dialog,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'dialog' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'dialog' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaximize', parameters: 'dialog' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'dialog,context' },
    { name: 'beforerestore', parameters: 'dialog' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'dialog' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'dialog,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'dialog' },
    { name: 'deactivate', parameters: 'oldActiveItem,dialog,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'dialog' },
    { name: 'drawershow', parameters: 'dialog' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'dialog' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'dialog,event' },
    { name: 'focusenter', parameters: 'dialog,event' },
    { name: 'focusleave', parameters: 'dialog,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maximize', parameters: 'dialog' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'dialog,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'dialog,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'dialog,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'dialog,context' },
    { name: 'resizedragcancel', parameters: 'dialog,context' },
    { name: 'resizedragend', parameters: 'dialog,context' },
    { name: 'resizedragstart', parameters: 'dialog,context' },
    { name: 'restore', parameters: 'dialog' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'dialog' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_window_Window.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

var ExtDialogComponent_1;
class ExtDialogMetaData extends Ext_window_Window {
    static getAll() {
        ExtDialogMetaData.PROPERTIES = Ext_window_Window.getProperties(ExtDialogMetaData.PROPERTIES);
        ExtDialogMetaData.EVENTS = Ext_window_Window.getEvents(ExtDialogMetaData.EVENTS);
        ExtDialogMetaData.EVENTS.forEach((event) => {
            ExtDialogMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtDialogMetaData.PROPERTIES = [];
ExtDialogMetaData.EVENTS = [];
ExtDialogMetaData.EVENTNAMES = [];
(function () { ExtDialogMetaData.getAll(); })();
let ExtDialogComponent = ExtDialogComponent_1 = class ExtDialogComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtDialogMetaData.PROPERTIES, ExtDialogMetaData.EVENTS);
        this.xtype = 'dialog';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtDialogComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtDialogComponent = ExtDialogComponent_1 = __decorate([
    Component({
        selector: 'ext-dialog',
        inputs: ExtDialogMetaData.PROPERTIES,
        outputs: ExtDialogMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtDialogComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtDialogComponent);

class Ext_draw_Component extends Ext_draw_ContainerBase {
    static getProperties(properties) {
        properties = properties.concat(Ext_draw_Component.PROPERTIES);
        return Ext_draw_ContainerBase.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_draw_Component.EVENTS);
        return Ext_draw_ContainerBase.getEvents(events);
    }
}
Ext_draw_Component.PROPERTIES = [
    'downloadServerUrl',
    'engine',
    'gradients',
    'resizeHandler',
    'sprites',
    'surfaceZIndexes',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_draw_Component.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,draw,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'draw,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'draw' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'draw,event' },
    { name: 'bodyresize', parameters: 'size' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,draw,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'draw,event' },
    { name: 'focusenter', parameters: 'draw,event' },
    { name: 'focusleave', parameters: 'draw,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'draw,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'draw,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'draw,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'spriteclick', parameters: 'sprite,event' },
    { name: 'spritedblclick', parameters: 'sprite,event' },
    { name: 'spritemousedown', parameters: 'sprite,event' },
    { name: 'spritemousemove', parameters: 'sprite,event' },
    { name: 'spritemouseout', parameters: 'sprite,event' },
    { name: 'spritemouseover', parameters: 'sprite,event' },
    { name: 'spritemouseup', parameters: 'sprite,event' },
    { name: 'spritetap', parameters: 'sprite,event' },
    { name: 'tofront', parameters: 'draw' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_draw_Component.EVENTNAMES);
//    return Ext_draw_ContainerBase.getEventNames(eventnames);
//}

var ExtDrawComponent_1;
class ExtDrawMetaData extends Ext_draw_Component {
    static getAll() {
        ExtDrawMetaData.PROPERTIES = Ext_draw_Component.getProperties(ExtDrawMetaData.PROPERTIES);
        ExtDrawMetaData.EVENTS = Ext_draw_Component.getEvents(ExtDrawMetaData.EVENTS);
        ExtDrawMetaData.EVENTS.forEach((event) => {
            ExtDrawMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtDrawMetaData.PROPERTIES = [];
ExtDrawMetaData.EVENTS = [];
ExtDrawMetaData.EVENTNAMES = [];
(function () { ExtDrawMetaData.getAll(); })();
let ExtDrawComponent = ExtDrawComponent_1 = class ExtDrawComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtDrawMetaData.PROPERTIES, ExtDrawMetaData.EVENTS);
        this.xtype = 'draw';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtDrawComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtDrawComponent = ExtDrawComponent_1 = __decorate([
    Component({
        selector: 'ext-draw',
        inputs: ExtDrawMetaData.PROPERTIES,
        outputs: ExtDrawMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtDrawComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtDrawComponent);

class Ext_draw_SurfaceBase extends Ext_Widget {
    static getProperties(properties) {
        properties = properties.concat(Ext_draw_SurfaceBase.PROPERTIES);
        return Ext_Widget.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_draw_SurfaceBase.EVENTS);
        return Ext_Widget.getEvents(events);
    }
}
Ext_draw_SurfaceBase.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_draw_SurfaceBase.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_draw_SurfaceBase.EVENTNAMES);
//    return Ext_Widget.getEventNames(eventnames);
//}

class Ext_draw_Surface extends Ext_draw_SurfaceBase {
    static getProperties(properties) {
        properties = properties.concat(Ext_draw_Surface.PROPERTIES);
        return Ext_draw_SurfaceBase.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_draw_Surface.EVENTS);
        return Ext_draw_SurfaceBase.getEvents(events);
    }
}
Ext_draw_Surface.PROPERTIES = [
    'background',
    'dirty',
    'flipRtlText',
    'items',
    'rect',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_draw_Surface.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'surface' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'surface,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'surface,event' },
    { name: 'focusenter', parameters: 'surface,event' },
    { name: 'focusleave', parameters: 'surface,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'surface' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_draw_Surface.EVENTNAMES);
//    return Ext_draw_SurfaceBase.getEventNames(eventnames);
//}

var ExtSurfaceComponent_1;
class ExtSurfaceMetaData extends Ext_draw_Surface {
    static getAll() {
        ExtSurfaceMetaData.PROPERTIES = Ext_draw_Surface.getProperties(ExtSurfaceMetaData.PROPERTIES);
        ExtSurfaceMetaData.EVENTS = Ext_draw_Surface.getEvents(ExtSurfaceMetaData.EVENTS);
        ExtSurfaceMetaData.EVENTS.forEach((event) => {
            ExtSurfaceMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSurfaceMetaData.PROPERTIES = [];
ExtSurfaceMetaData.EVENTS = [];
ExtSurfaceMetaData.EVENTNAMES = [];
(function () { ExtSurfaceMetaData.getAll(); })();
let ExtSurfaceComponent = ExtSurfaceComponent_1 = class ExtSurfaceComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSurfaceMetaData.PROPERTIES, ExtSurfaceMetaData.EVENTS);
        this.xtype = 'surface';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSurfaceComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSurfaceComponent = ExtSurfaceComponent_1 = __decorate([
    Component({
        selector: 'ext-surface',
        inputs: ExtSurfaceMetaData.PROPERTIES,
        outputs: ExtSurfaceMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSurfaceComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSurfaceComponent);

class Ext_Editor extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_Editor.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Editor.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_Editor.PROPERTIES = [
    'alignment',
    'allowBlur',
    'cancelOnClear',
    'cancelOnEsc',
    'completeOnEnter',
    'constrain',
    'field',
    'hideEl',
    'ignoreNoChange',
    'matchFont',
    'offset',
    'parentEl',
    'revertInvalid',
    'shadow',
    'swallowKeys',
    'updateEl',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Editor.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,editor,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'editor,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecomplete', parameters: 'editor,value,startValue' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestartedit', parameters: 'editor,boundEl,value' },
    { name: 'beforetofront', parameters: 'editor' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'editor,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'canceledit', parameters: 'editor,value,startValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'complete', parameters: 'editor,value,startValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,editor,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'editor,event' },
    { name: 'focusenter', parameters: 'editor,event' },
    { name: 'focusleave', parameters: 'editor,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'editor,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'editor,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'editor,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'specialkey', parameters: 'editor,field,event' },
    { name: 'startedit', parameters: 'editor,boundEl,value' },
    { name: 'tofront', parameters: 'editor' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Editor.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

var ExtEditorComponent_1;
class ExtEditorMetaData extends Ext_Editor {
    static getAll() {
        ExtEditorMetaData.PROPERTIES = Ext_Editor.getProperties(ExtEditorMetaData.PROPERTIES);
        ExtEditorMetaData.EVENTS = Ext_Editor.getEvents(ExtEditorMetaData.EVENTS);
        ExtEditorMetaData.EVENTS.forEach((event) => {
            ExtEditorMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtEditorMetaData.PROPERTIES = [];
ExtEditorMetaData.EVENTS = [];
ExtEditorMetaData.EVENTNAMES = [];
(function () { ExtEditorMetaData.getAll(); })();
let ExtEditorComponent = ExtEditorComponent_1 = class ExtEditorComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtEditorMetaData.PROPERTIES, ExtEditorMetaData.EVENTS);
        this.xtype = 'editor';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtEditorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtEditorComponent = ExtEditorComponent_1 = __decorate([
    Component({
        selector: 'ext-editor',
        inputs: ExtEditorMetaData.PROPERTIES,
        outputs: ExtEditorMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtEditorComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtEditorComponent);

class Ext_form_Checkbox extends Ext_field_Input {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Checkbox.PROPERTIES);
        return Ext_field_Input.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Checkbox.EVENTS);
        return Ext_field_Input.getEvents(events);
    }
}
Ext_form_Checkbox.PROPERTIES = [
    'checked',
    'labelMaskTap',
    'publishes',
    'shareableName',
    'twoWayBindable',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Checkbox.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'checkbox' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'checkbox,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'checkbox,newValue,oldValue' },
    { name: 'check', parameters: 'checkbox' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'checkbox,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'checkbox,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'checkbox,event' },
    { name: 'focusenter', parameters: 'checkbox,event' },
    { name: 'focusleave', parameters: 'checkbox,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'checkbox' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'uncheck', parameters: 'checkbox' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Checkbox.EVENTNAMES);
//    return Ext_field_Input.getEventNames(eventnames);
//}

var ExtCheckboxComponent_1;
class ExtCheckboxMetaData extends Ext_form_Checkbox {
    static getAll() {
        ExtCheckboxMetaData.PROPERTIES = Ext_form_Checkbox.getProperties(ExtCheckboxMetaData.PROPERTIES);
        ExtCheckboxMetaData.EVENTS = Ext_form_Checkbox.getEvents(ExtCheckboxMetaData.EVENTS);
        ExtCheckboxMetaData.EVENTS.forEach((event) => {
            ExtCheckboxMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCheckboxMetaData.PROPERTIES = [];
ExtCheckboxMetaData.EVENTS = [];
ExtCheckboxMetaData.EVENTNAMES = [];
(function () { ExtCheckboxMetaData.getAll(); })();
let ExtCheckboxComponent = ExtCheckboxComponent_1 = class ExtCheckboxComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCheckboxMetaData.PROPERTIES, ExtCheckboxMetaData.EVENTS);
        this.xtype = 'checkbox';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCheckboxComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCheckboxComponent = ExtCheckboxComponent_1 = __decorate([
    Component({
        selector: 'ext-checkbox',
        inputs: ExtCheckboxMetaData.PROPERTIES,
        outputs: ExtCheckboxMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCheckboxComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCheckboxComponent);

class Ext_field_Container extends Ext_field_Field {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_Container.PROPERTIES);
        return Ext_field_Field.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_Container.EVENTS);
        return Ext_field_Field.getEvents(events);
    }
}
Ext_field_Container.PROPERTIES = [
    'autoSize',
    'container',
    'defaults',
    'defaultType',
    'error',
    'fieldDefaults',
    'items',
    'layout',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_Container.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'containerfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'containerfield,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'containerfield,newValue,oldValue' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'containerfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'containerfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'containerfield,event' },
    { name: 'focusenter', parameters: 'containerfield,event' },
    { name: 'focusleave', parameters: 'containerfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'containerfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_Container.EVENTNAMES);
//    return Ext_field_Field.getEventNames(eventnames);
//}

class Ext_field_FieldGroupContainer extends Ext_field_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_FieldGroupContainer.PROPERTIES);
        return Ext_field_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_FieldGroupContainer.EVENTS);
        return Ext_field_Container.getEvents(events);
    }
}
Ext_field_FieldGroupContainer.PROPERTIES = [
    'defaultFieldValue',
    'delegate',
    'fieldsName',
    'shareableName',
    'vertical',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_FieldGroupContainer.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'groupcontainer' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'groupcontainer,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'groupcontainer,newValue,oldValue' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'groupcontainer,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'groupcontainer,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'groupcontainer,event' },
    { name: 'focusenter', parameters: 'groupcontainer,event' },
    { name: 'focusleave', parameters: 'groupcontainer,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'groupcontainer' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_FieldGroupContainer.EVENTNAMES);
//    return Ext_field_Container.getEventNames(eventnames);
//}

class Ext_field_CheckboxGroup extends Ext_field_FieldGroupContainer {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_CheckboxGroup.PROPERTIES);
        return Ext_field_FieldGroupContainer.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_CheckboxGroup.EVENTS);
        return Ext_field_FieldGroupContainer.getEvents(events);
    }
}
Ext_field_CheckboxGroup.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_CheckboxGroup.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'checkboxgroup' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'checkboxgroup,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'checkboxgroup,newValue,oldValue' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'checkboxgroup,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'checkboxgroup,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'checkboxgroup,event' },
    { name: 'focusenter', parameters: 'checkboxgroup,event' },
    { name: 'focusleave', parameters: 'checkboxgroup,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'checkboxgroup' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_CheckboxGroup.EVENTNAMES);
//    return Ext_field_FieldGroupContainer.getEventNames(eventnames);
//}

var ExtCheckboxgroupComponent_1;
class ExtCheckboxgroupMetaData extends Ext_field_CheckboxGroup {
    static getAll() {
        ExtCheckboxgroupMetaData.PROPERTIES = Ext_field_CheckboxGroup.getProperties(ExtCheckboxgroupMetaData.PROPERTIES);
        ExtCheckboxgroupMetaData.EVENTS = Ext_field_CheckboxGroup.getEvents(ExtCheckboxgroupMetaData.EVENTS);
        ExtCheckboxgroupMetaData.EVENTS.forEach((event) => {
            ExtCheckboxgroupMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCheckboxgroupMetaData.PROPERTIES = [];
ExtCheckboxgroupMetaData.EVENTS = [];
ExtCheckboxgroupMetaData.EVENTNAMES = [];
(function () { ExtCheckboxgroupMetaData.getAll(); })();
let ExtCheckboxgroupComponent = ExtCheckboxgroupComponent_1 = class ExtCheckboxgroupComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCheckboxgroupMetaData.PROPERTIES, ExtCheckboxgroupMetaData.EVENTS);
        this.xtype = 'checkboxgroup';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCheckboxgroupComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCheckboxgroupComponent = ExtCheckboxgroupComponent_1 = __decorate([
    Component({
        selector: 'ext-checkboxgroup',
        inputs: ExtCheckboxgroupMetaData.PROPERTIES,
        outputs: ExtCheckboxgroupMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCheckboxgroupComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCheckboxgroupComponent);

class Ext_form_field_ComboBox extends Ext_field_Select {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_field_ComboBox.PROPERTIES);
        return Ext_field_Select.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_field_ComboBox.EVENTS);
        return Ext_field_Select.getEvents(events);
    }
}
Ext_form_field_ComboBox.PROPERTIES = [
    'allQuery',
    'anyMatch',
    'autoSelect',
    'caseSensitive',
    'editable',
    'enableRegEx',
    'forceSelection',
    'minChars',
    'primaryFilter',
    'queryCaching',
    'queryDelay',
    'queryMode',
    'queryParam',
    'triggerAction',
    'typeAhead',
    'typeAheadDelay',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_field_ComboBox.EVENTS = [
    { name: 'action', parameters: 'combobox,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforepickercreate', parameters: 'combobox,newValue' },
    { name: 'beforequery', parameters: 'queryPlan' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'combobox' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'combobox,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'combobox,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'combobox,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'collapse', parameters: 'field' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'combobox,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'combobox,error' },
    { name: 'expand', parameters: 'field' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'combobox,e' },
    { name: 'focusenter', parameters: 'combobox,event' },
    { name: 'focusleave', parameters: 'combobox,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'combobox,e' },
    { name: 'keyup', parameters: 'combobox,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'combobox,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'combobox,e' },
    { name: 'pickercreate', parameters: 'combobox,picker' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'combobox,newValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'combobox' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_field_ComboBox.EVENTNAMES);
//    return Ext_field_Select.getEventNames(eventnames);
//}

var ExtComboboxComponent_1;
class ExtComboboxMetaData extends Ext_form_field_ComboBox {
    static getAll() {
        ExtComboboxMetaData.PROPERTIES = Ext_form_field_ComboBox.getProperties(ExtComboboxMetaData.PROPERTIES);
        ExtComboboxMetaData.EVENTS = Ext_form_field_ComboBox.getEvents(ExtComboboxMetaData.EVENTS);
        ExtComboboxMetaData.EVENTS.forEach((event) => {
            ExtComboboxMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtComboboxMetaData.PROPERTIES = [];
ExtComboboxMetaData.EVENTS = [];
ExtComboboxMetaData.EVENTNAMES = [];
(function () { ExtComboboxMetaData.getAll(); })();
let ExtComboboxComponent = ExtComboboxComponent_1 = class ExtComboboxComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtComboboxMetaData.PROPERTIES, ExtComboboxMetaData.EVENTS);
        this.xtype = 'combobox';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtComboboxComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtComboboxComponent = ExtComboboxComponent_1 = __decorate([
    Component({
        selector: 'ext-combobox',
        inputs: ExtComboboxMetaData.PROPERTIES,
        outputs: ExtComboboxMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtComboboxComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtComboboxComponent);

var ExtContainerfieldComponent_1;
class ExtContainerfieldMetaData extends Ext_field_Container {
    static getAll() {
        ExtContainerfieldMetaData.PROPERTIES = Ext_field_Container.getProperties(ExtContainerfieldMetaData.PROPERTIES);
        ExtContainerfieldMetaData.EVENTS = Ext_field_Container.getEvents(ExtContainerfieldMetaData.EVENTS);
        ExtContainerfieldMetaData.EVENTS.forEach((event) => {
            ExtContainerfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtContainerfieldMetaData.PROPERTIES = [];
ExtContainerfieldMetaData.EVENTS = [];
ExtContainerfieldMetaData.EVENTNAMES = [];
(function () { ExtContainerfieldMetaData.getAll(); })();
let ExtContainerfieldComponent = ExtContainerfieldComponent_1 = class ExtContainerfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtContainerfieldMetaData.PROPERTIES, ExtContainerfieldMetaData.EVENTS);
        this.xtype = 'containerfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtContainerfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtContainerfieldComponent = ExtContainerfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-containerfield',
        inputs: ExtContainerfieldMetaData.PROPERTIES,
        outputs: ExtContainerfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtContainerfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtContainerfieldComponent);

class Ext_field_DatePicker extends Ext_field_Picker {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_DatePicker.PROPERTIES);
        return Ext_field_Picker.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_DatePicker.EVENTS);
        return Ext_field_Picker.getEvents(events);
    }
}
Ext_field_DatePicker.PROPERTIES = [
    'altFormats',
    'dateFormat',
    'destroyPickerOnHide',
    'maxDate',
    'minDate',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_DatePicker.EVENTS = [
    { name: 'action', parameters: 'datefield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'datefield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'datefield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'datefield,newDate,oldDate' },
    { name: 'clearicontap', parameters: 'datefield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'collapse', parameters: 'field' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'datefield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'datefield,error' },
    { name: 'expand', parameters: 'field' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'datefield,e' },
    { name: 'focusenter', parameters: 'datefield,event' },
    { name: 'focusleave', parameters: 'datefield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'datefield,e' },
    { name: 'keyup', parameters: 'datefield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'datefield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'datefield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'datefield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_DatePicker.EVENTNAMES);
//    return Ext_field_Picker.getEventNames(eventnames);
//}

var ExtDatefieldComponent_1;
class ExtDatefieldMetaData extends Ext_field_DatePicker {
    static getAll() {
        ExtDatefieldMetaData.PROPERTIES = Ext_field_DatePicker.getProperties(ExtDatefieldMetaData.PROPERTIES);
        ExtDatefieldMetaData.EVENTS = Ext_field_DatePicker.getEvents(ExtDatefieldMetaData.EVENTS);
        ExtDatefieldMetaData.EVENTS.forEach((event) => {
            ExtDatefieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtDatefieldMetaData.PROPERTIES = [];
ExtDatefieldMetaData.EVENTS = [];
ExtDatefieldMetaData.EVENTNAMES = [];
(function () { ExtDatefieldMetaData.getAll(); })();
let ExtDatefieldComponent = ExtDatefieldComponent_1 = class ExtDatefieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtDatefieldMetaData.PROPERTIES, ExtDatefieldMetaData.EVENTS);
        this.xtype = 'datefield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtDatefieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtDatefieldComponent = ExtDatefieldComponent_1 = __decorate([
    Component({
        selector: 'ext-datefield',
        inputs: ExtDatefieldMetaData.PROPERTIES,
        outputs: ExtDatefieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtDatefieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtDatefieldComponent);

class Ext_field_Date extends Ext_field_Picker {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_Date.PROPERTIES);
        return Ext_field_Picker.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_Date.EVENTS);
        return Ext_field_Picker.getEvents(events);
    }
}
Ext_field_Date.PROPERTIES = [
    'altFormats',
    'dateFormat',
    'destroyPickerOnHide',
    'maxDate',
    'minDate',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_Date.EVENTS = [
    { name: 'action', parameters: 'datefield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'datefield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'datefield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'datefield,newDate,oldDate' },
    { name: 'clearicontap', parameters: 'datefield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'collapse', parameters: 'field' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'datefield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'datefield,error' },
    { name: 'expand', parameters: 'field' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'datefield,e' },
    { name: 'focusenter', parameters: 'datefield,event' },
    { name: 'focusleave', parameters: 'datefield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'datefield,e' },
    { name: 'keyup', parameters: 'datefield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'datefield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'datefield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'datefield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_Date.EVENTNAMES);
//    return Ext_field_Picker.getEventNames(eventnames);
//}

class Ext_form_DatePickerNative extends Ext_field_Date {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_DatePickerNative.PROPERTIES);
        return Ext_field_Date.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_DatePickerNative.EVENTS);
        return Ext_field_Date.getEvents(events);
    }
}
Ext_form_DatePickerNative.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_DatePickerNative.EVENTS = [
    { name: 'action', parameters: 'datepickernativefield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'datepickernativefield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'datepickernativefield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'datepickernativefield,newDate,oldDate' },
    { name: 'clearicontap', parameters: 'datepickernativefield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'collapse', parameters: 'field' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'datepickernativefield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'datepickernativefield,error' },
    { name: 'expand', parameters: 'field' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'datepickernativefield,e' },
    { name: 'focusenter', parameters: 'datepickernativefield,event' },
    { name: 'focusleave', parameters: 'datepickernativefield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'datepickernativefield,e' },
    { name: 'keyup', parameters: 'datepickernativefield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'datepickernativefield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'datepickernativefield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'datepickernativefield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_DatePickerNative.EVENTNAMES);
//    return Ext_field_Date.getEventNames(eventnames);
//}

var ExtDatepickernativefieldComponent_1;
class ExtDatepickernativefieldMetaData extends Ext_form_DatePickerNative {
    static getAll() {
        ExtDatepickernativefieldMetaData.PROPERTIES = Ext_form_DatePickerNative.getProperties(ExtDatepickernativefieldMetaData.PROPERTIES);
        ExtDatepickernativefieldMetaData.EVENTS = Ext_form_DatePickerNative.getEvents(ExtDatepickernativefieldMetaData.EVENTS);
        ExtDatepickernativefieldMetaData.EVENTS.forEach((event) => {
            ExtDatepickernativefieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtDatepickernativefieldMetaData.PROPERTIES = [];
ExtDatepickernativefieldMetaData.EVENTS = [];
ExtDatepickernativefieldMetaData.EVENTNAMES = [];
(function () { ExtDatepickernativefieldMetaData.getAll(); })();
let ExtDatepickernativefieldComponent = ExtDatepickernativefieldComponent_1 = class ExtDatepickernativefieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtDatepickernativefieldMetaData.PROPERTIES, ExtDatepickernativefieldMetaData.EVENTS);
        this.xtype = 'datepickernativefield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtDatepickernativefieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtDatepickernativefieldComponent = ExtDatepickernativefieldComponent_1 = __decorate([
    Component({
        selector: 'ext-datepickernativefield',
        inputs: ExtDatepickernativefieldMetaData.PROPERTIES,
        outputs: ExtDatepickernativefieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtDatepickernativefieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtDatepickernativefieldComponent);

class Ext_form_Display extends Ext_field_Field {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Display.PROPERTIES);
        return Ext_field_Field.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Display.EVENTS);
        return Ext_field_Field.getEvents(events);
    }
}
Ext_form_Display.PROPERTIES = [
    'encodeHtml',
    'focusable',
    'readOnly',
    'renderer',
    'scope',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Display.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'displayfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'displayfield,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'displayfield,newValue,oldValue' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'displayfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'displayfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'displayfield,event' },
    { name: 'focusenter', parameters: 'displayfield,event' },
    { name: 'focusleave', parameters: 'displayfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'displayfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Display.EVENTNAMES);
//    return Ext_field_Field.getEventNames(eventnames);
//}

var ExtDisplayfieldComponent_1;
class ExtDisplayfieldMetaData extends Ext_form_Display {
    static getAll() {
        ExtDisplayfieldMetaData.PROPERTIES = Ext_form_Display.getProperties(ExtDisplayfieldMetaData.PROPERTIES);
        ExtDisplayfieldMetaData.EVENTS = Ext_form_Display.getEvents(ExtDisplayfieldMetaData.EVENTS);
        ExtDisplayfieldMetaData.EVENTS.forEach((event) => {
            ExtDisplayfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtDisplayfieldMetaData.PROPERTIES = [];
ExtDisplayfieldMetaData.EVENTS = [];
ExtDisplayfieldMetaData.EVENTNAMES = [];
(function () { ExtDisplayfieldMetaData.getAll(); })();
let ExtDisplayfieldComponent = ExtDisplayfieldComponent_1 = class ExtDisplayfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtDisplayfieldMetaData.PROPERTIES, ExtDisplayfieldMetaData.EVENTS);
        this.xtype = 'displayfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtDisplayfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtDisplayfieldComponent = ExtDisplayfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-displayfield',
        inputs: ExtDisplayfieldMetaData.PROPERTIES,
        outputs: ExtDisplayfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtDisplayfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtDisplayfieldComponent);

class Ext_form_Email extends Ext_field_Text {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Email.PROPERTIES);
        return Ext_field_Text.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Email.EVENTS);
        return Ext_field_Text.getEvents(events);
    }
}
Ext_form_Email.PROPERTIES = [
    'autoCapitalize',
    'inputType',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Email.EVENTS = [
    { name: 'action', parameters: 'emailfield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'emailfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'emailfield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'emailfield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'emailfield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'emailfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'emailfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'emailfield,e' },
    { name: 'focusenter', parameters: 'emailfield,event' },
    { name: 'focusleave', parameters: 'emailfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'emailfield,e' },
    { name: 'keyup', parameters: 'emailfield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'emailfield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'emailfield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'emailfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Email.EVENTNAMES);
//    return Ext_field_Text.getEventNames(eventnames);
//}

var ExtEmailfieldComponent_1;
class ExtEmailfieldMetaData extends Ext_form_Email {
    static getAll() {
        ExtEmailfieldMetaData.PROPERTIES = Ext_form_Email.getProperties(ExtEmailfieldMetaData.PROPERTIES);
        ExtEmailfieldMetaData.EVENTS = Ext_form_Email.getEvents(ExtEmailfieldMetaData.EVENTS);
        ExtEmailfieldMetaData.EVENTS.forEach((event) => {
            ExtEmailfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtEmailfieldMetaData.PROPERTIES = [];
ExtEmailfieldMetaData.EVENTS = [];
ExtEmailfieldMetaData.EVENTNAMES = [];
(function () { ExtEmailfieldMetaData.getAll(); })();
let ExtEmailfieldComponent = ExtEmailfieldComponent_1 = class ExtEmailfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtEmailfieldMetaData.PROPERTIES, ExtEmailfieldMetaData.EVENTS);
        this.xtype = 'emailfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtEmailfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtEmailfieldComponent = ExtEmailfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-emailfield',
        inputs: ExtEmailfieldMetaData.PROPERTIES,
        outputs: ExtEmailfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtEmailfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtEmailfieldComponent);

class Ext_form_Field extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Field.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Field.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_form_Field.PROPERTIES = [
    'autoFitErrors',
    'bodyAlign',
    'dataType',
    'disabled',
    'error',
    'errorMessage',
    'errorTarget',
    'errorTip',
    'errorTpl',
    'fullscreen',
    'inline',
    'label',
    'labelAlign',
    'labelCls',
    'labelMinWidth',
    'labelTextAlign',
    'labelWidth',
    'labelWrap',
    'name',
    'required',
    'requiredMessage',
    'sideError',
    'tipError',
    'titleError',
    'underError',
    'validateDisabled',
    'validationMessage',
    'validators',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Field.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'field' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'field,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'field,newValue,oldValue' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'field,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'field,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'field,event' },
    { name: 'focusenter', parameters: 'field,event' },
    { name: 'focusleave', parameters: 'field,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'field' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Field.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtFieldComponent_1;
class ExtFieldMetaData extends Ext_form_Field {
    static getAll() {
        ExtFieldMetaData.PROPERTIES = Ext_form_Field.getProperties(ExtFieldMetaData.PROPERTIES);
        ExtFieldMetaData.EVENTS = Ext_form_Field.getEvents(ExtFieldMetaData.EVENTS);
        ExtFieldMetaData.EVENTS.forEach((event) => {
            ExtFieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtFieldMetaData.PROPERTIES = [];
ExtFieldMetaData.EVENTS = [];
ExtFieldMetaData.EVENTNAMES = [];
(function () { ExtFieldMetaData.getAll(); })();
let ExtFieldComponent = ExtFieldComponent_1 = class ExtFieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtFieldMetaData.PROPERTIES, ExtFieldMetaData.EVENTS);
        this.xtype = 'field';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtFieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtFieldComponent = ExtFieldComponent_1 = __decorate([
    Component({
        selector: 'ext-field',
        inputs: ExtFieldMetaData.PROPERTIES,
        outputs: ExtFieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtFieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtFieldComponent);

var ExtGroupcontainerComponent_1;
class ExtGroupcontainerMetaData extends Ext_field_FieldGroupContainer {
    static getAll() {
        ExtGroupcontainerMetaData.PROPERTIES = Ext_field_FieldGroupContainer.getProperties(ExtGroupcontainerMetaData.PROPERTIES);
        ExtGroupcontainerMetaData.EVENTS = Ext_field_FieldGroupContainer.getEvents(ExtGroupcontainerMetaData.EVENTS);
        ExtGroupcontainerMetaData.EVENTS.forEach((event) => {
            ExtGroupcontainerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGroupcontainerMetaData.PROPERTIES = [];
ExtGroupcontainerMetaData.EVENTS = [];
ExtGroupcontainerMetaData.EVENTNAMES = [];
(function () { ExtGroupcontainerMetaData.getAll(); })();
let ExtGroupcontainerComponent = ExtGroupcontainerComponent_1 = class ExtGroupcontainerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGroupcontainerMetaData.PROPERTIES, ExtGroupcontainerMetaData.EVENTS);
        this.xtype = 'groupcontainer';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGroupcontainerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGroupcontainerComponent = ExtGroupcontainerComponent_1 = __decorate([
    Component({
        selector: 'ext-groupcontainer',
        inputs: ExtGroupcontainerMetaData.PROPERTIES,
        outputs: ExtGroupcontainerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGroupcontainerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGroupcontainerComponent);

class Ext_field_File extends Ext_field_Text {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_File.PROPERTIES);
        return Ext_field_Text.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_File.EVENTS);
        return Ext_field_Text.getEvents(events);
    }
}
Ext_field_File.PROPERTIES = [
    'accept',
    'capture',
    'multiple',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_File.EVENTS = [
    { name: 'action', parameters: 'filefield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'filefield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'filefield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'filefield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'filefield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'filefield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'filefield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'filefield,e' },
    { name: 'focusenter', parameters: 'filefield,event' },
    { name: 'focusleave', parameters: 'filefield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'filefield,e' },
    { name: 'keyup', parameters: 'filefield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'filefield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'filefield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'filefield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_File.EVENTNAMES);
//    return Ext_field_Text.getEventNames(eventnames);
//}

var ExtFilefieldComponent_1;
class ExtFilefieldMetaData extends Ext_field_File {
    static getAll() {
        ExtFilefieldMetaData.PROPERTIES = Ext_field_File.getProperties(ExtFilefieldMetaData.PROPERTIES);
        ExtFilefieldMetaData.EVENTS = Ext_field_File.getEvents(ExtFilefieldMetaData.EVENTS);
        ExtFilefieldMetaData.EVENTS.forEach((event) => {
            ExtFilefieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtFilefieldMetaData.PROPERTIES = [];
ExtFilefieldMetaData.EVENTS = [];
ExtFilefieldMetaData.EVENTNAMES = [];
(function () { ExtFilefieldMetaData.getAll(); })();
let ExtFilefieldComponent = ExtFilefieldComponent_1 = class ExtFilefieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtFilefieldMetaData.PROPERTIES, ExtFilefieldMetaData.EVENTS);
        this.xtype = 'filefield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtFilefieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtFilefieldComponent = ExtFilefieldComponent_1 = __decorate([
    Component({
        selector: 'ext-filefield',
        inputs: ExtFilefieldMetaData.PROPERTIES,
        outputs: ExtFilefieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtFilefieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtFilefieldComponent);

class Ext_field_FileButton extends Ext_Button {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_FileButton.PROPERTIES);
        return Ext_Button.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_FileButton.EVENTS);
        return Ext_Button.getEvents(events);
    }
}
Ext_field_FileButton.PROPERTIES = [
    'accept',
    'capture',
    'multiple',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_FileButton.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'filebutton' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'filebutton,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'filebutton,newValue,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'filebutton,event' },
    { name: 'focusenter', parameters: 'filebutton,event' },
    { name: 'focusleave', parameters: 'filebutton,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'pressedchange', parameters: 'sender,value,oldValue' },
    { name: 'release', parameters: 'filebutton,e' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tap', parameters: 'filebutton,e' },
    { name: 'tofront', parameters: 'filebutton' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_FileButton.EVENTNAMES);
//    return Ext_Button.getEventNames(eventnames);
//}

var ExtFilebuttonComponent_1;
class ExtFilebuttonMetaData extends Ext_field_FileButton {
    static getAll() {
        ExtFilebuttonMetaData.PROPERTIES = Ext_field_FileButton.getProperties(ExtFilebuttonMetaData.PROPERTIES);
        ExtFilebuttonMetaData.EVENTS = Ext_field_FileButton.getEvents(ExtFilebuttonMetaData.EVENTS);
        ExtFilebuttonMetaData.EVENTS.forEach((event) => {
            ExtFilebuttonMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtFilebuttonMetaData.PROPERTIES = [];
ExtFilebuttonMetaData.EVENTS = [];
ExtFilebuttonMetaData.EVENTNAMES = [];
(function () { ExtFilebuttonMetaData.getAll(); })();
let ExtFilebuttonComponent = ExtFilebuttonComponent_1 = class ExtFilebuttonComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtFilebuttonMetaData.PROPERTIES, ExtFilebuttonMetaData.EVENTS);
        this.xtype = 'filebutton';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtFilebuttonComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtFilebuttonComponent = ExtFilebuttonComponent_1 = __decorate([
    Component({
        selector: 'ext-filebutton',
        inputs: ExtFilebuttonMetaData.PROPERTIES,
        outputs: ExtFilebuttonMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtFilebuttonComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtFilebuttonComponent);

class Ext_form_Hidden extends Ext_field_Input {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Hidden.PROPERTIES);
        return Ext_field_Input.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Hidden.EVENTS);
        return Ext_field_Input.getEvents(events);
    }
}
Ext_form_Hidden.PROPERTIES = [
    'inputType',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Hidden.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'hiddenfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'hiddenfield,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'hiddenfield,newValue,oldValue' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'hiddenfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'hiddenfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'hiddenfield,event' },
    { name: 'focusenter', parameters: 'hiddenfield,event' },
    { name: 'focusleave', parameters: 'hiddenfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'hiddenfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Hidden.EVENTNAMES);
//    return Ext_field_Input.getEventNames(eventnames);
//}

var ExtHiddenfieldComponent_1;
class ExtHiddenfieldMetaData extends Ext_form_Hidden {
    static getAll() {
        ExtHiddenfieldMetaData.PROPERTIES = Ext_form_Hidden.getProperties(ExtHiddenfieldMetaData.PROPERTIES);
        ExtHiddenfieldMetaData.EVENTS = Ext_form_Hidden.getEvents(ExtHiddenfieldMetaData.EVENTS);
        ExtHiddenfieldMetaData.EVENTS.forEach((event) => {
            ExtHiddenfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtHiddenfieldMetaData.PROPERTIES = [];
ExtHiddenfieldMetaData.EVENTS = [];
ExtHiddenfieldMetaData.EVENTNAMES = [];
(function () { ExtHiddenfieldMetaData.getAll(); })();
let ExtHiddenfieldComponent = ExtHiddenfieldComponent_1 = class ExtHiddenfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtHiddenfieldMetaData.PROPERTIES, ExtHiddenfieldMetaData.EVENTS);
        this.xtype = 'hiddenfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtHiddenfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtHiddenfieldComponent = ExtHiddenfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-hiddenfield',
        inputs: ExtHiddenfieldMetaData.PROPERTIES,
        outputs: ExtHiddenfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtHiddenfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtHiddenfieldComponent);

var ExtInputfieldComponent_1;
class ExtInputfieldMetaData extends Ext_field_Input {
    static getAll() {
        ExtInputfieldMetaData.PROPERTIES = Ext_field_Input.getProperties(ExtInputfieldMetaData.PROPERTIES);
        ExtInputfieldMetaData.EVENTS = Ext_field_Input.getEvents(ExtInputfieldMetaData.EVENTS);
        ExtInputfieldMetaData.EVENTS.forEach((event) => {
            ExtInputfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtInputfieldMetaData.PROPERTIES = [];
ExtInputfieldMetaData.EVENTS = [];
ExtInputfieldMetaData.EVENTNAMES = [];
(function () { ExtInputfieldMetaData.getAll(); })();
let ExtInputfieldComponent = ExtInputfieldComponent_1 = class ExtInputfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtInputfieldMetaData.PROPERTIES, ExtInputfieldMetaData.EVENTS);
        this.xtype = 'inputfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtInputfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtInputfieldComponent = ExtInputfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-inputfield',
        inputs: ExtInputfieldMetaData.PROPERTIES,
        outputs: ExtInputfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtInputfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtInputfieldComponent);

class Ext_form_Number extends Ext_field_Text {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Number.PROPERTIES);
        return Ext_field_Text.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Number.EVENTS);
        return Ext_field_Text.getEvents(events);
    }
}
Ext_form_Number.PROPERTIES = [
    'decimals',
    'decimalSeparator',
    'decimalsText',
    'inputType',
    'maxValue',
    'maxValueText',
    'minValue',
    'minValueText',
    'trim',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Number.EVENTS = [
    { name: 'action', parameters: 'numberfield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'numberfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'numberfield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'numberfield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'numberfield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'numberfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'numberfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'numberfield,e' },
    { name: 'focusenter', parameters: 'numberfield,event' },
    { name: 'focusleave', parameters: 'numberfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'numberfield,e' },
    { name: 'keyup', parameters: 'numberfield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'numberfield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'numberfield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'numberfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Number.EVENTNAMES);
//    return Ext_field_Text.getEventNames(eventnames);
//}

var ExtNumberfieldComponent_1;
class ExtNumberfieldMetaData extends Ext_form_Number {
    static getAll() {
        ExtNumberfieldMetaData.PROPERTIES = Ext_form_Number.getProperties(ExtNumberfieldMetaData.PROPERTIES);
        ExtNumberfieldMetaData.EVENTS = Ext_form_Number.getEvents(ExtNumberfieldMetaData.EVENTS);
        ExtNumberfieldMetaData.EVENTS.forEach((event) => {
            ExtNumberfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtNumberfieldMetaData.PROPERTIES = [];
ExtNumberfieldMetaData.EVENTS = [];
ExtNumberfieldMetaData.EVENTNAMES = [];
(function () { ExtNumberfieldMetaData.getAll(); })();
let ExtNumberfieldComponent = ExtNumberfieldComponent_1 = class ExtNumberfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtNumberfieldMetaData.PROPERTIES, ExtNumberfieldMetaData.EVENTS);
        this.xtype = 'numberfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtNumberfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtNumberfieldComponent = ExtNumberfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-numberfield',
        inputs: ExtNumberfieldMetaData.PROPERTIES,
        outputs: ExtNumberfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtNumberfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtNumberfieldComponent);

var ExtFieldpanelComponent_1;
class ExtFieldpanelMetaData extends Ext_field_Panel {
    static getAll() {
        ExtFieldpanelMetaData.PROPERTIES = Ext_field_Panel.getProperties(ExtFieldpanelMetaData.PROPERTIES);
        ExtFieldpanelMetaData.EVENTS = Ext_field_Panel.getEvents(ExtFieldpanelMetaData.EVENTS);
        ExtFieldpanelMetaData.EVENTS.forEach((event) => {
            ExtFieldpanelMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtFieldpanelMetaData.PROPERTIES = [];
ExtFieldpanelMetaData.EVENTS = [];
ExtFieldpanelMetaData.EVENTNAMES = [];
(function () { ExtFieldpanelMetaData.getAll(); })();
let ExtFieldpanelComponent = ExtFieldpanelComponent_1 = class ExtFieldpanelComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtFieldpanelMetaData.PROPERTIES, ExtFieldpanelMetaData.EVENTS);
        this.xtype = 'fieldpanel';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtFieldpanelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtFieldpanelComponent = ExtFieldpanelComponent_1 = __decorate([
    Component({
        selector: 'ext-fieldpanel',
        inputs: ExtFieldpanelMetaData.PROPERTIES,
        outputs: ExtFieldpanelMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtFieldpanelComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtFieldpanelComponent);

class Ext_form_Password extends Ext_field_Text {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Password.PROPERTIES);
        return Ext_field_Text.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Password.EVENTS);
        return Ext_field_Text.getEvents(events);
    }
}
Ext_form_Password.PROPERTIES = [
    'autoCapitalize',
    'inputType',
    'revealable',
    'revealed',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Password.EVENTS = [
    { name: 'action', parameters: 'passwordfield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'passwordfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'passwordfield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'passwordfield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'passwordfield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'passwordfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'passwordfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'passwordfield,e' },
    { name: 'focusenter', parameters: 'passwordfield,event' },
    { name: 'focusleave', parameters: 'passwordfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'passwordfield,e' },
    { name: 'keyup', parameters: 'passwordfield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'passwordfield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'passwordfield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'passwordfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Password.EVENTNAMES);
//    return Ext_field_Text.getEventNames(eventnames);
//}

var ExtPasswordfieldComponent_1;
class ExtPasswordfieldMetaData extends Ext_form_Password {
    static getAll() {
        ExtPasswordfieldMetaData.PROPERTIES = Ext_form_Password.getProperties(ExtPasswordfieldMetaData.PROPERTIES);
        ExtPasswordfieldMetaData.EVENTS = Ext_form_Password.getEvents(ExtPasswordfieldMetaData.EVENTS);
        ExtPasswordfieldMetaData.EVENTS.forEach((event) => {
            ExtPasswordfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPasswordfieldMetaData.PROPERTIES = [];
ExtPasswordfieldMetaData.EVENTS = [];
ExtPasswordfieldMetaData.EVENTNAMES = [];
(function () { ExtPasswordfieldMetaData.getAll(); })();
let ExtPasswordfieldComponent = ExtPasswordfieldComponent_1 = class ExtPasswordfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPasswordfieldMetaData.PROPERTIES, ExtPasswordfieldMetaData.EVENTS);
        this.xtype = 'passwordfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPasswordfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPasswordfieldComponent = ExtPasswordfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-passwordfield',
        inputs: ExtPasswordfieldMetaData.PROPERTIES,
        outputs: ExtPasswordfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPasswordfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPasswordfieldComponent);

var ExtPickerfieldComponent_1;
class ExtPickerfieldMetaData extends Ext_field_Picker {
    static getAll() {
        ExtPickerfieldMetaData.PROPERTIES = Ext_field_Picker.getProperties(ExtPickerfieldMetaData.PROPERTIES);
        ExtPickerfieldMetaData.EVENTS = Ext_field_Picker.getEvents(ExtPickerfieldMetaData.EVENTS);
        ExtPickerfieldMetaData.EVENTS.forEach((event) => {
            ExtPickerfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPickerfieldMetaData.PROPERTIES = [];
ExtPickerfieldMetaData.EVENTS = [];
ExtPickerfieldMetaData.EVENTNAMES = [];
(function () { ExtPickerfieldMetaData.getAll(); })();
let ExtPickerfieldComponent = ExtPickerfieldComponent_1 = class ExtPickerfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPickerfieldMetaData.PROPERTIES, ExtPickerfieldMetaData.EVENTS);
        this.xtype = 'pickerfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPickerfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPickerfieldComponent = ExtPickerfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-pickerfield',
        inputs: ExtPickerfieldMetaData.PROPERTIES,
        outputs: ExtPickerfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPickerfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPickerfieldComponent);

class Ext_field_Checkbox extends Ext_field_Input {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_Checkbox.PROPERTIES);
        return Ext_field_Input.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_Checkbox.EVENTS);
        return Ext_field_Input.getEvents(events);
    }
}
Ext_field_Checkbox.PROPERTIES = [
    'checked',
    'labelMaskTap',
    'publishes',
    'shareableName',
    'twoWayBindable',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_Checkbox.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'checkbox' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'checkbox,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'checkbox,newValue,oldValue' },
    { name: 'check', parameters: 'checkbox' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'checkbox,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'checkbox,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'checkbox,event' },
    { name: 'focusenter', parameters: 'checkbox,event' },
    { name: 'focusleave', parameters: 'checkbox,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'checkbox' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'uncheck', parameters: 'checkbox' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_Checkbox.EVENTNAMES);
//    return Ext_field_Input.getEventNames(eventnames);
//}

class Ext_form_Radio extends Ext_field_Checkbox {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Radio.PROPERTIES);
        return Ext_field_Checkbox.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Radio.EVENTS);
        return Ext_field_Checkbox.getEvents(events);
    }
}
Ext_form_Radio.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Radio.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'radio' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'radio,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'radio,newValue,oldValue' },
    { name: 'check', parameters: 'radio' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'radio,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'radio,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'radio,event' },
    { name: 'focusenter', parameters: 'radio,event' },
    { name: 'focusleave', parameters: 'radio,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'radio' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'uncheck', parameters: 'radio' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Radio.EVENTNAMES);
//    return Ext_field_Checkbox.getEventNames(eventnames);
//}

var ExtRadioComponent_1;
class ExtRadioMetaData extends Ext_form_Radio {
    static getAll() {
        ExtRadioMetaData.PROPERTIES = Ext_form_Radio.getProperties(ExtRadioMetaData.PROPERTIES);
        ExtRadioMetaData.EVENTS = Ext_form_Radio.getEvents(ExtRadioMetaData.EVENTS);
        ExtRadioMetaData.EVENTS.forEach((event) => {
            ExtRadioMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtRadioMetaData.PROPERTIES = [];
ExtRadioMetaData.EVENTS = [];
ExtRadioMetaData.EVENTNAMES = [];
(function () { ExtRadioMetaData.getAll(); })();
let ExtRadioComponent = ExtRadioComponent_1 = class ExtRadioComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtRadioMetaData.PROPERTIES, ExtRadioMetaData.EVENTS);
        this.xtype = 'radio';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtRadioComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtRadioComponent = ExtRadioComponent_1 = __decorate([
    Component({
        selector: 'ext-radio',
        inputs: ExtRadioMetaData.PROPERTIES,
        outputs: ExtRadioMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtRadioComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtRadioComponent);

class Ext_field_RadioGroup extends Ext_field_FieldGroupContainer {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_RadioGroup.PROPERTIES);
        return Ext_field_FieldGroupContainer.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_RadioGroup.EVENTS);
        return Ext_field_FieldGroupContainer.getEvents(events);
    }
}
Ext_field_RadioGroup.PROPERTIES = [
    'simpleValue',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_RadioGroup.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'radiogroup' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'radiogroup,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'radiogroup,newValue,oldValue' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'radiogroup,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'radiogroup,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'radiogroup,event' },
    { name: 'focusenter', parameters: 'radiogroup,event' },
    { name: 'focusleave', parameters: 'radiogroup,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'radiogroup' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_RadioGroup.EVENTNAMES);
//    return Ext_field_FieldGroupContainer.getEventNames(eventnames);
//}

var ExtRadiogroupComponent_1;
class ExtRadiogroupMetaData extends Ext_field_RadioGroup {
    static getAll() {
        ExtRadiogroupMetaData.PROPERTIES = Ext_field_RadioGroup.getProperties(ExtRadiogroupMetaData.PROPERTIES);
        ExtRadiogroupMetaData.EVENTS = Ext_field_RadioGroup.getEvents(ExtRadiogroupMetaData.EVENTS);
        ExtRadiogroupMetaData.EVENTS.forEach((event) => {
            ExtRadiogroupMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtRadiogroupMetaData.PROPERTIES = [];
ExtRadiogroupMetaData.EVENTS = [];
ExtRadiogroupMetaData.EVENTNAMES = [];
(function () { ExtRadiogroupMetaData.getAll(); })();
let ExtRadiogroupComponent = ExtRadiogroupComponent_1 = class ExtRadiogroupComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtRadiogroupMetaData.PROPERTIES, ExtRadiogroupMetaData.EVENTS);
        this.xtype = 'radiogroup';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtRadiogroupComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtRadiogroupComponent = ExtRadiogroupComponent_1 = __decorate([
    Component({
        selector: 'ext-radiogroup',
        inputs: ExtRadiogroupMetaData.PROPERTIES,
        outputs: ExtRadiogroupMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtRadiogroupComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtRadiogroupComponent);

class Ext_form_Search extends Ext_field_Text {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Search.PROPERTIES);
        return Ext_field_Text.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Search.EVENTS);
        return Ext_field_Text.getEvents(events);
    }
}
Ext_form_Search.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Search.EVENTS = [
    { name: 'action', parameters: 'searchfield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'searchfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'searchfield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'searchfield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'searchfield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'searchfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'searchfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'searchfield,e' },
    { name: 'focusenter', parameters: 'searchfield,event' },
    { name: 'focusleave', parameters: 'searchfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'searchfield,e' },
    { name: 'keyup', parameters: 'searchfield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'searchfield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'searchfield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'searchfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Search.EVENTNAMES);
//    return Ext_field_Text.getEventNames(eventnames);
//}

var ExtSearchfieldComponent_1;
class ExtSearchfieldMetaData extends Ext_form_Search {
    static getAll() {
        ExtSearchfieldMetaData.PROPERTIES = Ext_form_Search.getProperties(ExtSearchfieldMetaData.PROPERTIES);
        ExtSearchfieldMetaData.EVENTS = Ext_form_Search.getEvents(ExtSearchfieldMetaData.EVENTS);
        ExtSearchfieldMetaData.EVENTS.forEach((event) => {
            ExtSearchfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSearchfieldMetaData.PROPERTIES = [];
ExtSearchfieldMetaData.EVENTS = [];
ExtSearchfieldMetaData.EVENTNAMES = [];
(function () { ExtSearchfieldMetaData.getAll(); })();
let ExtSearchfieldComponent = ExtSearchfieldComponent_1 = class ExtSearchfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSearchfieldMetaData.PROPERTIES, ExtSearchfieldMetaData.EVENTS);
        this.xtype = 'searchfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSearchfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSearchfieldComponent = ExtSearchfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-searchfield',
        inputs: ExtSearchfieldMetaData.PROPERTIES,
        outputs: ExtSearchfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSearchfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSearchfieldComponent);

class Ext_form_Select extends Ext_field_Picker {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Select.PROPERTIES);
        return Ext_field_Picker.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Select.EVENTS);
        return Ext_field_Picker.getEvents(events);
    }
}
Ext_form_Select.PROPERTIES = [
    'autoFocus',
    'autoFocusLast',
    'autoLoadOnValue',
    'autoSelect',
    'chipView',
    'collapseOnSelect',
    'delimiter',
    'displayField',
    'displayTpl',
    'edgePicker',
    'editable',
    'floatedPicker',
    'forceSelection',
    'hiddenName',
    'itemCls',
    'itemTpl',
    'multiSelect',
    'options',
    'publishes',
    'recordCreator',
    'recordCreatorScope',
    'selection',
    'selectOnTab',
    'store',
    'twoWayBindable',
    'valueCollection',
    'valueField',
    'valueNotFoundText',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Select.EVENTS = [
    { name: 'action', parameters: 'selectfield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'selectfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'selectfield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'selectfield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'selectfield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'collapse', parameters: 'field' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'selectfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'selectfield,error' },
    { name: 'expand', parameters: 'field' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'selectfield,e' },
    { name: 'focusenter', parameters: 'selectfield,event' },
    { name: 'focusleave', parameters: 'selectfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'selectfield,e' },
    { name: 'keyup', parameters: 'selectfield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'selectfield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'selectfield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'selectfield,newValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'selectfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Select.EVENTNAMES);
//    return Ext_field_Picker.getEventNames(eventnames);
//}

var ExtSelectfieldComponent_1;
class ExtSelectfieldMetaData extends Ext_form_Select {
    static getAll() {
        ExtSelectfieldMetaData.PROPERTIES = Ext_form_Select.getProperties(ExtSelectfieldMetaData.PROPERTIES);
        ExtSelectfieldMetaData.EVENTS = Ext_form_Select.getEvents(ExtSelectfieldMetaData.EVENTS);
        ExtSelectfieldMetaData.EVENTS.forEach((event) => {
            ExtSelectfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSelectfieldMetaData.PROPERTIES = [];
ExtSelectfieldMetaData.EVENTS = [];
ExtSelectfieldMetaData.EVENTNAMES = [];
(function () { ExtSelectfieldMetaData.getAll(); })();
let ExtSelectfieldComponent = ExtSelectfieldComponent_1 = class ExtSelectfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSelectfieldMetaData.PROPERTIES, ExtSelectfieldMetaData.EVENTS);
        this.xtype = 'selectfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSelectfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSelectfieldComponent = ExtSelectfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-selectfield',
        inputs: ExtSelectfieldMetaData.PROPERTIES,
        outputs: ExtSelectfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSelectfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSelectfieldComponent);

class Ext_field_Slider extends Ext_field_Field {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_Slider.PROPERTIES);
        return Ext_field_Field.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_Slider.EVENTS);
        return Ext_field_Field.getEvents(events);
    }
}
Ext_field_Slider.PROPERTIES = [
    'bodyAlign',
    'increment',
    'liveUpdate',
    'maxValue',
    'minValue',
    'readOnly',
    'slider',
    'tabIndex',
    'twoWayBindable',
    'value',
    'values',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_Slider.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'sliderfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'sliderfield,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'me,newValue,oldValue' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'sliderfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drag', parameters: 'sliderfield,sl,thumb,e' },
    { name: 'dragchange', parameters: 'me,sl,thumb,newValue,oldValue' },
    { name: 'dragend', parameters: 'sliderfield,sl,thumb,value,e' },
    { name: 'dragstart', parameters: 'sliderfield,sl,thumb,value,e' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'sliderfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'sliderfield,event' },
    { name: 'focusenter', parameters: 'sliderfield,event' },
    { name: 'focusleave', parameters: 'sliderfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'sliderfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_Slider.EVENTNAMES);
//    return Ext_field_Field.getEventNames(eventnames);
//}

class Ext_field_SingleSlider extends Ext_field_Slider {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_SingleSlider.PROPERTIES);
        return Ext_field_Slider.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_SingleSlider.EVENTS);
        return Ext_field_Slider.getEvents(events);
    }
}
Ext_field_SingleSlider.PROPERTIES = [
    'publishes',
    'twoWayBindable',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_SingleSlider.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'singlesliderfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'singlesliderfield,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'me,newValue,oldValue' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'singlesliderfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drag', parameters: 'singlesliderfield,sl,thumb,e' },
    { name: 'dragchange', parameters: 'me,sl,newValue,oldValue' },
    { name: 'dragend', parameters: 'singlesliderfield,sl,thumb,value,e' },
    { name: 'dragstart', parameters: 'singlesliderfield,sl,thumb,value,e' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'singlesliderfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'singlesliderfield,event' },
    { name: 'focusenter', parameters: 'singlesliderfield,event' },
    { name: 'focusleave', parameters: 'singlesliderfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'singlesliderfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_SingleSlider.EVENTNAMES);
//    return Ext_field_Slider.getEventNames(eventnames);
//}

var ExtSinglesliderfieldComponent_1;
class ExtSinglesliderfieldMetaData extends Ext_field_SingleSlider {
    static getAll() {
        ExtSinglesliderfieldMetaData.PROPERTIES = Ext_field_SingleSlider.getProperties(ExtSinglesliderfieldMetaData.PROPERTIES);
        ExtSinglesliderfieldMetaData.EVENTS = Ext_field_SingleSlider.getEvents(ExtSinglesliderfieldMetaData.EVENTS);
        ExtSinglesliderfieldMetaData.EVENTS.forEach((event) => {
            ExtSinglesliderfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSinglesliderfieldMetaData.PROPERTIES = [];
ExtSinglesliderfieldMetaData.EVENTS = [];
ExtSinglesliderfieldMetaData.EVENTNAMES = [];
(function () { ExtSinglesliderfieldMetaData.getAll(); })();
let ExtSinglesliderfieldComponent = ExtSinglesliderfieldComponent_1 = class ExtSinglesliderfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSinglesliderfieldMetaData.PROPERTIES, ExtSinglesliderfieldMetaData.EVENTS);
        this.xtype = 'singlesliderfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSinglesliderfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSinglesliderfieldComponent = ExtSinglesliderfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-singlesliderfield',
        inputs: ExtSinglesliderfieldMetaData.PROPERTIES,
        outputs: ExtSinglesliderfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSinglesliderfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSinglesliderfieldComponent);

class Ext_form_Slider extends Ext_field_Field {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Slider.PROPERTIES);
        return Ext_field_Field.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Slider.EVENTS);
        return Ext_field_Field.getEvents(events);
    }
}
Ext_form_Slider.PROPERTIES = [
    'bodyAlign',
    'increment',
    'liveUpdate',
    'maxValue',
    'minValue',
    'readOnly',
    'slider',
    'tabIndex',
    'twoWayBindable',
    'value',
    'values',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Slider.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'sliderfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'sliderfield,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'me,newValue,oldValue' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'sliderfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drag', parameters: 'sliderfield,sl,thumb,e' },
    { name: 'dragchange', parameters: 'me,sl,thumb,newValue,oldValue' },
    { name: 'dragend', parameters: 'sliderfield,sl,thumb,value,e' },
    { name: 'dragstart', parameters: 'sliderfield,sl,thumb,value,e' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'sliderfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'sliderfield,event' },
    { name: 'focusenter', parameters: 'sliderfield,event' },
    { name: 'focusleave', parameters: 'sliderfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'sliderfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Slider.EVENTNAMES);
//    return Ext_field_Field.getEventNames(eventnames);
//}

var ExtSliderfieldComponent_1;
class ExtSliderfieldMetaData extends Ext_form_Slider {
    static getAll() {
        ExtSliderfieldMetaData.PROPERTIES = Ext_form_Slider.getProperties(ExtSliderfieldMetaData.PROPERTIES);
        ExtSliderfieldMetaData.EVENTS = Ext_form_Slider.getEvents(ExtSliderfieldMetaData.EVENTS);
        ExtSliderfieldMetaData.EVENTS.forEach((event) => {
            ExtSliderfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSliderfieldMetaData.PROPERTIES = [];
ExtSliderfieldMetaData.EVENTS = [];
ExtSliderfieldMetaData.EVENTNAMES = [];
(function () { ExtSliderfieldMetaData.getAll(); })();
let ExtSliderfieldComponent = ExtSliderfieldComponent_1 = class ExtSliderfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSliderfieldMetaData.PROPERTIES, ExtSliderfieldMetaData.EVENTS);
        this.xtype = 'sliderfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSliderfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSliderfieldComponent = ExtSliderfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-sliderfield',
        inputs: ExtSliderfieldMetaData.PROPERTIES,
        outputs: ExtSliderfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSliderfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSliderfieldComponent);

class Ext_field_Number extends Ext_field_Text {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_Number.PROPERTIES);
        return Ext_field_Text.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_Number.EVENTS);
        return Ext_field_Text.getEvents(events);
    }
}
Ext_field_Number.PROPERTIES = [
    'decimals',
    'decimalSeparator',
    'decimalsText',
    'inputType',
    'maxValue',
    'maxValueText',
    'minValue',
    'minValueText',
    'trim',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_Number.EVENTS = [
    { name: 'action', parameters: 'numberfield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'numberfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'numberfield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'numberfield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'numberfield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'numberfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'numberfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'numberfield,e' },
    { name: 'focusenter', parameters: 'numberfield,event' },
    { name: 'focusleave', parameters: 'numberfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'numberfield,e' },
    { name: 'keyup', parameters: 'numberfield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'numberfield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'numberfield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'numberfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_Number.EVENTNAMES);
//    return Ext_field_Text.getEventNames(eventnames);
//}

class Ext_form_Spinner extends Ext_field_Number {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Spinner.PROPERTIES);
        return Ext_field_Number.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Spinner.EVENTS);
        return Ext_field_Number.getEvents(events);
    }
}
Ext_form_Spinner.PROPERTIES = [
    'accelerateOnTapHold',
    'clearable',
    'cycle',
    'decimals',
    'stepValue',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Spinner.EVENTS = [
    { name: 'action', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'spinnerfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'spinnerfield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'spinnerfield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'spinnerfield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'spinnerfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'spinnerfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'spinnerfield,e' },
    { name: 'focusenter', parameters: 'spinnerfield,event' },
    { name: 'focusleave', parameters: 'spinnerfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'spinnerfield,e' },
    { name: 'keyup', parameters: 'spinnerfield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'spinnerfield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'spinnerfield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'spin', parameters: 'spinnerfield,value,direction' },
    { name: 'spindown', parameters: 'spinnerfield,value' },
    { name: 'spinup', parameters: 'spinnerfield,value' },
    { name: 'tofront', parameters: 'spinnerfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: '' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Spinner.EVENTNAMES);
//    return Ext_field_Number.getEventNames(eventnames);
//}

var ExtSpinnerfieldComponent_1;
class ExtSpinnerfieldMetaData extends Ext_form_Spinner {
    static getAll() {
        ExtSpinnerfieldMetaData.PROPERTIES = Ext_form_Spinner.getProperties(ExtSpinnerfieldMetaData.PROPERTIES);
        ExtSpinnerfieldMetaData.EVENTS = Ext_form_Spinner.getEvents(ExtSpinnerfieldMetaData.EVENTS);
        ExtSpinnerfieldMetaData.EVENTS.forEach((event) => {
            ExtSpinnerfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSpinnerfieldMetaData.PROPERTIES = [];
ExtSpinnerfieldMetaData.EVENTS = [];
ExtSpinnerfieldMetaData.EVENTNAMES = [];
(function () { ExtSpinnerfieldMetaData.getAll(); })();
let ExtSpinnerfieldComponent = ExtSpinnerfieldComponent_1 = class ExtSpinnerfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSpinnerfieldMetaData.PROPERTIES, ExtSpinnerfieldMetaData.EVENTS);
        this.xtype = 'spinnerfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSpinnerfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSpinnerfieldComponent = ExtSpinnerfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-spinnerfield',
        inputs: ExtSpinnerfieldMetaData.PROPERTIES,
        outputs: ExtSpinnerfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSpinnerfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSpinnerfieldComponent);

class Ext_form_Text extends Ext_field_Input {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Text.PROPERTIES);
        return Ext_field_Input.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Text.EVENTS);
        return Ext_field_Input.getEvents(events);
    }
}
Ext_form_Text.PROPERTIES = [
    'animateUnderline',
    'autoCapitalize',
    'autoComplete',
    'autoCorrect',
    'autoHideInputMask',
    'badFormatMessage',
    'bodyAlign',
    'clearable',
    'editable',
    'inputMask',
    'inputType',
    'labelAlign',
    'labelInPlaceholder',
    'maxLength',
    'parseValidator',
    'pattern',
    'placeholder',
    'publishes',
    'stripCharsRe',
    'textAlign',
    'triggers',
    'twoWayBindable',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Text.EVENTS = [
    { name: 'action', parameters: 'textfield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'textfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'textfield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'textfield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'textfield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'textfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'textfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'textfield,e' },
    { name: 'focusenter', parameters: 'textfield,event' },
    { name: 'focusleave', parameters: 'textfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'textfield,e' },
    { name: 'keyup', parameters: 'textfield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'textfield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'textfield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'textfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Text.EVENTNAMES);
//    return Ext_field_Input.getEventNames(eventnames);
//}

var ExtTextfieldComponent_1;
class ExtTextfieldMetaData extends Ext_form_Text {
    static getAll() {
        ExtTextfieldMetaData.PROPERTIES = Ext_form_Text.getProperties(ExtTextfieldMetaData.PROPERTIES);
        ExtTextfieldMetaData.EVENTS = Ext_form_Text.getEvents(ExtTextfieldMetaData.EVENTS);
        ExtTextfieldMetaData.EVENTS.forEach((event) => {
            ExtTextfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTextfieldMetaData.PROPERTIES = [];
ExtTextfieldMetaData.EVENTS = [];
ExtTextfieldMetaData.EVENTNAMES = [];
(function () { ExtTextfieldMetaData.getAll(); })();
let ExtTextfieldComponent = ExtTextfieldComponent_1 = class ExtTextfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTextfieldMetaData.PROPERTIES, ExtTextfieldMetaData.EVENTS);
        this.xtype = 'textfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTextfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTextfieldComponent = ExtTextfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-textfield',
        inputs: ExtTextfieldMetaData.PROPERTIES,
        outputs: ExtTextfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTextfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTextfieldComponent);

class Ext_form_TextArea extends Ext_field_Text {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_TextArea.PROPERTIES);
        return Ext_field_Text.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_TextArea.EVENTS);
        return Ext_field_Text.getEvents(events);
    }
}
Ext_form_TextArea.PROPERTIES = [
    'autoCapitalize',
    'clearable',
    'maxRows',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_TextArea.EVENTS = [
    { name: 'action', parameters: 'textareafield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'textareafield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'textareafield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'textareafield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'textareafield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'textareafield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'textareafield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'textareafield,e' },
    { name: 'focusenter', parameters: 'textareafield,event' },
    { name: 'focusleave', parameters: 'textareafield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'textareafield,e' },
    { name: 'keyup', parameters: 'textareafield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'textareafield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'textareafield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'textareafield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_TextArea.EVENTNAMES);
//    return Ext_field_Text.getEventNames(eventnames);
//}

var ExtTextareafieldComponent_1;
class ExtTextareafieldMetaData extends Ext_form_TextArea {
    static getAll() {
        ExtTextareafieldMetaData.PROPERTIES = Ext_form_TextArea.getProperties(ExtTextareafieldMetaData.PROPERTIES);
        ExtTextareafieldMetaData.EVENTS = Ext_form_TextArea.getEvents(ExtTextareafieldMetaData.EVENTS);
        ExtTextareafieldMetaData.EVENTS.forEach((event) => {
            ExtTextareafieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTextareafieldMetaData.PROPERTIES = [];
ExtTextareafieldMetaData.EVENTS = [];
ExtTextareafieldMetaData.EVENTNAMES = [];
(function () { ExtTextareafieldMetaData.getAll(); })();
let ExtTextareafieldComponent = ExtTextareafieldComponent_1 = class ExtTextareafieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTextareafieldMetaData.PROPERTIES, ExtTextareafieldMetaData.EVENTS);
        this.xtype = 'textareafield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTextareafieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTextareafieldComponent = ExtTextareafieldComponent_1 = __decorate([
    Component({
        selector: 'ext-textareafield',
        inputs: ExtTextareafieldMetaData.PROPERTIES,
        outputs: ExtTextareafieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTextareafieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTextareafieldComponent);

class Ext_field_Time extends Ext_field_Picker {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_Time.PROPERTIES);
        return Ext_field_Picker.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_Time.EVENTS);
        return Ext_field_Picker.getEvents(events);
    }
}
Ext_field_Time.PROPERTIES = [
    'altFormats',
    'format',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_Time.EVENTS = [
    { name: 'action', parameters: 'timefield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'timefield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'timefield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'timefield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'timefield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'collapse', parameters: 'field' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'timefield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'timefield,error' },
    { name: 'expand', parameters: 'field' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'timefield,e' },
    { name: 'focusenter', parameters: 'timefield,event' },
    { name: 'focusleave', parameters: 'timefield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'timefield,e' },
    { name: 'keyup', parameters: 'timefield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'timefield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'timefield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'timefield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_Time.EVENTNAMES);
//    return Ext_field_Picker.getEventNames(eventnames);
//}

var ExtTimefieldComponent_1;
class ExtTimefieldMetaData extends Ext_field_Time {
    static getAll() {
        ExtTimefieldMetaData.PROPERTIES = Ext_field_Time.getProperties(ExtTimefieldMetaData.PROPERTIES);
        ExtTimefieldMetaData.EVENTS = Ext_field_Time.getEvents(ExtTimefieldMetaData.EVENTS);
        ExtTimefieldMetaData.EVENTS.forEach((event) => {
            ExtTimefieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTimefieldMetaData.PROPERTIES = [];
ExtTimefieldMetaData.EVENTS = [];
ExtTimefieldMetaData.EVENTNAMES = [];
(function () { ExtTimefieldMetaData.getAll(); })();
let ExtTimefieldComponent = ExtTimefieldComponent_1 = class ExtTimefieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTimefieldMetaData.PROPERTIES, ExtTimefieldMetaData.EVENTS);
        this.xtype = 'timefield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTimefieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTimefieldComponent = ExtTimefieldComponent_1 = __decorate([
    Component({
        selector: 'ext-timefield',
        inputs: ExtTimefieldMetaData.PROPERTIES,
        outputs: ExtTimefieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTimefieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTimefieldComponent);

class Ext_form_Toggle extends Ext_field_SingleSlider {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Toggle.PROPERTIES);
        return Ext_field_SingleSlider.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Toggle.EVENTS);
        return Ext_field_SingleSlider.getEvents(events);
    }
}
Ext_form_Toggle.PROPERTIES = [
    'activeLabel',
    'bodyAlign',
    'inactiveLabel',
    'publishes',
    'slider',
    'twoWayBindable',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Toggle.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'togglefield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'togglefield,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'togglefield,newValue,oldValue' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'togglefield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drag', parameters: '' },
    { name: 'dragchange', parameters: 'me,sl,newValue,oldValue' },
    { name: 'dragend', parameters: '' },
    { name: 'dragstart', parameters: '' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'togglefield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'togglefield,event' },
    { name: 'focusenter', parameters: 'togglefield,event' },
    { name: 'focusleave', parameters: 'togglefield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'togglefield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Toggle.EVENTNAMES);
//    return Ext_field_SingleSlider.getEventNames(eventnames);
//}

var ExtTogglefieldComponent_1;
class ExtTogglefieldMetaData extends Ext_form_Toggle {
    static getAll() {
        ExtTogglefieldMetaData.PROPERTIES = Ext_form_Toggle.getProperties(ExtTogglefieldMetaData.PROPERTIES);
        ExtTogglefieldMetaData.EVENTS = Ext_form_Toggle.getEvents(ExtTogglefieldMetaData.EVENTS);
        ExtTogglefieldMetaData.EVENTS.forEach((event) => {
            ExtTogglefieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTogglefieldMetaData.PROPERTIES = [];
ExtTogglefieldMetaData.EVENTS = [];
ExtTogglefieldMetaData.EVENTNAMES = [];
(function () { ExtTogglefieldMetaData.getAll(); })();
let ExtTogglefieldComponent = ExtTogglefieldComponent_1 = class ExtTogglefieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTogglefieldMetaData.PROPERTIES, ExtTogglefieldMetaData.EVENTS);
        this.xtype = 'togglefield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTogglefieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTogglefieldComponent = ExtTogglefieldComponent_1 = __decorate([
    Component({
        selector: 'ext-togglefield',
        inputs: ExtTogglefieldMetaData.PROPERTIES,
        outputs: ExtTogglefieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTogglefieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTogglefieldComponent);

class Ext_field_trigger_Base extends Ext_Widget {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_trigger_Base.PROPERTIES);
        return Ext_Widget.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_trigger_Base.EVENTS);
        return Ext_Widget.getEvents(events);
    }
}
Ext_field_trigger_Base.PROPERTIES = [
    'field',
    'group',
    'name',
    'side',
    'triggers',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_trigger_Base.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_trigger_Base.EVENTNAMES);
//    return Ext_Widget.getEventNames(eventnames);
//}

class Ext_field_trigger_Trigger extends Ext_field_trigger_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_trigger_Trigger.PROPERTIES);
        return Ext_field_trigger_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_trigger_Trigger.EVENTS);
        return Ext_field_trigger_Base.getEvents(events);
    }
}
Ext_field_trigger_Trigger.PROPERTIES = [
    'focusOnTap',
    'handler',
    'iconCls',
    'repeat',
    'scope',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_trigger_Trigger.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'trigger' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'trigger,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'trigger,event' },
    { name: 'focusenter', parameters: 'trigger,event' },
    { name: 'focusleave', parameters: 'trigger,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'trigger' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_trigger_Trigger.EVENTNAMES);
//    return Ext_field_trigger_Base.getEventNames(eventnames);
//}

class Ext_field_trigger_Clear extends Ext_field_trigger_Trigger {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_trigger_Clear.PROPERTIES);
        return Ext_field_trigger_Trigger.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_trigger_Clear.EVENTS);
        return Ext_field_trigger_Trigger.getEvents(events);
    }
}
Ext_field_trigger_Clear.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_trigger_Clear.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'cleartrigger' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'cleartrigger,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'cleartrigger,event' },
    { name: 'focusenter', parameters: 'cleartrigger,event' },
    { name: 'focusleave', parameters: 'cleartrigger,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'cleartrigger' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_trigger_Clear.EVENTNAMES);
//    return Ext_field_trigger_Trigger.getEventNames(eventnames);
//}

var ExtCleartriggerComponent_1;
class ExtCleartriggerMetaData extends Ext_field_trigger_Clear {
    static getAll() {
        ExtCleartriggerMetaData.PROPERTIES = Ext_field_trigger_Clear.getProperties(ExtCleartriggerMetaData.PROPERTIES);
        ExtCleartriggerMetaData.EVENTS = Ext_field_trigger_Clear.getEvents(ExtCleartriggerMetaData.EVENTS);
        ExtCleartriggerMetaData.EVENTS.forEach((event) => {
            ExtCleartriggerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCleartriggerMetaData.PROPERTIES = [];
ExtCleartriggerMetaData.EVENTS = [];
ExtCleartriggerMetaData.EVENTNAMES = [];
(function () { ExtCleartriggerMetaData.getAll(); })();
let ExtCleartriggerComponent = ExtCleartriggerComponent_1 = class ExtCleartriggerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCleartriggerMetaData.PROPERTIES, ExtCleartriggerMetaData.EVENTS);
        this.xtype = 'cleartrigger';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCleartriggerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCleartriggerComponent = ExtCleartriggerComponent_1 = __decorate([
    Component({
        selector: 'ext-cleartrigger',
        inputs: ExtCleartriggerMetaData.PROPERTIES,
        outputs: ExtCleartriggerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCleartriggerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCleartriggerComponent);

class Ext_field_trigger_Expand extends Ext_field_trigger_Trigger {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_trigger_Expand.PROPERTIES);
        return Ext_field_trigger_Trigger.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_trigger_Expand.EVENTS);
        return Ext_field_trigger_Trigger.getEvents(events);
    }
}
Ext_field_trigger_Expand.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_trigger_Expand.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'expandtrigger' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'expandtrigger,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'expandtrigger,event' },
    { name: 'focusenter', parameters: 'expandtrigger,event' },
    { name: 'focusleave', parameters: 'expandtrigger,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'expandtrigger' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_trigger_Expand.EVENTNAMES);
//    return Ext_field_trigger_Trigger.getEventNames(eventnames);
//}

class Ext_field_trigger_Date extends Ext_field_trigger_Expand {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_trigger_Date.PROPERTIES);
        return Ext_field_trigger_Expand.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_trigger_Date.EVENTS);
        return Ext_field_trigger_Expand.getEvents(events);
    }
}
Ext_field_trigger_Date.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_trigger_Date.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'datetrigger' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'datetrigger,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'datetrigger,event' },
    { name: 'focusenter', parameters: 'datetrigger,event' },
    { name: 'focusleave', parameters: 'datetrigger,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'datetrigger' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_trigger_Date.EVENTNAMES);
//    return Ext_field_trigger_Expand.getEventNames(eventnames);
//}

var ExtDatetriggerComponent_1;
class ExtDatetriggerMetaData extends Ext_field_trigger_Date {
    static getAll() {
        ExtDatetriggerMetaData.PROPERTIES = Ext_field_trigger_Date.getProperties(ExtDatetriggerMetaData.PROPERTIES);
        ExtDatetriggerMetaData.EVENTS = Ext_field_trigger_Date.getEvents(ExtDatetriggerMetaData.EVENTS);
        ExtDatetriggerMetaData.EVENTS.forEach((event) => {
            ExtDatetriggerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtDatetriggerMetaData.PROPERTIES = [];
ExtDatetriggerMetaData.EVENTS = [];
ExtDatetriggerMetaData.EVENTNAMES = [];
(function () { ExtDatetriggerMetaData.getAll(); })();
let ExtDatetriggerComponent = ExtDatetriggerComponent_1 = class ExtDatetriggerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtDatetriggerMetaData.PROPERTIES, ExtDatetriggerMetaData.EVENTS);
        this.xtype = 'datetrigger';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtDatetriggerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtDatetriggerComponent = ExtDatetriggerComponent_1 = __decorate([
    Component({
        selector: 'ext-datetrigger',
        inputs: ExtDatetriggerMetaData.PROPERTIES,
        outputs: ExtDatetriggerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtDatetriggerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtDatetriggerComponent);

var ExtExpandtriggerComponent_1;
class ExtExpandtriggerMetaData extends Ext_field_trigger_Expand {
    static getAll() {
        ExtExpandtriggerMetaData.PROPERTIES = Ext_field_trigger_Expand.getProperties(ExtExpandtriggerMetaData.PROPERTIES);
        ExtExpandtriggerMetaData.EVENTS = Ext_field_trigger_Expand.getEvents(ExtExpandtriggerMetaData.EVENTS);
        ExtExpandtriggerMetaData.EVENTS.forEach((event) => {
            ExtExpandtriggerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtExpandtriggerMetaData.PROPERTIES = [];
ExtExpandtriggerMetaData.EVENTS = [];
ExtExpandtriggerMetaData.EVENTNAMES = [];
(function () { ExtExpandtriggerMetaData.getAll(); })();
let ExtExpandtriggerComponent = ExtExpandtriggerComponent_1 = class ExtExpandtriggerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtExpandtriggerMetaData.PROPERTIES, ExtExpandtriggerMetaData.EVENTS);
        this.xtype = 'expandtrigger';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtExpandtriggerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtExpandtriggerComponent = ExtExpandtriggerComponent_1 = __decorate([
    Component({
        selector: 'ext-expandtrigger',
        inputs: ExtExpandtriggerMetaData.PROPERTIES,
        outputs: ExtExpandtriggerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtExpandtriggerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtExpandtriggerComponent);

class Ext_field_trigger_Menu extends Ext_field_trigger_Trigger {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_trigger_Menu.PROPERTIES);
        return Ext_field_trigger_Trigger.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_trigger_Menu.EVENTS);
        return Ext_field_trigger_Trigger.getEvents(events);
    }
}
Ext_field_trigger_Menu.PROPERTIES = [
    'destroyMenu',
    'menu',
    'menuAlign',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_trigger_Menu.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'menutrigger' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'menutrigger,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'menutrigger,event' },
    { name: 'focusenter', parameters: 'menutrigger,event' },
    { name: 'focusleave', parameters: 'menutrigger,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'menutrigger' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_trigger_Menu.EVENTNAMES);
//    return Ext_field_trigger_Trigger.getEventNames(eventnames);
//}

var ExtMenutriggerComponent_1;
class ExtMenutriggerMetaData extends Ext_field_trigger_Menu {
    static getAll() {
        ExtMenutriggerMetaData.PROPERTIES = Ext_field_trigger_Menu.getProperties(ExtMenutriggerMetaData.PROPERTIES);
        ExtMenutriggerMetaData.EVENTS = Ext_field_trigger_Menu.getEvents(ExtMenutriggerMetaData.EVENTS);
        ExtMenutriggerMetaData.EVENTS.forEach((event) => {
            ExtMenutriggerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtMenutriggerMetaData.PROPERTIES = [];
ExtMenutriggerMetaData.EVENTS = [];
ExtMenutriggerMetaData.EVENTNAMES = [];
(function () { ExtMenutriggerMetaData.getAll(); })();
let ExtMenutriggerComponent = ExtMenutriggerComponent_1 = class ExtMenutriggerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtMenutriggerMetaData.PROPERTIES, ExtMenutriggerMetaData.EVENTS);
        this.xtype = 'menutrigger';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtMenutriggerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtMenutriggerComponent = ExtMenutriggerComponent_1 = __decorate([
    Component({
        selector: 'ext-menutrigger',
        inputs: ExtMenutriggerMetaData.PROPERTIES,
        outputs: ExtMenutriggerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtMenutriggerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtMenutriggerComponent);

class Ext_field_trigger_Reveal extends Ext_field_trigger_Trigger {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_trigger_Reveal.PROPERTIES);
        return Ext_field_trigger_Trigger.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_trigger_Reveal.EVENTS);
        return Ext_field_trigger_Trigger.getEvents(events);
    }
}
Ext_field_trigger_Reveal.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_trigger_Reveal.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'revealtrigger' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'revealtrigger,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'revealtrigger,event' },
    { name: 'focusenter', parameters: 'revealtrigger,event' },
    { name: 'focusleave', parameters: 'revealtrigger,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'revealtrigger' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_trigger_Reveal.EVENTNAMES);
//    return Ext_field_trigger_Trigger.getEventNames(eventnames);
//}

var ExtRevealtriggerComponent_1;
class ExtRevealtriggerMetaData extends Ext_field_trigger_Reveal {
    static getAll() {
        ExtRevealtriggerMetaData.PROPERTIES = Ext_field_trigger_Reveal.getProperties(ExtRevealtriggerMetaData.PROPERTIES);
        ExtRevealtriggerMetaData.EVENTS = Ext_field_trigger_Reveal.getEvents(ExtRevealtriggerMetaData.EVENTS);
        ExtRevealtriggerMetaData.EVENTS.forEach((event) => {
            ExtRevealtriggerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtRevealtriggerMetaData.PROPERTIES = [];
ExtRevealtriggerMetaData.EVENTS = [];
ExtRevealtriggerMetaData.EVENTNAMES = [];
(function () { ExtRevealtriggerMetaData.getAll(); })();
let ExtRevealtriggerComponent = ExtRevealtriggerComponent_1 = class ExtRevealtriggerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtRevealtriggerMetaData.PROPERTIES, ExtRevealtriggerMetaData.EVENTS);
        this.xtype = 'revealtrigger';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtRevealtriggerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtRevealtriggerComponent = ExtRevealtriggerComponent_1 = __decorate([
    Component({
        selector: 'ext-revealtrigger',
        inputs: ExtRevealtriggerMetaData.PROPERTIES,
        outputs: ExtRevealtriggerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtRevealtriggerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtRevealtriggerComponent);

class Ext_field_trigger_SpinDown extends Ext_field_trigger_Trigger {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_trigger_SpinDown.PROPERTIES);
        return Ext_field_trigger_Trigger.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_trigger_SpinDown.EVENTS);
        return Ext_field_trigger_Trigger.getEvents(events);
    }
}
Ext_field_trigger_SpinDown.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_trigger_SpinDown.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'spindowntrigger' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'spindowntrigger,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'spindowntrigger,event' },
    { name: 'focusenter', parameters: 'spindowntrigger,event' },
    { name: 'focusleave', parameters: 'spindowntrigger,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'spindowntrigger' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_trigger_SpinDown.EVENTNAMES);
//    return Ext_field_trigger_Trigger.getEventNames(eventnames);
//}

var ExtSpindowntriggerComponent_1;
class ExtSpindowntriggerMetaData extends Ext_field_trigger_SpinDown {
    static getAll() {
        ExtSpindowntriggerMetaData.PROPERTIES = Ext_field_trigger_SpinDown.getProperties(ExtSpindowntriggerMetaData.PROPERTIES);
        ExtSpindowntriggerMetaData.EVENTS = Ext_field_trigger_SpinDown.getEvents(ExtSpindowntriggerMetaData.EVENTS);
        ExtSpindowntriggerMetaData.EVENTS.forEach((event) => {
            ExtSpindowntriggerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSpindowntriggerMetaData.PROPERTIES = [];
ExtSpindowntriggerMetaData.EVENTS = [];
ExtSpindowntriggerMetaData.EVENTNAMES = [];
(function () { ExtSpindowntriggerMetaData.getAll(); })();
let ExtSpindowntriggerComponent = ExtSpindowntriggerComponent_1 = class ExtSpindowntriggerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSpindowntriggerMetaData.PROPERTIES, ExtSpindowntriggerMetaData.EVENTS);
        this.xtype = 'spindowntrigger';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSpindowntriggerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSpindowntriggerComponent = ExtSpindowntriggerComponent_1 = __decorate([
    Component({
        selector: 'ext-spindowntrigger',
        inputs: ExtSpindowntriggerMetaData.PROPERTIES,
        outputs: ExtSpindowntriggerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSpindowntriggerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSpindowntriggerComponent);

class Ext_field_trigger_SpinUp extends Ext_field_trigger_Trigger {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_trigger_SpinUp.PROPERTIES);
        return Ext_field_trigger_Trigger.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_trigger_SpinUp.EVENTS);
        return Ext_field_trigger_Trigger.getEvents(events);
    }
}
Ext_field_trigger_SpinUp.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_trigger_SpinUp.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'spinuptrigger' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'spinuptrigger,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'spinuptrigger,event' },
    { name: 'focusenter', parameters: 'spinuptrigger,event' },
    { name: 'focusleave', parameters: 'spinuptrigger,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'spinuptrigger' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_trigger_SpinUp.EVENTNAMES);
//    return Ext_field_trigger_Trigger.getEventNames(eventnames);
//}

var ExtSpinuptriggerComponent_1;
class ExtSpinuptriggerMetaData extends Ext_field_trigger_SpinUp {
    static getAll() {
        ExtSpinuptriggerMetaData.PROPERTIES = Ext_field_trigger_SpinUp.getProperties(ExtSpinuptriggerMetaData.PROPERTIES);
        ExtSpinuptriggerMetaData.EVENTS = Ext_field_trigger_SpinUp.getEvents(ExtSpinuptriggerMetaData.EVENTS);
        ExtSpinuptriggerMetaData.EVENTS.forEach((event) => {
            ExtSpinuptriggerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSpinuptriggerMetaData.PROPERTIES = [];
ExtSpinuptriggerMetaData.EVENTS = [];
ExtSpinuptriggerMetaData.EVENTNAMES = [];
(function () { ExtSpinuptriggerMetaData.getAll(); })();
let ExtSpinuptriggerComponent = ExtSpinuptriggerComponent_1 = class ExtSpinuptriggerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSpinuptriggerMetaData.PROPERTIES, ExtSpinuptriggerMetaData.EVENTS);
        this.xtype = 'spinuptrigger';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSpinuptriggerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSpinuptriggerComponent = ExtSpinuptriggerComponent_1 = __decorate([
    Component({
        selector: 'ext-spinuptrigger',
        inputs: ExtSpinuptriggerMetaData.PROPERTIES,
        outputs: ExtSpinuptriggerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSpinuptriggerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSpinuptriggerComponent);

class Ext_field_trigger_Time extends Ext_field_trigger_Expand {
    static getProperties(properties) {
        properties = properties.concat(Ext_field_trigger_Time.PROPERTIES);
        return Ext_field_trigger_Expand.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_field_trigger_Time.EVENTS);
        return Ext_field_trigger_Expand.getEvents(events);
    }
}
Ext_field_trigger_Time.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_field_trigger_Time.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'timetrigger' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'timetrigger,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'timetrigger,event' },
    { name: 'focusenter', parameters: 'timetrigger,event' },
    { name: 'focusleave', parameters: 'timetrigger,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'timetrigger' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_field_trigger_Time.EVENTNAMES);
//    return Ext_field_trigger_Expand.getEventNames(eventnames);
//}

var ExtTimetriggerComponent_1;
class ExtTimetriggerMetaData extends Ext_field_trigger_Time {
    static getAll() {
        ExtTimetriggerMetaData.PROPERTIES = Ext_field_trigger_Time.getProperties(ExtTimetriggerMetaData.PROPERTIES);
        ExtTimetriggerMetaData.EVENTS = Ext_field_trigger_Time.getEvents(ExtTimetriggerMetaData.EVENTS);
        ExtTimetriggerMetaData.EVENTS.forEach((event) => {
            ExtTimetriggerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTimetriggerMetaData.PROPERTIES = [];
ExtTimetriggerMetaData.EVENTS = [];
ExtTimetriggerMetaData.EVENTNAMES = [];
(function () { ExtTimetriggerMetaData.getAll(); })();
let ExtTimetriggerComponent = ExtTimetriggerComponent_1 = class ExtTimetriggerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTimetriggerMetaData.PROPERTIES, ExtTimetriggerMetaData.EVENTS);
        this.xtype = 'timetrigger';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTimetriggerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTimetriggerComponent = ExtTimetriggerComponent_1 = __decorate([
    Component({
        selector: 'ext-timetrigger',
        inputs: ExtTimetriggerMetaData.PROPERTIES,
        outputs: ExtTimetriggerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTimetriggerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTimetriggerComponent);

var ExtTriggerComponent_1;
class ExtTriggerMetaData extends Ext_field_trigger_Trigger {
    static getAll() {
        ExtTriggerMetaData.PROPERTIES = Ext_field_trigger_Trigger.getProperties(ExtTriggerMetaData.PROPERTIES);
        ExtTriggerMetaData.EVENTS = Ext_field_trigger_Trigger.getEvents(ExtTriggerMetaData.EVENTS);
        ExtTriggerMetaData.EVENTS.forEach((event) => {
            ExtTriggerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTriggerMetaData.PROPERTIES = [];
ExtTriggerMetaData.EVENTS = [];
ExtTriggerMetaData.EVENTNAMES = [];
(function () { ExtTriggerMetaData.getAll(); })();
let ExtTriggerComponent = ExtTriggerComponent_1 = class ExtTriggerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTriggerMetaData.PROPERTIES, ExtTriggerMetaData.EVENTS);
        this.xtype = 'trigger';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTriggerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTriggerComponent = ExtTriggerComponent_1 = __decorate([
    Component({
        selector: 'ext-trigger',
        inputs: ExtTriggerMetaData.PROPERTIES,
        outputs: ExtTriggerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTriggerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTriggerComponent);

class Ext_form_Url extends Ext_field_Text {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_Url.PROPERTIES);
        return Ext_field_Text.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_Url.EVENTS);
        return Ext_field_Text.getEvents(events);
    }
}
Ext_form_Url.PROPERTIES = [
    'autoCapitalize',
    'inputType',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_Url.EVENTS = [
    { name: 'action', parameters: 'urlfield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'urlfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'urlfield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'urlfield,newValue,oldValue' },
    { name: 'clearicontap', parameters: 'urlfield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'urlfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'urlfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'urlfield,e' },
    { name: 'focusenter', parameters: 'urlfield,event' },
    { name: 'focusleave', parameters: 'urlfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'urlfield,e' },
    { name: 'keyup', parameters: 'urlfield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'urlfield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'urlfield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'urlfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_Url.EVENTNAMES);
//    return Ext_field_Text.getEventNames(eventnames);
//}

var ExtUrlfieldComponent_1;
class ExtUrlfieldMetaData extends Ext_form_Url {
    static getAll() {
        ExtUrlfieldMetaData.PROPERTIES = Ext_form_Url.getProperties(ExtUrlfieldMetaData.PROPERTIES);
        ExtUrlfieldMetaData.EVENTS = Ext_form_Url.getEvents(ExtUrlfieldMetaData.EVENTS);
        ExtUrlfieldMetaData.EVENTS.forEach((event) => {
            ExtUrlfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtUrlfieldMetaData.PROPERTIES = [];
ExtUrlfieldMetaData.EVENTS = [];
ExtUrlfieldMetaData.EVENTNAMES = [];
(function () { ExtUrlfieldMetaData.getAll(); })();
let ExtUrlfieldComponent = ExtUrlfieldComponent_1 = class ExtUrlfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtUrlfieldMetaData.PROPERTIES, ExtUrlfieldMetaData.EVENTS);
        this.xtype = 'urlfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtUrlfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtUrlfieldComponent = ExtUrlfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-urlfield',
        inputs: ExtUrlfieldMetaData.PROPERTIES,
        outputs: ExtUrlfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtUrlfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtUrlfieldComponent);

class Ext_form_FieldSet extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_FieldSet.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_FieldSet.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_form_FieldSet.PROPERTIES = [
    'fieldDefaults',
    'instructions',
    'title',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_FieldSet.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,fieldset,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'fieldset,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'fieldset' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'fieldset,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,fieldset,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'fieldset,event' },
    { name: 'focusenter', parameters: 'fieldset,event' },
    { name: 'focusleave', parameters: 'fieldset,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'fieldset,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'fieldset,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'fieldset,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'fieldset' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_FieldSet.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

var ExtFieldsetComponent_1;
class ExtFieldsetMetaData extends Ext_form_FieldSet {
    static getAll() {
        ExtFieldsetMetaData.PROPERTIES = Ext_form_FieldSet.getProperties(ExtFieldsetMetaData.PROPERTIES);
        ExtFieldsetMetaData.EVENTS = Ext_form_FieldSet.getEvents(ExtFieldsetMetaData.EVENTS);
        ExtFieldsetMetaData.EVENTS.forEach((event) => {
            ExtFieldsetMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtFieldsetMetaData.PROPERTIES = [];
ExtFieldsetMetaData.EVENTS = [];
ExtFieldsetMetaData.EVENTNAMES = [];
(function () { ExtFieldsetMetaData.getAll(); })();
let ExtFieldsetComponent = ExtFieldsetComponent_1 = class ExtFieldsetComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtFieldsetMetaData.PROPERTIES, ExtFieldsetMetaData.EVENTS);
        this.xtype = 'fieldset';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtFieldsetComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtFieldsetComponent = ExtFieldsetComponent_1 = __decorate([
    Component({
        selector: 'ext-fieldset',
        inputs: ExtFieldsetMetaData.PROPERTIES,
        outputs: ExtFieldsetMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtFieldsetComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtFieldsetComponent);

class Ext_form_FormPanel extends Ext_field_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_form_FormPanel.PROPERTIES);
        return Ext_field_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_form_FormPanel.EVENTS);
        return Ext_field_Panel.getEvents(events);
    }
}
Ext_form_FormPanel.PROPERTIES = [
    'enableSubmissionForm',
    'enctype',
    'fieldDefaults',
    'jsonSubmit',
    'method',
    'multipartDetection',
    'standardSubmit',
    'submitOnAction',
    'trackResetOnLoad',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_form_FormPanel.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,formpanel,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'formpanel,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'formpanel' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'formpanel' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'formpanel,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforesubmit', parameters: 'formpanel,values,options,e' },
    { name: 'beforetofront', parameters: 'formpanel' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'formpanel,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'formpanel' },
    { name: 'deactivate', parameters: 'oldActiveItem,formpanel,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'formpanel,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'formpanel' },
    { name: 'drawershow', parameters: 'formpanel' },
    { name: 'erased', parameters: 'sender' },
    { name: 'exception', parameters: 'formpanel,result' },
    { name: 'expand', parameters: 'formpanel' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'formpanel,event' },
    { name: 'focusenter', parameters: 'formpanel,event' },
    { name: 'focusleave', parameters: 'formpanel,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'formpanel,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'formpanel,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'formpanel,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'formpanel,context' },
    { name: 'resizedragcancel', parameters: 'formpanel,context' },
    { name: 'resizedragend', parameters: 'formpanel,context' },
    { name: 'resizedragstart', parameters: 'formpanel,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'submit', parameters: 'formpanel,result,e' },
    { name: 'tofront', parameters: 'formpanel' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_form_FormPanel.EVENTNAMES);
//    return Ext_field_Panel.getEventNames(eventnames);
//}

var ExtFormpanelComponent_1;
class ExtFormpanelMetaData extends Ext_form_FormPanel {
    static getAll() {
        ExtFormpanelMetaData.PROPERTIES = Ext_form_FormPanel.getProperties(ExtFormpanelMetaData.PROPERTIES);
        ExtFormpanelMetaData.EVENTS = Ext_form_FormPanel.getEvents(ExtFormpanelMetaData.EVENTS);
        ExtFormpanelMetaData.EVENTS.forEach((event) => {
            ExtFormpanelMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtFormpanelMetaData.PROPERTIES = [];
ExtFormpanelMetaData.EVENTS = [];
ExtFormpanelMetaData.EVENTNAMES = [];
(function () { ExtFormpanelMetaData.getAll(); })();
let ExtFormpanelComponent = ExtFormpanelComponent_1 = class ExtFormpanelComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtFormpanelMetaData.PROPERTIES, ExtFormpanelMetaData.EVENTS);
        this.xtype = 'formpanel';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtFormpanelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtFormpanelComponent = ExtFormpanelComponent_1 = __decorate([
    Component({
        selector: 'ext-formpanel',
        inputs: ExtFormpanelMetaData.PROPERTIES,
        outputs: ExtFormpanelMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtFormpanelComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtFormpanelComponent);

class Ext_froala_Editor extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_froala_Editor.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_froala_Editor.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_froala_Editor.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_froala_Editor.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'froalaeditor' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'froalaeditor,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'froalaeditor,the' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'froalaeditor,event' },
    { name: 'focusenter', parameters: 'froalaeditor,event' },
    { name: 'focusleave', parameters: 'froalaeditor,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'ready', parameters: 'froalaeditor,the' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'froalaeditor' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_froala_Editor.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtFroalaeditorComponent_1;
class ExtFroalaeditorMetaData extends Ext_froala_Editor {
    static getAll() {
        ExtFroalaeditorMetaData.PROPERTIES = Ext_froala_Editor.getProperties(ExtFroalaeditorMetaData.PROPERTIES);
        ExtFroalaeditorMetaData.EVENTS = Ext_froala_Editor.getEvents(ExtFroalaeditorMetaData.EVENTS);
        ExtFroalaeditorMetaData.EVENTS.forEach((event) => {
            ExtFroalaeditorMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtFroalaeditorMetaData.PROPERTIES = [];
ExtFroalaeditorMetaData.EVENTS = [];
ExtFroalaeditorMetaData.EVENTNAMES = [];
(function () { ExtFroalaeditorMetaData.getAll(); })();
let ExtFroalaeditorComponent = ExtFroalaeditorComponent_1 = class ExtFroalaeditorComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtFroalaeditorMetaData.PROPERTIES, ExtFroalaeditorMetaData.EVENTS);
        this.xtype = 'froalaeditor';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtFroalaeditorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtFroalaeditorComponent = ExtFroalaeditorComponent_1 = __decorate([
    Component({
        selector: 'ext-froalaeditor',
        inputs: ExtFroalaeditorMetaData.PROPERTIES,
        outputs: ExtFroalaeditorMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtFroalaeditorComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtFroalaeditorComponent);

class Ext_froala_EditorField extends Ext_field_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_froala_EditorField.PROPERTIES);
        return Ext_field_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_froala_EditorField.EVENTS);
        return Ext_field_Container.getEvents(events);
    }
}
Ext_froala_EditorField.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_froala_EditorField.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'froalaeditorfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'froalaeditorfield,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'froalaeditorfield,the' },
    { name: 'click', parameters: 'e' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'froalaeditorfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'froalaeditorfield,error' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'froalaeditorfield,event' },
    { name: 'focusenter', parameters: 'froalaeditorfield,event' },
    { name: 'focusleave', parameters: 'froalaeditorfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keyup', parameters: 'e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'ready', parameters: 'froalaeditorfield,the' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'froalaeditorfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_froala_EditorField.EVENTNAMES);
//    return Ext_field_Container.getEventNames(eventnames);
//}

var ExtFroalaeditorfieldComponent_1;
class ExtFroalaeditorfieldMetaData extends Ext_froala_EditorField {
    static getAll() {
        ExtFroalaeditorfieldMetaData.PROPERTIES = Ext_froala_EditorField.getProperties(ExtFroalaeditorfieldMetaData.PROPERTIES);
        ExtFroalaeditorfieldMetaData.EVENTS = Ext_froala_EditorField.getEvents(ExtFroalaeditorfieldMetaData.EVENTS);
        ExtFroalaeditorfieldMetaData.EVENTS.forEach((event) => {
            ExtFroalaeditorfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtFroalaeditorfieldMetaData.PROPERTIES = [];
ExtFroalaeditorfieldMetaData.EVENTS = [];
ExtFroalaeditorfieldMetaData.EVENTNAMES = [];
(function () { ExtFroalaeditorfieldMetaData.getAll(); })();
let ExtFroalaeditorfieldComponent = ExtFroalaeditorfieldComponent_1 = class ExtFroalaeditorfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtFroalaeditorfieldMetaData.PROPERTIES, ExtFroalaeditorfieldMetaData.EVENTS);
        this.xtype = 'froalaeditorfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtFroalaeditorfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtFroalaeditorfieldComponent = ExtFroalaeditorfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-froalaeditorfield',
        inputs: ExtFroalaeditorfieldMetaData.PROPERTIES,
        outputs: ExtFroalaeditorfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtFroalaeditorfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtFroalaeditorfieldComponent);

class Ext_grid_cell_Base extends Ext_Widget {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_cell_Base.PROPERTIES);
        return Ext_Widget.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_cell_Base.EVENTS);
        return Ext_Widget.getEvents(events);
    }
}
Ext_grid_cell_Base.PROPERTIES = [
    'align',
    'bodyCls',
    'bodyStyle',
    'cellCls',
    'cls',
    'column',
    'hidden',
    'record',
    'selectable',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_cell_Base.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'gridcellbase' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'gridcellbase,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'gridcellbase,event' },
    { name: 'focusenter', parameters: 'gridcellbase,event' },
    { name: 'focusleave', parameters: 'gridcellbase,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'gridcellbase' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_cell_Base.EVENTNAMES);
//    return Ext_Widget.getEventNames(eventnames);
//}

var ExtGridcellbaseComponent_1;
class ExtGridcellbaseMetaData extends Ext_grid_cell_Base {
    static getAll() {
        ExtGridcellbaseMetaData.PROPERTIES = Ext_grid_cell_Base.getProperties(ExtGridcellbaseMetaData.PROPERTIES);
        ExtGridcellbaseMetaData.EVENTS = Ext_grid_cell_Base.getEvents(ExtGridcellbaseMetaData.EVENTS);
        ExtGridcellbaseMetaData.EVENTS.forEach((event) => {
            ExtGridcellbaseMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGridcellbaseMetaData.PROPERTIES = [];
ExtGridcellbaseMetaData.EVENTS = [];
ExtGridcellbaseMetaData.EVENTNAMES = [];
(function () { ExtGridcellbaseMetaData.getAll(); })();
let ExtGridcellbaseComponent = ExtGridcellbaseComponent_1 = class ExtGridcellbaseComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGridcellbaseMetaData.PROPERTIES, ExtGridcellbaseMetaData.EVENTS);
        this.xtype = 'gridcellbase';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGridcellbaseComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGridcellbaseComponent = ExtGridcellbaseComponent_1 = __decorate([
    Component({
        selector: 'ext-gridcellbase',
        inputs: ExtGridcellbaseMetaData.PROPERTIES,
        outputs: ExtGridcellbaseMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGridcellbaseComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGridcellbaseComponent);

class Ext_grid_cell_Text extends Ext_grid_cell_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_cell_Text.PROPERTIES);
        return Ext_grid_cell_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_cell_Text.EVENTS);
        return Ext_grid_cell_Base.getEvents(events);
    }
}
Ext_grid_cell_Text.PROPERTIES = [
    'encodeHtml',
    'rawValue',
    'zeroValue',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_cell_Text.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'textcell' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'textcell,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'textcell,event' },
    { name: 'focusenter', parameters: 'textcell,event' },
    { name: 'focusleave', parameters: 'textcell,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'textcell' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_cell_Text.EVENTNAMES);
//    return Ext_grid_cell_Base.getEventNames(eventnames);
//}

class Ext_grid_cell_Boolean extends Ext_grid_cell_Text {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_cell_Boolean.PROPERTIES);
        return Ext_grid_cell_Text.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_cell_Boolean.EVENTS);
        return Ext_grid_cell_Text.getEvents(events);
    }
}
Ext_grid_cell_Boolean.PROPERTIES = [
    'falseText',
    'trueText',
    'undefinedText',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_cell_Boolean.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'booleancell' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'booleancell,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'booleancell,event' },
    { name: 'focusenter', parameters: 'booleancell,event' },
    { name: 'focusleave', parameters: 'booleancell,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'booleancell' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_cell_Boolean.EVENTNAMES);
//    return Ext_grid_cell_Text.getEventNames(eventnames);
//}

var ExtBooleancellComponent_1;
class ExtBooleancellMetaData extends Ext_grid_cell_Boolean {
    static getAll() {
        ExtBooleancellMetaData.PROPERTIES = Ext_grid_cell_Boolean.getProperties(ExtBooleancellMetaData.PROPERTIES);
        ExtBooleancellMetaData.EVENTS = Ext_grid_cell_Boolean.getEvents(ExtBooleancellMetaData.EVENTS);
        ExtBooleancellMetaData.EVENTS.forEach((event) => {
            ExtBooleancellMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtBooleancellMetaData.PROPERTIES = [];
ExtBooleancellMetaData.EVENTS = [];
ExtBooleancellMetaData.EVENTNAMES = [];
(function () { ExtBooleancellMetaData.getAll(); })();
let ExtBooleancellComponent = ExtBooleancellComponent_1 = class ExtBooleancellComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtBooleancellMetaData.PROPERTIES, ExtBooleancellMetaData.EVENTS);
        this.xtype = 'booleancell';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtBooleancellComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtBooleancellComponent = ExtBooleancellComponent_1 = __decorate([
    Component({
        selector: 'ext-booleancell',
        inputs: ExtBooleancellMetaData.PROPERTIES,
        outputs: ExtBooleancellMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtBooleancellComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtBooleancellComponent);

class Ext_grid_cell_Cell extends Ext_grid_cell_Text {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_cell_Cell.PROPERTIES);
        return Ext_grid_cell_Text.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_cell_Cell.EVENTS);
        return Ext_grid_cell_Text.getEvents(events);
    }
}
Ext_grid_cell_Cell.PROPERTIES = [
    'formatter',
    'renderer',
    'scope',
    'tpl',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_cell_Cell.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'gridcell' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'gridcell,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'gridcell,event' },
    { name: 'focusenter', parameters: 'gridcell,event' },
    { name: 'focusleave', parameters: 'gridcell,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'gridcell' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_cell_Cell.EVENTNAMES);
//    return Ext_grid_cell_Text.getEventNames(eventnames);
//}

var ExtGridcellComponent_1;
class ExtGridcellMetaData extends Ext_grid_cell_Cell {
    static getAll() {
        ExtGridcellMetaData.PROPERTIES = Ext_grid_cell_Cell.getProperties(ExtGridcellMetaData.PROPERTIES);
        ExtGridcellMetaData.EVENTS = Ext_grid_cell_Cell.getEvents(ExtGridcellMetaData.EVENTS);
        ExtGridcellMetaData.EVENTS.forEach((event) => {
            ExtGridcellMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGridcellMetaData.PROPERTIES = [];
ExtGridcellMetaData.EVENTS = [];
ExtGridcellMetaData.EVENTNAMES = [];
(function () { ExtGridcellMetaData.getAll(); })();
let ExtGridcellComponent = ExtGridcellComponent_1 = class ExtGridcellComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGridcellMetaData.PROPERTIES, ExtGridcellMetaData.EVENTS);
        this.xtype = 'gridcell';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGridcellComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGridcellComponent = ExtGridcellComponent_1 = __decorate([
    Component({
        selector: 'ext-gridcell',
        inputs: ExtGridcellMetaData.PROPERTIES,
        outputs: ExtGridcellMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGridcellComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGridcellComponent);

class Ext_grid_cell_Check extends Ext_grid_cell_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_cell_Check.PROPERTIES);
        return Ext_grid_cell_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_cell_Check.EVENTS);
        return Ext_grid_cell_Base.getEvents(events);
    }
}
Ext_grid_cell_Check.PROPERTIES = [
    'disabled',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_cell_Check.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'checkcell' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'checkcell,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'checkcell,event' },
    { name: 'focusenter', parameters: 'checkcell,event' },
    { name: 'focusleave', parameters: 'checkcell,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'checkcell' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_cell_Check.EVENTNAMES);
//    return Ext_grid_cell_Base.getEventNames(eventnames);
//}

var ExtCheckcellComponent_1;
class ExtCheckcellMetaData extends Ext_grid_cell_Check {
    static getAll() {
        ExtCheckcellMetaData.PROPERTIES = Ext_grid_cell_Check.getProperties(ExtCheckcellMetaData.PROPERTIES);
        ExtCheckcellMetaData.EVENTS = Ext_grid_cell_Check.getEvents(ExtCheckcellMetaData.EVENTS);
        ExtCheckcellMetaData.EVENTS.forEach((event) => {
            ExtCheckcellMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCheckcellMetaData.PROPERTIES = [];
ExtCheckcellMetaData.EVENTS = [];
ExtCheckcellMetaData.EVENTNAMES = [];
(function () { ExtCheckcellMetaData.getAll(); })();
let ExtCheckcellComponent = ExtCheckcellComponent_1 = class ExtCheckcellComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCheckcellMetaData.PROPERTIES, ExtCheckcellMetaData.EVENTS);
        this.xtype = 'checkcell';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCheckcellComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCheckcellComponent = ExtCheckcellComponent_1 = __decorate([
    Component({
        selector: 'ext-checkcell',
        inputs: ExtCheckcellMetaData.PROPERTIES,
        outputs: ExtCheckcellMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCheckcellComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCheckcellComponent);

class Ext_grid_cell_Date extends Ext_grid_cell_Text {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_cell_Date.PROPERTIES);
        return Ext_grid_cell_Text.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_cell_Date.EVENTS);
        return Ext_grid_cell_Text.getEvents(events);
    }
}
Ext_grid_cell_Date.PROPERTIES = [
    'format',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_cell_Date.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'datecell' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'datecell,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'datecell,event' },
    { name: 'focusenter', parameters: 'datecell,event' },
    { name: 'focusleave', parameters: 'datecell,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'datecell' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_cell_Date.EVENTNAMES);
//    return Ext_grid_cell_Text.getEventNames(eventnames);
//}

var ExtDatecellComponent_1;
class ExtDatecellMetaData extends Ext_grid_cell_Date {
    static getAll() {
        ExtDatecellMetaData.PROPERTIES = Ext_grid_cell_Date.getProperties(ExtDatecellMetaData.PROPERTIES);
        ExtDatecellMetaData.EVENTS = Ext_grid_cell_Date.getEvents(ExtDatecellMetaData.EVENTS);
        ExtDatecellMetaData.EVENTS.forEach((event) => {
            ExtDatecellMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtDatecellMetaData.PROPERTIES = [];
ExtDatecellMetaData.EVENTS = [];
ExtDatecellMetaData.EVENTNAMES = [];
(function () { ExtDatecellMetaData.getAll(); })();
let ExtDatecellComponent = ExtDatecellComponent_1 = class ExtDatecellComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtDatecellMetaData.PROPERTIES, ExtDatecellMetaData.EVENTS);
        this.xtype = 'datecell';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtDatecellComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtDatecellComponent = ExtDatecellComponent_1 = __decorate([
    Component({
        selector: 'ext-datecell',
        inputs: ExtDatecellMetaData.PROPERTIES,
        outputs: ExtDatecellMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtDatecellComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtDatecellComponent);

class Ext_grid_cell_Number extends Ext_grid_cell_Text {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_cell_Number.PROPERTIES);
        return Ext_grid_cell_Text.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_cell_Number.EVENTS);
        return Ext_grid_cell_Text.getEvents(events);
    }
}
Ext_grid_cell_Number.PROPERTIES = [
    'format',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_cell_Number.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'numbercell' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'numbercell,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'numbercell,event' },
    { name: 'focusenter', parameters: 'numbercell,event' },
    { name: 'focusleave', parameters: 'numbercell,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'numbercell' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_cell_Number.EVENTNAMES);
//    return Ext_grid_cell_Text.getEventNames(eventnames);
//}

var ExtNumbercellComponent_1;
class ExtNumbercellMetaData extends Ext_grid_cell_Number {
    static getAll() {
        ExtNumbercellMetaData.PROPERTIES = Ext_grid_cell_Number.getProperties(ExtNumbercellMetaData.PROPERTIES);
        ExtNumbercellMetaData.EVENTS = Ext_grid_cell_Number.getEvents(ExtNumbercellMetaData.EVENTS);
        ExtNumbercellMetaData.EVENTS.forEach((event) => {
            ExtNumbercellMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtNumbercellMetaData.PROPERTIES = [];
ExtNumbercellMetaData.EVENTS = [];
ExtNumbercellMetaData.EVENTNAMES = [];
(function () { ExtNumbercellMetaData.getAll(); })();
let ExtNumbercellComponent = ExtNumbercellComponent_1 = class ExtNumbercellComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtNumbercellMetaData.PROPERTIES, ExtNumbercellMetaData.EVENTS);
        this.xtype = 'numbercell';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtNumbercellComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtNumbercellComponent = ExtNumbercellComponent_1 = __decorate([
    Component({
        selector: 'ext-numbercell',
        inputs: ExtNumbercellMetaData.PROPERTIES,
        outputs: ExtNumbercellMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtNumbercellComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtNumbercellComponent);

class Ext_grid_cell_RowNumberer extends Ext_grid_cell_Number {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_cell_RowNumberer.PROPERTIES);
        return Ext_grid_cell_Number.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_cell_RowNumberer.EVENTS);
        return Ext_grid_cell_Number.getEvents(events);
    }
}
Ext_grid_cell_RowNumberer.PROPERTIES = [
    'format',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_cell_RowNumberer.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'rownumberercell' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'rownumberercell,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'rownumberercell,event' },
    { name: 'focusenter', parameters: 'rownumberercell,event' },
    { name: 'focusleave', parameters: 'rownumberercell,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'rownumberercell' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_cell_RowNumberer.EVENTNAMES);
//    return Ext_grid_cell_Number.getEventNames(eventnames);
//}

var ExtRownumberercellComponent_1;
class ExtRownumberercellMetaData extends Ext_grid_cell_RowNumberer {
    static getAll() {
        ExtRownumberercellMetaData.PROPERTIES = Ext_grid_cell_RowNumberer.getProperties(ExtRownumberercellMetaData.PROPERTIES);
        ExtRownumberercellMetaData.EVENTS = Ext_grid_cell_RowNumberer.getEvents(ExtRownumberercellMetaData.EVENTS);
        ExtRownumberercellMetaData.EVENTS.forEach((event) => {
            ExtRownumberercellMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtRownumberercellMetaData.PROPERTIES = [];
ExtRownumberercellMetaData.EVENTS = [];
ExtRownumberercellMetaData.EVENTNAMES = [];
(function () { ExtRownumberercellMetaData.getAll(); })();
let ExtRownumberercellComponent = ExtRownumberercellComponent_1 = class ExtRownumberercellComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtRownumberercellMetaData.PROPERTIES, ExtRownumberercellMetaData.EVENTS);
        this.xtype = 'rownumberercell';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtRownumberercellComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtRownumberercellComponent = ExtRownumberercellComponent_1 = __decorate([
    Component({
        selector: 'ext-rownumberercell',
        inputs: ExtRownumberercellMetaData.PROPERTIES,
        outputs: ExtRownumberercellMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtRownumberercellComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtRownumberercellComponent);

var ExtTextcellComponent_1;
class ExtTextcellMetaData extends Ext_grid_cell_Text {
    static getAll() {
        ExtTextcellMetaData.PROPERTIES = Ext_grid_cell_Text.getProperties(ExtTextcellMetaData.PROPERTIES);
        ExtTextcellMetaData.EVENTS = Ext_grid_cell_Text.getEvents(ExtTextcellMetaData.EVENTS);
        ExtTextcellMetaData.EVENTS.forEach((event) => {
            ExtTextcellMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTextcellMetaData.PROPERTIES = [];
ExtTextcellMetaData.EVENTS = [];
ExtTextcellMetaData.EVENTNAMES = [];
(function () { ExtTextcellMetaData.getAll(); })();
let ExtTextcellComponent = ExtTextcellComponent_1 = class ExtTextcellComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTextcellMetaData.PROPERTIES, ExtTextcellMetaData.EVENTS);
        this.xtype = 'textcell';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTextcellComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTextcellComponent = ExtTextcellComponent_1 = __decorate([
    Component({
        selector: 'ext-textcell',
        inputs: ExtTextcellMetaData.PROPERTIES,
        outputs: ExtTextcellMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTextcellComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTextcellComponent);

class Ext_grid_cell_Tree extends Ext_grid_cell_Cell {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_cell_Tree.PROPERTIES);
        return Ext_grid_cell_Cell.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_cell_Tree.EVENTS);
        return Ext_grid_cell_Cell.getEvents(events);
    }
}
Ext_grid_cell_Tree.PROPERTIES = [
    'autoCheckChildren',
    'checkable',
    'checkableField',
    'checkedField',
    'checkOnTriTap',
    'enableTri',
    'iconCls',
    'iconClsProperty',
    'text',
    'toolDefaults',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_cell_Tree.EVENTS = [
    { name: 'beforecheckchange', parameters: 'treecell,checked,current,record,e' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'treecell' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'treecell,event' },
    { name: 'checkchange', parameters: 'treecell,checked,record,e' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'treecell,event' },
    { name: 'focusenter', parameters: 'treecell,event' },
    { name: 'focusleave', parameters: 'treecell,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'treecell' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_cell_Tree.EVENTNAMES);
//    return Ext_grid_cell_Cell.getEventNames(eventnames);
//}

var ExtTreecellComponent_1;
class ExtTreecellMetaData extends Ext_grid_cell_Tree {
    static getAll() {
        ExtTreecellMetaData.PROPERTIES = Ext_grid_cell_Tree.getProperties(ExtTreecellMetaData.PROPERTIES);
        ExtTreecellMetaData.EVENTS = Ext_grid_cell_Tree.getEvents(ExtTreecellMetaData.EVENTS);
        ExtTreecellMetaData.EVENTS.forEach((event) => {
            ExtTreecellMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTreecellMetaData.PROPERTIES = [];
ExtTreecellMetaData.EVENTS = [];
ExtTreecellMetaData.EVENTNAMES = [];
(function () { ExtTreecellMetaData.getAll(); })();
let ExtTreecellComponent = ExtTreecellComponent_1 = class ExtTreecellComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTreecellMetaData.PROPERTIES, ExtTreecellMetaData.EVENTS);
        this.xtype = 'treecell';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTreecellComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTreecellComponent = ExtTreecellComponent_1 = __decorate([
    Component({
        selector: 'ext-treecell',
        inputs: ExtTreecellMetaData.PROPERTIES,
        outputs: ExtTreecellMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTreecellComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTreecellComponent);

class Ext_grid_cell_Widget extends Ext_grid_cell_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_cell_Widget.PROPERTIES);
        return Ext_grid_cell_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_cell_Widget.EVENTS);
        return Ext_grid_cell_Base.getEvents(events);
    }
}
Ext_grid_cell_Widget.PROPERTIES = [
    'align',
    'forceWidth',
    'selectable',
    'widget',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_cell_Widget.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'widgetcell' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'widgetcell,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'widgetcell,event' },
    { name: 'focusenter', parameters: 'widgetcell,event' },
    { name: 'focusleave', parameters: 'widgetcell,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'widgetcell' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_cell_Widget.EVENTNAMES);
//    return Ext_grid_cell_Base.getEventNames(eventnames);
//}

var ExtWidgetcellComponent_1;
class ExtWidgetcellMetaData extends Ext_grid_cell_Widget {
    static getAll() {
        ExtWidgetcellMetaData.PROPERTIES = Ext_grid_cell_Widget.getProperties(ExtWidgetcellMetaData.PROPERTIES);
        ExtWidgetcellMetaData.EVENTS = Ext_grid_cell_Widget.getEvents(ExtWidgetcellMetaData.EVENTS);
        ExtWidgetcellMetaData.EVENTS.forEach((event) => {
            ExtWidgetcellMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtWidgetcellMetaData.PROPERTIES = [];
ExtWidgetcellMetaData.EVENTS = [];
ExtWidgetcellMetaData.EVENTNAMES = [];
(function () { ExtWidgetcellMetaData.getAll(); })();
let ExtWidgetcellComponent = ExtWidgetcellComponent_1 = class ExtWidgetcellComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtWidgetcellMetaData.PROPERTIES, ExtWidgetcellMetaData.EVENTS);
        this.xtype = 'widgetcell';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtWidgetcellComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtWidgetcellComponent = ExtWidgetcellComponent_1 = __decorate([
    Component({
        selector: 'ext-widgetcell',
        inputs: ExtWidgetcellMetaData.PROPERTIES,
        outputs: ExtWidgetcellMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtWidgetcellComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtWidgetcellComponent);

class Ext_grid_CellEditor extends Ext_Editor {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_CellEditor.PROPERTIES);
        return Ext_Editor.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_CellEditor.EVENTS);
        return Ext_Editor.getEvents(events);
    }
}
Ext_grid_CellEditor.PROPERTIES = [
    'autoPin',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_CellEditor.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,celleditor,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'celleditor,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecomplete', parameters: 'celleditor,value,startValue' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestartedit', parameters: 'celleditor,boundEl,value' },
    { name: 'beforetofront', parameters: 'celleditor' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'celleditor,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'canceledit', parameters: 'celleditor,value,startValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'complete', parameters: 'celleditor,value,startValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,celleditor,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'celleditor,event' },
    { name: 'focusenter', parameters: 'celleditor,event' },
    { name: 'focusleave', parameters: 'celleditor,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'celleditor,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'celleditor,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'celleditor,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'specialkey', parameters: 'celleditor,field,event' },
    { name: 'startedit', parameters: 'celleditor,boundEl,value' },
    { name: 'tofront', parameters: 'celleditor' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_CellEditor.EVENTNAMES);
//    return Ext_Editor.getEventNames(eventnames);
//}

var ExtCelleditorComponent_1;
class ExtCelleditorMetaData extends Ext_grid_CellEditor {
    static getAll() {
        ExtCelleditorMetaData.PROPERTIES = Ext_grid_CellEditor.getProperties(ExtCelleditorMetaData.PROPERTIES);
        ExtCelleditorMetaData.EVENTS = Ext_grid_CellEditor.getEvents(ExtCelleditorMetaData.EVENTS);
        ExtCelleditorMetaData.EVENTS.forEach((event) => {
            ExtCelleditorMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCelleditorMetaData.PROPERTIES = [];
ExtCelleditorMetaData.EVENTS = [];
ExtCelleditorMetaData.EVENTNAMES = [];
(function () { ExtCelleditorMetaData.getAll(); })();
let ExtCelleditorComponent = ExtCelleditorComponent_1 = class ExtCelleditorComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCelleditorMetaData.PROPERTIES, ExtCelleditorMetaData.EVENTS);
        this.xtype = 'celleditor';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCelleditorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCelleditorComponent = ExtCelleditorComponent_1 = __decorate([
    Component({
        selector: 'ext-celleditor',
        inputs: ExtCelleditorMetaData.PROPERTIES,
        outputs: ExtCelleditorMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCelleditorComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCelleditorComponent);

class Ext_grid_HeaderContainer extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_HeaderContainer.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_HeaderContainer.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_grid_HeaderContainer.PROPERTIES = [
    'columns',
    'defaultColumnUI',
    'reserveScrollbar',
    'sortable',
    'verticalOverflow',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_HeaderContainer.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,headercontainer,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'headercontainer,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'headercontainer' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'headercontainer,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,headercontainer,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'headercontainer,event' },
    { name: 'focusenter', parameters: 'headercontainer,event' },
    { name: 'focusleave', parameters: 'headercontainer,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'headercontainer,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'headercontainer,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'headercontainer,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'headercontainer' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_HeaderContainer.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

class Ext_grid_column_Column extends Ext_grid_HeaderContainer {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_column_Column.PROPERTIES);
        return Ext_grid_HeaderContainer.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_column_Column.EVENTS);
        return Ext_grid_HeaderContainer.getEvents(events);
    }
}
Ext_grid_column_Column.PROPERTIES = [
    'align',
    'cell',
    'computedWidth',
    'dataIndex',
    'defaultEditor',
    'defaultWidth',
    'depends',
    'editable',
    'editor',
    'editorDefaults',
    'exportRenderer',
    'exportStyle',
    'exportSummaryRenderer',
    'filter',
    'formatter',
    'groupable',
    'grouper',
    'groupHeaderTpl',
    'hideable',
    'hideShowMenuItem',
    'ignore',
    'ignoreExport',
    'locked',
    'menu',
    'menuDisabled',
    'renderer',
    'resizable',
    'scope',
    'scratchCell',
    'sortable',
    'sorter',
    'summary',
    'summaryCell',
    'summaryDataIndex',
    'summaryFormatter',
    'summaryRenderer',
    'text',
    'tpl',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_column_Column.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,gridcolumn,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'gridcolumn,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'gridcolumn' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'gridcolumn,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,gridcolumn,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'gridcolumn,event' },
    { name: 'focusenter', parameters: 'gridcolumn,event' },
    { name: 'focusleave', parameters: 'gridcolumn,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'gridcolumn,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'gridcolumn,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'gridcolumn,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'gridcolumn' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_column_Column.EVENTNAMES);
//    return Ext_grid_HeaderContainer.getEventNames(eventnames);
//}

class Ext_grid_column_Boolean extends Ext_grid_column_Column {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_column_Boolean.PROPERTIES);
        return Ext_grid_column_Column.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_column_Boolean.EVENTS);
        return Ext_grid_column_Column.getEvents(events);
    }
}
Ext_grid_column_Boolean.PROPERTIES = [
    'falseText',
    'trueText',
    'undefinedText',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_column_Boolean.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,booleancolumn,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'booleancolumn,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'booleancolumn' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'booleancolumn,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,booleancolumn,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'booleancolumn,event' },
    { name: 'focusenter', parameters: 'booleancolumn,event' },
    { name: 'focusleave', parameters: 'booleancolumn,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'booleancolumn,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'booleancolumn,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'booleancolumn,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'booleancolumn' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_column_Boolean.EVENTNAMES);
//    return Ext_grid_column_Column.getEventNames(eventnames);
//}

var ExtBooleancolumnComponent_1;
class ExtBooleancolumnMetaData extends Ext_grid_column_Boolean {
    static getAll() {
        ExtBooleancolumnMetaData.PROPERTIES = Ext_grid_column_Boolean.getProperties(ExtBooleancolumnMetaData.PROPERTIES);
        ExtBooleancolumnMetaData.EVENTS = Ext_grid_column_Boolean.getEvents(ExtBooleancolumnMetaData.EVENTS);
        ExtBooleancolumnMetaData.EVENTS.forEach((event) => {
            ExtBooleancolumnMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtBooleancolumnMetaData.PROPERTIES = [];
ExtBooleancolumnMetaData.EVENTS = [];
ExtBooleancolumnMetaData.EVENTNAMES = [];
(function () { ExtBooleancolumnMetaData.getAll(); })();
let ExtBooleancolumnComponent = ExtBooleancolumnComponent_1 = class ExtBooleancolumnComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtBooleancolumnMetaData.PROPERTIES, ExtBooleancolumnMetaData.EVENTS);
        this.xtype = 'booleancolumn';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtBooleancolumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtBooleancolumnComponent = ExtBooleancolumnComponent_1 = __decorate([
    Component({
        selector: 'ext-booleancolumn',
        inputs: ExtBooleancolumnMetaData.PROPERTIES,
        outputs: ExtBooleancolumnMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtBooleancolumnComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtBooleancolumnComponent);

class Ext_grid_column_Check extends Ext_grid_column_Column {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_column_Check.PROPERTIES);
        return Ext_grid_column_Column.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_column_Check.EVENTS);
        return Ext_grid_column_Column.getEvents(events);
    }
}
Ext_grid_column_Check.PROPERTIES = [
    'align',
    'cell',
    'headerCheckbox',
    'headerCheckboxAlign',
    'ignoreExport',
    'stopSelection',
    'text',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_column_Check.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,checkcolumn,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'checkcolumn,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecheckchange', parameters: 'checkcolumn,rowIndex,checked,record,e' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'checkcolumn' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'checkcolumn,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'checkchange', parameters: 'checkcolumn,rowIndex,checked,record,e' },
    { name: 'deactivate', parameters: 'oldActiveItem,checkcolumn,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'checkcolumn,event' },
    { name: 'focusenter', parameters: 'checkcolumn,event' },
    { name: 'focusleave', parameters: 'checkcolumn,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'checkcolumn,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'checkcolumn,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'checkcolumn,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'checkcolumn' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_column_Check.EVENTNAMES);
//    return Ext_grid_column_Column.getEventNames(eventnames);
//}

var ExtCheckcolumnComponent_1;
class ExtCheckcolumnMetaData extends Ext_grid_column_Check {
    static getAll() {
        ExtCheckcolumnMetaData.PROPERTIES = Ext_grid_column_Check.getProperties(ExtCheckcolumnMetaData.PROPERTIES);
        ExtCheckcolumnMetaData.EVENTS = Ext_grid_column_Check.getEvents(ExtCheckcolumnMetaData.EVENTS);
        ExtCheckcolumnMetaData.EVENTS.forEach((event) => {
            ExtCheckcolumnMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCheckcolumnMetaData.PROPERTIES = [];
ExtCheckcolumnMetaData.EVENTS = [];
ExtCheckcolumnMetaData.EVENTNAMES = [];
(function () { ExtCheckcolumnMetaData.getAll(); })();
let ExtCheckcolumnComponent = ExtCheckcolumnComponent_1 = class ExtCheckcolumnComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCheckcolumnMetaData.PROPERTIES, ExtCheckcolumnMetaData.EVENTS);
        this.xtype = 'checkcolumn';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCheckcolumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCheckcolumnComponent = ExtCheckcolumnComponent_1 = __decorate([
    Component({
        selector: 'ext-checkcolumn',
        inputs: ExtCheckcolumnMetaData.PROPERTIES,
        outputs: ExtCheckcolumnMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCheckcolumnComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCheckcolumnComponent);

class Ext_grid_column_Template extends Ext_grid_HeaderContainer {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_column_Template.PROPERTIES);
        return Ext_grid_HeaderContainer.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_column_Template.EVENTS);
        return Ext_grid_HeaderContainer.getEvents(events);
    }
}
Ext_grid_column_Template.PROPERTIES = [
    'align',
    'cell',
    'computedWidth',
    'dataIndex',
    'defaultEditor',
    'defaultWidth',
    'depends',
    'editable',
    'editor',
    'editorDefaults',
    'exportRenderer',
    'exportStyle',
    'exportSummaryRenderer',
    'filter',
    'formatter',
    'groupable',
    'grouper',
    'groupHeaderTpl',
    'hideable',
    'hideShowMenuItem',
    'ignore',
    'ignoreExport',
    'locked',
    'menu',
    'menuDisabled',
    'renderer',
    'resizable',
    'scope',
    'scratchCell',
    'sortable',
    'sorter',
    'summary',
    'summaryCell',
    'summaryDataIndex',
    'summaryFormatter',
    'summaryRenderer',
    'text',
    'tpl',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_column_Template.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,gridcolumn,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'gridcolumn,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'gridcolumn' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'gridcolumn,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,gridcolumn,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'gridcolumn,event' },
    { name: 'focusenter', parameters: 'gridcolumn,event' },
    { name: 'focusleave', parameters: 'gridcolumn,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'gridcolumn,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'gridcolumn,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'gridcolumn,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'gridcolumn' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_column_Template.EVENTNAMES);
//    return Ext_grid_HeaderContainer.getEventNames(eventnames);
//}

var ExtGridcolumnComponent_1;
class ExtGridcolumnMetaData extends Ext_grid_column_Template {
    static getAll() {
        ExtGridcolumnMetaData.PROPERTIES = Ext_grid_column_Template.getProperties(ExtGridcolumnMetaData.PROPERTIES);
        ExtGridcolumnMetaData.EVENTS = Ext_grid_column_Template.getEvents(ExtGridcolumnMetaData.EVENTS);
        ExtGridcolumnMetaData.EVENTS.forEach((event) => {
            ExtGridcolumnMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGridcolumnMetaData.PROPERTIES = [];
ExtGridcolumnMetaData.EVENTS = [];
ExtGridcolumnMetaData.EVENTNAMES = [];
(function () { ExtGridcolumnMetaData.getAll(); })();
let ExtGridcolumnComponent = ExtGridcolumnComponent_1 = class ExtGridcolumnComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGridcolumnMetaData.PROPERTIES, ExtGridcolumnMetaData.EVENTS);
        this.xtype = 'gridcolumn';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGridcolumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGridcolumnComponent = ExtGridcolumnComponent_1 = __decorate([
    Component({
        selector: 'ext-gridcolumn',
        inputs: ExtGridcolumnMetaData.PROPERTIES,
        outputs: ExtGridcolumnMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGridcolumnComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGridcolumnComponent);

class Ext_grid_column_Date extends Ext_grid_column_Column {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_column_Date.PROPERTIES);
        return Ext_grid_column_Column.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_column_Date.EVENTS);
        return Ext_grid_column_Column.getEvents(events);
    }
}
Ext_grid_column_Date.PROPERTIES = [
    'format',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_column_Date.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,datecolumn,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'datecolumn,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'datecolumn' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'datecolumn,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,datecolumn,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'datecolumn,event' },
    { name: 'focusenter', parameters: 'datecolumn,event' },
    { name: 'focusleave', parameters: 'datecolumn,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'datecolumn,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'datecolumn,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'datecolumn,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'datecolumn' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_column_Date.EVENTNAMES);
//    return Ext_grid_column_Column.getEventNames(eventnames);
//}

var ExtDatecolumnComponent_1;
class ExtDatecolumnMetaData extends Ext_grid_column_Date {
    static getAll() {
        ExtDatecolumnMetaData.PROPERTIES = Ext_grid_column_Date.getProperties(ExtDatecolumnMetaData.PROPERTIES);
        ExtDatecolumnMetaData.EVENTS = Ext_grid_column_Date.getEvents(ExtDatecolumnMetaData.EVENTS);
        ExtDatecolumnMetaData.EVENTS.forEach((event) => {
            ExtDatecolumnMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtDatecolumnMetaData.PROPERTIES = [];
ExtDatecolumnMetaData.EVENTS = [];
ExtDatecolumnMetaData.EVENTNAMES = [];
(function () { ExtDatecolumnMetaData.getAll(); })();
let ExtDatecolumnComponent = ExtDatecolumnComponent_1 = class ExtDatecolumnComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtDatecolumnMetaData.PROPERTIES, ExtDatecolumnMetaData.EVENTS);
        this.xtype = 'datecolumn';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtDatecolumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtDatecolumnComponent = ExtDatecolumnComponent_1 = __decorate([
    Component({
        selector: 'ext-datecolumn',
        inputs: ExtDatecolumnMetaData.PROPERTIES,
        outputs: ExtDatecolumnMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtDatecolumnComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtDatecolumnComponent);

class Ext_grid_column_Drag extends Ext_grid_column_Column {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_column_Drag.PROPERTIES);
        return Ext_grid_column_Column.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_column_Drag.EVENTS);
        return Ext_grid_column_Column.getEvents(events);
    }
}
Ext_grid_column_Drag.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_column_Drag.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,dragcolumn,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'dragcolumn,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'dragcolumn' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'dragcolumn,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,dragcolumn,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'dragcolumn,event' },
    { name: 'focusenter', parameters: 'dragcolumn,event' },
    { name: 'focusleave', parameters: 'dragcolumn,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'dragcolumn,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'dragcolumn,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'dragcolumn,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'dragcolumn' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_column_Drag.EVENTNAMES);
//    return Ext_grid_column_Column.getEventNames(eventnames);
//}

var ExtDragcolumnComponent_1;
class ExtDragcolumnMetaData extends Ext_grid_column_Drag {
    static getAll() {
        ExtDragcolumnMetaData.PROPERTIES = Ext_grid_column_Drag.getProperties(ExtDragcolumnMetaData.PROPERTIES);
        ExtDragcolumnMetaData.EVENTS = Ext_grid_column_Drag.getEvents(ExtDragcolumnMetaData.EVENTS);
        ExtDragcolumnMetaData.EVENTS.forEach((event) => {
            ExtDragcolumnMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtDragcolumnMetaData.PROPERTIES = [];
ExtDragcolumnMetaData.EVENTS = [];
ExtDragcolumnMetaData.EVENTNAMES = [];
(function () { ExtDragcolumnMetaData.getAll(); })();
let ExtDragcolumnComponent = ExtDragcolumnComponent_1 = class ExtDragcolumnComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtDragcolumnMetaData.PROPERTIES, ExtDragcolumnMetaData.EVENTS);
        this.xtype = 'dragcolumn';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtDragcolumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtDragcolumnComponent = ExtDragcolumnComponent_1 = __decorate([
    Component({
        selector: 'ext-dragcolumn',
        inputs: ExtDragcolumnMetaData.PROPERTIES,
        outputs: ExtDragcolumnMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtDragcolumnComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtDragcolumnComponent);

class Ext_grid_column_Number extends Ext_grid_column_Column {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_column_Number.PROPERTIES);
        return Ext_grid_column_Column.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_column_Number.EVENTS);
        return Ext_grid_column_Column.getEvents(events);
    }
}
Ext_grid_column_Number.PROPERTIES = [
    'format',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_column_Number.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,numbercolumn,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'numbercolumn,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'numbercolumn' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'numbercolumn,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,numbercolumn,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'numbercolumn,event' },
    { name: 'focusenter', parameters: 'numbercolumn,event' },
    { name: 'focusleave', parameters: 'numbercolumn,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'numbercolumn,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'numbercolumn,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'numbercolumn,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'numbercolumn' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_column_Number.EVENTNAMES);
//    return Ext_grid_column_Column.getEventNames(eventnames);
//}

var ExtNumbercolumnComponent_1;
class ExtNumbercolumnMetaData extends Ext_grid_column_Number {
    static getAll() {
        ExtNumbercolumnMetaData.PROPERTIES = Ext_grid_column_Number.getProperties(ExtNumbercolumnMetaData.PROPERTIES);
        ExtNumbercolumnMetaData.EVENTS = Ext_grid_column_Number.getEvents(ExtNumbercolumnMetaData.EVENTS);
        ExtNumbercolumnMetaData.EVENTS.forEach((event) => {
            ExtNumbercolumnMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtNumbercolumnMetaData.PROPERTIES = [];
ExtNumbercolumnMetaData.EVENTS = [];
ExtNumbercolumnMetaData.EVENTNAMES = [];
(function () { ExtNumbercolumnMetaData.getAll(); })();
let ExtNumbercolumnComponent = ExtNumbercolumnComponent_1 = class ExtNumbercolumnComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtNumbercolumnMetaData.PROPERTIES, ExtNumbercolumnMetaData.EVENTS);
        this.xtype = 'numbercolumn';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtNumbercolumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtNumbercolumnComponent = ExtNumbercolumnComponent_1 = __decorate([
    Component({
        selector: 'ext-numbercolumn',
        inputs: ExtNumbercolumnMetaData.PROPERTIES,
        outputs: ExtNumbercolumnMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtNumbercolumnComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtNumbercolumnComponent);

class Ext_grid_column_RowNumberer extends Ext_grid_column_Number {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_column_RowNumberer.PROPERTIES);
        return Ext_grid_column_Number.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_column_RowNumberer.EVENTS);
        return Ext_grid_column_Number.getEvents(events);
    }
}
Ext_grid_column_RowNumberer.PROPERTIES = [
    'menu',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_column_RowNumberer.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,rownumberer,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'rownumberer,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'rownumberer' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'rownumberer,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,rownumberer,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'rownumberer,event' },
    { name: 'focusenter', parameters: 'rownumberer,event' },
    { name: 'focusleave', parameters: 'rownumberer,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'rownumberer,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'rownumberer,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'rownumberer,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'rownumberer' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_column_RowNumberer.EVENTNAMES);
//    return Ext_grid_column_Number.getEventNames(eventnames);
//}

var ExtRownumbererComponent_1;
class ExtRownumbererMetaData extends Ext_grid_column_RowNumberer {
    static getAll() {
        ExtRownumbererMetaData.PROPERTIES = Ext_grid_column_RowNumberer.getProperties(ExtRownumbererMetaData.PROPERTIES);
        ExtRownumbererMetaData.EVENTS = Ext_grid_column_RowNumberer.getEvents(ExtRownumbererMetaData.EVENTS);
        ExtRownumbererMetaData.EVENTS.forEach((event) => {
            ExtRownumbererMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtRownumbererMetaData.PROPERTIES = [];
ExtRownumbererMetaData.EVENTS = [];
ExtRownumbererMetaData.EVENTNAMES = [];
(function () { ExtRownumbererMetaData.getAll(); })();
let ExtRownumbererComponent = ExtRownumbererComponent_1 = class ExtRownumbererComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtRownumbererMetaData.PROPERTIES, ExtRownumbererMetaData.EVENTS);
        this.xtype = 'rownumberer';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtRownumbererComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtRownumbererComponent = ExtRownumbererComponent_1 = __decorate([
    Component({
        selector: 'ext-rownumberer',
        inputs: ExtRownumbererMetaData.PROPERTIES,
        outputs: ExtRownumbererMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtRownumbererComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtRownumbererComponent);

class Ext_grid_column_Selection extends Ext_grid_column_Check {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_column_Selection.PROPERTIES);
        return Ext_grid_column_Check.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_column_Selection.EVENTS);
        return Ext_grid_column_Check.getEvents(events);
    }
}
Ext_grid_column_Selection.PROPERTIES = [
    'stopSelection',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_column_Selection.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,selectioncolumn,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'selectioncolumn,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecheckchange', parameters: 'selectioncolumn,rowIndex,checked,record,e' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'selectioncolumn' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'selectioncolumn,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'checkchange', parameters: 'selectioncolumn,rowIndex,checked,record,e' },
    { name: 'deactivate', parameters: 'oldActiveItem,selectioncolumn,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'selectioncolumn,event' },
    { name: 'focusenter', parameters: 'selectioncolumn,event' },
    { name: 'focusleave', parameters: 'selectioncolumn,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'selectioncolumn,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'selectioncolumn,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'selectioncolumn,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'selectioncolumn' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_column_Selection.EVENTNAMES);
//    return Ext_grid_column_Check.getEventNames(eventnames);
//}

var ExtSelectioncolumnComponent_1;
class ExtSelectioncolumnMetaData extends Ext_grid_column_Selection {
    static getAll() {
        ExtSelectioncolumnMetaData.PROPERTIES = Ext_grid_column_Selection.getProperties(ExtSelectioncolumnMetaData.PROPERTIES);
        ExtSelectioncolumnMetaData.EVENTS = Ext_grid_column_Selection.getEvents(ExtSelectioncolumnMetaData.EVENTS);
        ExtSelectioncolumnMetaData.EVENTS.forEach((event) => {
            ExtSelectioncolumnMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSelectioncolumnMetaData.PROPERTIES = [];
ExtSelectioncolumnMetaData.EVENTS = [];
ExtSelectioncolumnMetaData.EVENTNAMES = [];
(function () { ExtSelectioncolumnMetaData.getAll(); })();
let ExtSelectioncolumnComponent = ExtSelectioncolumnComponent_1 = class ExtSelectioncolumnComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSelectioncolumnMetaData.PROPERTIES, ExtSelectioncolumnMetaData.EVENTS);
        this.xtype = 'selectioncolumn';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSelectioncolumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSelectioncolumnComponent = ExtSelectioncolumnComponent_1 = __decorate([
    Component({
        selector: 'ext-selectioncolumn',
        inputs: ExtSelectioncolumnMetaData.PROPERTIES,
        outputs: ExtSelectioncolumnMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSelectioncolumnComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSelectioncolumnComponent);

class Ext_grid_column_Text extends Ext_grid_column_Column {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_column_Text.PROPERTIES);
        return Ext_grid_column_Column.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_column_Text.EVENTS);
        return Ext_grid_column_Column.getEvents(events);
    }
}
Ext_grid_column_Text.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_column_Text.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,textcolumn,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'textcolumn,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'textcolumn' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'textcolumn,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,textcolumn,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'textcolumn,event' },
    { name: 'focusenter', parameters: 'textcolumn,event' },
    { name: 'focusleave', parameters: 'textcolumn,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'textcolumn,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'textcolumn,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'textcolumn,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'textcolumn' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_column_Text.EVENTNAMES);
//    return Ext_grid_column_Column.getEventNames(eventnames);
//}

var ExtTextcolumnComponent_1;
class ExtTextcolumnMetaData extends Ext_grid_column_Text {
    static getAll() {
        ExtTextcolumnMetaData.PROPERTIES = Ext_grid_column_Text.getProperties(ExtTextcolumnMetaData.PROPERTIES);
        ExtTextcolumnMetaData.EVENTS = Ext_grid_column_Text.getEvents(ExtTextcolumnMetaData.EVENTS);
        ExtTextcolumnMetaData.EVENTS.forEach((event) => {
            ExtTextcolumnMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTextcolumnMetaData.PROPERTIES = [];
ExtTextcolumnMetaData.EVENTS = [];
ExtTextcolumnMetaData.EVENTNAMES = [];
(function () { ExtTextcolumnMetaData.getAll(); })();
let ExtTextcolumnComponent = ExtTextcolumnComponent_1 = class ExtTextcolumnComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTextcolumnMetaData.PROPERTIES, ExtTextcolumnMetaData.EVENTS);
        this.xtype = 'textcolumn';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTextcolumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTextcolumnComponent = ExtTextcolumnComponent_1 = __decorate([
    Component({
        selector: 'ext-textcolumn',
        inputs: ExtTextcolumnMetaData.PROPERTIES,
        outputs: ExtTextcolumnMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTextcolumnComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTextcolumnComponent);

class Ext_grid_column_Tree extends Ext_grid_column_Column {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_column_Tree.PROPERTIES);
        return Ext_grid_column_Column.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_column_Tree.EVENTS);
        return Ext_grid_column_Column.getEvents(events);
    }
}
Ext_grid_column_Tree.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_column_Tree.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,treecolumn,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'treecolumn,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'treecolumn' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'treecolumn,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,treecolumn,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'treecolumn,event' },
    { name: 'focusenter', parameters: 'treecolumn,event' },
    { name: 'focusleave', parameters: 'treecolumn,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'treecolumn,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'treecolumn,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'treecolumn,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'treecolumn' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_column_Tree.EVENTNAMES);
//    return Ext_grid_column_Column.getEventNames(eventnames);
//}

var ExtTreecolumnComponent_1;
class ExtTreecolumnMetaData extends Ext_grid_column_Tree {
    static getAll() {
        ExtTreecolumnMetaData.PROPERTIES = Ext_grid_column_Tree.getProperties(ExtTreecolumnMetaData.PROPERTIES);
        ExtTreecolumnMetaData.EVENTS = Ext_grid_column_Tree.getEvents(ExtTreecolumnMetaData.EVENTS);
        ExtTreecolumnMetaData.EVENTS.forEach((event) => {
            ExtTreecolumnMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTreecolumnMetaData.PROPERTIES = [];
ExtTreecolumnMetaData.EVENTS = [];
ExtTreecolumnMetaData.EVENTNAMES = [];
(function () { ExtTreecolumnMetaData.getAll(); })();
let ExtTreecolumnComponent = ExtTreecolumnComponent_1 = class ExtTreecolumnComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTreecolumnMetaData.PROPERTIES, ExtTreecolumnMetaData.EVENTS);
        this.xtype = 'treecolumn';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTreecolumnComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTreecolumnComponent = ExtTreecolumnComponent_1 = __decorate([
    Component({
        selector: 'ext-treecolumn',
        inputs: ExtTreecolumnMetaData.PROPERTIES,
        outputs: ExtTreecolumnMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTreecolumnComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTreecolumnComponent);

class Ext_grid_Grid extends Ext_dataview_List {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_Grid.PROPERTIES);
        return Ext_dataview_List.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_Grid.EVENTS);
        return Ext_dataview_List.getEvents(events);
    }
}
Ext_grid_Grid.PROPERTIES = [
    'columnLines',
    'columnMenu',
    'columnResize',
    'columns',
    'columnsMenuItem',
    'enableColumnMove',
    'groupHeader',
    'hideHeaders',
    'hideScrollbar',
    'infinite',
    'itemConfig',
    'itemsFocusable',
    'multiColumnSort',
    'pinnedHeader',
    'reserveScrollbar',
    'rowNumbers',
    'scrollable',
    'scrollToTopOnRefresh',
    'selectable',
    'sortable',
    'striped',
    'title',
    'titleBar',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_Grid.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,grid,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecomplete', parameters: 'editor,value,startValue,The' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeedit', parameters: 'sender,location' },
    { name: 'beforegroupcollapse', parameters: 'grid,group' },
    { name: 'beforegroupexpand', parameters: 'grid,group' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeselectionextend', parameters: 'grid,An,extension' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestartedit', parameters: 'editor,boundEl,value,The' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'grid' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'grid,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'canceledit', parameters: 'editor,value,startValue' },
    { name: 'canceledit', parameters: 'sender,location' },
    { name: 'cellselection', parameters: 'grid,selection' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'childdoubletap', parameters: 'grid,location' },
    { name: 'childlongpress', parameters: 'grid,location' },
    { name: 'childmouseenter', parameters: 'grid,location' },
    { name: 'childmouseleave', parameters: 'grid,location' },
    { name: 'childsingletap', parameters: 'grid,location' },
    { name: 'childtap', parameters: 'grid,location' },
    { name: 'childtaphold', parameters: 'grid,location' },
    { name: 'childtouchcancel', parameters: 'grid,location' },
    { name: 'childtouchend', parameters: 'grid,location' },
    { name: 'childtouchmove', parameters: 'grid,location' },
    { name: 'childtouchstart', parameters: 'grid,location' },
    { name: 'columnadd', parameters: 'grid,column,index' },
    { name: 'columnhide', parameters: 'grid,column' },
    { name: 'columnmenucreated', parameters: 'grid,column,menu' },
    { name: 'columnmove', parameters: 'grid,column,fromIndex,toIndex' },
    { name: 'columnremove', parameters: 'grid,column' },
    { name: 'columnresize', parameters: 'grid,column,width' },
    { name: 'columnselection', parameters: 'grid,selection' },
    { name: 'columnshow', parameters: 'grid,column' },
    { name: 'columnsort', parameters: 'grid,column,direction' },
    { name: 'complete', parameters: 'editor,value,startValue,The' },
    { name: 'deactivate', parameters: 'oldActiveItem,grid,newActiveItem' },
    { name: 'deselect', parameters: 'grid,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'disclose', parameters: 'list,record,target,index,event' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'edit', parameters: 'sender,location' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'grid,event' },
    { name: 'focusenter', parameters: 'grid,event' },
    { name: 'focusleave', parameters: 'grid,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'groupcollapse', parameters: 'grid,group' },
    { name: 'groupexpand', parameters: 'grid,group' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemaction', parameters: 'grid,index,record,action' },
    { name: 'itemdoubletap', parameters: 'grid,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'grid,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'grid,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'grid,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'grid,index,target,record,e' },
    { name: 'itemswipe', parameters: 'grid,index,target,record,e' },
    { name: 'itemtap', parameters: 'grid,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'grid,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'grid,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'grid,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'grid,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'grid,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'grid,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'grid' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'grid,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'grid,selected' },
    { name: 'selectionextenderdrag', parameters: 'grid,An,extension' },
    { name: 'show', parameters: 'sender' },
    { name: 'specialkey', parameters: 'editor,field,event' },
    { name: 'startedit', parameters: 'editor,boundEl,value,The' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'grid' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'validateedit', parameters: 'sender,location' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_Grid.EVENTNAMES);
//    return Ext_dataview_List.getEventNames(eventnames);
//}

var ExtGridComponent_1;
class ExtGridMetaData extends Ext_grid_Grid {
    static getAll() {
        ExtGridMetaData.PROPERTIES = Ext_grid_Grid.getProperties(ExtGridMetaData.PROPERTIES);
        ExtGridMetaData.EVENTS = Ext_grid_Grid.getEvents(ExtGridMetaData.EVENTS);
        ExtGridMetaData.EVENTS.forEach((event) => {
            ExtGridMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGridMetaData.PROPERTIES = [];
ExtGridMetaData.EVENTS = [];
ExtGridMetaData.EVENTNAMES = [];
(function () { ExtGridMetaData.getAll(); })();
let ExtGridComponent = ExtGridComponent_1 = class ExtGridComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGridMetaData.PROPERTIES, ExtGridMetaData.EVENTS);
        this.xtype = 'grid';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGridComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGridComponent = ExtGridComponent_1 = __decorate([
    Component({
        selector: 'ext-grid',
        inputs: ExtGridMetaData.PROPERTIES,
        outputs: ExtGridMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGridComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGridComponent);

var ExtHeadercontainerComponent_1;
class ExtHeadercontainerMetaData extends Ext_grid_HeaderContainer {
    static getAll() {
        ExtHeadercontainerMetaData.PROPERTIES = Ext_grid_HeaderContainer.getProperties(ExtHeadercontainerMetaData.PROPERTIES);
        ExtHeadercontainerMetaData.EVENTS = Ext_grid_HeaderContainer.getEvents(ExtHeadercontainerMetaData.EVENTS);
        ExtHeadercontainerMetaData.EVENTS.forEach((event) => {
            ExtHeadercontainerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtHeadercontainerMetaData.PROPERTIES = [];
ExtHeadercontainerMetaData.EVENTS = [];
ExtHeadercontainerMetaData.EVENTNAMES = [];
(function () { ExtHeadercontainerMetaData.getAll(); })();
let ExtHeadercontainerComponent = ExtHeadercontainerComponent_1 = class ExtHeadercontainerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtHeadercontainerMetaData.PROPERTIES, ExtHeadercontainerMetaData.EVENTS);
        this.xtype = 'headercontainer';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtHeadercontainerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtHeadercontainerComponent = ExtHeadercontainerComponent_1 = __decorate([
    Component({
        selector: 'ext-headercontainer',
        inputs: ExtHeadercontainerMetaData.PROPERTIES,
        outputs: ExtHeadercontainerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtHeadercontainerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtHeadercontainerComponent);

class Ext_grid_LockedGrid extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_LockedGrid.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_LockedGrid.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_grid_LockedGrid.PROPERTIES = [
    'columnMenu',
    'columns',
    'defaultLockedRegion',
    'enableColumnMove',
    'gridDefaults',
    'grouped',
    'hideHeaders',
    'itemConfig',
    'leftGridDefaults',
    'regions',
    'rightGridDefaults',
    'store',
    'variableHeights',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_LockedGrid.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,lockedgrid,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'lockedgrid,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'lockedgrid' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'lockedgrid' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'lockedgrid,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'lockedgrid' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'lockedgrid,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'lockedgrid' },
    { name: 'deactivate', parameters: 'oldActiveItem,lockedgrid,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'lockedgrid' },
    { name: 'drawershow', parameters: 'lockedgrid' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'lockedgrid' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'lockedgrid,event' },
    { name: 'focusenter', parameters: 'lockedgrid,event' },
    { name: 'focusleave', parameters: 'lockedgrid,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'lockedgrid,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'lockedgrid,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'lockedgrid,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'lockedgrid,context' },
    { name: 'resizedragcancel', parameters: 'lockedgrid,context' },
    { name: 'resizedragend', parameters: 'lockedgrid,context' },
    { name: 'resizedragstart', parameters: 'lockedgrid,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'lockedgrid' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_LockedGrid.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

var ExtLockedgridComponent_1;
class ExtLockedgridMetaData extends Ext_grid_LockedGrid {
    static getAll() {
        ExtLockedgridMetaData.PROPERTIES = Ext_grid_LockedGrid.getProperties(ExtLockedgridMetaData.PROPERTIES);
        ExtLockedgridMetaData.EVENTS = Ext_grid_LockedGrid.getEvents(ExtLockedgridMetaData.EVENTS);
        ExtLockedgridMetaData.EVENTS.forEach((event) => {
            ExtLockedgridMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtLockedgridMetaData.PROPERTIES = [];
ExtLockedgridMetaData.EVENTS = [];
ExtLockedgridMetaData.EVENTNAMES = [];
(function () { ExtLockedgridMetaData.getAll(); })();
let ExtLockedgridComponent = ExtLockedgridComponent_1 = class ExtLockedgridComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtLockedgridMetaData.PROPERTIES, ExtLockedgridMetaData.EVENTS);
        this.xtype = 'lockedgrid';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtLockedgridComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtLockedgridComponent = ExtLockedgridComponent_1 = __decorate([
    Component({
        selector: 'ext-lockedgrid',
        inputs: ExtLockedgridMetaData.PROPERTIES,
        outputs: ExtLockedgridMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtLockedgridComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtLockedgridComponent);

class Ext_grid_LockedGridRegion extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_LockedGridRegion.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_LockedGridRegion.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_grid_LockedGridRegion.PROPERTIES = [
    'grid',
    'locked',
    'menuItem',
    'regionKey',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_LockedGridRegion.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,lockedgridregion,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'lockedgridregion,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'lockedgridregion' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'lockedgridregion' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'lockedgridregion,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'lockedgridregion' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'lockedgridregion,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'lockedgridregion' },
    { name: 'deactivate', parameters: 'oldActiveItem,lockedgridregion,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'lockedgridregion' },
    { name: 'drawershow', parameters: 'lockedgridregion' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'lockedgridregion' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'lockedgridregion,event' },
    { name: 'focusenter', parameters: 'lockedgridregion,event' },
    { name: 'focusleave', parameters: 'lockedgridregion,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'lockedgridregion,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'lockedgridregion,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'lockedgridregion,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'lockedgridregion,context' },
    { name: 'resizedragcancel', parameters: 'lockedgridregion,context' },
    { name: 'resizedragend', parameters: 'lockedgridregion,context' },
    { name: 'resizedragstart', parameters: 'lockedgridregion,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'lockedgridregion' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_LockedGridRegion.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

var ExtLockedgridregionComponent_1;
class ExtLockedgridregionMetaData extends Ext_grid_LockedGridRegion {
    static getAll() {
        ExtLockedgridregionMetaData.PROPERTIES = Ext_grid_LockedGridRegion.getProperties(ExtLockedgridregionMetaData.PROPERTIES);
        ExtLockedgridregionMetaData.EVENTS = Ext_grid_LockedGridRegion.getEvents(ExtLockedgridregionMetaData.EVENTS);
        ExtLockedgridregionMetaData.EVENTS.forEach((event) => {
            ExtLockedgridregionMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtLockedgridregionMetaData.PROPERTIES = [];
ExtLockedgridregionMetaData.EVENTS = [];
ExtLockedgridregionMetaData.EVENTNAMES = [];
(function () { ExtLockedgridregionMetaData.getAll(); })();
let ExtLockedgridregionComponent = ExtLockedgridregionComponent_1 = class ExtLockedgridregionComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtLockedgridregionMetaData.PROPERTIES, ExtLockedgridregionMetaData.EVENTS);
        this.xtype = 'lockedgridregion';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtLockedgridregionComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtLockedgridregionComponent = ExtLockedgridregionComponent_1 = __decorate([
    Component({
        selector: 'ext-lockedgridregion',
        inputs: ExtLockedgridregionMetaData.PROPERTIES,
        outputs: ExtLockedgridregionMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtLockedgridregionComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtLockedgridregionComponent);

class Ext_menu_Item extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_menu_Item.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_menu_Item.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_menu_Item.PROPERTIES = [
    'clickHideDelay',
    'destroyMenu',
    'handler',
    'hideOnClick',
    'href',
    'icon',
    'iconAlign',
    'iconCls',
    'indented',
    'menu',
    'menuAlign',
    'menuExpandDelay',
    'menuHideDelay',
    'scope',
    'separator',
    'target',
    'text',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_menu_Item.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'menuitem' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'menuitem,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'menuitem,event' },
    { name: 'focusenter', parameters: 'menuitem,event' },
    { name: 'focusleave', parameters: 'menuitem,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'menuitem' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_menu_Item.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

class Ext_grid_menu_Shared extends Ext_menu_Item {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_menu_Shared.PROPERTIES);
        return Ext_menu_Item.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_menu_Shared.EVENTS);
        return Ext_menu_Item.getEvents(events);
    }
}
Ext_grid_menu_Shared.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_menu_Shared.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_menu_Shared.EVENTNAMES);
//    return Ext_menu_Item.getEventNames(eventnames);
//}

class Ext_grid_menu_Columns extends Ext_grid_menu_Shared {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_menu_Columns.PROPERTIES);
        return Ext_grid_menu_Shared.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_menu_Columns.EVENTS);
        return Ext_grid_menu_Shared.getEvents(events);
    }
}
Ext_grid_menu_Columns.PROPERTIES = [
    'text',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_menu_Columns.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'gridcolumnsmenu' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'gridcolumnsmenu,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'gridcolumnsmenu,event' },
    { name: 'focusenter', parameters: 'gridcolumnsmenu,event' },
    { name: 'focusleave', parameters: 'gridcolumnsmenu,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'gridcolumnsmenu' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_menu_Columns.EVENTNAMES);
//    return Ext_grid_menu_Shared.getEventNames(eventnames);
//}

var ExtGridcolumnsmenuComponent_1;
class ExtGridcolumnsmenuMetaData extends Ext_grid_menu_Columns {
    static getAll() {
        ExtGridcolumnsmenuMetaData.PROPERTIES = Ext_grid_menu_Columns.getProperties(ExtGridcolumnsmenuMetaData.PROPERTIES);
        ExtGridcolumnsmenuMetaData.EVENTS = Ext_grid_menu_Columns.getEvents(ExtGridcolumnsmenuMetaData.EVENTS);
        ExtGridcolumnsmenuMetaData.EVENTS.forEach((event) => {
            ExtGridcolumnsmenuMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGridcolumnsmenuMetaData.PROPERTIES = [];
ExtGridcolumnsmenuMetaData.EVENTS = [];
ExtGridcolumnsmenuMetaData.EVENTNAMES = [];
(function () { ExtGridcolumnsmenuMetaData.getAll(); })();
let ExtGridcolumnsmenuComponent = ExtGridcolumnsmenuComponent_1 = class ExtGridcolumnsmenuComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGridcolumnsmenuMetaData.PROPERTIES, ExtGridcolumnsmenuMetaData.EVENTS);
        this.xtype = 'gridcolumnsmenu';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGridcolumnsmenuComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGridcolumnsmenuComponent = ExtGridcolumnsmenuComponent_1 = __decorate([
    Component({
        selector: 'ext-gridcolumnsmenu',
        inputs: ExtGridcolumnsmenuMetaData.PROPERTIES,
        outputs: ExtGridcolumnsmenuMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGridcolumnsmenuComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGridcolumnsmenuComponent);

class Ext_grid_menu_GroupByThis extends Ext_menu_Item {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_menu_GroupByThis.PROPERTIES);
        return Ext_menu_Item.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_menu_GroupByThis.EVENTS);
        return Ext_menu_Item.getEvents(events);
    }
}
Ext_grid_menu_GroupByThis.PROPERTIES = [
    'text',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_menu_GroupByThis.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'gridgroupbythismenuitem' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'gridgroupbythismenuitem,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'gridgroupbythismenuitem,event' },
    { name: 'focusenter', parameters: 'gridgroupbythismenuitem,event' },
    { name: 'focusleave', parameters: 'gridgroupbythismenuitem,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'gridgroupbythismenuitem' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_menu_GroupByThis.EVENTNAMES);
//    return Ext_menu_Item.getEventNames(eventnames);
//}

var ExtGridgroupbythismenuitemComponent_1;
class ExtGridgroupbythismenuitemMetaData extends Ext_grid_menu_GroupByThis {
    static getAll() {
        ExtGridgroupbythismenuitemMetaData.PROPERTIES = Ext_grid_menu_GroupByThis.getProperties(ExtGridgroupbythismenuitemMetaData.PROPERTIES);
        ExtGridgroupbythismenuitemMetaData.EVENTS = Ext_grid_menu_GroupByThis.getEvents(ExtGridgroupbythismenuitemMetaData.EVENTS);
        ExtGridgroupbythismenuitemMetaData.EVENTS.forEach((event) => {
            ExtGridgroupbythismenuitemMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGridgroupbythismenuitemMetaData.PROPERTIES = [];
ExtGridgroupbythismenuitemMetaData.EVENTS = [];
ExtGridgroupbythismenuitemMetaData.EVENTNAMES = [];
(function () { ExtGridgroupbythismenuitemMetaData.getAll(); })();
let ExtGridgroupbythismenuitemComponent = ExtGridgroupbythismenuitemComponent_1 = class ExtGridgroupbythismenuitemComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGridgroupbythismenuitemMetaData.PROPERTIES, ExtGridgroupbythismenuitemMetaData.EVENTS);
        this.xtype = 'gridgroupbythismenuitem';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGridgroupbythismenuitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGridgroupbythismenuitemComponent = ExtGridgroupbythismenuitemComponent_1 = __decorate([
    Component({
        selector: 'ext-gridgroupbythismenuitem',
        inputs: ExtGridgroupbythismenuitemMetaData.PROPERTIES,
        outputs: ExtGridgroupbythismenuitemMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGridgroupbythismenuitemComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGridgroupbythismenuitemComponent);

class Ext_menu_CheckItem extends Ext_menu_Item {
    static getProperties(properties) {
        properties = properties.concat(Ext_menu_CheckItem.PROPERTIES);
        return Ext_menu_Item.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_menu_CheckItem.EVENTS);
        return Ext_menu_Item.getEvents(events);
    }
}
Ext_menu_CheckItem.PROPERTIES = [
    'checkChangeDisabled',
    'checked',
    'checkHandler',
    'hideOnClick',
    'publishes',
    'scope',
    'submenuText',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_menu_CheckItem.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecheckchange', parameters: 'menucheckitem,checked' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'menucheckitem' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'menucheckitem,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'checkchange', parameters: 'menucheckitem,checked' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'menucheckitem,event' },
    { name: 'focusenter', parameters: 'menucheckitem,event' },
    { name: 'focusleave', parameters: 'menucheckitem,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'menucheckitem' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_menu_CheckItem.EVENTNAMES);
//    return Ext_menu_Item.getEventNames(eventnames);
//}

class Ext_grid_menu_ShowInGroups extends Ext_menu_CheckItem {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_menu_ShowInGroups.PROPERTIES);
        return Ext_menu_CheckItem.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_menu_ShowInGroups.EVENTS);
        return Ext_menu_CheckItem.getEvents(events);
    }
}
Ext_grid_menu_ShowInGroups.PROPERTIES = [
    'text',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_menu_ShowInGroups.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecheckchange', parameters: 'gridshowingroupsmenuitem,checked' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'gridshowingroupsmenuitem' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'gridshowingroupsmenuitem,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'checkchange', parameters: 'gridshowingroupsmenuitem,checked' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'gridshowingroupsmenuitem,event' },
    { name: 'focusenter', parameters: 'gridshowingroupsmenuitem,event' },
    { name: 'focusleave', parameters: 'gridshowingroupsmenuitem,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'gridshowingroupsmenuitem' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_menu_ShowInGroups.EVENTNAMES);
//    return Ext_menu_CheckItem.getEventNames(eventnames);
//}

var ExtGridshowingroupsmenuitemComponent_1;
class ExtGridshowingroupsmenuitemMetaData extends Ext_grid_menu_ShowInGroups {
    static getAll() {
        ExtGridshowingroupsmenuitemMetaData.PROPERTIES = Ext_grid_menu_ShowInGroups.getProperties(ExtGridshowingroupsmenuitemMetaData.PROPERTIES);
        ExtGridshowingroupsmenuitemMetaData.EVENTS = Ext_grid_menu_ShowInGroups.getEvents(ExtGridshowingroupsmenuitemMetaData.EVENTS);
        ExtGridshowingroupsmenuitemMetaData.EVENTS.forEach((event) => {
            ExtGridshowingroupsmenuitemMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGridshowingroupsmenuitemMetaData.PROPERTIES = [];
ExtGridshowingroupsmenuitemMetaData.EVENTS = [];
ExtGridshowingroupsmenuitemMetaData.EVENTNAMES = [];
(function () { ExtGridshowingroupsmenuitemMetaData.getAll(); })();
let ExtGridshowingroupsmenuitemComponent = ExtGridshowingroupsmenuitemComponent_1 = class ExtGridshowingroupsmenuitemComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGridshowingroupsmenuitemMetaData.PROPERTIES, ExtGridshowingroupsmenuitemMetaData.EVENTS);
        this.xtype = 'gridshowingroupsmenuitem';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGridshowingroupsmenuitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGridshowingroupsmenuitemComponent = ExtGridshowingroupsmenuitemComponent_1 = __decorate([
    Component({
        selector: 'ext-gridshowingroupsmenuitem',
        inputs: ExtGridshowingroupsmenuitemMetaData.PROPERTIES,
        outputs: ExtGridshowingroupsmenuitemMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGridshowingroupsmenuitemComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGridshowingroupsmenuitemComponent);

class Ext_menu_RadioItem extends Ext_menu_CheckItem {
    static getProperties(properties) {
        properties = properties.concat(Ext_menu_RadioItem.PROPERTIES);
        return Ext_menu_CheckItem.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_menu_RadioItem.EVENTS);
        return Ext_menu_CheckItem.getEvents(events);
    }
}
Ext_menu_RadioItem.PROPERTIES = [
    'allowUncheck',
    'group',
    'name',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_menu_RadioItem.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecheckchange', parameters: 'menuradioitem,checked' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'menuradioitem' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'menuradioitem,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'checkchange', parameters: 'menuradioitem,checked' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'menuradioitem,event' },
    { name: 'focusenter', parameters: 'menuradioitem,event' },
    { name: 'focusleave', parameters: 'menuradioitem,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'menuradioitem' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_menu_RadioItem.EVENTNAMES);
//    return Ext_menu_CheckItem.getEventNames(eventnames);
//}

class Ext_grid_menu_SortAsc extends Ext_menu_RadioItem {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_menu_SortAsc.PROPERTIES);
        return Ext_menu_RadioItem.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_menu_SortAsc.EVENTS);
        return Ext_menu_RadioItem.getEvents(events);
    }
}
Ext_grid_menu_SortAsc.PROPERTIES = [
    'text',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_menu_SortAsc.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecheckchange', parameters: 'gridsortascmenuitem,checked' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'gridsortascmenuitem' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'gridsortascmenuitem,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'checkchange', parameters: 'gridsortascmenuitem,checked' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'gridsortascmenuitem,event' },
    { name: 'focusenter', parameters: 'gridsortascmenuitem,event' },
    { name: 'focusleave', parameters: 'gridsortascmenuitem,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'gridsortascmenuitem' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_menu_SortAsc.EVENTNAMES);
//    return Ext_menu_RadioItem.getEventNames(eventnames);
//}

var ExtGridsortascmenuitemComponent_1;
class ExtGridsortascmenuitemMetaData extends Ext_grid_menu_SortAsc {
    static getAll() {
        ExtGridsortascmenuitemMetaData.PROPERTIES = Ext_grid_menu_SortAsc.getProperties(ExtGridsortascmenuitemMetaData.PROPERTIES);
        ExtGridsortascmenuitemMetaData.EVENTS = Ext_grid_menu_SortAsc.getEvents(ExtGridsortascmenuitemMetaData.EVENTS);
        ExtGridsortascmenuitemMetaData.EVENTS.forEach((event) => {
            ExtGridsortascmenuitemMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGridsortascmenuitemMetaData.PROPERTIES = [];
ExtGridsortascmenuitemMetaData.EVENTS = [];
ExtGridsortascmenuitemMetaData.EVENTNAMES = [];
(function () { ExtGridsortascmenuitemMetaData.getAll(); })();
let ExtGridsortascmenuitemComponent = ExtGridsortascmenuitemComponent_1 = class ExtGridsortascmenuitemComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGridsortascmenuitemMetaData.PROPERTIES, ExtGridsortascmenuitemMetaData.EVENTS);
        this.xtype = 'gridsortascmenuitem';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGridsortascmenuitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGridsortascmenuitemComponent = ExtGridsortascmenuitemComponent_1 = __decorate([
    Component({
        selector: 'ext-gridsortascmenuitem',
        inputs: ExtGridsortascmenuitemMetaData.PROPERTIES,
        outputs: ExtGridsortascmenuitemMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGridsortascmenuitemComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGridsortascmenuitemComponent);

class Ext_grid_menu_SortDesc extends Ext_menu_RadioItem {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_menu_SortDesc.PROPERTIES);
        return Ext_menu_RadioItem.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_menu_SortDesc.EVENTS);
        return Ext_menu_RadioItem.getEvents(events);
    }
}
Ext_grid_menu_SortDesc.PROPERTIES = [
    'text',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_menu_SortDesc.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecheckchange', parameters: 'gridsortdescmenuitem,checked' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'gridsortdescmenuitem' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'gridsortdescmenuitem,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'checkchange', parameters: 'gridsortdescmenuitem,checked' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'gridsortdescmenuitem,event' },
    { name: 'focusenter', parameters: 'gridsortdescmenuitem,event' },
    { name: 'focusleave', parameters: 'gridsortdescmenuitem,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'gridsortdescmenuitem' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_menu_SortDesc.EVENTNAMES);
//    return Ext_menu_RadioItem.getEventNames(eventnames);
//}

var ExtGridsortdescmenuitemComponent_1;
class ExtGridsortdescmenuitemMetaData extends Ext_grid_menu_SortDesc {
    static getAll() {
        ExtGridsortdescmenuitemMetaData.PROPERTIES = Ext_grid_menu_SortDesc.getProperties(ExtGridsortdescmenuitemMetaData.PROPERTIES);
        ExtGridsortdescmenuitemMetaData.EVENTS = Ext_grid_menu_SortDesc.getEvents(ExtGridsortdescmenuitemMetaData.EVENTS);
        ExtGridsortdescmenuitemMetaData.EVENTS.forEach((event) => {
            ExtGridsortdescmenuitemMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGridsortdescmenuitemMetaData.PROPERTIES = [];
ExtGridsortdescmenuitemMetaData.EVENTS = [];
ExtGridsortdescmenuitemMetaData.EVENTNAMES = [];
(function () { ExtGridsortdescmenuitemMetaData.getAll(); })();
let ExtGridsortdescmenuitemComponent = ExtGridsortdescmenuitemComponent_1 = class ExtGridsortdescmenuitemComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGridsortdescmenuitemMetaData.PROPERTIES, ExtGridsortdescmenuitemMetaData.EVENTS);
        this.xtype = 'gridsortdescmenuitem';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGridsortdescmenuitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGridsortdescmenuitemComponent = ExtGridsortdescmenuitemComponent_1 = __decorate([
    Component({
        selector: 'ext-gridsortdescmenuitem',
        inputs: ExtGridsortdescmenuitemMetaData.PROPERTIES,
        outputs: ExtGridsortdescmenuitemMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGridsortdescmenuitemComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGridsortdescmenuitemComponent);

class Ext_grid_PagingToolbar extends Ext_Toolbar {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_PagingToolbar.PROPERTIES);
        return Ext_Toolbar.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_PagingToolbar.EVENTS);
        return Ext_Toolbar.getEvents(events);
    }
}
Ext_grid_PagingToolbar.PROPERTIES = [
    'nextButton',
    'prevButton',
    'sliderField',
    'summaryComponent',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_PagingToolbar.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,pagingtoolbar,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'pagingtoolbar,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'pagingtoolbar' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pagingtoolbar,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,pagingtoolbar,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'pagingtoolbar,event' },
    { name: 'focusenter', parameters: 'pagingtoolbar,event' },
    { name: 'focusleave', parameters: 'pagingtoolbar,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'pagingtoolbar,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'pagingtoolbar,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'pagingtoolbar,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'pagingtoolbar' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_PagingToolbar.EVENTNAMES);
//    return Ext_Toolbar.getEventNames(eventnames);
//}

var ExtPagingtoolbarComponent_1;
class ExtPagingtoolbarMetaData extends Ext_grid_PagingToolbar {
    static getAll() {
        ExtPagingtoolbarMetaData.PROPERTIES = Ext_grid_PagingToolbar.getProperties(ExtPagingtoolbarMetaData.PROPERTIES);
        ExtPagingtoolbarMetaData.EVENTS = Ext_grid_PagingToolbar.getEvents(ExtPagingtoolbarMetaData.EVENTS);
        ExtPagingtoolbarMetaData.EVENTS.forEach((event) => {
            ExtPagingtoolbarMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPagingtoolbarMetaData.PROPERTIES = [];
ExtPagingtoolbarMetaData.EVENTS = [];
ExtPagingtoolbarMetaData.EVENTNAMES = [];
(function () { ExtPagingtoolbarMetaData.getAll(); })();
let ExtPagingtoolbarComponent = ExtPagingtoolbarComponent_1 = class ExtPagingtoolbarComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPagingtoolbarMetaData.PROPERTIES, ExtPagingtoolbarMetaData.EVENTS);
        this.xtype = 'pagingtoolbar';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPagingtoolbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPagingtoolbarComponent = ExtPagingtoolbarComponent_1 = __decorate([
    Component({
        selector: 'ext-pagingtoolbar',
        inputs: ExtPagingtoolbarMetaData.PROPERTIES,
        outputs: ExtPagingtoolbarMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPagingtoolbarComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPagingtoolbarComponent);

class Ext_grid_Row extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_Row.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_Row.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_grid_Row.PROPERTIES = [
    'body',
    'defaultCellUI',
    'expandedField',
    'stickyVisibility',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_Row.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'gridrow' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'gridrow,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'gridrow,event' },
    { name: 'focusenter', parameters: 'gridrow,event' },
    { name: 'focusleave', parameters: 'gridrow,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'gridrow' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_Row.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtGridrowComponent_1;
class ExtGridrowMetaData extends Ext_grid_Row {
    static getAll() {
        ExtGridrowMetaData.PROPERTIES = Ext_grid_Row.getProperties(ExtGridrowMetaData.PROPERTIES);
        ExtGridrowMetaData.EVENTS = Ext_grid_Row.getEvents(ExtGridrowMetaData.EVENTS);
        ExtGridrowMetaData.EVENTS.forEach((event) => {
            ExtGridrowMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGridrowMetaData.PROPERTIES = [];
ExtGridrowMetaData.EVENTS = [];
ExtGridrowMetaData.EVENTNAMES = [];
(function () { ExtGridrowMetaData.getAll(); })();
let ExtGridrowComponent = ExtGridrowComponent_1 = class ExtGridrowComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGridrowMetaData.PROPERTIES, ExtGridrowMetaData.EVENTS);
        this.xtype = 'gridrow';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGridrowComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGridrowComponent = ExtGridrowComponent_1 = __decorate([
    Component({
        selector: 'ext-gridrow',
        inputs: ExtGridrowMetaData.PROPERTIES,
        outputs: ExtGridrowMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGridrowComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGridrowComponent);

class Ext_grid_RowBody extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_RowBody.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_RowBody.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_grid_RowBody.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_RowBody.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'rowbody' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'rowbody,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'rowbody,event' },
    { name: 'focusenter', parameters: 'rowbody,event' },
    { name: 'focusleave', parameters: 'rowbody,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'rowbody' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_RowBody.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtRowbodyComponent_1;
class ExtRowbodyMetaData extends Ext_grid_RowBody {
    static getAll() {
        ExtRowbodyMetaData.PROPERTIES = Ext_grid_RowBody.getProperties(ExtRowbodyMetaData.PROPERTIES);
        ExtRowbodyMetaData.EVENTS = Ext_grid_RowBody.getEvents(ExtRowbodyMetaData.EVENTS);
        ExtRowbodyMetaData.EVENTS.forEach((event) => {
            ExtRowbodyMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtRowbodyMetaData.PROPERTIES = [];
ExtRowbodyMetaData.EVENTS = [];
ExtRowbodyMetaData.EVENTNAMES = [];
(function () { ExtRowbodyMetaData.getAll(); })();
let ExtRowbodyComponent = ExtRowbodyComponent_1 = class ExtRowbodyComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtRowbodyMetaData.PROPERTIES, ExtRowbodyMetaData.EVENTS);
        this.xtype = 'rowbody';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtRowbodyComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtRowbodyComponent = ExtRowbodyComponent_1 = __decorate([
    Component({
        selector: 'ext-rowbody',
        inputs: ExtRowbodyMetaData.PROPERTIES,
        outputs: ExtRowbodyMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtRowbodyComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtRowbodyComponent);

class Ext_grid_rowedit_Bar extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_rowedit_Bar.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_rowedit_Bar.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_grid_rowedit_Bar.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_rowedit_Bar.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,roweditorbar,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'roweditorbar,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'roweditorbar' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'roweditorbar' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'roweditorbar,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'roweditorbar' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'roweditorbar,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'roweditorbar' },
    { name: 'deactivate', parameters: 'oldActiveItem,roweditorbar,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'roweditorbar' },
    { name: 'drawershow', parameters: 'roweditorbar' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'roweditorbar' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'roweditorbar,event' },
    { name: 'focusenter', parameters: 'roweditorbar,event' },
    { name: 'focusleave', parameters: 'roweditorbar,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'roweditorbar,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'roweditorbar,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'roweditorbar,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'roweditorbar,context' },
    { name: 'resizedragcancel', parameters: 'roweditorbar,context' },
    { name: 'resizedragend', parameters: 'roweditorbar,context' },
    { name: 'resizedragstart', parameters: 'roweditorbar,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'roweditorbar' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_rowedit_Bar.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

var ExtRoweditorbarComponent_1;
class ExtRoweditorbarMetaData extends Ext_grid_rowedit_Bar {
    static getAll() {
        ExtRoweditorbarMetaData.PROPERTIES = Ext_grid_rowedit_Bar.getProperties(ExtRoweditorbarMetaData.PROPERTIES);
        ExtRoweditorbarMetaData.EVENTS = Ext_grid_rowedit_Bar.getEvents(ExtRoweditorbarMetaData.EVENTS);
        ExtRoweditorbarMetaData.EVENTS.forEach((event) => {
            ExtRoweditorbarMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtRoweditorbarMetaData.PROPERTIES = [];
ExtRoweditorbarMetaData.EVENTS = [];
ExtRoweditorbarMetaData.EVENTNAMES = [];
(function () { ExtRoweditorbarMetaData.getAll(); })();
let ExtRoweditorbarComponent = ExtRoweditorbarComponent_1 = class ExtRoweditorbarComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtRoweditorbarMetaData.PROPERTIES, ExtRoweditorbarMetaData.EVENTS);
        this.xtype = 'roweditorbar';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtRoweditorbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtRoweditorbarComponent = ExtRoweditorbarComponent_1 = __decorate([
    Component({
        selector: 'ext-roweditorbar',
        inputs: ExtRoweditorbarMetaData.PROPERTIES,
        outputs: ExtRoweditorbarMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtRoweditorbarComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtRoweditorbarComponent);

class Ext_grid_rowedit_Cell extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_rowedit_Cell.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_rowedit_Cell.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_grid_rowedit_Cell.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_rowedit_Cell.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'roweditorcell' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'roweditorcell,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'roweditorcell,event' },
    { name: 'focusenter', parameters: 'roweditorcell,event' },
    { name: 'focusleave', parameters: 'roweditorcell,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'roweditorcell' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_rowedit_Cell.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtRoweditorcellComponent_1;
class ExtRoweditorcellMetaData extends Ext_grid_rowedit_Cell {
    static getAll() {
        ExtRoweditorcellMetaData.PROPERTIES = Ext_grid_rowedit_Cell.getProperties(ExtRoweditorcellMetaData.PROPERTIES);
        ExtRoweditorcellMetaData.EVENTS = Ext_grid_rowedit_Cell.getEvents(ExtRoweditorcellMetaData.EVENTS);
        ExtRoweditorcellMetaData.EVENTS.forEach((event) => {
            ExtRoweditorcellMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtRoweditorcellMetaData.PROPERTIES = [];
ExtRoweditorcellMetaData.EVENTS = [];
ExtRoweditorcellMetaData.EVENTNAMES = [];
(function () { ExtRoweditorcellMetaData.getAll(); })();
let ExtRoweditorcellComponent = ExtRoweditorcellComponent_1 = class ExtRoweditorcellComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtRoweditorcellMetaData.PROPERTIES, ExtRoweditorcellMetaData.EVENTS);
        this.xtype = 'roweditorcell';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtRoweditorcellComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtRoweditorcellComponent = ExtRoweditorcellComponent_1 = __decorate([
    Component({
        selector: 'ext-roweditorcell',
        inputs: ExtRoweditorcellMetaData.PROPERTIES,
        outputs: ExtRoweditorcellMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtRoweditorcellComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtRoweditorcellComponent);

class Ext_dataview_ListItem extends Ext_dataview_DataItem {
    static getProperties(properties) {
        properties = properties.concat(Ext_dataview_ListItem.PROPERTIES);
        return Ext_dataview_DataItem.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_dataview_ListItem.EVENTS);
        return Ext_dataview_DataItem.getEvents(events);
    }
}
Ext_dataview_ListItem.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_dataview_ListItem.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,listitem,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'listitem,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'listitem' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'listitem,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,listitem,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'listitem,event' },
    { name: 'focusenter', parameters: 'listitem,event' },
    { name: 'focusleave', parameters: 'listitem,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'listitem,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'listitem,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'listitem,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'listitem' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'dataItem,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_dataview_ListItem.EVENTNAMES);
//    return Ext_dataview_DataItem.getEventNames(eventnames);
//}

class Ext_grid_rowedit_Editor extends Ext_dataview_ListItem {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_rowedit_Editor.PROPERTIES);
        return Ext_dataview_ListItem.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_rowedit_Editor.EVENTS);
        return Ext_dataview_ListItem.getEvents(events);
    }
}
Ext_grid_rowedit_Editor.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_rowedit_Editor.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,roweditor,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'roweditor,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'roweditor' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'roweditor,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,roweditor,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'roweditor,event' },
    { name: 'focusenter', parameters: 'roweditor,event' },
    { name: 'focusleave', parameters: 'roweditor,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'roweditor,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'roweditor,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'roweditor,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'roweditor' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'dataItem,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_rowedit_Editor.EVENTNAMES);
//    return Ext_dataview_ListItem.getEventNames(eventnames);
//}

var ExtRoweditorComponent_1;
class ExtRoweditorMetaData extends Ext_grid_rowedit_Editor {
    static getAll() {
        ExtRoweditorMetaData.PROPERTIES = Ext_grid_rowedit_Editor.getProperties(ExtRoweditorMetaData.PROPERTIES);
        ExtRoweditorMetaData.EVENTS = Ext_grid_rowedit_Editor.getEvents(ExtRoweditorMetaData.EVENTS);
        ExtRoweditorMetaData.EVENTS.forEach((event) => {
            ExtRoweditorMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtRoweditorMetaData.PROPERTIES = [];
ExtRoweditorMetaData.EVENTS = [];
ExtRoweditorMetaData.EVENTNAMES = [];
(function () { ExtRoweditorMetaData.getAll(); })();
let ExtRoweditorComponent = ExtRoweditorComponent_1 = class ExtRoweditorComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtRoweditorMetaData.PROPERTIES, ExtRoweditorMetaData.EVENTS);
        this.xtype = 'roweditor';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtRoweditorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtRoweditorComponent = ExtRoweditorComponent_1 = __decorate([
    Component({
        selector: 'ext-roweditor',
        inputs: ExtRoweditorMetaData.PROPERTIES,
        outputs: ExtRoweditorMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtRoweditorComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtRoweditorComponent);

class Ext_grid_rowedit_Gap extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_rowedit_Gap.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_rowedit_Gap.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_grid_rowedit_Gap.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_rowedit_Gap.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'roweditorgap' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'roweditorgap,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'roweditorgap,event' },
    { name: 'focusenter', parameters: 'roweditorgap,event' },
    { name: 'focusleave', parameters: 'roweditorgap,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'roweditorgap' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_rowedit_Gap.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtRoweditorgapComponent_1;
class ExtRoweditorgapMetaData extends Ext_grid_rowedit_Gap {
    static getAll() {
        ExtRoweditorgapMetaData.PROPERTIES = Ext_grid_rowedit_Gap.getProperties(ExtRoweditorgapMetaData.PROPERTIES);
        ExtRoweditorgapMetaData.EVENTS = Ext_grid_rowedit_Gap.getEvents(ExtRoweditorgapMetaData.EVENTS);
        ExtRoweditorgapMetaData.EVENTS.forEach((event) => {
            ExtRoweditorgapMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtRoweditorgapMetaData.PROPERTIES = [];
ExtRoweditorgapMetaData.EVENTS = [];
ExtRoweditorgapMetaData.EVENTNAMES = [];
(function () { ExtRoweditorgapMetaData.getAll(); })();
let ExtRoweditorgapComponent = ExtRoweditorgapComponent_1 = class ExtRoweditorgapComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtRoweditorgapMetaData.PROPERTIES, ExtRoweditorgapMetaData.EVENTS);
        this.xtype = 'roweditorgap';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtRoweditorgapComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtRoweditorgapComponent = ExtRoweditorgapComponent_1 = __decorate([
    Component({
        selector: 'ext-roweditorgap',
        inputs: ExtRoweditorgapMetaData.PROPERTIES,
        outputs: ExtRoweditorgapMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtRoweditorgapComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtRoweditorgapComponent);

class Ext_grid_RowHeader extends Ext_dataview_ItemHeader {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_RowHeader.PROPERTIES);
        return Ext_dataview_ItemHeader.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_RowHeader.EVENTS);
        return Ext_dataview_ItemHeader.getEvents(events);
    }
}
Ext_grid_RowHeader.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_RowHeader.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'rowheader' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'rowheader,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'rowheader,event' },
    { name: 'focusenter', parameters: 'rowheader,event' },
    { name: 'focusleave', parameters: 'rowheader,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'rowheader' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_RowHeader.EVENTNAMES);
//    return Ext_dataview_ItemHeader.getEventNames(eventnames);
//}

var ExtRowheaderComponent_1;
class ExtRowheaderMetaData extends Ext_grid_RowHeader {
    static getAll() {
        ExtRowheaderMetaData.PROPERTIES = Ext_grid_RowHeader.getProperties(ExtRowheaderMetaData.PROPERTIES);
        ExtRowheaderMetaData.EVENTS = Ext_grid_RowHeader.getEvents(ExtRowheaderMetaData.EVENTS);
        ExtRowheaderMetaData.EVENTS.forEach((event) => {
            ExtRowheaderMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtRowheaderMetaData.PROPERTIES = [];
ExtRowheaderMetaData.EVENTS = [];
ExtRowheaderMetaData.EVENTNAMES = [];
(function () { ExtRowheaderMetaData.getAll(); })();
let ExtRowheaderComponent = ExtRowheaderComponent_1 = class ExtRowheaderComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtRowheaderMetaData.PROPERTIES, ExtRowheaderMetaData.EVENTS);
        this.xtype = 'rowheader';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtRowheaderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtRowheaderComponent = ExtRowheaderComponent_1 = __decorate([
    Component({
        selector: 'ext-rowheader',
        inputs: ExtRowheaderMetaData.PROPERTIES,
        outputs: ExtRowheaderMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtRowheaderComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtRowheaderComponent);

class Ext_grid_SummaryRow extends Ext_grid_Row {
    static getProperties(properties) {
        properties = properties.concat(Ext_grid_SummaryRow.PROPERTIES);
        return Ext_grid_Row.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_grid_SummaryRow.EVENTS);
        return Ext_grid_Row.getEvents(events);
    }
}
Ext_grid_SummaryRow.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_grid_SummaryRow.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'gridsummaryrow' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'gridsummaryrow,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'gridsummaryrow,event' },
    { name: 'focusenter', parameters: 'gridsummaryrow,event' },
    { name: 'focusleave', parameters: 'gridsummaryrow,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'gridsummaryrow' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_grid_SummaryRow.EVENTNAMES);
//    return Ext_grid_Row.getEventNames(eventnames);
//}

var ExtGridsummaryrowComponent_1;
class ExtGridsummaryrowMetaData extends Ext_grid_SummaryRow {
    static getAll() {
        ExtGridsummaryrowMetaData.PROPERTIES = Ext_grid_SummaryRow.getProperties(ExtGridsummaryrowMetaData.PROPERTIES);
        ExtGridsummaryrowMetaData.EVENTS = Ext_grid_SummaryRow.getEvents(ExtGridsummaryrowMetaData.EVENTS);
        ExtGridsummaryrowMetaData.EVENTS.forEach((event) => {
            ExtGridsummaryrowMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGridsummaryrowMetaData.PROPERTIES = [];
ExtGridsummaryrowMetaData.EVENTS = [];
ExtGridsummaryrowMetaData.EVENTNAMES = [];
(function () { ExtGridsummaryrowMetaData.getAll(); })();
let ExtGridsummaryrowComponent = ExtGridsummaryrowComponent_1 = class ExtGridsummaryrowComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGridsummaryrowMetaData.PROPERTIES, ExtGridsummaryrowMetaData.EVENTS);
        this.xtype = 'gridsummaryrow';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGridsummaryrowComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGridsummaryrowComponent = ExtGridsummaryrowComponent_1 = __decorate([
    Component({
        selector: 'ext-gridsummaryrow',
        inputs: ExtGridsummaryrowMetaData.PROPERTIES,
        outputs: ExtGridsummaryrowMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGridsummaryrowComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGridsummaryrowComponent);

class Ext_tree_Tree extends Ext_grid_Grid {
    static getProperties(properties) {
        properties = properties.concat(Ext_tree_Tree.PROPERTIES);
        return Ext_grid_Grid.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_tree_Tree.EVENTS);
        return Ext_grid_Grid.getEvents(events);
    }
}
Ext_tree_Tree.PROPERTIES = [
    'expanderFirst',
    'expanderOnly',
    'folderSort',
    'selectOnExpander',
    'singleExpand',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_tree_Tree.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,tree,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecheckchange', parameters: 'tree,checked,current,record,e' },
    { name: 'beforecomplete', parameters: 'editor,value,startValue,The' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeedit', parameters: 'sender,location' },
    { name: 'beforegroupcollapse', parameters: 'tree,group' },
    { name: 'beforegroupexpand', parameters: 'tree,group' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeload', parameters: 'store,operation' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforenodecollapse', parameters: 'node,record' },
    { name: 'beforenodeexpand', parameters: 'row,record' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeselectionextend', parameters: 'grid,An,extension' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestartedit', parameters: 'editor,boundEl,value,The' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'tree' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'tree,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'canceledit', parameters: 'editor,value,startValue' },
    { name: 'cellselection', parameters: 'grid,selection' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'checkchange', parameters: 'cell,checked,record,e' },
    { name: 'childdoubletap', parameters: 'tree,location' },
    { name: 'childlongpress', parameters: 'tree,location' },
    { name: 'childmouseenter', parameters: 'tree,location' },
    { name: 'childmouseleave', parameters: 'tree,location' },
    { name: 'childsingletap', parameters: 'tree,location' },
    { name: 'childtap', parameters: 'tree,location' },
    { name: 'childtaphold', parameters: 'tree,location' },
    { name: 'childtouchcancel', parameters: 'tree,location' },
    { name: 'childtouchend', parameters: 'tree,location' },
    { name: 'childtouchmove', parameters: 'tree,location' },
    { name: 'childtouchstart', parameters: 'tree,location' },
    { name: 'columnadd', parameters: 'tree,column,index' },
    { name: 'columnhide', parameters: 'tree,column' },
    { name: 'columnmenucreated', parameters: 'grid,column,menu' },
    { name: 'columnmove', parameters: 'tree,column,fromIndex,toIndex' },
    { name: 'columnremove', parameters: 'tree,column' },
    { name: 'columnresize', parameters: 'tree,column,width' },
    { name: 'columnselection', parameters: 'grid,selection' },
    { name: 'columnshow', parameters: 'tree,column' },
    { name: 'columnsort', parameters: 'tree,column,direction' },
    { name: 'complete', parameters: 'editor,value,startValue,The' },
    { name: 'deactivate', parameters: 'oldActiveItem,tree,newActiveItem' },
    { name: 'deselect', parameters: 'tree,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'disclose', parameters: 'list,record,target,index,event' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'edit', parameters: 'sender,location' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'tree,event' },
    { name: 'focusenter', parameters: 'tree,event' },
    { name: 'focusleave', parameters: 'tree,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'groupcollapse', parameters: 'tree,group' },
    { name: 'groupexpand', parameters: 'tree,group' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemaction', parameters: 'tree,index,record,action' },
    { name: 'itemdoubletap', parameters: 'tree,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'tree,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'tree,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'tree,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'tree,index,target,record,e' },
    { name: 'itemswipe', parameters: 'tree,index,target,record,e' },
    { name: 'itemtap', parameters: 'tree,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'tree,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'tree,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'tree,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'tree,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'tree,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'load', parameters: 'tree,records,successful,operation,node' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'tree,to,from' },
    { name: 'nodecollapse', parameters: 'node,record' },
    { name: 'nodeexpand', parameters: 'row,record' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'tree' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'tree,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'tree,selected' },
    { name: 'selectionextenderdrag', parameters: 'grid,An,extension' },
    { name: 'show', parameters: 'sender' },
    { name: 'specialkey', parameters: 'editor,field,event' },
    { name: 'startedit', parameters: 'editor,boundEl,value,The' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'tree' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'validateedit', parameters: 'sender,location' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_tree_Tree.EVENTNAMES);
//    return Ext_grid_Grid.getEventNames(eventnames);
//}

var ExtTreeComponent_1;
class ExtTreeMetaData extends Ext_tree_Tree {
    static getAll() {
        ExtTreeMetaData.PROPERTIES = Ext_tree_Tree.getProperties(ExtTreeMetaData.PROPERTIES);
        ExtTreeMetaData.EVENTS = Ext_tree_Tree.getEvents(ExtTreeMetaData.EVENTS);
        ExtTreeMetaData.EVENTS.forEach((event) => {
            ExtTreeMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTreeMetaData.PROPERTIES = [];
ExtTreeMetaData.EVENTS = [];
ExtTreeMetaData.EVENTNAMES = [];
(function () { ExtTreeMetaData.getAll(); })();
let ExtTreeComponent = ExtTreeComponent_1 = class ExtTreeComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTreeMetaData.PROPERTIES, ExtTreeMetaData.EVENTS);
        this.xtype = 'tree';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTreeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTreeComponent = ExtTreeComponent_1 = __decorate([
    Component({
        selector: 'ext-tree',
        inputs: ExtTreeMetaData.PROPERTIES,
        outputs: ExtTreeMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTreeComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTreeComponent);

class Ext_Image extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_Image.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Image.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_Image.PROPERTIES = [
    'backgroundCls',
    'imageCls',
    'mode',
    'src',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Image.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'image' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'image,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'error', parameters: 'image,e' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'image,event' },
    { name: 'focusenter', parameters: 'image,event' },
    { name: 'focusleave', parameters: 'image,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'load', parameters: 'image,e' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tap', parameters: 'image,e' },
    { name: 'tofront', parameters: 'image' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Image.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtImageComponent_1;
class ExtImageMetaData extends Ext_Image {
    static getAll() {
        ExtImageMetaData.PROPERTIES = Ext_Image.getProperties(ExtImageMetaData.PROPERTIES);
        ExtImageMetaData.EVENTS = Ext_Image.getEvents(ExtImageMetaData.EVENTS);
        ExtImageMetaData.EVENTS.forEach((event) => {
            ExtImageMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtImageMetaData.PROPERTIES = [];
ExtImageMetaData.EVENTS = [];
ExtImageMetaData.EVENTNAMES = [];
(function () { ExtImageMetaData.getAll(); })();
let ExtImageComponent = ExtImageComponent_1 = class ExtImageComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtImageMetaData.PROPERTIES, ExtImageMetaData.EVENTS);
        this.xtype = 'image';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtImageComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtImageComponent = ExtImageComponent_1 = __decorate([
    Component({
        selector: 'ext-image',
        inputs: ExtImageMetaData.PROPERTIES,
        outputs: ExtImageMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtImageComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtImageComponent);

class Ext_Indicator extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_Indicator.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Indicator.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_Indicator.PROPERTIES = [
    'activeIndex',
    'count',
    'direction',
    'tapMode',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Indicator.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'indicator' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'indicator,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'indicator,event' },
    { name: 'focusenter', parameters: 'indicator,event' },
    { name: 'focusleave', parameters: 'indicator,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'indicatortap', parameters: 'indicator,index,item' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'next', parameters: 'indicator' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'previous', parameters: 'indicator' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'indicator' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Indicator.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtIndicatorComponent_1;
class ExtIndicatorMetaData extends Ext_Indicator {
    static getAll() {
        ExtIndicatorMetaData.PROPERTIES = Ext_Indicator.getProperties(ExtIndicatorMetaData.PROPERTIES);
        ExtIndicatorMetaData.EVENTS = Ext_Indicator.getEvents(ExtIndicatorMetaData.EVENTS);
        ExtIndicatorMetaData.EVENTS.forEach((event) => {
            ExtIndicatorMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtIndicatorMetaData.PROPERTIES = [];
ExtIndicatorMetaData.EVENTS = [];
ExtIndicatorMetaData.EVENTNAMES = [];
(function () { ExtIndicatorMetaData.getAll(); })();
let ExtIndicatorComponent = ExtIndicatorComponent_1 = class ExtIndicatorComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtIndicatorMetaData.PROPERTIES, ExtIndicatorMetaData.EVENTS);
        this.xtype = 'indicator';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtIndicatorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtIndicatorComponent = ExtIndicatorComponent_1 = __decorate([
    Component({
        selector: 'ext-indicator',
        inputs: ExtIndicatorMetaData.PROPERTIES,
        outputs: ExtIndicatorMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtIndicatorComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtIndicatorComponent);

class Ext_Label extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_Label.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Label.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_Label.PROPERTIES = [
    'html',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Label.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'label' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'label,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'label,event' },
    { name: 'focusenter', parameters: 'label,event' },
    { name: 'focusleave', parameters: 'label,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'label' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Label.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtLabelComponent_1;
class ExtLabelMetaData extends Ext_Label {
    static getAll() {
        ExtLabelMetaData.PROPERTIES = Ext_Label.getProperties(ExtLabelMetaData.PROPERTIES);
        ExtLabelMetaData.EVENTS = Ext_Label.getEvents(ExtLabelMetaData.EVENTS);
        ExtLabelMetaData.EVENTS.forEach((event) => {
            ExtLabelMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtLabelMetaData.PROPERTIES = [];
ExtLabelMetaData.EVENTS = [];
ExtLabelMetaData.EVENTNAMES = [];
(function () { ExtLabelMetaData.getAll(); })();
let ExtLabelComponent = ExtLabelComponent_1 = class ExtLabelComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtLabelMetaData.PROPERTIES, ExtLabelMetaData.EVENTS);
        this.xtype = 'label';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtLabelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtLabelComponent = ExtLabelComponent_1 = __decorate([
    Component({
        selector: 'ext-label',
        inputs: ExtLabelMetaData.PROPERTIES,
        outputs: ExtLabelMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtLabelComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtLabelComponent);

class Ext_list_Tree extends Ext_Gadget {
    static getProperties(properties) {
        properties = properties.concat(Ext_list_Tree.PROPERTIES);
        return Ext_Gadget.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_list_Tree.EVENTS);
        return Ext_Gadget.getEvents(events);
    }
}
Ext_list_Tree.PROPERTIES = [
    'defaults',
    'expanderFirst',
    'expanderOnly',
    'floatLeafItems',
    'highlightPath',
    'indent',
    'micro',
    'publishes',
    'selection',
    'selectOnExpander',
    'singleExpand',
    'store',
    'twoWayBindable',
    'ui',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_list_Tree.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'treelist' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'treelist,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'treelist,event' },
    { name: 'focusenter', parameters: 'treelist,event' },
    { name: 'focusleave', parameters: 'treelist,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemclick', parameters: 'sender,info' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'selectionchange', parameters: 'treelist,record' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'treelist' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_list_Tree.EVENTNAMES);
//    return Ext_Gadget.getEventNames(eventnames);
//}

var ExtTreelistComponent_1;
class ExtTreelistMetaData extends Ext_list_Tree {
    static getAll() {
        ExtTreelistMetaData.PROPERTIES = Ext_list_Tree.getProperties(ExtTreelistMetaData.PROPERTIES);
        ExtTreelistMetaData.EVENTS = Ext_list_Tree.getEvents(ExtTreelistMetaData.EVENTS);
        ExtTreelistMetaData.EVENTS.forEach((event) => {
            ExtTreelistMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTreelistMetaData.PROPERTIES = [];
ExtTreelistMetaData.EVENTS = [];
ExtTreelistMetaData.EVENTNAMES = [];
(function () { ExtTreelistMetaData.getAll(); })();
let ExtTreelistComponent = ExtTreelistComponent_1 = class ExtTreelistComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTreelistMetaData.PROPERTIES, ExtTreelistMetaData.EVENTS);
        this.xtype = 'treelist';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTreelistComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTreelistComponent = ExtTreelistComponent_1 = __decorate([
    Component({
        selector: 'ext-treelist',
        inputs: ExtTreelistMetaData.PROPERTIES,
        outputs: ExtTreelistMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTreelistComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTreelistComponent);

class Ext_list_AbstractTreeItem extends Ext_Widget {
    static getProperties(properties) {
        properties = properties.concat(Ext_list_AbstractTreeItem.PROPERTIES);
        return Ext_Widget.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_list_AbstractTreeItem.EVENTS);
        return Ext_Widget.getEvents(events);
    }
}
Ext_list_AbstractTreeItem.PROPERTIES = [
    'expandable',
    'expanded',
    'iconCls',
    'iconClsProperty',
    'leaf',
    'loading',
    'node',
    'over',
    'owner',
    'parentItem',
    'selected',
    'selectedParent',
    'text',
    'textProperty',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_list_AbstractTreeItem.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_list_AbstractTreeItem.EVENTNAMES);
//    return Ext_Widget.getEventNames(eventnames);
//}

class Ext_list_TreeItem extends Ext_list_AbstractTreeItem {
    static getProperties(properties) {
        properties = properties.concat(Ext_list_TreeItem.PROPERTIES);
        return Ext_list_AbstractTreeItem.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_list_TreeItem.EVENTS);
        return Ext_list_AbstractTreeItem.getEvents(events);
    }
}
Ext_list_TreeItem.PROPERTIES = [
    'rowCls',
    'rowClsProperty',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_list_TreeItem.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'treelistitem' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'treelistitem,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'treelistitem,event' },
    { name: 'focusenter', parameters: 'treelistitem,event' },
    { name: 'focusleave', parameters: 'treelistitem,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'treelistitem' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_list_TreeItem.EVENTNAMES);
//    return Ext_list_AbstractTreeItem.getEventNames(eventnames);
//}

var ExtTreelistitemComponent_1;
class ExtTreelistitemMetaData extends Ext_list_TreeItem {
    static getAll() {
        ExtTreelistitemMetaData.PROPERTIES = Ext_list_TreeItem.getProperties(ExtTreelistitemMetaData.PROPERTIES);
        ExtTreelistitemMetaData.EVENTS = Ext_list_TreeItem.getEvents(ExtTreelistitemMetaData.EVENTS);
        ExtTreelistitemMetaData.EVENTS.forEach((event) => {
            ExtTreelistitemMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTreelistitemMetaData.PROPERTIES = [];
ExtTreelistitemMetaData.EVENTS = [];
ExtTreelistitemMetaData.EVENTNAMES = [];
(function () { ExtTreelistitemMetaData.getAll(); })();
let ExtTreelistitemComponent = ExtTreelistitemComponent_1 = class ExtTreelistitemComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTreelistitemMetaData.PROPERTIES, ExtTreelistitemMetaData.EVENTS);
        this.xtype = 'treelistitem';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTreelistitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTreelistitemComponent = ExtTreelistitemComponent_1 = __decorate([
    Component({
        selector: 'ext-treelistitem',
        inputs: ExtTreelistitemMetaData.PROPERTIES,
        outputs: ExtTreelistitemMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTreelistitemComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTreelistitemComponent);

class Ext_Mask extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_Mask.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Mask.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_Mask.PROPERTIES = [
    'bottom',
    'left',
    'right',
    'top',
    'transparent',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Mask.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'mask' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'mask,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'mask,event' },
    { name: 'focusenter', parameters: 'mask,event' },
    { name: 'focusleave', parameters: 'mask,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tap', parameters: 'mask,e' },
    { name: 'tofront', parameters: 'mask' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Mask.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

class Ext_LoadMask extends Ext_Mask {
    static getProperties(properties) {
        properties = properties.concat(Ext_LoadMask.PROPERTIES);
        return Ext_Mask.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_LoadMask.EVENTS);
        return Ext_Mask.getEvents(events);
    }
}
Ext_LoadMask.PROPERTIES = [
    'cls',
    'indicator',
    'message',
    'messageCls',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_LoadMask.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'loadmask' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'loadmask,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'loadmask,event' },
    { name: 'focusenter', parameters: 'loadmask,event' },
    { name: 'focusleave', parameters: 'loadmask,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tap', parameters: 'loadmask,e' },
    { name: 'tofront', parameters: 'loadmask' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_LoadMask.EVENTNAMES);
//    return Ext_Mask.getEventNames(eventnames);
//}

var ExtLoadmaskComponent_1;
class ExtLoadmaskMetaData extends Ext_LoadMask {
    static getAll() {
        ExtLoadmaskMetaData.PROPERTIES = Ext_LoadMask.getProperties(ExtLoadmaskMetaData.PROPERTIES);
        ExtLoadmaskMetaData.EVENTS = Ext_LoadMask.getEvents(ExtLoadmaskMetaData.EVENTS);
        ExtLoadmaskMetaData.EVENTS.forEach((event) => {
            ExtLoadmaskMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtLoadmaskMetaData.PROPERTIES = [];
ExtLoadmaskMetaData.EVENTS = [];
ExtLoadmaskMetaData.EVENTNAMES = [];
(function () { ExtLoadmaskMetaData.getAll(); })();
let ExtLoadmaskComponent = ExtLoadmaskComponent_1 = class ExtLoadmaskComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtLoadmaskMetaData.PROPERTIES, ExtLoadmaskMetaData.EVENTS);
        this.xtype = 'loadmask';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtLoadmaskComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtLoadmaskComponent = ExtLoadmaskComponent_1 = __decorate([
    Component({
        selector: 'ext-loadmask',
        inputs: ExtLoadmaskMetaData.PROPERTIES,
        outputs: ExtLoadmaskMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtLoadmaskComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtLoadmaskComponent);

var ExtMaskComponent_1;
class ExtMaskMetaData extends Ext_Mask {
    static getAll() {
        ExtMaskMetaData.PROPERTIES = Ext_Mask.getProperties(ExtMaskMetaData.PROPERTIES);
        ExtMaskMetaData.EVENTS = Ext_Mask.getEvents(ExtMaskMetaData.EVENTS);
        ExtMaskMetaData.EVENTS.forEach((event) => {
            ExtMaskMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtMaskMetaData.PROPERTIES = [];
ExtMaskMetaData.EVENTS = [];
ExtMaskMetaData.EVENTNAMES = [];
(function () { ExtMaskMetaData.getAll(); })();
let ExtMaskComponent = ExtMaskComponent_1 = class ExtMaskComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtMaskMetaData.PROPERTIES, ExtMaskMetaData.EVENTS);
        this.xtype = 'mask';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtMaskComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtMaskComponent = ExtMaskComponent_1 = __decorate([
    Component({
        selector: 'ext-mask',
        inputs: ExtMaskMetaData.PROPERTIES,
        outputs: ExtMaskMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtMaskComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtMaskComponent);

var ExtMediaComponent_1;
class ExtMediaMetaData extends Ext_Media {
    static getAll() {
        ExtMediaMetaData.PROPERTIES = Ext_Media.getProperties(ExtMediaMetaData.PROPERTIES);
        ExtMediaMetaData.EVENTS = Ext_Media.getEvents(ExtMediaMetaData.EVENTS);
        ExtMediaMetaData.EVENTS.forEach((event) => {
            ExtMediaMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtMediaMetaData.PROPERTIES = [];
ExtMediaMetaData.EVENTS = [];
ExtMediaMetaData.EVENTNAMES = [];
(function () { ExtMediaMetaData.getAll(); })();
let ExtMediaComponent = ExtMediaComponent_1 = class ExtMediaComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtMediaMetaData.PROPERTIES, ExtMediaMetaData.EVENTS);
        this.xtype = 'media';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtMediaComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtMediaComponent = ExtMediaComponent_1 = __decorate([
    Component({
        selector: 'ext-media',
        inputs: ExtMediaMetaData.PROPERTIES,
        outputs: ExtMediaMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtMediaComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtMediaComponent);

var ExtMenucheckitemComponent_1;
class ExtMenucheckitemMetaData extends Ext_menu_CheckItem {
    static getAll() {
        ExtMenucheckitemMetaData.PROPERTIES = Ext_menu_CheckItem.getProperties(ExtMenucheckitemMetaData.PROPERTIES);
        ExtMenucheckitemMetaData.EVENTS = Ext_menu_CheckItem.getEvents(ExtMenucheckitemMetaData.EVENTS);
        ExtMenucheckitemMetaData.EVENTS.forEach((event) => {
            ExtMenucheckitemMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtMenucheckitemMetaData.PROPERTIES = [];
ExtMenucheckitemMetaData.EVENTS = [];
ExtMenucheckitemMetaData.EVENTNAMES = [];
(function () { ExtMenucheckitemMetaData.getAll(); })();
let ExtMenucheckitemComponent = ExtMenucheckitemComponent_1 = class ExtMenucheckitemComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtMenucheckitemMetaData.PROPERTIES, ExtMenucheckitemMetaData.EVENTS);
        this.xtype = 'menucheckitem';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtMenucheckitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtMenucheckitemComponent = ExtMenucheckitemComponent_1 = __decorate([
    Component({
        selector: 'ext-menucheckitem',
        inputs: ExtMenucheckitemMetaData.PROPERTIES,
        outputs: ExtMenucheckitemMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtMenucheckitemComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtMenucheckitemComponent);

class Ext_menu_TextItem extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_menu_TextItem.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_menu_TextItem.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_menu_TextItem.PROPERTIES = [
    'clickHideDelay',
    'destroyMenu',
    'handler',
    'hideOnClick',
    'href',
    'icon',
    'iconAlign',
    'iconCls',
    'indented',
    'menu',
    'menuAlign',
    'menuExpandDelay',
    'menuHideDelay',
    'scope',
    'separator',
    'target',
    'text',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_menu_TextItem.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'menuitem' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'menuitem,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'menuitem,event' },
    { name: 'focusenter', parameters: 'menuitem,event' },
    { name: 'focusleave', parameters: 'menuitem,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'menuitem' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_menu_TextItem.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtMenuitemComponent_1;
class ExtMenuitemMetaData extends Ext_menu_TextItem {
    static getAll() {
        ExtMenuitemMetaData.PROPERTIES = Ext_menu_TextItem.getProperties(ExtMenuitemMetaData.PROPERTIES);
        ExtMenuitemMetaData.EVENTS = Ext_menu_TextItem.getEvents(ExtMenuitemMetaData.EVENTS);
        ExtMenuitemMetaData.EVENTS.forEach((event) => {
            ExtMenuitemMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtMenuitemMetaData.PROPERTIES = [];
ExtMenuitemMetaData.EVENTS = [];
ExtMenuitemMetaData.EVENTNAMES = [];
(function () { ExtMenuitemMetaData.getAll(); })();
let ExtMenuitemComponent = ExtMenuitemComponent_1 = class ExtMenuitemComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtMenuitemMetaData.PROPERTIES, ExtMenuitemMetaData.EVENTS);
        this.xtype = 'menuitem';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtMenuitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtMenuitemComponent = ExtMenuitemComponent_1 = __decorate([
    Component({
        selector: 'ext-menuitem',
        inputs: ExtMenuitemMetaData.PROPERTIES,
        outputs: ExtMenuitemMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtMenuitemComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtMenuitemComponent);

class Ext_menu_Menu extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_menu_Menu.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_menu_Menu.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_menu_Menu.PROPERTIES = [
    'align',
    'allowOtherMenus',
    'autoHide',
    'groups',
    'ignoreParentClicks',
    'indented',
    'mouseLeaveDelay',
    'separator',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_menu_Menu.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,menu,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'menu,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'menu' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'menu' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'menu,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'menu' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'menu,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'menu' },
    { name: 'deactivate', parameters: 'oldActiveItem,menu,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'menu' },
    { name: 'drawershow', parameters: 'menu' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'menu' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'menu,event' },
    { name: 'focusenter', parameters: 'menu,event' },
    { name: 'focusleave', parameters: 'menu,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'groupchange', parameters: 'menu,groupName,newValue,oldValue' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'menu,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'menu,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'menu,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'menu,context' },
    { name: 'resizedragcancel', parameters: 'menu,context' },
    { name: 'resizedragend', parameters: 'menu,context' },
    { name: 'resizedragstart', parameters: 'menu,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'menu' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_menu_Menu.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

var ExtMenuComponent_1;
class ExtMenuMetaData extends Ext_menu_Menu {
    static getAll() {
        ExtMenuMetaData.PROPERTIES = Ext_menu_Menu.getProperties(ExtMenuMetaData.PROPERTIES);
        ExtMenuMetaData.EVENTS = Ext_menu_Menu.getEvents(ExtMenuMetaData.EVENTS);
        ExtMenuMetaData.EVENTS.forEach((event) => {
            ExtMenuMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtMenuMetaData.PROPERTIES = [];
ExtMenuMetaData.EVENTS = [];
ExtMenuMetaData.EVENTNAMES = [];
(function () { ExtMenuMetaData.getAll(); })();
let ExtMenuComponent = ExtMenuComponent_1 = class ExtMenuComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtMenuMetaData.PROPERTIES, ExtMenuMetaData.EVENTS);
        this.xtype = 'menu';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtMenuComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtMenuComponent = ExtMenuComponent_1 = __decorate([
    Component({
        selector: 'ext-menu',
        inputs: ExtMenuMetaData.PROPERTIES,
        outputs: ExtMenuMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtMenuComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtMenuComponent);

var ExtMenuradioitemComponent_1;
class ExtMenuradioitemMetaData extends Ext_menu_RadioItem {
    static getAll() {
        ExtMenuradioitemMetaData.PROPERTIES = Ext_menu_RadioItem.getProperties(ExtMenuradioitemMetaData.PROPERTIES);
        ExtMenuradioitemMetaData.EVENTS = Ext_menu_RadioItem.getEvents(ExtMenuradioitemMetaData.EVENTS);
        ExtMenuradioitemMetaData.EVENTS.forEach((event) => {
            ExtMenuradioitemMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtMenuradioitemMetaData.PROPERTIES = [];
ExtMenuradioitemMetaData.EVENTS = [];
ExtMenuradioitemMetaData.EVENTNAMES = [];
(function () { ExtMenuradioitemMetaData.getAll(); })();
let ExtMenuradioitemComponent = ExtMenuradioitemComponent_1 = class ExtMenuradioitemComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtMenuradioitemMetaData.PROPERTIES, ExtMenuradioitemMetaData.EVENTS);
        this.xtype = 'menuradioitem';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtMenuradioitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtMenuradioitemComponent = ExtMenuradioitemComponent_1 = __decorate([
    Component({
        selector: 'ext-menuradioitem',
        inputs: ExtMenuradioitemMetaData.PROPERTIES,
        outputs: ExtMenuradioitemMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtMenuradioitemComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtMenuradioitemComponent);

class Ext_menu_Separator extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_menu_Separator.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_menu_Separator.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_menu_Separator.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_menu_Separator.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'menuseparator' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'menuseparator,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'menuseparator,event' },
    { name: 'focusenter', parameters: 'menuseparator,event' },
    { name: 'focusleave', parameters: 'menuseparator,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'menuseparator' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_menu_Separator.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtMenuseparatorComponent_1;
class ExtMenuseparatorMetaData extends Ext_menu_Separator {
    static getAll() {
        ExtMenuseparatorMetaData.PROPERTIES = Ext_menu_Separator.getProperties(ExtMenuseparatorMetaData.PROPERTIES);
        ExtMenuseparatorMetaData.EVENTS = Ext_menu_Separator.getEvents(ExtMenuseparatorMetaData.EVENTS);
        ExtMenuseparatorMetaData.EVENTS.forEach((event) => {
            ExtMenuseparatorMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtMenuseparatorMetaData.PROPERTIES = [];
ExtMenuseparatorMetaData.EVENTS = [];
ExtMenuseparatorMetaData.EVENTNAMES = [];
(function () { ExtMenuseparatorMetaData.getAll(); })();
let ExtMenuseparatorComponent = ExtMenuseparatorComponent_1 = class ExtMenuseparatorComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtMenuseparatorMetaData.PROPERTIES, ExtMenuseparatorMetaData.EVENTS);
        this.xtype = 'menuseparator';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtMenuseparatorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtMenuseparatorComponent = ExtMenuseparatorComponent_1 = __decorate([
    Component({
        selector: 'ext-menuseparator',
        inputs: ExtMenuseparatorMetaData.PROPERTIES,
        outputs: ExtMenuseparatorMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtMenuseparatorComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtMenuseparatorComponent);

class Ext_Dialog extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_Dialog.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Dialog.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_Dialog.PROPERTIES = [
    'bodyBorder',
    'border',
    'centered',
    'constrainDrag',
    'dismissAction',
    'dismissHandler',
    'draggable',
    'floated',
    'hideAnimation',
    'hideMode',
    'keyMap',
    'maskTapHandler',
    'maximizable',
    'maximizeAnimation',
    'maximized',
    'maximizeProxy',
    'maximizeTool',
    'modal',
    'restorable',
    'restoreAnimation',
    'restoreTool',
    'shadow',
    'showAnimation',
    'tabIndex',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Dialog.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,dialog,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'dialog,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'dialog' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'dialog' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaximize', parameters: 'dialog' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'dialog,context' },
    { name: 'beforerestore', parameters: 'dialog' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'dialog' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'dialog,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'dialog' },
    { name: 'deactivate', parameters: 'oldActiveItem,dialog,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'dialog' },
    { name: 'drawershow', parameters: 'dialog' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'dialog' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'dialog,event' },
    { name: 'focusenter', parameters: 'dialog,event' },
    { name: 'focusleave', parameters: 'dialog,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maximize', parameters: 'dialog' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'dialog,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'dialog,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'dialog,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'dialog,context' },
    { name: 'resizedragcancel', parameters: 'dialog,context' },
    { name: 'resizedragend', parameters: 'dialog,context' },
    { name: 'resizedragstart', parameters: 'dialog,context' },
    { name: 'restore', parameters: 'dialog' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'dialog' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Dialog.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

class Ext_MessageBox extends Ext_Dialog {
    static getProperties(properties) {
        properties = properties.concat(Ext_MessageBox.PROPERTIES);
        return Ext_Dialog.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_MessageBox.EVENTS);
        return Ext_Dialog.getEvents(events);
    }
}
Ext_MessageBox.PROPERTIES = [
    'buttons',
    'closeAction',
    'defaultTextHeight',
    'iconCls',
    'layout',
    'message',
    'msg',
    'prompt',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_MessageBox.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,messagebox,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'messagebox,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'messagebox' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'messagebox' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaximize', parameters: 'dialog' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'messagebox,context' },
    { name: 'beforerestore', parameters: 'dialog' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'messagebox' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'messagebox,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'messagebox' },
    { name: 'deactivate', parameters: 'oldActiveItem,messagebox,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'messagebox' },
    { name: 'drawershow', parameters: 'messagebox' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'messagebox' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'messagebox,event' },
    { name: 'focusenter', parameters: 'messagebox,event' },
    { name: 'focusleave', parameters: 'messagebox,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maximize', parameters: 'dialog' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'messagebox,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'messagebox,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'messagebox,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'messagebox,context' },
    { name: 'resizedragcancel', parameters: 'messagebox,context' },
    { name: 'resizedragend', parameters: 'messagebox,context' },
    { name: 'resizedragstart', parameters: 'messagebox,context' },
    { name: 'restore', parameters: 'dialog' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'messagebox' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_MessageBox.EVENTNAMES);
//    return Ext_Dialog.getEventNames(eventnames);
//}

var ExtMessageboxComponent_1;
class ExtMessageboxMetaData extends Ext_MessageBox {
    static getAll() {
        ExtMessageboxMetaData.PROPERTIES = Ext_MessageBox.getProperties(ExtMessageboxMetaData.PROPERTIES);
        ExtMessageboxMetaData.EVENTS = Ext_MessageBox.getEvents(ExtMessageboxMetaData.EVENTS);
        ExtMessageboxMetaData.EVENTS.forEach((event) => {
            ExtMessageboxMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtMessageboxMetaData.PROPERTIES = [];
ExtMessageboxMetaData.EVENTS = [];
ExtMessageboxMetaData.EVENTNAMES = [];
(function () { ExtMessageboxMetaData.getAll(); })();
let ExtMessageboxComponent = ExtMessageboxComponent_1 = class ExtMessageboxComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtMessageboxMetaData.PROPERTIES, ExtMessageboxMetaData.EVENTS);
        this.xtype = 'messagebox';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtMessageboxComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtMessageboxComponent = ExtMessageboxComponent_1 = __decorate([
    Component({
        selector: 'ext-messagebox',
        inputs: ExtMessageboxMetaData.PROPERTIES,
        outputs: ExtMessageboxMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtMessageboxComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtMessageboxComponent);

class Ext_NavigationView extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_NavigationView.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_NavigationView.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_NavigationView.PROPERTIES = [
    'defaultBackButtonText',
    'items',
    'layout',
    'navigationBar',
    'useTitleForBackButtonText',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_NavigationView.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,navigationview,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'navigationview,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'back', parameters: 'navigationview' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'navigationview' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'navigationview,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,navigationview,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'navigationview,event' },
    { name: 'focusenter', parameters: 'navigationview,event' },
    { name: 'focusleave', parameters: 'navigationview,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'navigationview,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'pop', parameters: 'navigationview,view' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'push', parameters: 'navigationview,view' },
    { name: 'remove', parameters: 'navigationview,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'navigationview,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'navigationview' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_NavigationView.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

var ExtNavigationviewComponent_1;
class ExtNavigationviewMetaData extends Ext_NavigationView {
    static getAll() {
        ExtNavigationviewMetaData.PROPERTIES = Ext_NavigationView.getProperties(ExtNavigationviewMetaData.PROPERTIES);
        ExtNavigationviewMetaData.EVENTS = Ext_NavigationView.getEvents(ExtNavigationviewMetaData.EVENTS);
        ExtNavigationviewMetaData.EVENTS.forEach((event) => {
            ExtNavigationviewMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtNavigationviewMetaData.PROPERTIES = [];
ExtNavigationviewMetaData.EVENTS = [];
ExtNavigationviewMetaData.EVENTNAMES = [];
(function () { ExtNavigationviewMetaData.getAll(); })();
let ExtNavigationviewComponent = ExtNavigationviewComponent_1 = class ExtNavigationviewComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtNavigationviewMetaData.PROPERTIES, ExtNavigationviewMetaData.EVENTS);
        this.xtype = 'navigationview';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtNavigationviewComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtNavigationviewComponent = ExtNavigationviewComponent_1 = __decorate([
    Component({
        selector: 'ext-navigationview',
        inputs: ExtNavigationviewMetaData.PROPERTIES,
        outputs: ExtNavigationviewMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtNavigationviewComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtNavigationviewComponent);

class Ext_panel_Panel extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_panel_Panel.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_panel_Panel.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_panel_Panel.PROPERTIES = [
    'anchor',
    'anchorPosition',
    'bbar',
    'bodyBorder',
    'bodyPadding',
    'bodyStyle',
    'border',
    'buttons',
    'buttonToolbar',
    'closable',
    'closeAction',
    'closeToolText',
    'collapsed',
    'collapsible',
    'header',
    'headerPosition',
    'icon',
    'iconAlign',
    'iconCls',
    'lbar',
    'manageBorders',
    'rbar',
    'resizable',
    'tbar',
    'title',
    'titleAlign',
    'titleCollapse',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_panel_Panel.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,panel,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'panel,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'panel' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'panel' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'panel,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'panel' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'panel,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'panel' },
    { name: 'deactivate', parameters: 'oldActiveItem,panel,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'panel' },
    { name: 'drawershow', parameters: 'panel' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'panel' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'panel,event' },
    { name: 'focusenter', parameters: 'panel,event' },
    { name: 'focusleave', parameters: 'panel,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'panel,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'panel,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'panel,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'panel,context' },
    { name: 'resizedragcancel', parameters: 'panel,context' },
    { name: 'resizedragend', parameters: 'panel,context' },
    { name: 'resizedragstart', parameters: 'panel,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'panel' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_panel_Panel.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

var ExtPanelComponent_1;
class ExtPanelMetaData extends Ext_panel_Panel {
    static getAll() {
        ExtPanelMetaData.PROPERTIES = Ext_panel_Panel.getProperties(ExtPanelMetaData.PROPERTIES);
        ExtPanelMetaData.EVENTS = Ext_panel_Panel.getEvents(ExtPanelMetaData.EVENTS);
        ExtPanelMetaData.EVENTS.forEach((event) => {
            ExtPanelMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPanelMetaData.PROPERTIES = [];
ExtPanelMetaData.EVENTS = [];
ExtPanelMetaData.EVENTNAMES = [];
(function () { ExtPanelMetaData.getAll(); })();
let ExtPanelComponent = ExtPanelComponent_1 = class ExtPanelComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPanelMetaData.PROPERTIES, ExtPanelMetaData.EVENTS);
        this.xtype = 'panel';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPanelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPanelComponent = ExtPanelComponent_1 = __decorate([
    Component({
        selector: 'ext-panel',
        inputs: ExtPanelMetaData.PROPERTIES,
        outputs: ExtPanelMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPanelComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPanelComponent);

class Ext_panel_Accordion extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_panel_Accordion.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_panel_Accordion.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_panel_Accordion.PROPERTIES = [
    'defaultPanelUI',
    'expandedFirst',
    'openable',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_panel_Accordion.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,accordion,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'accordion,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'accordion' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'accordion' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'accordion,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'accordion' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'accordion,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'accordion' },
    { name: 'deactivate', parameters: 'oldActiveItem,accordion,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'accordion' },
    { name: 'drawershow', parameters: 'accordion' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'accordion' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'accordion,event' },
    { name: 'focusenter', parameters: 'accordion,event' },
    { name: 'focusleave', parameters: 'accordion,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'accordion,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'accordion,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'accordion,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'accordion,context' },
    { name: 'resizedragcancel', parameters: 'accordion,context' },
    { name: 'resizedragend', parameters: 'accordion,context' },
    { name: 'resizedragstart', parameters: 'accordion,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'accordion' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_panel_Accordion.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

var ExtAccordionComponent_1;
class ExtAccordionMetaData extends Ext_panel_Accordion {
    static getAll() {
        ExtAccordionMetaData.PROPERTIES = Ext_panel_Accordion.getProperties(ExtAccordionMetaData.PROPERTIES);
        ExtAccordionMetaData.EVENTS = Ext_panel_Accordion.getEvents(ExtAccordionMetaData.EVENTS);
        ExtAccordionMetaData.EVENTS.forEach((event) => {
            ExtAccordionMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtAccordionMetaData.PROPERTIES = [];
ExtAccordionMetaData.EVENTS = [];
ExtAccordionMetaData.EVENTNAMES = [];
(function () { ExtAccordionMetaData.getAll(); })();
let ExtAccordionComponent = ExtAccordionComponent_1 = class ExtAccordionComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtAccordionMetaData.PROPERTIES, ExtAccordionMetaData.EVENTS);
        this.xtype = 'accordion';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtAccordionComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtAccordionComponent = ExtAccordionComponent_1 = __decorate([
    Component({
        selector: 'ext-accordion',
        inputs: ExtAccordionMetaData.PROPERTIES,
        outputs: ExtAccordionMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtAccordionComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtAccordionComponent);

class Ext_panel_Date extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_panel_Date.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_panel_Date.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_panel_Date.PROPERTIES = [
    'animation',
    'autoConfirm',
    'captionFormat',
    'dateCellFormat',
    'disabledDates',
    'disabledDays',
    'focusableDate',
    'format',
    'handler',
    'headerFormat',
    'headerLength',
    'hideCaptions',
    'hideOutside',
    'maxDate',
    'minDate',
    'navigationPosition',
    'nextText',
    'panes',
    'prevText',
    'scope',
    'selectOnNavigate',
    'showAfterMaxDate',
    'showBeforeMinDate',
    'showFooter',
    'showTodayButton',
    'specialDates',
    'specialDays',
    'splitTitle',
    'startDay',
    'titleAnimation',
    'transformCellCls',
    'value',
    'weekendDays',
    'yearPicker',
    'yearPickerDefaults',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_panel_Date.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,datepanel,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'datepanel,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'datepanel' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'datepanel' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'datepanel,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'datepanel' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'datepanel,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'datepanel' },
    { name: 'deactivate', parameters: 'oldActiveItem,datepanel,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'datepanel' },
    { name: 'drawershow', parameters: 'datepanel' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'datepanel' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'datepanel,event' },
    { name: 'focusenter', parameters: 'datepanel,event' },
    { name: 'focusleave', parameters: 'datepanel,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'datepanel,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'datepanel,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'datepanel,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'datepanel,context' },
    { name: 'resizedragcancel', parameters: 'datepanel,context' },
    { name: 'resizedragend', parameters: 'datepanel,context' },
    { name: 'resizedragstart', parameters: 'datepanel,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'datepanel' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_panel_Date.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

var ExtDatepanelComponent_1;
class ExtDatepanelMetaData extends Ext_panel_Date {
    static getAll() {
        ExtDatepanelMetaData.PROPERTIES = Ext_panel_Date.getProperties(ExtDatepanelMetaData.PROPERTIES);
        ExtDatepanelMetaData.EVENTS = Ext_panel_Date.getEvents(ExtDatepanelMetaData.EVENTS);
        ExtDatepanelMetaData.EVENTS.forEach((event) => {
            ExtDatepanelMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtDatepanelMetaData.PROPERTIES = [];
ExtDatepanelMetaData.EVENTS = [];
ExtDatepanelMetaData.EVENTNAMES = [];
(function () { ExtDatepanelMetaData.getAll(); })();
let ExtDatepanelComponent = ExtDatepanelComponent_1 = class ExtDatepanelComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtDatepanelMetaData.PROPERTIES, ExtDatepanelMetaData.EVENTS);
        this.xtype = 'datepanel';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtDatepanelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtDatepanelComponent = ExtDatepanelComponent_1 = __decorate([
    Component({
        selector: 'ext-datepanel',
        inputs: ExtDatepanelMetaData.PROPERTIES,
        outputs: ExtDatepanelMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtDatepanelComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtDatepanelComponent);

class Ext_panel_Title extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_panel_Title.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_panel_Title.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_panel_Title.PROPERTIES = [
    'glyph',
    'icon',
    'iconAlign',
    'iconCls',
    'rotateIcon',
    'rotation',
    'text',
    'textAlign',
    'weight',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_panel_Title.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'paneltitle' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'paneltitle,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'paneltitle,event' },
    { name: 'focusenter', parameters: 'paneltitle,event' },
    { name: 'focusleave', parameters: 'paneltitle,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'paneltitle' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_panel_Title.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

class Ext_panel_DateTitle extends Ext_panel_Title {
    static getProperties(properties) {
        properties = properties.concat(Ext_panel_DateTitle.PROPERTIES);
        return Ext_panel_Title.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_panel_DateTitle.EVENTS);
        return Ext_panel_Title.getEvents(events);
    }
}
Ext_panel_DateTitle.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_panel_DateTitle.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'datetitle' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'datetitle,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'datetitle,event' },
    { name: 'focusenter', parameters: 'datetitle,event' },
    { name: 'focusleave', parameters: 'datetitle,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'datetitle' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_panel_DateTitle.EVENTNAMES);
//    return Ext_panel_Title.getEventNames(eventnames);
//}

var ExtDatetitleComponent_1;
class ExtDatetitleMetaData extends Ext_panel_DateTitle {
    static getAll() {
        ExtDatetitleMetaData.PROPERTIES = Ext_panel_DateTitle.getProperties(ExtDatetitleMetaData.PROPERTIES);
        ExtDatetitleMetaData.EVENTS = Ext_panel_DateTitle.getEvents(ExtDatetitleMetaData.EVENTS);
        ExtDatetitleMetaData.EVENTS.forEach((event) => {
            ExtDatetitleMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtDatetitleMetaData.PROPERTIES = [];
ExtDatetitleMetaData.EVENTS = [];
ExtDatetitleMetaData.EVENTNAMES = [];
(function () { ExtDatetitleMetaData.getAll(); })();
let ExtDatetitleComponent = ExtDatetitleComponent_1 = class ExtDatetitleComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtDatetitleMetaData.PROPERTIES, ExtDatetitleMetaData.EVENTS);
        this.xtype = 'datetitle';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtDatetitleComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtDatetitleComponent = ExtDatetitleComponent_1 = __decorate([
    Component({
        selector: 'ext-datetitle',
        inputs: ExtDatetitleMetaData.PROPERTIES,
        outputs: ExtDatetitleMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtDatetitleComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtDatetitleComponent);

class Ext_panel_Header extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_panel_Header.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_panel_Header.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_panel_Header.PROPERTIES = [
    'glyph',
    'icon',
    'iconAlign',
    'iconCls',
    'position',
    'title',
    'titleAlign',
    'titleRotation',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_panel_Header.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,panelheader,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'panelheader,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'panelheader' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'panelheader,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,panelheader,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'panelheader,event' },
    { name: 'focusenter', parameters: 'panelheader,event' },
    { name: 'focusleave', parameters: 'panelheader,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'panelheader,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'panelheader,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'panelheader,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'panelheader' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_panel_Header.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

var ExtPanelheaderComponent_1;
class ExtPanelheaderMetaData extends Ext_panel_Header {
    static getAll() {
        ExtPanelheaderMetaData.PROPERTIES = Ext_panel_Header.getProperties(ExtPanelheaderMetaData.PROPERTIES);
        ExtPanelheaderMetaData.EVENTS = Ext_panel_Header.getEvents(ExtPanelheaderMetaData.EVENTS);
        ExtPanelheaderMetaData.EVENTS.forEach((event) => {
            ExtPanelheaderMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPanelheaderMetaData.PROPERTIES = [];
ExtPanelheaderMetaData.EVENTS = [];
ExtPanelheaderMetaData.EVENTNAMES = [];
(function () { ExtPanelheaderMetaData.getAll(); })();
let ExtPanelheaderComponent = ExtPanelheaderComponent_1 = class ExtPanelheaderComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPanelheaderMetaData.PROPERTIES, ExtPanelheaderMetaData.EVENTS);
        this.xtype = 'panelheader';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPanelheaderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPanelheaderComponent = ExtPanelheaderComponent_1 = __decorate([
    Component({
        selector: 'ext-panelheader',
        inputs: ExtPanelheaderMetaData.PROPERTIES,
        outputs: ExtPanelheaderMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPanelheaderComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPanelheaderComponent);

class Ext_panel_Time extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_panel_Time.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_panel_Time.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_panel_Time.PROPERTIES = [
    'alignPMInside',
    'autoAdvance',
    'buttonAlign',
    'confirmable',
    'declineHandler',
    'defaultButtons',
    'handler',
    'hourDisplayFormat',
    'meridiem',
    'mode',
    'scope',
    'value',
    'vertical',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_panel_Time.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,timepanel,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'timepanel,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'timepanel' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'timepanel' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'timepanel,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'timepanel' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'timepanel,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'timepanel' },
    { name: 'deactivate', parameters: 'oldActiveItem,timepanel,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'timepanel' },
    { name: 'drawershow', parameters: 'timepanel' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'timepanel' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'timepanel,event' },
    { name: 'focusenter', parameters: 'timepanel,event' },
    { name: 'focusleave', parameters: 'timepanel,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'timepanel,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'timepanel,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'timepanel,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'timepanel,context' },
    { name: 'resizedragcancel', parameters: 'timepanel,context' },
    { name: 'resizedragend', parameters: 'timepanel,context' },
    { name: 'resizedragstart', parameters: 'timepanel,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'timepanel' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_panel_Time.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

var ExtTimepanelComponent_1;
class ExtTimepanelMetaData extends Ext_panel_Time {
    static getAll() {
        ExtTimepanelMetaData.PROPERTIES = Ext_panel_Time.getProperties(ExtTimepanelMetaData.PROPERTIES);
        ExtTimepanelMetaData.EVENTS = Ext_panel_Time.getEvents(ExtTimepanelMetaData.EVENTS);
        ExtTimepanelMetaData.EVENTS.forEach((event) => {
            ExtTimepanelMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTimepanelMetaData.PROPERTIES = [];
ExtTimepanelMetaData.EVENTS = [];
ExtTimepanelMetaData.EVENTNAMES = [];
(function () { ExtTimepanelMetaData.getAll(); })();
let ExtTimepanelComponent = ExtTimepanelComponent_1 = class ExtTimepanelComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTimepanelMetaData.PROPERTIES, ExtTimepanelMetaData.EVENTS);
        this.xtype = 'timepanel';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTimepanelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTimepanelComponent = ExtTimepanelComponent_1 = __decorate([
    Component({
        selector: 'ext-timepanel',
        inputs: ExtTimepanelMetaData.PROPERTIES,
        outputs: ExtTimepanelMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTimepanelComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTimepanelComponent);

var ExtPaneltitleComponent_1;
class ExtPaneltitleMetaData extends Ext_panel_Title {
    static getAll() {
        ExtPaneltitleMetaData.PROPERTIES = Ext_panel_Title.getProperties(ExtPaneltitleMetaData.PROPERTIES);
        ExtPaneltitleMetaData.EVENTS = Ext_panel_Title.getEvents(ExtPaneltitleMetaData.EVENTS);
        ExtPaneltitleMetaData.EVENTS.forEach((event) => {
            ExtPaneltitleMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPaneltitleMetaData.PROPERTIES = [];
ExtPaneltitleMetaData.EVENTS = [];
ExtPaneltitleMetaData.EVENTNAMES = [];
(function () { ExtPaneltitleMetaData.getAll(); })();
let ExtPaneltitleComponent = ExtPaneltitleComponent_1 = class ExtPaneltitleComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPaneltitleMetaData.PROPERTIES, ExtPaneltitleMetaData.EVENTS);
        this.xtype = 'paneltitle';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPaneltitleComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPaneltitleComponent = ExtPaneltitleComponent_1 = __decorate([
    Component({
        selector: 'ext-paneltitle',
        inputs: ExtPaneltitleMetaData.PROPERTIES,
        outputs: ExtPaneltitleMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPaneltitleComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPaneltitleComponent);

class Ext_panel_YearPicker extends Ext_dataview_BoundList {
    static getProperties(properties) {
        properties = properties.concat(Ext_panel_YearPicker.PROPERTIES);
        return Ext_dataview_BoundList.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_panel_YearPicker.EVENTS);
        return Ext_dataview_BoundList.getEvents(events);
    }
}
Ext_panel_YearPicker.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_panel_YearPicker.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,yearpicker,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforegroupcollapse', parameters: 'yearpicker,group' },
    { name: 'beforegroupexpand', parameters: 'yearpicker,group' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'yearpicker' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'yearpicker,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'childdoubletap', parameters: 'yearpicker,location' },
    { name: 'childlongpress', parameters: 'yearpicker,location' },
    { name: 'childmouseenter', parameters: 'yearpicker,location' },
    { name: 'childmouseleave', parameters: 'yearpicker,location' },
    { name: 'childsingletap', parameters: 'yearpicker,location' },
    { name: 'childtap', parameters: 'yearpicker,location' },
    { name: 'childtaphold', parameters: 'yearpicker,location' },
    { name: 'childtouchcancel', parameters: 'yearpicker,location' },
    { name: 'childtouchend', parameters: 'yearpicker,location' },
    { name: 'childtouchmove', parameters: 'yearpicker,location' },
    { name: 'childtouchstart', parameters: 'yearpicker,location' },
    { name: 'deactivate', parameters: 'oldActiveItem,yearpicker,newActiveItem' },
    { name: 'deselect', parameters: 'yearpicker,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'disclose', parameters: 'list,record,target,index,event' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'yearpicker,event' },
    { name: 'focusenter', parameters: 'yearpicker,event' },
    { name: 'focusleave', parameters: 'yearpicker,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'groupcollapse', parameters: 'yearpicker,group' },
    { name: 'groupexpand', parameters: 'yearpicker,group' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemaction', parameters: 'yearpicker,index,record,action' },
    { name: 'itemdoubletap', parameters: 'yearpicker,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'yearpicker,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'yearpicker,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'yearpicker,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'yearpicker,index,target,record,e' },
    { name: 'itemswipe', parameters: 'yearpicker,index,target,record,e' },
    { name: 'itemtap', parameters: 'yearpicker,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'yearpicker,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'yearpicker,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'yearpicker,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'yearpicker,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'yearpicker,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'yearpicker,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'yearpicker' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'yearpicker,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'yearpicker,selected' },
    { name: 'show', parameters: 'sender' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'yearpicker' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_panel_YearPicker.EVENTNAMES);
//    return Ext_dataview_BoundList.getEventNames(eventnames);
//}

var ExtYearpickerComponent_1;
class ExtYearpickerMetaData extends Ext_panel_YearPicker {
    static getAll() {
        ExtYearpickerMetaData.PROPERTIES = Ext_panel_YearPicker.getProperties(ExtYearpickerMetaData.PROPERTIES);
        ExtYearpickerMetaData.EVENTS = Ext_panel_YearPicker.getEvents(ExtYearpickerMetaData.EVENTS);
        ExtYearpickerMetaData.EVENTS.forEach((event) => {
            ExtYearpickerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtYearpickerMetaData.PROPERTIES = [];
ExtYearpickerMetaData.EVENTS = [];
ExtYearpickerMetaData.EVENTNAMES = [];
(function () { ExtYearpickerMetaData.getAll(); })();
let ExtYearpickerComponent = ExtYearpickerComponent_1 = class ExtYearpickerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtYearpickerMetaData.PROPERTIES, ExtYearpickerMetaData.EVENTS);
        this.xtype = 'yearpicker';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtYearpickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtYearpickerComponent = ExtYearpickerComponent_1 = __decorate([
    Component({
        selector: 'ext-yearpicker',
        inputs: ExtYearpickerMetaData.PROPERTIES,
        outputs: ExtYearpickerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtYearpickerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtYearpickerComponent);

class Ext_picker_Picker extends Ext_Sheet {
    static getProperties(properties) {
        properties = properties.concat(Ext_picker_Picker.PROPERTIES);
        return Ext_Sheet.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_picker_Picker.EVENTS);
        return Ext_Sheet.getEvents(events);
    }
}
Ext_picker_Picker.PROPERTIES = [
    'bottom',
    'cancelButton',
    'centered',
    'defaultType',
    'doneButton',
    'floated',
    'height',
    'layout',
    'left',
    'right',
    'side',
    'slots',
    'tabIndex',
    'toolbar',
    'useTitles',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_picker_Picker.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,picker,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'picker,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'picker' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'picker' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'picker,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'picker' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'picker,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'cancel', parameters: 'picker' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'picker,values' },
    { name: 'collapse', parameters: 'picker' },
    { name: 'deactivate', parameters: 'oldActiveItem,picker,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'picker' },
    { name: 'drawershow', parameters: 'picker' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'picker' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'picker,event' },
    { name: 'focusenter', parameters: 'picker,event' },
    { name: 'focusleave', parameters: 'picker,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'picker,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'pick', parameters: 'picker,values,slot' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'picker,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'picker,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'picker,context' },
    { name: 'resizedragcancel', parameters: 'picker,context' },
    { name: 'resizedragend', parameters: 'picker,context' },
    { name: 'resizedragstart', parameters: 'picker,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'picker' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_picker_Picker.EVENTNAMES);
//    return Ext_Sheet.getEventNames(eventnames);
//}

class Ext_DatePicker extends Ext_picker_Picker {
    static getProperties(properties) {
        properties = properties.concat(Ext_DatePicker.PROPERTIES);
        return Ext_picker_Picker.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_DatePicker.EVENTS);
        return Ext_picker_Picker.getEvents(events);
    }
}
Ext_DatePicker.PROPERTIES = [
    'dayText',
    'doneButton',
    'monthText',
    'slotOrder',
    'slots',
    'value',
    'yearFrom',
    'yearText',
    'yearTo',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_DatePicker.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,datepicker,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'datepicker,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'datepicker' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'datepicker' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'datepicker,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'datepicker' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'datepicker,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'cancel', parameters: 'datepicker' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'datepicker,value' },
    { name: 'collapse', parameters: 'datepicker' },
    { name: 'deactivate', parameters: 'oldActiveItem,datepicker,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'datepicker' },
    { name: 'drawershow', parameters: 'datepicker' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'datepicker' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'datepicker,event' },
    { name: 'focusenter', parameters: 'datepicker,event' },
    { name: 'focusleave', parameters: 'datepicker,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'datepicker,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'pick', parameters: 'datepicker,values,slot' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'datepicker,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'datepicker,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'datepicker,context' },
    { name: 'resizedragcancel', parameters: 'datepicker,context' },
    { name: 'resizedragend', parameters: 'datepicker,context' },
    { name: 'resizedragstart', parameters: 'datepicker,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'datepicker' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_DatePicker.EVENTNAMES);
//    return Ext_picker_Picker.getEventNames(eventnames);
//}

var ExtDatepickerComponent_1;
class ExtDatepickerMetaData extends Ext_DatePicker {
    static getAll() {
        ExtDatepickerMetaData.PROPERTIES = Ext_DatePicker.getProperties(ExtDatepickerMetaData.PROPERTIES);
        ExtDatepickerMetaData.EVENTS = Ext_DatePicker.getEvents(ExtDatepickerMetaData.EVENTS);
        ExtDatepickerMetaData.EVENTS.forEach((event) => {
            ExtDatepickerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtDatepickerMetaData.PROPERTIES = [];
ExtDatepickerMetaData.EVENTS = [];
ExtDatepickerMetaData.EVENTNAMES = [];
(function () { ExtDatepickerMetaData.getAll(); })();
let ExtDatepickerComponent = ExtDatepickerComponent_1 = class ExtDatepickerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtDatepickerMetaData.PROPERTIES, ExtDatepickerMetaData.EVENTS);
        this.xtype = 'datepicker';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtDatepickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtDatepickerComponent = ExtDatepickerComponent_1 = __decorate([
    Component({
        selector: 'ext-datepicker',
        inputs: ExtDatepickerMetaData.PROPERTIES,
        outputs: ExtDatepickerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtDatepickerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtDatepickerComponent);

class Ext_Picker extends Ext_Sheet {
    static getProperties(properties) {
        properties = properties.concat(Ext_Picker.PROPERTIES);
        return Ext_Sheet.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Picker.EVENTS);
        return Ext_Sheet.getEvents(events);
    }
}
Ext_Picker.PROPERTIES = [
    'bottom',
    'cancelButton',
    'centered',
    'defaultType',
    'doneButton',
    'floated',
    'height',
    'layout',
    'left',
    'right',
    'side',
    'slots',
    'tabIndex',
    'toolbar',
    'useTitles',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Picker.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,picker,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'picker,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'picker' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'picker' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'picker,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'picker' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'picker,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'cancel', parameters: 'picker' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'picker,values' },
    { name: 'collapse', parameters: 'picker' },
    { name: 'deactivate', parameters: 'oldActiveItem,picker,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'picker' },
    { name: 'drawershow', parameters: 'picker' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'picker' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'picker,event' },
    { name: 'focusenter', parameters: 'picker,event' },
    { name: 'focusleave', parameters: 'picker,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'picker,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'pick', parameters: 'picker,values,slot' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'picker,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'picker,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'picker,context' },
    { name: 'resizedragcancel', parameters: 'picker,context' },
    { name: 'resizedragend', parameters: 'picker,context' },
    { name: 'resizedragstart', parameters: 'picker,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'picker' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Picker.EVENTNAMES);
//    return Ext_Sheet.getEventNames(eventnames);
//}

var ExtPickerComponent_1;
class ExtPickerMetaData extends Ext_Picker {
    static getAll() {
        ExtPickerMetaData.PROPERTIES = Ext_Picker.getProperties(ExtPickerMetaData.PROPERTIES);
        ExtPickerMetaData.EVENTS = Ext_Picker.getEvents(ExtPickerMetaData.EVENTS);
        ExtPickerMetaData.EVENTS.forEach((event) => {
            ExtPickerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPickerMetaData.PROPERTIES = [];
ExtPickerMetaData.EVENTS = [];
ExtPickerMetaData.EVENTNAMES = [];
(function () { ExtPickerMetaData.getAll(); })();
let ExtPickerComponent = ExtPickerComponent_1 = class ExtPickerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPickerMetaData.PROPERTIES, ExtPickerMetaData.EVENTS);
        this.xtype = 'picker';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPickerComponent = ExtPickerComponent_1 = __decorate([
    Component({
        selector: 'ext-picker',
        inputs: ExtPickerMetaData.PROPERTIES,
        outputs: ExtPickerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPickerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPickerComponent);

class Ext_picker_SelectPicker extends Ext_picker_Picker {
    static getProperties(properties) {
        properties = properties.concat(Ext_picker_SelectPicker.PROPERTIES);
        return Ext_picker_Picker.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_picker_SelectPicker.EVENTS);
        return Ext_picker_Picker.getEvents(events);
    }
}
Ext_picker_SelectPicker.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_picker_SelectPicker.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,selectpicker,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'selectpicker,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'selectpicker' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'selectpicker' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'selectpicker,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'selectpicker' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'selectpicker,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'cancel', parameters: 'selectpicker' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'selectpicker,values' },
    { name: 'collapse', parameters: 'selectpicker' },
    { name: 'deactivate', parameters: 'oldActiveItem,selectpicker,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'selectpicker' },
    { name: 'drawershow', parameters: 'selectpicker' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'selectpicker' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'selectpicker,event' },
    { name: 'focusenter', parameters: 'selectpicker,event' },
    { name: 'focusleave', parameters: 'selectpicker,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'selectpicker,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'pick', parameters: 'selectpicker,values,slot' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'selectpicker,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'selectpicker,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'selectpicker,context' },
    { name: 'resizedragcancel', parameters: 'selectpicker,context' },
    { name: 'resizedragend', parameters: 'selectpicker,context' },
    { name: 'resizedragstart', parameters: 'selectpicker,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'selectpicker' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_picker_SelectPicker.EVENTNAMES);
//    return Ext_picker_Picker.getEventNames(eventnames);
//}

var ExtSelectpickerComponent_1;
class ExtSelectpickerMetaData extends Ext_picker_SelectPicker {
    static getAll() {
        ExtSelectpickerMetaData.PROPERTIES = Ext_picker_SelectPicker.getProperties(ExtSelectpickerMetaData.PROPERTIES);
        ExtSelectpickerMetaData.EVENTS = Ext_picker_SelectPicker.getEvents(ExtSelectpickerMetaData.EVENTS);
        ExtSelectpickerMetaData.EVENTS.forEach((event) => {
            ExtSelectpickerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSelectpickerMetaData.PROPERTIES = [];
ExtSelectpickerMetaData.EVENTS = [];
ExtSelectpickerMetaData.EVENTNAMES = [];
(function () { ExtSelectpickerMetaData.getAll(); })();
let ExtSelectpickerComponent = ExtSelectpickerComponent_1 = class ExtSelectpickerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSelectpickerMetaData.PROPERTIES, ExtSelectpickerMetaData.EVENTS);
        this.xtype = 'selectpicker';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSelectpickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSelectpickerComponent = ExtSelectpickerComponent_1 = __decorate([
    Component({
        selector: 'ext-selectpicker',
        inputs: ExtSelectpickerMetaData.PROPERTIES,
        outputs: ExtSelectpickerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSelectpickerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSelectpickerComponent);

class Ext_picker_Slot extends Ext_dataview_DataView {
    static getProperties(properties) {
        properties = properties.concat(Ext_picker_Slot.PROPERTIES);
        return Ext_dataview_DataView.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_picker_Slot.EVENTS);
        return Ext_dataview_DataView.getEvents(events);
    }
}
Ext_picker_Slot.PROPERTIES = [
    'align',
    'cls',
    'displayField',
    'flex',
    'itemTpl',
    'name',
    'scrollable',
    'showTitle',
    'title',
    'triggerEvent',
    'value',
    'valueField',
    'verticallyCenterItems',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_picker_Slot.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,pickerslot,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'pickerslot' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pickerslot,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'childdoubletap', parameters: 'pickerslot,location' },
    { name: 'childlongpress', parameters: 'pickerslot,location' },
    { name: 'childmouseenter', parameters: 'pickerslot,location' },
    { name: 'childmouseleave', parameters: 'pickerslot,location' },
    { name: 'childsingletap', parameters: 'pickerslot,location' },
    { name: 'childtap', parameters: 'pickerslot,location' },
    { name: 'childtaphold', parameters: 'pickerslot,location' },
    { name: 'childtouchcancel', parameters: 'pickerslot,location' },
    { name: 'childtouchend', parameters: 'pickerslot,location' },
    { name: 'childtouchmove', parameters: 'pickerslot,location' },
    { name: 'childtouchstart', parameters: 'pickerslot,location' },
    { name: 'deactivate', parameters: 'oldActiveItem,pickerslot,newActiveItem' },
    { name: 'deselect', parameters: 'pickerslot,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'pickerslot,event' },
    { name: 'focusenter', parameters: 'pickerslot,event' },
    { name: 'focusleave', parameters: 'pickerslot,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemdoubletap', parameters: 'pickerslot,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'pickerslot,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'pickerslot,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'pickerslot,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'pickerslot,index,target,record,e' },
    { name: 'itemswipe', parameters: 'pickerslot,index,target,record,e' },
    { name: 'itemtap', parameters: 'pickerslot,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'pickerslot,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'pickerslot,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'pickerslot,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'pickerslot,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'pickerslot,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'pickerslot,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'pickerslot' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'pickerslot,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'rowselection', parameters: 'view,selection' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'pickerslot,selected' },
    { name: 'selectionchange', parameters: 'view,records,selected,selection' },
    { name: 'show', parameters: 'sender' },
    { name: 'slotpick', parameters: 'pickerslot,value,node' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'pickerslot' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_picker_Slot.EVENTNAMES);
//    return Ext_dataview_DataView.getEventNames(eventnames);
//}

var ExtPickerslotComponent_1;
class ExtPickerslotMetaData extends Ext_picker_Slot {
    static getAll() {
        ExtPickerslotMetaData.PROPERTIES = Ext_picker_Slot.getProperties(ExtPickerslotMetaData.PROPERTIES);
        ExtPickerslotMetaData.EVENTS = Ext_picker_Slot.getEvents(ExtPickerslotMetaData.EVENTS);
        ExtPickerslotMetaData.EVENTS.forEach((event) => {
            ExtPickerslotMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPickerslotMetaData.PROPERTIES = [];
ExtPickerslotMetaData.EVENTS = [];
ExtPickerslotMetaData.EVENTNAMES = [];
(function () { ExtPickerslotMetaData.getAll(); })();
let ExtPickerslotComponent = ExtPickerslotComponent_1 = class ExtPickerslotComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPickerslotMetaData.PROPERTIES, ExtPickerslotMetaData.EVENTS);
        this.xtype = 'pickerslot';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPickerslotComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPickerslotComponent = ExtPickerslotComponent_1 = __decorate([
    Component({
        selector: 'ext-pickerslot',
        inputs: ExtPickerslotMetaData.PROPERTIES,
        outputs: ExtPickerslotMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPickerslotComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPickerslotComponent);

class Ext_picker_Tablet extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_picker_Tablet.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_picker_Tablet.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_picker_Tablet.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_picker_Tablet.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,tabletpicker,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'tabletpicker,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'tabletpicker' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'tabletpicker' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'tabletpicker,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'tabletpicker' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'tabletpicker,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'tabletpicker' },
    { name: 'deactivate', parameters: 'oldActiveItem,tabletpicker,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'tabletpicker' },
    { name: 'drawershow', parameters: 'tabletpicker' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'tabletpicker' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'tabletpicker,event' },
    { name: 'focusenter', parameters: 'tabletpicker,event' },
    { name: 'focusleave', parameters: 'tabletpicker,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'tabletpicker,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'tabletpicker,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'tabletpicker,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'tabletpicker,context' },
    { name: 'resizedragcancel', parameters: 'tabletpicker,context' },
    { name: 'resizedragend', parameters: 'tabletpicker,context' },
    { name: 'resizedragstart', parameters: 'tabletpicker,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'tabletpicker' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_picker_Tablet.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

var ExtTabletpickerComponent_1;
class ExtTabletpickerMetaData extends Ext_picker_Tablet {
    static getAll() {
        ExtTabletpickerMetaData.PROPERTIES = Ext_picker_Tablet.getProperties(ExtTabletpickerMetaData.PROPERTIES);
        ExtTabletpickerMetaData.EVENTS = Ext_picker_Tablet.getEvents(ExtTabletpickerMetaData.EVENTS);
        ExtTabletpickerMetaData.EVENTS.forEach((event) => {
            ExtTabletpickerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTabletpickerMetaData.PROPERTIES = [];
ExtTabletpickerMetaData.EVENTS = [];
ExtTabletpickerMetaData.EVENTNAMES = [];
(function () { ExtTabletpickerMetaData.getAll(); })();
let ExtTabletpickerComponent = ExtTabletpickerComponent_1 = class ExtTabletpickerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTabletpickerMetaData.PROPERTIES, ExtTabletpickerMetaData.EVENTS);
        this.xtype = 'tabletpicker';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTabletpickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTabletpickerComponent = ExtTabletpickerComponent_1 = __decorate([
    Component({
        selector: 'ext-tabletpicker',
        inputs: ExtTabletpickerMetaData.PROPERTIES,
        outputs: ExtTabletpickerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTabletpickerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTabletpickerComponent);

class Ext_pivot_cell_Cell extends Ext_grid_cell_Cell {
    static getProperties(properties) {
        properties = properties.concat(Ext_pivot_cell_Cell.PROPERTIES);
        return Ext_grid_cell_Cell.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_pivot_cell_Cell.EVENTS);
        return Ext_grid_cell_Cell.getEvents(events);
    }
}
Ext_pivot_cell_Cell.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_pivot_cell_Cell.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'pivotgridcell' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pivotgridcell,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'pivotgridcell,event' },
    { name: 'focusenter', parameters: 'pivotgridcell,event' },
    { name: 'focusleave', parameters: 'pivotgridcell,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'pivotgridcell' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_pivot_cell_Cell.EVENTNAMES);
//    return Ext_grid_cell_Cell.getEventNames(eventnames);
//}

var ExtPivotgridcellComponent_1;
class ExtPivotgridcellMetaData extends Ext_pivot_cell_Cell {
    static getAll() {
        ExtPivotgridcellMetaData.PROPERTIES = Ext_pivot_cell_Cell.getProperties(ExtPivotgridcellMetaData.PROPERTIES);
        ExtPivotgridcellMetaData.EVENTS = Ext_pivot_cell_Cell.getEvents(ExtPivotgridcellMetaData.EVENTS);
        ExtPivotgridcellMetaData.EVENTS.forEach((event) => {
            ExtPivotgridcellMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPivotgridcellMetaData.PROPERTIES = [];
ExtPivotgridcellMetaData.EVENTS = [];
ExtPivotgridcellMetaData.EVENTNAMES = [];
(function () { ExtPivotgridcellMetaData.getAll(); })();
let ExtPivotgridcellComponent = ExtPivotgridcellComponent_1 = class ExtPivotgridcellComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPivotgridcellMetaData.PROPERTIES, ExtPivotgridcellMetaData.EVENTS);
        this.xtype = 'pivotgridcell';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPivotgridcellComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPivotgridcellComponent = ExtPivotgridcellComponent_1 = __decorate([
    Component({
        selector: 'ext-pivotgridcell',
        inputs: ExtPivotgridcellMetaData.PROPERTIES,
        outputs: ExtPivotgridcellMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPivotgridcellComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPivotgridcellComponent);

class Ext_pivot_cell_Group extends Ext_pivot_cell_Cell {
    static getProperties(properties) {
        properties = properties.concat(Ext_pivot_cell_Group.PROPERTIES);
        return Ext_pivot_cell_Cell.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_pivot_cell_Group.EVENTS);
        return Ext_pivot_cell_Cell.getEvents(events);
    }
}
Ext_pivot_cell_Group.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_pivot_cell_Group.EVENTS = [
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'pivotgridgroupcell' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pivotgridgroupcell,event' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'focus', parameters: 'pivotgridgroupcell,event' },
    { name: 'focusenter', parameters: 'pivotgridgroupcell,event' },
    { name: 'focusleave', parameters: 'pivotgridgroupcell,event' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'pivotgridgroupcell' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_pivot_cell_Group.EVENTNAMES);
//    return Ext_pivot_cell_Cell.getEventNames(eventnames);
//}

var ExtPivotgridgroupcellComponent_1;
class ExtPivotgridgroupcellMetaData extends Ext_pivot_cell_Group {
    static getAll() {
        ExtPivotgridgroupcellMetaData.PROPERTIES = Ext_pivot_cell_Group.getProperties(ExtPivotgridgroupcellMetaData.PROPERTIES);
        ExtPivotgridgroupcellMetaData.EVENTS = Ext_pivot_cell_Group.getEvents(ExtPivotgridgroupcellMetaData.EVENTS);
        ExtPivotgridgroupcellMetaData.EVENTS.forEach((event) => {
            ExtPivotgridgroupcellMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPivotgridgroupcellMetaData.PROPERTIES = [];
ExtPivotgridgroupcellMetaData.EVENTS = [];
ExtPivotgridgroupcellMetaData.EVENTNAMES = [];
(function () { ExtPivotgridgroupcellMetaData.getAll(); })();
let ExtPivotgridgroupcellComponent = ExtPivotgridgroupcellComponent_1 = class ExtPivotgridgroupcellComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPivotgridgroupcellMetaData.PROPERTIES, ExtPivotgridgroupcellMetaData.EVENTS);
        this.xtype = 'pivotgridgroupcell';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPivotgridgroupcellComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPivotgridgroupcellComponent = ExtPivotgridgroupcellComponent_1 = __decorate([
    Component({
        selector: 'ext-pivotgridgroupcell',
        inputs: ExtPivotgridgroupcellMetaData.PROPERTIES,
        outputs: ExtPivotgridgroupcellMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPivotgridgroupcellComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPivotgridgroupcellComponent);

class Ext_pivot_d3_AbstractContainer extends Ext_panel_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_pivot_d3_AbstractContainer.PROPERTIES);
        return Ext_panel_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_pivot_d3_AbstractContainer.EVENTS);
        return Ext_panel_Panel.getEvents(events);
    }
}
Ext_pivot_d3_AbstractContainer.PROPERTIES = [
    'configurator',
    'drawing',
    'matrix',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_pivot_d3_AbstractContainer.EVENTS = [
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_pivot_d3_AbstractContainer.EVENTNAMES);
//    return Ext_panel_Panel.getEventNames(eventnames);
//}

class Ext_pivot_d3_Container extends Ext_pivot_d3_AbstractContainer {
    static getProperties(properties) {
        properties = properties.concat(Ext_pivot_d3_Container.PROPERTIES);
        return Ext_pivot_d3_AbstractContainer.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_pivot_d3_Container.EVENTS);
        return Ext_pivot_d3_AbstractContainer.getEvents(events);
    }
}
Ext_pivot_d3_Container.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_pivot_d3_Container.EVENTS = [
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_pivot_d3_Container.EVENTNAMES);
//    return Ext_pivot_d3_AbstractContainer.getEventNames(eventnames);
//}

var ExtPivotd3containerComponent_1;
class ExtPivotd3containerMetaData extends Ext_pivot_d3_Container {
    static getAll() {
        ExtPivotd3containerMetaData.PROPERTIES = Ext_pivot_d3_Container.getProperties(ExtPivotd3containerMetaData.PROPERTIES);
        ExtPivotd3containerMetaData.EVENTS = Ext_pivot_d3_Container.getEvents(ExtPivotd3containerMetaData.EVENTS);
        ExtPivotd3containerMetaData.EVENTS.forEach((event) => {
            ExtPivotd3containerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPivotd3containerMetaData.PROPERTIES = [];
ExtPivotd3containerMetaData.EVENTS = [];
ExtPivotd3containerMetaData.EVENTNAMES = [];
(function () { ExtPivotd3containerMetaData.getAll(); })();
let ExtPivotd3containerComponent = ExtPivotd3containerComponent_1 = class ExtPivotd3containerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPivotd3containerMetaData.PROPERTIES, ExtPivotd3containerMetaData.EVENTS);
        this.xtype = 'pivotd3container';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPivotd3containerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPivotd3containerComponent = ExtPivotd3containerComponent_1 = __decorate([
    Component({
        selector: 'ext-pivotd3container',
        inputs: ExtPivotd3containerMetaData.PROPERTIES,
        outputs: ExtPivotd3containerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPivotd3containerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPivotd3containerComponent);

class Ext_pivot_d3_HeatMap extends Ext_d3_HeatMap {
    static getProperties(properties) {
        properties = properties.concat(Ext_pivot_d3_HeatMap.PROPERTIES);
        return Ext_d3_HeatMap.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_pivot_d3_HeatMap.EVENTS);
        return Ext_d3_HeatMap.getEvents(events);
    }
}
Ext_pivot_d3_HeatMap.PROPERTIES = [
    'defaultFormatter',
    'matrix',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_pivot_d3_HeatMap.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'pivotheatmap' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pivotheatmap,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'pivotheatmap,event' },
    { name: 'focusenter', parameters: 'pivotheatmap,event' },
    { name: 'focusleave', parameters: 'pivotheatmap,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'sceneresize', parameters: 'component,scene,size' },
    { name: 'scenesetup', parameters: 'component,scene' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'pivotheatmap' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_pivot_d3_HeatMap.EVENTNAMES);
//    return Ext_d3_HeatMap.getEventNames(eventnames);
//}

var ExtPivotheatmapComponent_1;
class ExtPivotheatmapMetaData extends Ext_pivot_d3_HeatMap {
    static getAll() {
        ExtPivotheatmapMetaData.PROPERTIES = Ext_pivot_d3_HeatMap.getProperties(ExtPivotheatmapMetaData.PROPERTIES);
        ExtPivotheatmapMetaData.EVENTS = Ext_pivot_d3_HeatMap.getEvents(ExtPivotheatmapMetaData.EVENTS);
        ExtPivotheatmapMetaData.EVENTS.forEach((event) => {
            ExtPivotheatmapMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPivotheatmapMetaData.PROPERTIES = [];
ExtPivotheatmapMetaData.EVENTS = [];
ExtPivotheatmapMetaData.EVENTNAMES = [];
(function () { ExtPivotheatmapMetaData.getAll(); })();
let ExtPivotheatmapComponent = ExtPivotheatmapComponent_1 = class ExtPivotheatmapComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPivotheatmapMetaData.PROPERTIES, ExtPivotheatmapMetaData.EVENTS);
        this.xtype = 'pivotheatmap';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPivotheatmapComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPivotheatmapComponent = ExtPivotheatmapComponent_1 = __decorate([
    Component({
        selector: 'ext-pivotheatmap',
        inputs: ExtPivotheatmapMetaData.PROPERTIES,
        outputs: ExtPivotheatmapMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPivotheatmapComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPivotheatmapComponent);

class Ext_pivot_d3_TreeMap extends Ext_d3_hierarchy_TreeMap {
    static getProperties(properties) {
        properties = properties.concat(Ext_pivot_d3_TreeMap.PROPERTIES);
        return Ext_d3_hierarchy_TreeMap.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_pivot_d3_TreeMap.EVENTS);
        return Ext_d3_hierarchy_TreeMap.getEvents(events);
    }
}
Ext_pivot_d3_TreeMap.PROPERTIES = [
    'autoExpand',
    'matrix',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_pivot_d3_TreeMap.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'pivottreemap' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pivottreemap,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'pivottreemap,event' },
    { name: 'focusenter', parameters: 'pivottreemap,event' },
    { name: 'focusleave', parameters: 'pivottreemap,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'layout', parameters: 'component' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'sceneresize', parameters: 'component,scene,size' },
    { name: 'scenesetup', parameters: 'component,scene' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'pivottreemap' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_pivot_d3_TreeMap.EVENTNAMES);
//    return Ext_d3_hierarchy_TreeMap.getEventNames(eventnames);
//}

var ExtPivottreemapComponent_1;
class ExtPivottreemapMetaData extends Ext_pivot_d3_TreeMap {
    static getAll() {
        ExtPivottreemapMetaData.PROPERTIES = Ext_pivot_d3_TreeMap.getProperties(ExtPivottreemapMetaData.PROPERTIES);
        ExtPivottreemapMetaData.EVENTS = Ext_pivot_d3_TreeMap.getEvents(ExtPivottreemapMetaData.EVENTS);
        ExtPivottreemapMetaData.EVENTS.forEach((event) => {
            ExtPivottreemapMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPivottreemapMetaData.PROPERTIES = [];
ExtPivottreemapMetaData.EVENTS = [];
ExtPivottreemapMetaData.EVENTNAMES = [];
(function () { ExtPivottreemapMetaData.getAll(); })();
let ExtPivottreemapComponent = ExtPivottreemapComponent_1 = class ExtPivottreemapComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPivottreemapMetaData.PROPERTIES, ExtPivottreemapMetaData.EVENTS);
        this.xtype = 'pivottreemap';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPivottreemapComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPivottreemapComponent = ExtPivottreemapComponent_1 = __decorate([
    Component({
        selector: 'ext-pivottreemap',
        inputs: ExtPivottreemapMetaData.PROPERTIES,
        outputs: ExtPivottreemapMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPivottreemapComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPivottreemapComponent);

class Ext_pivot_Grid extends Ext_grid_Grid {
    static getProperties(properties) {
        properties = properties.concat(Ext_pivot_Grid.PROPERTIES);
        return Ext_grid_Grid.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_pivot_Grid.EVENTS);
        return Ext_grid_Grid.getEvents(events);
    }
}
Ext_pivot_Grid.PROPERTIES = [
    'clsGrandTotal',
    'clsGroupTotal',
    'enableColumnSort',
    'enableLoadMask',
    'leftAxisCellConfig',
    'matrix',
    'record',
    'startColGroupsCollapsed',
    'startRowGroupsCollapsed',
    'topAxisCellConfig',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_pivot_Grid.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,pivotgrid,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: '' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecomplete', parameters: 'editor,value,startValue,The' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeedit', parameters: 'sender,location' },
    { name: 'beforegroupcollapse', parameters: 'pivotgrid,group' },
    { name: 'beforegroupexpand', parameters: 'pivotgrid,group' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeselectionextend', parameters: 'grid,An,extension' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforestartedit', parameters: 'editor,boundEl,value,The' },
    { name: 'beforestorechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforetofront', parameters: 'pivotgrid' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pivotgrid,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'canceledit', parameters: 'editor,value,startValue' },
    { name: 'cellselection', parameters: 'grid,selection' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'childdoubletap', parameters: 'pivotgrid,location' },
    { name: 'childlongpress', parameters: 'pivotgrid,location' },
    { name: 'childmouseenter', parameters: 'pivotgrid,location' },
    { name: 'childmouseleave', parameters: 'pivotgrid,location' },
    { name: 'childsingletap', parameters: 'pivotgrid,location' },
    { name: 'childtap', parameters: 'pivotgrid,location' },
    { name: 'childtaphold', parameters: 'pivotgrid,location' },
    { name: 'childtouchcancel', parameters: 'pivotgrid,location' },
    { name: 'childtouchend', parameters: 'pivotgrid,location' },
    { name: 'childtouchmove', parameters: 'pivotgrid,location' },
    { name: 'childtouchstart', parameters: 'pivotgrid,location' },
    { name: 'columnadd', parameters: 'pivotgrid,column,index' },
    { name: 'columnhide', parameters: 'pivotgrid,column' },
    { name: 'columnmenucreated', parameters: 'grid,column,menu' },
    { name: 'columnmove', parameters: 'pivotgrid,column,fromIndex,toIndex' },
    { name: 'columnremove', parameters: 'pivotgrid,column' },
    { name: 'columnresize', parameters: 'pivotgrid,column,width' },
    { name: 'columnselection', parameters: 'grid,selection' },
    { name: 'columnshow', parameters: 'pivotgrid,column' },
    { name: 'columnsort', parameters: 'pivotgrid,column,direction' },
    { name: 'complete', parameters: 'editor,value,startValue,The' },
    { name: 'deactivate', parameters: 'oldActiveItem,pivotgrid,newActiveItem' },
    { name: 'deselect', parameters: 'pivotgrid,records' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'disclose', parameters: 'list,record,target,index,event' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'edit', parameters: 'sender,location' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'pivotgrid,event' },
    { name: 'focusenter', parameters: 'pivotgrid,event' },
    { name: 'focusleave', parameters: 'pivotgrid,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'groupcollapse', parameters: 'pivotgrid,group' },
    { name: 'groupexpand', parameters: 'pivotgrid,group' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'itemaction', parameters: 'pivotgrid,index,record,action' },
    { name: 'itemdoubletap', parameters: 'pivotgrid,index,target,record,e' },
    { name: 'itemlongpress', parameters: 'pivotgrid,index,target,record,e' },
    { name: 'itemmouseenter', parameters: 'pivotgrid,index,target,record,e' },
    { name: 'itemmouseleave', parameters: 'pivotgrid,index,target,record,e' },
    { name: 'itemsingletap', parameters: 'pivotgrid,index,target,record,e' },
    { name: 'itemswipe', parameters: 'pivotgrid,index,target,record,e' },
    { name: 'itemtap', parameters: 'pivotgrid,index,target,record,e' },
    { name: 'itemtaphold', parameters: 'pivotgrid,index,target,record,e' },
    { name: 'itemtouchcancel', parameters: 'pivotgrid,index,target,record,e' },
    { name: 'itemtouchend', parameters: 'pivotgrid,index,target,record,e' },
    { name: 'itemtouchmove', parameters: 'pivotgrid,index,target,record,e' },
    { name: 'itemtouchstart', parameters: 'pivotgrid,index,target,record,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: '' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'navigate', parameters: 'pivotgrid,to,from' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'pivotbeforereconfigure', parameters: 'matrix,config' },
    { name: 'pivotbeforerequest', parameters: 'matrix,params' },
    { name: 'pivotbuildtotals', parameters: 'matrix,totals' },
    { name: 'pivotcolumnsbuilt', parameters: 'matrix,columns' },
    { name: 'pivotdone', parameters: 'matrix' },
    { name: 'pivotgroupcelldoubletap', parameters: 'params,e' },
    { name: 'pivotgroupcelltap', parameters: 'params,e' },
    { name: 'pivotgroupcelltaphold', parameters: 'params,e' },
    { name: 'pivotgroupcollapse', parameters: 'matrix,type,group' },
    { name: 'pivotgroupdoubletap', parameters: 'params,e' },
    { name: 'pivotgroupexpand', parameters: 'matrix,type,group' },
    { name: 'pivotgrouptap', parameters: 'params,e' },
    { name: 'pivotgrouptaphold', parameters: 'params,e' },
    { name: 'pivotitemcelldoubletap', parameters: 'params,e' },
    { name: 'pivotitemcelltap', parameters: 'params,e' },
    { name: 'pivotitemcelltaphold', parameters: 'params,e' },
    { name: 'pivotitemdoubletap', parameters: 'params,e' },
    { name: 'pivotitemtap', parameters: 'params,e' },
    { name: 'pivotitemtaphold', parameters: 'params,e' },
    { name: 'pivotmodelbuilt', parameters: 'matrix,model' },
    { name: 'pivotprogress', parameters: 'matrix,index,total' },
    { name: 'pivotreconfigure', parameters: 'matrix,config' },
    { name: 'pivotrecordbuilt', parameters: 'matrix,record' },
    { name: 'pivotrequestexception', parameters: 'matrix,response' },
    { name: 'pivotstart', parameters: 'matrix' },
    { name: 'pivotstorebuilt', parameters: 'matrix,store' },
    { name: 'pivottotalcelldoubletap', parameters: 'params,e' },
    { name: 'pivottotalcelltap', parameters: 'params,e' },
    { name: 'pivottotalcelltaphold', parameters: 'params,e' },
    { name: 'pivottotaldoubletap', parameters: 'params,e' },
    { name: 'pivottotaltap', parameters: 'params,e' },
    { name: 'pivottotaltaphold', parameters: 'params,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'refresh', parameters: 'pivotgrid' },
    { name: 'remove', parameters: '' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'pivotgrid,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'select', parameters: 'pivotgrid,selected' },
    { name: 'selectionextenderdrag', parameters: 'grid,An,extension' },
    { name: 'show', parameters: 'sender' },
    { name: 'specialkey', parameters: 'editor,field,event' },
    { name: 'startedit', parameters: 'editor,boundEl,value,The' },
    { name: 'storechange', parameters: 'sender,value,oldValue' },
    { name: 'tofront', parameters: 'pivotgrid' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'validateedit', parameters: 'sender,location' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_pivot_Grid.EVENTNAMES);
//    return Ext_grid_Grid.getEventNames(eventnames);
//}

var ExtPivotgridComponent_1;
class ExtPivotgridMetaData extends Ext_pivot_Grid {
    static getAll() {
        ExtPivotgridMetaData.PROPERTIES = Ext_pivot_Grid.getProperties(ExtPivotgridMetaData.PROPERTIES);
        ExtPivotgridMetaData.EVENTS = Ext_pivot_Grid.getEvents(ExtPivotgridMetaData.EVENTS);
        ExtPivotgridMetaData.EVENTS.forEach((event) => {
            ExtPivotgridMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPivotgridMetaData.PROPERTIES = [];
ExtPivotgridMetaData.EVENTS = [];
ExtPivotgridMetaData.EVENTNAMES = [];
(function () { ExtPivotgridMetaData.getAll(); })();
let ExtPivotgridComponent = ExtPivotgridComponent_1 = class ExtPivotgridComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPivotgridMetaData.PROPERTIES, ExtPivotgridMetaData.EVENTS);
        this.xtype = 'pivotgrid';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPivotgridComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPivotgridComponent = ExtPivotgridComponent_1 = __decorate([
    Component({
        selector: 'ext-pivotgrid',
        inputs: ExtPivotgridMetaData.PROPERTIES,
        outputs: ExtPivotgridMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPivotgridComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPivotgridComponent);

class Ext_pivot_plugin_configurator_Column extends Ext_dataview_ListItem {
    static getProperties(properties) {
        properties = properties.concat(Ext_pivot_plugin_configurator_Column.PROPERTIES);
        return Ext_dataview_ListItem.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_pivot_plugin_configurator_Column.EVENTS);
        return Ext_dataview_ListItem.getEvents(events);
    }
}
Ext_pivot_plugin_configurator_Column.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_pivot_plugin_configurator_Column.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,pivotconfigfield,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'pivotconfigfield,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'pivotconfigfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pivotconfigfield,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigfield,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'pivotconfigfield,event' },
    { name: 'focusenter', parameters: 'pivotconfigfield,event' },
    { name: 'focusleave', parameters: 'pivotconfigfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'pivotconfigfield,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'pivotconfigfield,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'pivotconfigfield,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'pivotconfigfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'dataItem,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_pivot_plugin_configurator_Column.EVENTNAMES);
//    return Ext_dataview_ListItem.getEventNames(eventnames);
//}

var ExtPivotconfigfieldComponent_1;
class ExtPivotconfigfieldMetaData extends Ext_pivot_plugin_configurator_Column {
    static getAll() {
        ExtPivotconfigfieldMetaData.PROPERTIES = Ext_pivot_plugin_configurator_Column.getProperties(ExtPivotconfigfieldMetaData.PROPERTIES);
        ExtPivotconfigfieldMetaData.EVENTS = Ext_pivot_plugin_configurator_Column.getEvents(ExtPivotconfigfieldMetaData.EVENTS);
        ExtPivotconfigfieldMetaData.EVENTS.forEach((event) => {
            ExtPivotconfigfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPivotconfigfieldMetaData.PROPERTIES = [];
ExtPivotconfigfieldMetaData.EVENTS = [];
ExtPivotconfigfieldMetaData.EVENTNAMES = [];
(function () { ExtPivotconfigfieldMetaData.getAll(); })();
let ExtPivotconfigfieldComponent = ExtPivotconfigfieldComponent_1 = class ExtPivotconfigfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPivotconfigfieldMetaData.PROPERTIES, ExtPivotconfigfieldMetaData.EVENTS);
        this.xtype = 'pivotconfigfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPivotconfigfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPivotconfigfieldComponent = ExtPivotconfigfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-pivotconfigfield',
        inputs: ExtPivotconfigfieldMetaData.PROPERTIES,
        outputs: ExtPivotconfigfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPivotconfigfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPivotconfigfieldComponent);

class Ext_pivot_plugin_configurator_Container extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_pivot_plugin_configurator_Container.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_pivot_plugin_configurator_Container.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_pivot_plugin_configurator_Container.PROPERTIES = [
    'fieldType',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_pivot_plugin_configurator_Container.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,pivotconfigcontainer,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'pivotconfigcontainer,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'pivotconfigcontainer' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'pivotconfigcontainer' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'pivotconfigcontainer,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'pivotconfigcontainer' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pivotconfigcontainer,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'pivotconfigcontainer' },
    { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigcontainer,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'pivotconfigcontainer' },
    { name: 'drawershow', parameters: 'pivotconfigcontainer' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'pivotconfigcontainer' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'pivotconfigcontainer,event' },
    { name: 'focusenter', parameters: 'pivotconfigcontainer,event' },
    { name: 'focusleave', parameters: 'pivotconfigcontainer,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'pivotconfigcontainer,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'pivotconfigcontainer,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'pivotconfigcontainer,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'pivotconfigcontainer,context' },
    { name: 'resizedragcancel', parameters: 'pivotconfigcontainer,context' },
    { name: 'resizedragend', parameters: 'pivotconfigcontainer,context' },
    { name: 'resizedragstart', parameters: 'pivotconfigcontainer,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'pivotconfigcontainer' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_pivot_plugin_configurator_Container.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

var ExtPivotconfigcontainerComponent_1;
class ExtPivotconfigcontainerMetaData extends Ext_pivot_plugin_configurator_Container {
    static getAll() {
        ExtPivotconfigcontainerMetaData.PROPERTIES = Ext_pivot_plugin_configurator_Container.getProperties(ExtPivotconfigcontainerMetaData.PROPERTIES);
        ExtPivotconfigcontainerMetaData.EVENTS = Ext_pivot_plugin_configurator_Container.getEvents(ExtPivotconfigcontainerMetaData.EVENTS);
        ExtPivotconfigcontainerMetaData.EVENTS.forEach((event) => {
            ExtPivotconfigcontainerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPivotconfigcontainerMetaData.PROPERTIES = [];
ExtPivotconfigcontainerMetaData.EVENTS = [];
ExtPivotconfigcontainerMetaData.EVENTNAMES = [];
(function () { ExtPivotconfigcontainerMetaData.getAll(); })();
let ExtPivotconfigcontainerComponent = ExtPivotconfigcontainerComponent_1 = class ExtPivotconfigcontainerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPivotconfigcontainerMetaData.PROPERTIES, ExtPivotconfigcontainerMetaData.EVENTS);
        this.xtype = 'pivotconfigcontainer';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPivotconfigcontainerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPivotconfigcontainerComponent = ExtPivotconfigcontainerComponent_1 = __decorate([
    Component({
        selector: 'ext-pivotconfigcontainer',
        inputs: ExtPivotconfigcontainerMetaData.PROPERTIES,
        outputs: ExtPivotconfigcontainerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPivotconfigcontainerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPivotconfigcontainerComponent);

class Ext_pivot_plugin_configurator_Form extends Ext_form_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_pivot_plugin_configurator_Form.PROPERTIES);
        return Ext_form_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_pivot_plugin_configurator_Form.EVENTS);
        return Ext_form_Panel.getEvents(events);
    }
}
Ext_pivot_plugin_configurator_Form.PROPERTIES = [
    'controller',
    'defaults',
    'hideAnimation',
    'listeners',
    'showAnimation',
    'viewModel',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_pivot_plugin_configurator_Form.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,pivotconfigform,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'pivotconfigform,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'pivotconfigform' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'pivotconfigform' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'pivotconfigform,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforesubmit', parameters: 'pivotconfigform,values,options,e' },
    { name: 'beforetofront', parameters: 'pivotconfigform' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pivotconfigform,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'pivotconfigform' },
    { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigform,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'pivotconfigform,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'pivotconfigform' },
    { name: 'drawershow', parameters: 'pivotconfigform' },
    { name: 'erased', parameters: 'sender' },
    { name: 'exception', parameters: 'pivotconfigform,result' },
    { name: 'expand', parameters: 'pivotconfigform' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'pivotconfigform,event' },
    { name: 'focusenter', parameters: 'pivotconfigform,event' },
    { name: 'focusleave', parameters: 'pivotconfigform,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'pivotconfigform,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'pivotconfigform,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'pivotconfigform,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'pivotconfigform,context' },
    { name: 'resizedragcancel', parameters: 'pivotconfigform,context' },
    { name: 'resizedragend', parameters: 'pivotconfigform,context' },
    { name: 'resizedragstart', parameters: 'pivotconfigform,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'submit', parameters: 'pivotconfigform,result,e' },
    { name: 'tofront', parameters: 'pivotconfigform' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_pivot_plugin_configurator_Form.EVENTNAMES);
//    return Ext_form_Panel.getEventNames(eventnames);
//}

var ExtPivotconfigformComponent_1;
class ExtPivotconfigformMetaData extends Ext_pivot_plugin_configurator_Form {
    static getAll() {
        ExtPivotconfigformMetaData.PROPERTIES = Ext_pivot_plugin_configurator_Form.getProperties(ExtPivotconfigformMetaData.PROPERTIES);
        ExtPivotconfigformMetaData.EVENTS = Ext_pivot_plugin_configurator_Form.getEvents(ExtPivotconfigformMetaData.EVENTS);
        ExtPivotconfigformMetaData.EVENTS.forEach((event) => {
            ExtPivotconfigformMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPivotconfigformMetaData.PROPERTIES = [];
ExtPivotconfigformMetaData.EVENTS = [];
ExtPivotconfigformMetaData.EVENTNAMES = [];
(function () { ExtPivotconfigformMetaData.getAll(); })();
let ExtPivotconfigformComponent = ExtPivotconfigformComponent_1 = class ExtPivotconfigformComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPivotconfigformMetaData.PROPERTIES, ExtPivotconfigformMetaData.EVENTS);
        this.xtype = 'pivotconfigform';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPivotconfigformComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPivotconfigformComponent = ExtPivotconfigformComponent_1 = __decorate([
    Component({
        selector: 'ext-pivotconfigform',
        inputs: ExtPivotconfigformMetaData.PROPERTIES,
        outputs: ExtPivotconfigformMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPivotconfigformComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPivotconfigformComponent);

class Ext_pivot_plugin_configurator_Panel extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_pivot_plugin_configurator_Panel.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_pivot_plugin_configurator_Panel.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_pivot_plugin_configurator_Panel.PROPERTIES = [
    'panelAggFieldsText',
    'panelAggFieldsTitle',
    'panelAllFieldsText',
    'panelAllFieldsTitle',
    'panelLeftFieldsText',
    'panelLeftFieldsTitle',
    'panelTopFieldsText',
    'panelTopFieldsTitle',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_pivot_plugin_configurator_Panel.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,pivotconfigpanel,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'pivotconfigpanel,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'pivotconfigpanel' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'pivotconfigpanel' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'pivotconfigpanel,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'pivotconfigpanel' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pivotconfigpanel,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'pivotconfigpanel' },
    { name: 'deactivate', parameters: 'oldActiveItem,pivotconfigpanel,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'pivotconfigpanel' },
    { name: 'drawershow', parameters: 'pivotconfigpanel' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'pivotconfigpanel' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'pivotconfigpanel,event' },
    { name: 'focusenter', parameters: 'pivotconfigpanel,event' },
    { name: 'focusleave', parameters: 'pivotconfigpanel,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'pivotconfigpanel,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'pivotconfigpanel,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'pivotconfigpanel,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'pivotconfigpanel,context' },
    { name: 'resizedragcancel', parameters: 'pivotconfigpanel,context' },
    { name: 'resizedragend', parameters: 'pivotconfigpanel,context' },
    { name: 'resizedragstart', parameters: 'pivotconfigpanel,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'pivotconfigpanel' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_pivot_plugin_configurator_Panel.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

var ExtPivotconfigpanelComponent_1;
class ExtPivotconfigpanelMetaData extends Ext_pivot_plugin_configurator_Panel {
    static getAll() {
        ExtPivotconfigpanelMetaData.PROPERTIES = Ext_pivot_plugin_configurator_Panel.getProperties(ExtPivotconfigpanelMetaData.PROPERTIES);
        ExtPivotconfigpanelMetaData.EVENTS = Ext_pivot_plugin_configurator_Panel.getEvents(ExtPivotconfigpanelMetaData.EVENTS);
        ExtPivotconfigpanelMetaData.EVENTS.forEach((event) => {
            ExtPivotconfigpanelMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPivotconfigpanelMetaData.PROPERTIES = [];
ExtPivotconfigpanelMetaData.EVENTS = [];
ExtPivotconfigpanelMetaData.EVENTNAMES = [];
(function () { ExtPivotconfigpanelMetaData.getAll(); })();
let ExtPivotconfigpanelComponent = ExtPivotconfigpanelComponent_1 = class ExtPivotconfigpanelComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPivotconfigpanelMetaData.PROPERTIES, ExtPivotconfigpanelMetaData.EVENTS);
        this.xtype = 'pivotconfigpanel';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPivotconfigpanelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPivotconfigpanelComponent = ExtPivotconfigpanelComponent_1 = __decorate([
    Component({
        selector: 'ext-pivotconfigpanel',
        inputs: ExtPivotconfigpanelMetaData.PROPERTIES,
        outputs: ExtPivotconfigpanelMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPivotconfigpanelComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPivotconfigpanelComponent);

class Ext_pivot_plugin_configurator_Settings extends Ext_form_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_pivot_plugin_configurator_Settings.PROPERTIES);
        return Ext_form_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_pivot_plugin_configurator_Settings.EVENTS);
        return Ext_form_Panel.getEvents(events);
    }
}
Ext_pivot_plugin_configurator_Settings.PROPERTIES = [
    'controller',
    'defaults',
    'hideAnimation',
    'listeners',
    'showAnimation',
    'viewModel',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_pivot_plugin_configurator_Settings.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,pivotsettings,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'pivotsettings,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'pivotsettings' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'pivotsettings' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'pivotsettings,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforesubmit', parameters: 'pivotsettings,values,options,e' },
    { name: 'beforetofront', parameters: 'pivotsettings' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pivotsettings,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'pivotsettings' },
    { name: 'deactivate', parameters: 'oldActiveItem,pivotsettings,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'pivotsettings,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'pivotsettings' },
    { name: 'drawershow', parameters: 'pivotsettings' },
    { name: 'erased', parameters: 'sender' },
    { name: 'exception', parameters: 'pivotsettings,result' },
    { name: 'expand', parameters: 'pivotsettings' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'pivotsettings,event' },
    { name: 'focusenter', parameters: 'pivotsettings,event' },
    { name: 'focusleave', parameters: 'pivotsettings,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'pivotsettings,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'pivotsettings,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'pivotsettings,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'pivotsettings,context' },
    { name: 'resizedragcancel', parameters: 'pivotsettings,context' },
    { name: 'resizedragend', parameters: 'pivotsettings,context' },
    { name: 'resizedragstart', parameters: 'pivotsettings,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'submit', parameters: 'pivotsettings,result,e' },
    { name: 'tofront', parameters: 'pivotsettings' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_pivot_plugin_configurator_Settings.EVENTNAMES);
//    return Ext_form_Panel.getEventNames(eventnames);
//}

var ExtPivotsettingsComponent_1;
class ExtPivotsettingsMetaData extends Ext_pivot_plugin_configurator_Settings {
    static getAll() {
        ExtPivotsettingsMetaData.PROPERTIES = Ext_pivot_plugin_configurator_Settings.getProperties(ExtPivotsettingsMetaData.PROPERTIES);
        ExtPivotsettingsMetaData.EVENTS = Ext_pivot_plugin_configurator_Settings.getEvents(ExtPivotsettingsMetaData.EVENTS);
        ExtPivotsettingsMetaData.EVENTS.forEach((event) => {
            ExtPivotsettingsMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPivotsettingsMetaData.PROPERTIES = [];
ExtPivotsettingsMetaData.EVENTS = [];
ExtPivotsettingsMetaData.EVENTNAMES = [];
(function () { ExtPivotsettingsMetaData.getAll(); })();
let ExtPivotsettingsComponent = ExtPivotsettingsComponent_1 = class ExtPivotsettingsComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPivotsettingsMetaData.PROPERTIES, ExtPivotsettingsMetaData.EVENTS);
        this.xtype = 'pivotsettings';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPivotsettingsComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPivotsettingsComponent = ExtPivotsettingsComponent_1 = __decorate([
    Component({
        selector: 'ext-pivotsettings',
        inputs: ExtPivotsettingsMetaData.PROPERTIES,
        outputs: ExtPivotsettingsMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPivotsettingsComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPivotsettingsComponent);

class Ext_pivot_plugin_rangeeditor_Panel extends Ext_form_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_pivot_plugin_rangeeditor_Panel.PROPERTIES);
        return Ext_form_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_pivot_plugin_rangeeditor_Panel.EVENTS);
        return Ext_form_Panel.getEvents(events);
    }
}
Ext_pivot_plugin_rangeeditor_Panel.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_pivot_plugin_rangeeditor_Panel.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,pivotrangeeditor,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'pivotrangeeditor,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'pivotrangeeditor' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'pivotrangeeditor' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'pivotrangeeditor,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforesubmit', parameters: 'pivotrangeeditor,values,options,e' },
    { name: 'beforetofront', parameters: 'pivotrangeeditor' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pivotrangeeditor,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'pivotrangeeditor' },
    { name: 'deactivate', parameters: 'oldActiveItem,pivotrangeeditor,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'pivotrangeeditor,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'pivotrangeeditor' },
    { name: 'drawershow', parameters: 'pivotrangeeditor' },
    { name: 'erased', parameters: 'sender' },
    { name: 'exception', parameters: 'pivotrangeeditor,result' },
    { name: 'expand', parameters: 'pivotrangeeditor' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'pivotrangeeditor,event' },
    { name: 'focusenter', parameters: 'pivotrangeeditor,event' },
    { name: 'focusleave', parameters: 'pivotrangeeditor,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'pivotrangeeditor,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'pivotrangeeditor,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'pivotrangeeditor,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'pivotrangeeditor,context' },
    { name: 'resizedragcancel', parameters: 'pivotrangeeditor,context' },
    { name: 'resizedragend', parameters: 'pivotrangeeditor,context' },
    { name: 'resizedragstart', parameters: 'pivotrangeeditor,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'submit', parameters: 'pivotrangeeditor,result,e' },
    { name: 'tofront', parameters: 'pivotrangeeditor' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_pivot_plugin_rangeeditor_Panel.EVENTNAMES);
//    return Ext_form_Panel.getEventNames(eventnames);
//}

var ExtPivotrangeeditorComponent_1;
class ExtPivotrangeeditorMetaData extends Ext_pivot_plugin_rangeeditor_Panel {
    static getAll() {
        ExtPivotrangeeditorMetaData.PROPERTIES = Ext_pivot_plugin_rangeeditor_Panel.getProperties(ExtPivotrangeeditorMetaData.PROPERTIES);
        ExtPivotrangeeditorMetaData.EVENTS = Ext_pivot_plugin_rangeeditor_Panel.getEvents(ExtPivotrangeeditorMetaData.EVENTS);
        ExtPivotrangeeditorMetaData.EVENTS.forEach((event) => {
            ExtPivotrangeeditorMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPivotrangeeditorMetaData.PROPERTIES = [];
ExtPivotrangeeditorMetaData.EVENTS = [];
ExtPivotrangeeditorMetaData.EVENTNAMES = [];
(function () { ExtPivotrangeeditorMetaData.getAll(); })();
let ExtPivotrangeeditorComponent = ExtPivotrangeeditorComponent_1 = class ExtPivotrangeeditorComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPivotrangeeditorMetaData.PROPERTIES, ExtPivotrangeeditorMetaData.EVENTS);
        this.xtype = 'pivotrangeeditor';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPivotrangeeditorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPivotrangeeditorComponent = ExtPivotrangeeditorComponent_1 = __decorate([
    Component({
        selector: 'ext-pivotrangeeditor',
        inputs: ExtPivotrangeeditorMetaData.PROPERTIES,
        outputs: ExtPivotrangeeditorMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPivotrangeeditorComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPivotrangeeditorComponent);

class Ext_pivot_Row extends Ext_grid_Row {
    static getProperties(properties) {
        properties = properties.concat(Ext_pivot_Row.PROPERTIES);
        return Ext_grid_Row.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_pivot_Row.EVENTS);
        return Ext_grid_Row.getEvents(events);
    }
}
Ext_pivot_Row.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_pivot_Row.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'pivotgridrow' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'pivotgridrow,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'pivotgridrow,event' },
    { name: 'focusenter', parameters: 'pivotgridrow,event' },
    { name: 'focusleave', parameters: 'pivotgridrow,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'pivotgridrow' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_pivot_Row.EVENTNAMES);
//    return Ext_grid_Row.getEventNames(eventnames);
//}

var ExtPivotgridrowComponent_1;
class ExtPivotgridrowMetaData extends Ext_pivot_Row {
    static getAll() {
        ExtPivotgridrowMetaData.PROPERTIES = Ext_pivot_Row.getProperties(ExtPivotgridrowMetaData.PROPERTIES);
        ExtPivotgridrowMetaData.EVENTS = Ext_pivot_Row.getEvents(ExtPivotgridrowMetaData.EVENTS);
        ExtPivotgridrowMetaData.EVENTS.forEach((event) => {
            ExtPivotgridrowMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPivotgridrowMetaData.PROPERTIES = [];
ExtPivotgridrowMetaData.EVENTS = [];
ExtPivotgridrowMetaData.EVENTNAMES = [];
(function () { ExtPivotgridrowMetaData.getAll(); })();
let ExtPivotgridrowComponent = ExtPivotgridrowComponent_1 = class ExtPivotgridrowComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPivotgridrowMetaData.PROPERTIES, ExtPivotgridrowMetaData.EVENTS);
        this.xtype = 'pivotgridrow';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPivotgridrowComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPivotgridrowComponent = ExtPivotgridrowComponent_1 = __decorate([
    Component({
        selector: 'ext-pivotgridrow',
        inputs: ExtPivotgridrowMetaData.PROPERTIES,
        outputs: ExtPivotgridrowMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPivotgridrowComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPivotgridrowComponent);

class Ext_ProgressBarWidget extends Ext_Gadget {
    static getProperties(properties) {
        properties = properties.concat(Ext_ProgressBarWidget.PROPERTIES);
        return Ext_Gadget.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_ProgressBarWidget.EVENTS);
        return Ext_Gadget.getEvents(events);
    }
}
Ext_ProgressBarWidget.PROPERTIES = [
    'animate',
    'text',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_ProgressBarWidget.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'progress' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'progress,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'progress,event' },
    { name: 'focusenter', parameters: 'progress,event' },
    { name: 'focusleave', parameters: 'progress,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'progress' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_ProgressBarWidget.EVENTNAMES);
//    return Ext_Gadget.getEventNames(eventnames);
//}

var ExtProgressComponent_1;
class ExtProgressMetaData extends Ext_ProgressBarWidget {
    static getAll() {
        ExtProgressMetaData.PROPERTIES = Ext_ProgressBarWidget.getProperties(ExtProgressMetaData.PROPERTIES);
        ExtProgressMetaData.EVENTS = Ext_ProgressBarWidget.getEvents(ExtProgressMetaData.EVENTS);
        ExtProgressMetaData.EVENTS.forEach((event) => {
            ExtProgressMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtProgressMetaData.PROPERTIES = [];
ExtProgressMetaData.EVENTS = [];
ExtProgressMetaData.EVENTNAMES = [];
(function () { ExtProgressMetaData.getAll(); })();
let ExtProgressComponent = ExtProgressComponent_1 = class ExtProgressComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtProgressMetaData.PROPERTIES, ExtProgressMetaData.EVENTS);
        this.xtype = 'progress';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtProgressComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtProgressComponent = ExtProgressComponent_1 = __decorate([
    Component({
        selector: 'ext-progress',
        inputs: ExtProgressMetaData.PROPERTIES,
        outputs: ExtProgressMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtProgressComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtProgressComponent);

class Ext_button_Segmented extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_button_Segmented.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_button_Segmented.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_button_Segmented.PROPERTIES = [
    'allowDepress',
    'allowMultiple',
    'allowToggle',
    'autoSize',
    'defaults',
    'defaultType',
    'defaultUI',
    'forceSelection',
    'layout',
    'pressedButtons',
    'publishes',
    'twoWayBindable',
    'value',
    'vertical',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_button_Segmented.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,segmentedbutton,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'segmentedbutton,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'segmentedbutton' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'segmentedbutton,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'segmentedbutton,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,segmentedbutton,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'segmentedbutton,event' },
    { name: 'focusenter', parameters: 'segmentedbutton,event' },
    { name: 'focusleave', parameters: 'segmentedbutton,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'segmentedbutton,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'segmentedbutton,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'segmentedbutton,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'segmentedbutton' },
    { name: 'toggle', parameters: 'segmentedbutton,button,isPressed' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_button_Segmented.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

var ExtSegmentedbuttonComponent_1;
class ExtSegmentedbuttonMetaData extends Ext_button_Segmented {
    static getAll() {
        ExtSegmentedbuttonMetaData.PROPERTIES = Ext_button_Segmented.getProperties(ExtSegmentedbuttonMetaData.PROPERTIES);
        ExtSegmentedbuttonMetaData.EVENTS = Ext_button_Segmented.getEvents(ExtSegmentedbuttonMetaData.EVENTS);
        ExtSegmentedbuttonMetaData.EVENTS.forEach((event) => {
            ExtSegmentedbuttonMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSegmentedbuttonMetaData.PROPERTIES = [];
ExtSegmentedbuttonMetaData.EVENTS = [];
ExtSegmentedbuttonMetaData.EVENTNAMES = [];
(function () { ExtSegmentedbuttonMetaData.getAll(); })();
let ExtSegmentedbuttonComponent = ExtSegmentedbuttonComponent_1 = class ExtSegmentedbuttonComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSegmentedbuttonMetaData.PROPERTIES, ExtSegmentedbuttonMetaData.EVENTS);
        this.xtype = 'segmentedbutton';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSegmentedbuttonComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSegmentedbuttonComponent = ExtSegmentedbuttonComponent_1 = __decorate([
    Component({
        selector: 'ext-segmentedbutton',
        inputs: ExtSegmentedbuttonMetaData.PROPERTIES,
        outputs: ExtSegmentedbuttonMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSegmentedbuttonComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSegmentedbuttonComponent);

var ExtSheetComponent_1;
class ExtSheetMetaData extends Ext_Sheet {
    static getAll() {
        ExtSheetMetaData.PROPERTIES = Ext_Sheet.getProperties(ExtSheetMetaData.PROPERTIES);
        ExtSheetMetaData.EVENTS = Ext_Sheet.getEvents(ExtSheetMetaData.EVENTS);
        ExtSheetMetaData.EVENTS.forEach((event) => {
            ExtSheetMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSheetMetaData.PROPERTIES = [];
ExtSheetMetaData.EVENTS = [];
ExtSheetMetaData.EVENTNAMES = [];
(function () { ExtSheetMetaData.getAll(); })();
let ExtSheetComponent = ExtSheetComponent_1 = class ExtSheetComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSheetMetaData.PROPERTIES, ExtSheetMetaData.EVENTS);
        this.xtype = 'sheet';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSheetComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSheetComponent = ExtSheetComponent_1 = __decorate([
    Component({
        selector: 'ext-sheet',
        inputs: ExtSheetMetaData.PROPERTIES,
        outputs: ExtSheetMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSheetComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSheetComponent);

class Ext_slider_Slider extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_slider_Slider.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_slider_Slider.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_slider_Slider.PROPERTIES = [
    'allowThumbsOverlapping',
    'animation',
    'increment',
    'maxValue',
    'minValue',
    'readOnly',
    'thumbDefaults',
    'value',
    'valueIsArray',
    'values',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_slider_Slider.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'slider' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'slider,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'slider,thumb,newValue,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drag', parameters: 'slider,thumb,e' },
    { name: 'dragend', parameters: 'slider,thumb,value,e' },
    { name: 'dragstart', parameters: 'slider,thumb,value,e' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'slider,event' },
    { name: 'focusenter', parameters: 'slider,event' },
    { name: 'focusleave', parameters: 'slider,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'slider' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_slider_Slider.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtSliderComponent_1;
class ExtSliderMetaData extends Ext_slider_Slider {
    static getAll() {
        ExtSliderMetaData.PROPERTIES = Ext_slider_Slider.getProperties(ExtSliderMetaData.PROPERTIES);
        ExtSliderMetaData.EVENTS = Ext_slider_Slider.getEvents(ExtSliderMetaData.EVENTS);
        ExtSliderMetaData.EVENTS.forEach((event) => {
            ExtSliderMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSliderMetaData.PROPERTIES = [];
ExtSliderMetaData.EVENTS = [];
ExtSliderMetaData.EVENTNAMES = [];
(function () { ExtSliderMetaData.getAll(); })();
let ExtSliderComponent = ExtSliderComponent_1 = class ExtSliderComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSliderMetaData.PROPERTIES, ExtSliderMetaData.EVENTS);
        this.xtype = 'slider';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSliderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSliderComponent = ExtSliderComponent_1 = __decorate([
    Component({
        selector: 'ext-slider',
        inputs: ExtSliderMetaData.PROPERTIES,
        outputs: ExtSliderMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSliderComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSliderComponent);

class Ext_slider_Thumb extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_slider_Thumb.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_slider_Thumb.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_slider_Thumb.PROPERTIES = [
    'draggable',
    'fillCls',
    'fillTrack',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_slider_Thumb.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'thumb' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'thumb,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'thumb,event' },
    { name: 'focusenter', parameters: 'thumb,event' },
    { name: 'focusleave', parameters: 'thumb,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'thumb' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_slider_Thumb.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtThumbComponent_1;
class ExtThumbMetaData extends Ext_slider_Thumb {
    static getAll() {
        ExtThumbMetaData.PROPERTIES = Ext_slider_Thumb.getProperties(ExtThumbMetaData.PROPERTIES);
        ExtThumbMetaData.EVENTS = Ext_slider_Thumb.getEvents(ExtThumbMetaData.EVENTS);
        ExtThumbMetaData.EVENTS.forEach((event) => {
            ExtThumbMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtThumbMetaData.PROPERTIES = [];
ExtThumbMetaData.EVENTS = [];
ExtThumbMetaData.EVENTNAMES = [];
(function () { ExtThumbMetaData.getAll(); })();
let ExtThumbComponent = ExtThumbComponent_1 = class ExtThumbComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtThumbMetaData.PROPERTIES, ExtThumbMetaData.EVENTS);
        this.xtype = 'thumb';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtThumbComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtThumbComponent = ExtThumbComponent_1 = __decorate([
    Component({
        selector: 'ext-thumb',
        inputs: ExtThumbMetaData.PROPERTIES,
        outputs: ExtThumbMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtThumbComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtThumbComponent);

class Ext_slider_Toggle extends Ext_slider_Slider {
    static getProperties(properties) {
        properties = properties.concat(Ext_slider_Toggle.PROPERTIES);
        return Ext_slider_Slider.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_slider_Toggle.EVENTS);
        return Ext_slider_Slider.getEvents(events);
    }
}
Ext_slider_Toggle.PROPERTIES = [
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_slider_Toggle.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'toggleslider' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'toggleslider,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'toggleslider,thumb,newValue,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drag', parameters: 'toggleslider,thumb,e' },
    { name: 'dragend', parameters: 'toggleslider,thumb,value,e' },
    { name: 'dragstart', parameters: 'toggleslider,thumb,value,e' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'toggleslider,event' },
    { name: 'focusenter', parameters: 'toggleslider,event' },
    { name: 'focusleave', parameters: 'toggleslider,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'toggleslider' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_slider_Toggle.EVENTNAMES);
//    return Ext_slider_Slider.getEventNames(eventnames);
//}

var ExtTogglesliderComponent_1;
class ExtTogglesliderMetaData extends Ext_slider_Toggle {
    static getAll() {
        ExtTogglesliderMetaData.PROPERTIES = Ext_slider_Toggle.getProperties(ExtTogglesliderMetaData.PROPERTIES);
        ExtTogglesliderMetaData.EVENTS = Ext_slider_Toggle.getEvents(ExtTogglesliderMetaData.EVENTS);
        ExtTogglesliderMetaData.EVENTS.forEach((event) => {
            ExtTogglesliderMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTogglesliderMetaData.PROPERTIES = [];
ExtTogglesliderMetaData.EVENTS = [];
ExtTogglesliderMetaData.EVENTNAMES = [];
(function () { ExtTogglesliderMetaData.getAll(); })();
let ExtTogglesliderComponent = ExtTogglesliderComponent_1 = class ExtTogglesliderComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTogglesliderMetaData.PROPERTIES, ExtTogglesliderMetaData.EVENTS);
        this.xtype = 'toggleslider';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTogglesliderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTogglesliderComponent = ExtTogglesliderComponent_1 = __decorate([
    Component({
        selector: 'ext-toggleslider',
        inputs: ExtTogglesliderMetaData.PROPERTIES,
        outputs: ExtTogglesliderMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTogglesliderComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTogglesliderComponent);

class Ext_Spacer extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_Spacer.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Spacer.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_Spacer.PROPERTIES = [
    'flex',
    'width',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Spacer.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'spacer' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'spacer,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'spacer,event' },
    { name: 'focusenter', parameters: 'spacer,event' },
    { name: 'focusleave', parameters: 'spacer,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'spacer' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Spacer.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtSpacerComponent_1;
class ExtSpacerMetaData extends Ext_Spacer {
    static getAll() {
        ExtSpacerMetaData.PROPERTIES = Ext_Spacer.getProperties(ExtSpacerMetaData.PROPERTIES);
        ExtSpacerMetaData.EVENTS = Ext_Spacer.getEvents(ExtSpacerMetaData.EVENTS);
        ExtSpacerMetaData.EVENTS.forEach((event) => {
            ExtSpacerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSpacerMetaData.PROPERTIES = [];
ExtSpacerMetaData.EVENTS = [];
ExtSpacerMetaData.EVENTNAMES = [];
(function () { ExtSpacerMetaData.getAll(); })();
let ExtSpacerComponent = ExtSpacerComponent_1 = class ExtSpacerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSpacerMetaData.PROPERTIES, ExtSpacerMetaData.EVENTS);
        this.xtype = 'spacer';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSpacerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSpacerComponent = ExtSpacerComponent_1 = __decorate([
    Component({
        selector: 'ext-spacer',
        inputs: ExtSpacerMetaData.PROPERTIES,
        outputs: ExtSpacerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSpacerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSpacerComponent);

class Ext_sparkline_Base extends Ext_Gadget {
    static getProperties(properties) {
        properties = properties.concat(Ext_sparkline_Base.PROPERTIES);
        return Ext_Gadget.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_sparkline_Base.EVENTS);
        return Ext_Gadget.getEvents(events);
    }
}
Ext_sparkline_Base.PROPERTIES = [
    'disableTooltips',
    'highlightColor',
    'highlightLighten',
    'lineColor',
    'tipTpl',
    'tooltipPrefix',
    'tooltipSkipNull',
    'tooltipSuffix',
    'values',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_sparkline_Base.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'sparkline' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'sparkline,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'sparkline,event' },
    { name: 'focusenter', parameters: 'sparkline,event' },
    { name: 'focusleave', parameters: 'sparkline,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'sparkline' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_sparkline_Base.EVENTNAMES);
//    return Ext_Gadget.getEventNames(eventnames);
//}

class Ext_sparkline_BarBase extends Ext_sparkline_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_sparkline_BarBase.PROPERTIES);
        return Ext_sparkline_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_sparkline_BarBase.EVENTS);
        return Ext_sparkline_Base.getEvents(events);
    }
}
Ext_sparkline_BarBase.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_sparkline_BarBase.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'undefined' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'undefined,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'undefined,event' },
    { name: 'focusenter', parameters: 'undefined,event' },
    { name: 'focusleave', parameters: 'undefined,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'undefined' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_sparkline_BarBase.EVENTNAMES);
//    return Ext_sparkline_Base.getEventNames(eventnames);
//}

class Ext_sparkline_Bar extends Ext_sparkline_BarBase {
    static getProperties(properties) {
        properties = properties.concat(Ext_sparkline_Bar.PROPERTIES);
        return Ext_sparkline_BarBase.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_sparkline_Bar.EVENTS);
        return Ext_sparkline_BarBase.getEvents(events);
    }
}
Ext_sparkline_Bar.PROPERTIES = [
    'barColor',
    'barSpacing',
    'barWidth',
    'chartRangeClip',
    'chartRangeMax',
    'chartRangeMin',
    'colorMap',
    'negBarColor',
    'nullColor',
    'stackedBarColor',
    'tipTpl',
    'zeroAxis',
    'zeroColor',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_sparkline_Bar.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'sparklinebar' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'sparklinebar,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'sparklinebar,event' },
    { name: 'focusenter', parameters: 'sparklinebar,event' },
    { name: 'focusleave', parameters: 'sparklinebar,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'sparklinebar' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_sparkline_Bar.EVENTNAMES);
//    return Ext_sparkline_BarBase.getEventNames(eventnames);
//}

var ExtSparklinebarComponent_1;
class ExtSparklinebarMetaData extends Ext_sparkline_Bar {
    static getAll() {
        ExtSparklinebarMetaData.PROPERTIES = Ext_sparkline_Bar.getProperties(ExtSparklinebarMetaData.PROPERTIES);
        ExtSparklinebarMetaData.EVENTS = Ext_sparkline_Bar.getEvents(ExtSparklinebarMetaData.EVENTS);
        ExtSparklinebarMetaData.EVENTS.forEach((event) => {
            ExtSparklinebarMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSparklinebarMetaData.PROPERTIES = [];
ExtSparklinebarMetaData.EVENTS = [];
ExtSparklinebarMetaData.EVENTNAMES = [];
(function () { ExtSparklinebarMetaData.getAll(); })();
let ExtSparklinebarComponent = ExtSparklinebarComponent_1 = class ExtSparklinebarComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSparklinebarMetaData.PROPERTIES, ExtSparklinebarMetaData.EVENTS);
        this.xtype = 'sparklinebar';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSparklinebarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSparklinebarComponent = ExtSparklinebarComponent_1 = __decorate([
    Component({
        selector: 'ext-sparklinebar',
        inputs: ExtSparklinebarMetaData.PROPERTIES,
        outputs: ExtSparklinebarMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSparklinebarComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSparklinebarComponent);

var ExtSparklineComponent_1;
class ExtSparklineMetaData extends Ext_sparkline_Base {
    static getAll() {
        ExtSparklineMetaData.PROPERTIES = Ext_sparkline_Base.getProperties(ExtSparklineMetaData.PROPERTIES);
        ExtSparklineMetaData.EVENTS = Ext_sparkline_Base.getEvents(ExtSparklineMetaData.EVENTS);
        ExtSparklineMetaData.EVENTS.forEach((event) => {
            ExtSparklineMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSparklineMetaData.PROPERTIES = [];
ExtSparklineMetaData.EVENTS = [];
ExtSparklineMetaData.EVENTNAMES = [];
(function () { ExtSparklineMetaData.getAll(); })();
let ExtSparklineComponent = ExtSparklineComponent_1 = class ExtSparklineComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSparklineMetaData.PROPERTIES, ExtSparklineMetaData.EVENTS);
        this.xtype = 'sparkline';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSparklineComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSparklineComponent = ExtSparklineComponent_1 = __decorate([
    Component({
        selector: 'ext-sparkline',
        inputs: ExtSparklineMetaData.PROPERTIES,
        outputs: ExtSparklineMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSparklineComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSparklineComponent);

class Ext_sparkline_Box extends Ext_sparkline_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_sparkline_Box.PROPERTIES);
        return Ext_sparkline_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_sparkline_Box.EVENTS);
        return Ext_sparkline_Base.getEvents(events);
    }
}
Ext_sparkline_Box.PROPERTIES = [
    'boxFillColor',
    'boxLineColor',
    'chartRangeMax',
    'chartRangeMin',
    'medianColor',
    'outlierFillColor',
    'outlierIQR',
    'outlierLineColor',
    'raw',
    'showOutliers',
    'spotRadius',
    'target',
    'targetColor',
    'whiskerColor',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_sparkline_Box.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'sparklinebox' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'sparklinebox,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'sparklinebox,event' },
    { name: 'focusenter', parameters: 'sparklinebox,event' },
    { name: 'focusleave', parameters: 'sparklinebox,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'sparklinebox' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_sparkline_Box.EVENTNAMES);
//    return Ext_sparkline_Base.getEventNames(eventnames);
//}

var ExtSparklineboxComponent_1;
class ExtSparklineboxMetaData extends Ext_sparkline_Box {
    static getAll() {
        ExtSparklineboxMetaData.PROPERTIES = Ext_sparkline_Box.getProperties(ExtSparklineboxMetaData.PROPERTIES);
        ExtSparklineboxMetaData.EVENTS = Ext_sparkline_Box.getEvents(ExtSparklineboxMetaData.EVENTS);
        ExtSparklineboxMetaData.EVENTS.forEach((event) => {
            ExtSparklineboxMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSparklineboxMetaData.PROPERTIES = [];
ExtSparklineboxMetaData.EVENTS = [];
ExtSparklineboxMetaData.EVENTNAMES = [];
(function () { ExtSparklineboxMetaData.getAll(); })();
let ExtSparklineboxComponent = ExtSparklineboxComponent_1 = class ExtSparklineboxComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSparklineboxMetaData.PROPERTIES, ExtSparklineboxMetaData.EVENTS);
        this.xtype = 'sparklinebox';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSparklineboxComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSparklineboxComponent = ExtSparklineboxComponent_1 = __decorate([
    Component({
        selector: 'ext-sparklinebox',
        inputs: ExtSparklineboxMetaData.PROPERTIES,
        outputs: ExtSparklineboxMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSparklineboxComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSparklineboxComponent);

class Ext_sparkline_Bullet extends Ext_sparkline_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_sparkline_Bullet.PROPERTIES);
        return Ext_sparkline_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_sparkline_Bullet.EVENTS);
        return Ext_sparkline_Base.getEvents(events);
    }
}
Ext_sparkline_Bullet.PROPERTIES = [
    'base',
    'performanceColor',
    'rangeColors',
    'targetColor',
    'targetWidth',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_sparkline_Bullet.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'sparklinebullet' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'sparklinebullet,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'sparklinebullet,event' },
    { name: 'focusenter', parameters: 'sparklinebullet,event' },
    { name: 'focusleave', parameters: 'sparklinebullet,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'sparklinebullet' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_sparkline_Bullet.EVENTNAMES);
//    return Ext_sparkline_Base.getEventNames(eventnames);
//}

var ExtSparklinebulletComponent_1;
class ExtSparklinebulletMetaData extends Ext_sparkline_Bullet {
    static getAll() {
        ExtSparklinebulletMetaData.PROPERTIES = Ext_sparkline_Bullet.getProperties(ExtSparklinebulletMetaData.PROPERTIES);
        ExtSparklinebulletMetaData.EVENTS = Ext_sparkline_Bullet.getEvents(ExtSparklinebulletMetaData.EVENTS);
        ExtSparklinebulletMetaData.EVENTS.forEach((event) => {
            ExtSparklinebulletMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSparklinebulletMetaData.PROPERTIES = [];
ExtSparklinebulletMetaData.EVENTS = [];
ExtSparklinebulletMetaData.EVENTNAMES = [];
(function () { ExtSparklinebulletMetaData.getAll(); })();
let ExtSparklinebulletComponent = ExtSparklinebulletComponent_1 = class ExtSparklinebulletComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSparklinebulletMetaData.PROPERTIES, ExtSparklinebulletMetaData.EVENTS);
        this.xtype = 'sparklinebullet';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSparklinebulletComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSparklinebulletComponent = ExtSparklinebulletComponent_1 = __decorate([
    Component({
        selector: 'ext-sparklinebullet',
        inputs: ExtSparklinebulletMetaData.PROPERTIES,
        outputs: ExtSparklinebulletMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSparklinebulletComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSparklinebulletComponent);

class Ext_sparkline_Discrete extends Ext_sparkline_BarBase {
    static getProperties(properties) {
        properties = properties.concat(Ext_sparkline_Discrete.PROPERTIES);
        return Ext_sparkline_BarBase.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_sparkline_Discrete.EVENTS);
        return Ext_sparkline_BarBase.getEvents(events);
    }
}
Ext_sparkline_Discrete.PROPERTIES = [
    'chartRangeClip',
    'chartRangeMax',
    'chartRangeMin',
    'lineHeight',
    'thresholdColor',
    'thresholdValue',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_sparkline_Discrete.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'sparklinediscrete' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'sparklinediscrete,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'sparklinediscrete,event' },
    { name: 'focusenter', parameters: 'sparklinediscrete,event' },
    { name: 'focusleave', parameters: 'sparklinediscrete,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'sparklinediscrete' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_sparkline_Discrete.EVENTNAMES);
//    return Ext_sparkline_BarBase.getEventNames(eventnames);
//}

var ExtSparklinediscreteComponent_1;
class ExtSparklinediscreteMetaData extends Ext_sparkline_Discrete {
    static getAll() {
        ExtSparklinediscreteMetaData.PROPERTIES = Ext_sparkline_Discrete.getProperties(ExtSparklinediscreteMetaData.PROPERTIES);
        ExtSparklinediscreteMetaData.EVENTS = Ext_sparkline_Discrete.getEvents(ExtSparklinediscreteMetaData.EVENTS);
        ExtSparklinediscreteMetaData.EVENTS.forEach((event) => {
            ExtSparklinediscreteMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSparklinediscreteMetaData.PROPERTIES = [];
ExtSparklinediscreteMetaData.EVENTS = [];
ExtSparklinediscreteMetaData.EVENTNAMES = [];
(function () { ExtSparklinediscreteMetaData.getAll(); })();
let ExtSparklinediscreteComponent = ExtSparklinediscreteComponent_1 = class ExtSparklinediscreteComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSparklinediscreteMetaData.PROPERTIES, ExtSparklinediscreteMetaData.EVENTS);
        this.xtype = 'sparklinediscrete';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSparklinediscreteComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSparklinediscreteComponent = ExtSparklinediscreteComponent_1 = __decorate([
    Component({
        selector: 'ext-sparklinediscrete',
        inputs: ExtSparklinediscreteMetaData.PROPERTIES,
        outputs: ExtSparklinediscreteMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSparklinediscreteComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSparklinediscreteComponent);

class Ext_sparkline_Line extends Ext_sparkline_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_sparkline_Line.PROPERTIES);
        return Ext_sparkline_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_sparkline_Line.EVENTS);
        return Ext_sparkline_Base.getEvents(events);
    }
}
Ext_sparkline_Line.PROPERTIES = [
    'chartRangeMax',
    'chartRangeMaxX',
    'chartRangeMin',
    'chartRangeMinX',
    'drawNormalOnTop',
    'fillColor',
    'highlightLineColor',
    'highlightSpotColor',
    'lineWidth',
    'maxSpotColor',
    'minSpotColor',
    'normalRangeColor',
    'normalRangeMax',
    'normalRangeMin',
    'spotColor',
    'spotRadius',
    'valueSpots',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_sparkline_Line.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'sparklineline' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'sparklineline,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'sparklineline,event' },
    { name: 'focusenter', parameters: 'sparklineline,event' },
    { name: 'focusleave', parameters: 'sparklineline,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'sparklineline' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_sparkline_Line.EVENTNAMES);
//    return Ext_sparkline_Base.getEventNames(eventnames);
//}

var ExtSparklinelineComponent_1;
class ExtSparklinelineMetaData extends Ext_sparkline_Line {
    static getAll() {
        ExtSparklinelineMetaData.PROPERTIES = Ext_sparkline_Line.getProperties(ExtSparklinelineMetaData.PROPERTIES);
        ExtSparklinelineMetaData.EVENTS = Ext_sparkline_Line.getEvents(ExtSparklinelineMetaData.EVENTS);
        ExtSparklinelineMetaData.EVENTS.forEach((event) => {
            ExtSparklinelineMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSparklinelineMetaData.PROPERTIES = [];
ExtSparklinelineMetaData.EVENTS = [];
ExtSparklinelineMetaData.EVENTNAMES = [];
(function () { ExtSparklinelineMetaData.getAll(); })();
let ExtSparklinelineComponent = ExtSparklinelineComponent_1 = class ExtSparklinelineComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSparklinelineMetaData.PROPERTIES, ExtSparklinelineMetaData.EVENTS);
        this.xtype = 'sparklineline';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSparklinelineComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSparklinelineComponent = ExtSparklinelineComponent_1 = __decorate([
    Component({
        selector: 'ext-sparklineline',
        inputs: ExtSparklinelineMetaData.PROPERTIES,
        outputs: ExtSparklinelineMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSparklinelineComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSparklinelineComponent);

class Ext_sparkline_Pie extends Ext_sparkline_Base {
    static getProperties(properties) {
        properties = properties.concat(Ext_sparkline_Pie.PROPERTIES);
        return Ext_sparkline_Base.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_sparkline_Pie.EVENTS);
        return Ext_sparkline_Base.getEvents(events);
    }
}
Ext_sparkline_Pie.PROPERTIES = [
    'borderColor',
    'borderWidth',
    'offset',
    'sliceColors',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_sparkline_Pie.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'sparklinepie' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'sparklinepie,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'sparklinepie,event' },
    { name: 'focusenter', parameters: 'sparklinepie,event' },
    { name: 'focusleave', parameters: 'sparklinepie,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'sparklinepie' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_sparkline_Pie.EVENTNAMES);
//    return Ext_sparkline_Base.getEventNames(eventnames);
//}

var ExtSparklinepieComponent_1;
class ExtSparklinepieMetaData extends Ext_sparkline_Pie {
    static getAll() {
        ExtSparklinepieMetaData.PROPERTIES = Ext_sparkline_Pie.getProperties(ExtSparklinepieMetaData.PROPERTIES);
        ExtSparklinepieMetaData.EVENTS = Ext_sparkline_Pie.getEvents(ExtSparklinepieMetaData.EVENTS);
        ExtSparklinepieMetaData.EVENTS.forEach((event) => {
            ExtSparklinepieMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSparklinepieMetaData.PROPERTIES = [];
ExtSparklinepieMetaData.EVENTS = [];
ExtSparklinepieMetaData.EVENTNAMES = [];
(function () { ExtSparklinepieMetaData.getAll(); })();
let ExtSparklinepieComponent = ExtSparklinepieComponent_1 = class ExtSparklinepieComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSparklinepieMetaData.PROPERTIES, ExtSparklinepieMetaData.EVENTS);
        this.xtype = 'sparklinepie';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSparklinepieComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSparklinepieComponent = ExtSparklinepieComponent_1 = __decorate([
    Component({
        selector: 'ext-sparklinepie',
        inputs: ExtSparklinepieMetaData.PROPERTIES,
        outputs: ExtSparklinepieMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSparklinepieComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSparklinepieComponent);

class Ext_sparkline_TriState extends Ext_sparkline_BarBase {
    static getProperties(properties) {
        properties = properties.concat(Ext_sparkline_TriState.PROPERTIES);
        return Ext_sparkline_BarBase.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_sparkline_TriState.EVENTS);
        return Ext_sparkline_BarBase.getEvents(events);
    }
}
Ext_sparkline_TriState.PROPERTIES = [
    'barSpacing',
    'barWidth',
    'colorMap',
    'negBarColor',
    'posBarColor',
    'zeroBarColor',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_sparkline_TriState.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'sparklinetristate' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'sparklinetristate,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'sparklinetristate,event' },
    { name: 'focusenter', parameters: 'sparklinetristate,event' },
    { name: 'focusleave', parameters: 'sparklinetristate,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'sparklinetristate' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_sparkline_TriState.EVENTNAMES);
//    return Ext_sparkline_BarBase.getEventNames(eventnames);
//}

var ExtSparklinetristateComponent_1;
class ExtSparklinetristateMetaData extends Ext_sparkline_TriState {
    static getAll() {
        ExtSparklinetristateMetaData.PROPERTIES = Ext_sparkline_TriState.getProperties(ExtSparklinetristateMetaData.PROPERTIES);
        ExtSparklinetristateMetaData.EVENTS = Ext_sparkline_TriState.getEvents(ExtSparklinetristateMetaData.EVENTS);
        ExtSparklinetristateMetaData.EVENTS.forEach((event) => {
            ExtSparklinetristateMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSparklinetristateMetaData.PROPERTIES = [];
ExtSparklinetristateMetaData.EVENTS = [];
ExtSparklinetristateMetaData.EVENTNAMES = [];
(function () { ExtSparklinetristateMetaData.getAll(); })();
let ExtSparklinetristateComponent = ExtSparklinetristateComponent_1 = class ExtSparklinetristateComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSparklinetristateMetaData.PROPERTIES, ExtSparklinetristateMetaData.EVENTS);
        this.xtype = 'sparklinetristate';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSparklinetristateComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSparklinetristateComponent = ExtSparklinetristateComponent_1 = __decorate([
    Component({
        selector: 'ext-sparklinetristate',
        inputs: ExtSparklinetristateMetaData.PROPERTIES,
        outputs: ExtSparklinetristateMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSparklinetristateComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSparklinetristateComponent);

class Ext_SplitButton extends Ext_Button {
    static getProperties(properties) {
        properties = properties.concat(Ext_SplitButton.PROPERTIES);
        return Ext_Button.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_SplitButton.EVENTS);
        return Ext_Button.getEvents(events);
    }
}
Ext_SplitButton.PROPERTIES = [
    'arrowHandler',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_SplitButton.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'arrowclick', parameters: 'splitbutton,e' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'splitbutton' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'splitbutton,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'splitbutton,event' },
    { name: 'focusenter', parameters: 'splitbutton,event' },
    { name: 'focusleave', parameters: 'splitbutton,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'pressedchange', parameters: 'sender,value,oldValue' },
    { name: 'release', parameters: 'splitbutton,e' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tap', parameters: 'splitbutton,e' },
    { name: 'tofront', parameters: 'splitbutton' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_SplitButton.EVENTNAMES);
//    return Ext_Button.getEventNames(eventnames);
//}

var ExtSplitbuttonComponent_1;
class ExtSplitbuttonMetaData extends Ext_SplitButton {
    static getAll() {
        ExtSplitbuttonMetaData.PROPERTIES = Ext_SplitButton.getProperties(ExtSplitbuttonMetaData.PROPERTIES);
        ExtSplitbuttonMetaData.EVENTS = Ext_SplitButton.getEvents(ExtSplitbuttonMetaData.EVENTS);
        ExtSplitbuttonMetaData.EVENTS.forEach((event) => {
            ExtSplitbuttonMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSplitbuttonMetaData.PROPERTIES = [];
ExtSplitbuttonMetaData.EVENTS = [];
ExtSplitbuttonMetaData.EVENTNAMES = [];
(function () { ExtSplitbuttonMetaData.getAll(); })();
let ExtSplitbuttonComponent = ExtSplitbuttonComponent_1 = class ExtSplitbuttonComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSplitbuttonMetaData.PROPERTIES, ExtSplitbuttonMetaData.EVENTS);
        this.xtype = 'splitbutton';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSplitbuttonComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSplitbuttonComponent = ExtSplitbuttonComponent_1 = __decorate([
    Component({
        selector: 'ext-splitbutton',
        inputs: ExtSplitbuttonMetaData.PROPERTIES,
        outputs: ExtSplitbuttonMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSplitbuttonComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSplitbuttonComponent);

class Ext_TabBar extends Ext_Toolbar {
    static getProperties(properties) {
        properties = properties.concat(Ext_TabBar.PROPERTIES);
        return Ext_Toolbar.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_TabBar.EVENTS);
        return Ext_Toolbar.getEvents(events);
    }
}
Ext_TabBar.PROPERTIES = [
    'activeTab',
    'animateIndicator',
    'defaultTabUI',
    'defaultType',
    'layout',
    'tabRotation',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_TabBar.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,tabbar,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'activeTabchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'tabbar,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeactiveTabchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'tabbar' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'tabbar,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,tabbar,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'tabbar,event' },
    { name: 'focusenter', parameters: 'tabbar,event' },
    { name: 'focusleave', parameters: 'tabbar,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'tabbar,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'tabbar,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'tabbar,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tabchange', parameters: 'tabbar,newTab,oldTab' },
    { name: 'tofront', parameters: 'tabbar' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_TabBar.EVENTNAMES);
//    return Ext_Toolbar.getEventNames(eventnames);
//}

var ExtTabbarComponent_1;
class ExtTabbarMetaData extends Ext_TabBar {
    static getAll() {
        ExtTabbarMetaData.PROPERTIES = Ext_TabBar.getProperties(ExtTabbarMetaData.PROPERTIES);
        ExtTabbarMetaData.EVENTS = Ext_TabBar.getEvents(ExtTabbarMetaData.EVENTS);
        ExtTabbarMetaData.EVENTS.forEach((event) => {
            ExtTabbarMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTabbarMetaData.PROPERTIES = [];
ExtTabbarMetaData.EVENTS = [];
ExtTabbarMetaData.EVENTNAMES = [];
(function () { ExtTabbarMetaData.getAll(); })();
let ExtTabbarComponent = ExtTabbarComponent_1 = class ExtTabbarComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTabbarMetaData.PROPERTIES, ExtTabbarMetaData.EVENTS);
        this.xtype = 'tabbar';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTabbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTabbarComponent = ExtTabbarComponent_1 = __decorate([
    Component({
        selector: 'ext-tabbar',
        inputs: ExtTabbarMetaData.PROPERTIES,
        outputs: ExtTabbarMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTabbarComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTabbarComponent);

class Ext_TabPanel extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_TabPanel.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_TabPanel.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_TabPanel.PROPERTIES = [
    'autoOrientAnimation',
    'cls',
    'layout',
    'scroll',
    'scrollable',
    'tabBar',
    'tabBarPosition',
    'tabRotation',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_TabPanel.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,tabpanel,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'tabpanel,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'tabpanel' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'tabpanel,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,tabpanel,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'tabpanel,event' },
    { name: 'focusenter', parameters: 'tabpanel,event' },
    { name: 'focusleave', parameters: 'tabpanel,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'tabpanel,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'tabpanel,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'tabpanel,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'tabpanel' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_TabPanel.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

var ExtTabpanelComponent_1;
class ExtTabpanelMetaData extends Ext_TabPanel {
    static getAll() {
        ExtTabpanelMetaData.PROPERTIES = Ext_TabPanel.getProperties(ExtTabpanelMetaData.PROPERTIES);
        ExtTabpanelMetaData.EVENTS = Ext_TabPanel.getEvents(ExtTabpanelMetaData.EVENTS);
        ExtTabpanelMetaData.EVENTS.forEach((event) => {
            ExtTabpanelMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTabpanelMetaData.PROPERTIES = [];
ExtTabpanelMetaData.EVENTS = [];
ExtTabpanelMetaData.EVENTNAMES = [];
(function () { ExtTabpanelMetaData.getAll(); })();
let ExtTabpanelComponent = ExtTabpanelComponent_1 = class ExtTabpanelComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTabpanelMetaData.PROPERTIES, ExtTabpanelMetaData.EVENTS);
        this.xtype = 'tabpanel';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTabpanelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTabpanelComponent = ExtTabpanelComponent_1 = __decorate([
    Component({
        selector: 'ext-tabpanel',
        inputs: ExtTabpanelMetaData.PROPERTIES,
        outputs: ExtTabpanelMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTabpanelComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTabpanelComponent);

class Ext_Tab extends Ext_Button {
    static getProperties(properties) {
        properties = properties.concat(Ext_Tab.PROPERTIES);
        return Ext_Button.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Tab.EVENTS);
        return Ext_Button.getEvents(events);
    }
}
Ext_Tab.PROPERTIES = [
    'active',
    'closable',
    'rotation',
    'tabPosition',
    'title',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Tab.EVENTS = [
    { name: 'activate', parameters: 'tab' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforepressedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'tab' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'tab,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'tab' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'tab,event' },
    { name: 'focusenter', parameters: 'tab,event' },
    { name: 'focusleave', parameters: 'tab,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'pressedchange', parameters: 'sender,value,oldValue' },
    { name: 'release', parameters: 'tab,e' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tap', parameters: 'tab,e' },
    { name: 'tofront', parameters: 'tab' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Tab.EVENTNAMES);
//    return Ext_Button.getEventNames(eventnames);
//}

var ExtTabComponent_1;
class ExtTabMetaData extends Ext_Tab {
    static getAll() {
        ExtTabMetaData.PROPERTIES = Ext_Tab.getProperties(ExtTabMetaData.PROPERTIES);
        ExtTabMetaData.EVENTS = Ext_Tab.getEvents(ExtTabMetaData.EVENTS);
        ExtTabMetaData.EVENTS.forEach((event) => {
            ExtTabMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTabMetaData.PROPERTIES = [];
ExtTabMetaData.EVENTS = [];
ExtTabMetaData.EVENTNAMES = [];
(function () { ExtTabMetaData.getAll(); })();
let ExtTabComponent = ExtTabComponent_1 = class ExtTabComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTabMetaData.PROPERTIES, ExtTabMetaData.EVENTS);
        this.xtype = 'tab';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTabComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTabComponent = ExtTabComponent_1 = __decorate([
    Component({
        selector: 'ext-tab',
        inputs: ExtTabMetaData.PROPERTIES,
        outputs: ExtTabMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTabComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTabComponent);

class Ext_tip_ToolTip extends Ext_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_tip_ToolTip.PROPERTIES);
        return Ext_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_tip_ToolTip.EVENTS);
        return Ext_Panel.getEvents(events);
    }
}
Ext_tip_ToolTip.PROPERTIES = [
    'align',
    'alignDelegate',
    'allowOver',
    'anchorToTarget',
    'autoHide',
    'delegate',
    'dismissDelay',
    'hideDelay',
    'mouseOffset',
    'quickShowInterval',
    'showDelay',
    'showOnTap',
    'target',
    'trackMouse',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_tip_ToolTip.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,tooltip,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'tooltip,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecollapse', parameters: 'tooltip' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeexpand', parameters: 'tooltip' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforeresizedragstart', parameters: 'tooltip,context' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'tooltip' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'tooltip,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'collapse', parameters: 'tooltip' },
    { name: 'deactivate', parameters: 'oldActiveItem,tooltip,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'drawerhide', parameters: 'tooltip' },
    { name: 'drawershow', parameters: 'tooltip' },
    { name: 'erased', parameters: 'sender' },
    { name: 'expand', parameters: 'tooltip' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'tooltip,event' },
    { name: 'focusenter', parameters: 'tooltip,event' },
    { name: 'focusleave', parameters: 'tooltip,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'tooltip,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'tooltip,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'tooltip,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'resizedrag', parameters: 'tooltip,context' },
    { name: 'resizedragcancel', parameters: 'tooltip,context' },
    { name: 'resizedragend', parameters: 'tooltip,context' },
    { name: 'resizedragstart', parameters: 'tooltip,context' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'tooltip' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_tip_ToolTip.EVENTNAMES);
//    return Ext_Panel.getEventNames(eventnames);
//}

var ExtTooltipComponent_1;
class ExtTooltipMetaData extends Ext_tip_ToolTip {
    static getAll() {
        ExtTooltipMetaData.PROPERTIES = Ext_tip_ToolTip.getProperties(ExtTooltipMetaData.PROPERTIES);
        ExtTooltipMetaData.EVENTS = Ext_tip_ToolTip.getEvents(ExtTooltipMetaData.EVENTS);
        ExtTooltipMetaData.EVENTS.forEach((event) => {
            ExtTooltipMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTooltipMetaData.PROPERTIES = [];
ExtTooltipMetaData.EVENTS = [];
ExtTooltipMetaData.EVENTNAMES = [];
(function () { ExtTooltipMetaData.getAll(); })();
let ExtTooltipComponent = ExtTooltipComponent_1 = class ExtTooltipComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTooltipMetaData.PROPERTIES, ExtTooltipMetaData.EVENTS);
        this.xtype = 'tooltip';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTooltipComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTooltipComponent = ExtTooltipComponent_1 = __decorate([
    Component({
        selector: 'ext-tooltip',
        inputs: ExtTooltipMetaData.PROPERTIES,
        outputs: ExtTooltipMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTooltipComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTooltipComponent);

class Ext_Title extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_Title.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Title.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_Title.PROPERTIES = [
    'title',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Title.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'title' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'title,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'title,event' },
    { name: 'focusenter', parameters: 'title,event' },
    { name: 'focusleave', parameters: 'title,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'title' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Title.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtTitleComponent_1;
class ExtTitleMetaData extends Ext_Title {
    static getAll() {
        ExtTitleMetaData.PROPERTIES = Ext_Title.getProperties(ExtTitleMetaData.PROPERTIES);
        ExtTitleMetaData.EVENTS = Ext_Title.getEvents(ExtTitleMetaData.EVENTS);
        ExtTitleMetaData.EVENTS.forEach((event) => {
            ExtTitleMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTitleMetaData.PROPERTIES = [];
ExtTitleMetaData.EVENTS = [];
ExtTitleMetaData.EVENTNAMES = [];
(function () { ExtTitleMetaData.getAll(); })();
let ExtTitleComponent = ExtTitleComponent_1 = class ExtTitleComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTitleMetaData.PROPERTIES, ExtTitleMetaData.EVENTS);
        this.xtype = 'title';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTitleComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTitleComponent = ExtTitleComponent_1 = __decorate([
    Component({
        selector: 'ext-title',
        inputs: ExtTitleMetaData.PROPERTIES,
        outputs: ExtTitleMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTitleComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTitleComponent);

class Ext_TitleBar extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_TitleBar.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_TitleBar.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_TitleBar.PROPERTIES = [
    'autoSize',
    'border',
    'cls',
    'defaultButtonUI',
    'defaultType',
    'items',
    'layout',
    'maxButtonWidth',
    'minHeight',
    'title',
    'titleAlign',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_TitleBar.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,titlebar,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'titlebar,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'titlebar' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'titlebar,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,titlebar,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'titlebar,event' },
    { name: 'focusenter', parameters: 'titlebar,event' },
    { name: 'focusleave', parameters: 'titlebar,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'titlebar,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'titlebar,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'titlebar,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'titlebar' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_TitleBar.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

var ExtTitlebarComponent_1;
class ExtTitlebarMetaData extends Ext_TitleBar {
    static getAll() {
        ExtTitlebarMetaData.PROPERTIES = Ext_TitleBar.getProperties(ExtTitlebarMetaData.PROPERTIES);
        ExtTitlebarMetaData.EVENTS = Ext_TitleBar.getEvents(ExtTitlebarMetaData.EVENTS);
        ExtTitlebarMetaData.EVENTS.forEach((event) => {
            ExtTitlebarMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtTitlebarMetaData.PROPERTIES = [];
ExtTitlebarMetaData.EVENTS = [];
ExtTitlebarMetaData.EVENTNAMES = [];
(function () { ExtTitlebarMetaData.getAll(); })();
let ExtTitlebarComponent = ExtTitlebarComponent_1 = class ExtTitlebarComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtTitlebarMetaData.PROPERTIES, ExtTitlebarMetaData.EVENTS);
        this.xtype = 'titlebar';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtTitlebarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtTitlebarComponent = ExtTitlebarComponent_1 = __decorate([
    Component({
        selector: 'ext-titlebar',
        inputs: ExtTitlebarMetaData.PROPERTIES,
        outputs: ExtTitlebarMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtTitlebarComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtTitlebarComponent);

class Ext_panel_Tool extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_panel_Tool.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_panel_Tool.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_panel_Tool.PROPERTIES = [
    'handler',
    'iconCls',
    'passive',
    'scope',
    'stopEvent',
    'toolOwner',
    'type',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_panel_Tool.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'tool' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'tool,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'click', parameters: 'tool,e,owner' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'tool,event' },
    { name: 'focusenter', parameters: 'tool,event' },
    { name: 'focusleave', parameters: 'tool,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'tool' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_panel_Tool.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtToolComponent_1;
class ExtToolMetaData extends Ext_panel_Tool {
    static getAll() {
        ExtToolMetaData.PROPERTIES = Ext_panel_Tool.getProperties(ExtToolMetaData.PROPERTIES);
        ExtToolMetaData.EVENTS = Ext_panel_Tool.getEvents(ExtToolMetaData.EVENTS);
        ExtToolMetaData.EVENTS.forEach((event) => {
            ExtToolMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtToolMetaData.PROPERTIES = [];
ExtToolMetaData.EVENTS = [];
ExtToolMetaData.EVENTNAMES = [];
(function () { ExtToolMetaData.getAll(); })();
let ExtToolComponent = ExtToolComponent_1 = class ExtToolComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtToolMetaData.PROPERTIES, ExtToolMetaData.EVENTS);
        this.xtype = 'tool';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtToolComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtToolComponent = ExtToolComponent_1 = __decorate([
    Component({
        selector: 'ext-tool',
        inputs: ExtToolMetaData.PROPERTIES,
        outputs: ExtToolMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtToolComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtToolComponent);

var ExtToolbarComponent_1;
class ExtToolbarMetaData extends Ext_Toolbar {
    static getAll() {
        ExtToolbarMetaData.PROPERTIES = Ext_Toolbar.getProperties(ExtToolbarMetaData.PROPERTIES);
        ExtToolbarMetaData.EVENTS = Ext_Toolbar.getEvents(ExtToolbarMetaData.EVENTS);
        ExtToolbarMetaData.EVENTS.forEach((event) => {
            ExtToolbarMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtToolbarMetaData.PROPERTIES = [];
ExtToolbarMetaData.EVENTS = [];
ExtToolbarMetaData.EVENTNAMES = [];
(function () { ExtToolbarMetaData.getAll(); })();
let ExtToolbarComponent = ExtToolbarComponent_1 = class ExtToolbarComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtToolbarMetaData.PROPERTIES, ExtToolbarMetaData.EVENTS);
        this.xtype = 'toolbar';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtToolbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtToolbarComponent = ExtToolbarComponent_1 = __decorate([
    Component({
        selector: 'ext-toolbar',
        inputs: ExtToolbarMetaData.PROPERTIES,
        outputs: ExtToolbarMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtToolbarComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtToolbarComponent);

class Ext_ux_colorpick_Button extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_ux_colorpick_Button.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_ux_colorpick_Button.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_ux_colorpick_Button.PROPERTIES = [
    'popup',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_ux_colorpick_Button.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'colorbutton' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'colorbutton,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'colorbutton,color,previousColor' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'colorbutton,event' },
    { name: 'focusenter', parameters: 'colorbutton,event' },
    { name: 'focusleave', parameters: 'colorbutton,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'colorbutton' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_ux_colorpick_Button.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtColorbuttonComponent_1;
class ExtColorbuttonMetaData extends Ext_ux_colorpick_Button {
    static getAll() {
        ExtColorbuttonMetaData.PROPERTIES = Ext_ux_colorpick_Button.getProperties(ExtColorbuttonMetaData.PROPERTIES);
        ExtColorbuttonMetaData.EVENTS = Ext_ux_colorpick_Button.getEvents(ExtColorbuttonMetaData.EVENTS);
        ExtColorbuttonMetaData.EVENTS.forEach((event) => {
            ExtColorbuttonMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtColorbuttonMetaData.PROPERTIES = [];
ExtColorbuttonMetaData.EVENTS = [];
ExtColorbuttonMetaData.EVENTNAMES = [];
(function () { ExtColorbuttonMetaData.getAll(); })();
let ExtColorbuttonComponent = ExtColorbuttonComponent_1 = class ExtColorbuttonComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtColorbuttonMetaData.PROPERTIES, ExtColorbuttonMetaData.EVENTS);
        this.xtype = 'colorbutton';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtColorbuttonComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtColorbuttonComponent = ExtColorbuttonComponent_1 = __decorate([
    Component({
        selector: 'ext-colorbutton',
        inputs: ExtColorbuttonMetaData.PROPERTIES,
        outputs: ExtColorbuttonMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtColorbuttonComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtColorbuttonComponent);

class Ext_ux_colorpick_ColorPreview extends Ext_Component {
    static getProperties(properties) {
        properties = properties.concat(Ext_ux_colorpick_ColorPreview.PROPERTIES);
        return Ext_Component.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_ux_colorpick_ColorPreview.EVENTS);
        return Ext_Component.getEvents(events);
    }
}
Ext_ux_colorpick_ColorPreview.PROPERTIES = [
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_ux_colorpick_ColorPreview.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'colorpickercolorpreview' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'colorpickercolorpreview,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'colorpickercolorpreview,event' },
    { name: 'focusenter', parameters: 'colorpickercolorpreview,event' },
    { name: 'focusleave', parameters: 'colorpickercolorpreview,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'colorpickercolorpreview' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_ux_colorpick_ColorPreview.EVENTNAMES);
//    return Ext_Component.getEventNames(eventnames);
//}

var ExtColorpickercolorpreviewComponent_1;
class ExtColorpickercolorpreviewMetaData extends Ext_ux_colorpick_ColorPreview {
    static getAll() {
        ExtColorpickercolorpreviewMetaData.PROPERTIES = Ext_ux_colorpick_ColorPreview.getProperties(ExtColorpickercolorpreviewMetaData.PROPERTIES);
        ExtColorpickercolorpreviewMetaData.EVENTS = Ext_ux_colorpick_ColorPreview.getEvents(ExtColorpickercolorpreviewMetaData.EVENTS);
        ExtColorpickercolorpreviewMetaData.EVENTS.forEach((event) => {
            ExtColorpickercolorpreviewMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtColorpickercolorpreviewMetaData.PROPERTIES = [];
ExtColorpickercolorpreviewMetaData.EVENTS = [];
ExtColorpickercolorpreviewMetaData.EVENTNAMES = [];
(function () { ExtColorpickercolorpreviewMetaData.getAll(); })();
let ExtColorpickercolorpreviewComponent = ExtColorpickercolorpreviewComponent_1 = class ExtColorpickercolorpreviewComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtColorpickercolorpreviewMetaData.PROPERTIES, ExtColorpickercolorpreviewMetaData.EVENTS);
        this.xtype = 'colorpickercolorpreview';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtColorpickercolorpreviewComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtColorpickercolorpreviewComponent = ExtColorpickercolorpreviewComponent_1 = __decorate([
    Component({
        selector: 'ext-colorpickercolorpreview',
        inputs: ExtColorpickercolorpreviewMetaData.PROPERTIES,
        outputs: ExtColorpickercolorpreviewMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtColorpickercolorpreviewComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtColorpickercolorpreviewComponent);

class Ext_ux_colorpick_Field extends Ext_field_Picker {
    static getProperties(properties) {
        properties = properties.concat(Ext_ux_colorpick_Field.PROPERTIES);
        return Ext_field_Picker.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_ux_colorpick_Field.EVENTS);
        return Ext_field_Picker.getEvents(events);
    }
}
Ext_ux_colorpick_Field.PROPERTIES = [
    'popup',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_ux_colorpick_Field.EVENTS = [
    { name: 'action', parameters: 'colorfield,e' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'colorfield' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'colorfield,e' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'change', parameters: 'colorfield,color,previousColor' },
    { name: 'clearicontap', parameters: 'colorfield,input,e' },
    { name: 'click', parameters: 'e' },
    { name: 'collapse', parameters: 'field' },
    { name: 'destroy', parameters: '' },
    { name: 'dirtychange', parameters: 'colorfield,dirty' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'errorchange', parameters: 'colorfield,error' },
    { name: 'expand', parameters: 'field' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'colorfield,e' },
    { name: 'focusenter', parameters: 'colorfield,event' },
    { name: 'focusleave', parameters: 'colorfield,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'keydown', parameters: 'colorfield,e' },
    { name: 'keyup', parameters: 'colorfield,e' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'mousedown', parameters: 'colorfield,e' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'paste', parameters: 'colorfield,e' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'colorfield' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_ux_colorpick_Field.EVENTNAMES);
//    return Ext_field_Picker.getEventNames(eventnames);
//}

var ExtColorfieldComponent_1;
class ExtColorfieldMetaData extends Ext_ux_colorpick_Field {
    static getAll() {
        ExtColorfieldMetaData.PROPERTIES = Ext_ux_colorpick_Field.getProperties(ExtColorfieldMetaData.PROPERTIES);
        ExtColorfieldMetaData.EVENTS = Ext_ux_colorpick_Field.getEvents(ExtColorfieldMetaData.EVENTS);
        ExtColorfieldMetaData.EVENTS.forEach((event) => {
            ExtColorfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtColorfieldMetaData.PROPERTIES = [];
ExtColorfieldMetaData.EVENTS = [];
ExtColorfieldMetaData.EVENTNAMES = [];
(function () { ExtColorfieldMetaData.getAll(); })();
let ExtColorfieldComponent = ExtColorfieldComponent_1 = class ExtColorfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtColorfieldMetaData.PROPERTIES, ExtColorfieldMetaData.EVENTS);
        this.xtype = 'colorfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtColorfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtColorfieldComponent = ExtColorfieldComponent_1 = __decorate([
    Component({
        selector: 'ext-colorfield',
        inputs: ExtColorfieldMetaData.PROPERTIES,
        outputs: ExtColorfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtColorfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtColorfieldComponent);

class Ext_ux_colorpick_Selector extends Ext_panel_Panel {
    static getProperties(properties) {
        properties = properties.concat(Ext_ux_colorpick_Selector.PROPERTIES);
        return Ext_panel_Panel.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_ux_colorpick_Selector.EVENTS);
        return Ext_panel_Panel.getEvents(events);
    }
}
Ext_ux_colorpick_Selector.PROPERTIES = [
    'cancelButtonText',
    'fieldPad',
    'fieldWidth',
    'okButtonText',
    'showOkCancelButtons',
    'showPreviousColor',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_ux_colorpick_Selector.EVENTS = [
    { name: 'cancel', parameters: 'colorselector' },
    { name: 'change', parameters: 'colorselector,color,previousColor' },
    { name: 'ok', parameters: 'colorselector,color' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_ux_colorpick_Selector.EVENTNAMES);
//    return Ext_panel_Panel.getEventNames(eventnames);
//}

var ExtColorselectorComponent_1;
class ExtColorselectorMetaData extends Ext_ux_colorpick_Selector {
    static getAll() {
        ExtColorselectorMetaData.PROPERTIES = Ext_ux_colorpick_Selector.getProperties(ExtColorselectorMetaData.PROPERTIES);
        ExtColorselectorMetaData.EVENTS = Ext_ux_colorpick_Selector.getEvents(ExtColorselectorMetaData.EVENTS);
        ExtColorselectorMetaData.EVENTS.forEach((event) => {
            ExtColorselectorMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtColorselectorMetaData.PROPERTIES = [];
ExtColorselectorMetaData.EVENTS = [];
ExtColorselectorMetaData.EVENTNAMES = [];
(function () { ExtColorselectorMetaData.getAll(); })();
let ExtColorselectorComponent = ExtColorselectorComponent_1 = class ExtColorselectorComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtColorselectorMetaData.PROPERTIES, ExtColorselectorMetaData.EVENTS);
        this.xtype = 'colorselector';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtColorselectorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtColorselectorComponent = ExtColorselectorComponent_1 = __decorate([
    Component({
        selector: 'ext-colorselector',
        inputs: ExtColorselectorMetaData.PROPERTIES,
        outputs: ExtColorselectorMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtColorselectorComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtColorselectorComponent);

class Ext_ux_Gauge extends Ext_Gadget {
    static getProperties(properties) {
        properties = properties.concat(Ext_ux_Gauge.PROPERTIES);
        return Ext_Gadget.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_ux_Gauge.EVENTS);
        return Ext_Gadget.getEvents(events);
    }
}
Ext_ux_Gauge.PROPERTIES = [
    'angleOffset',
    'animation',
    'clockwise',
    'maxValue',
    'minValue',
    'needle',
    'padding',
    'textAlign',
    'textOffset',
    'textTpl',
    'trackLength',
    'trackStart',
    'trackStyle',
    'value',
    'valueStyle',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_ux_Gauge.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'gauge' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'gauge,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'gauge,event' },
    { name: 'focusenter', parameters: 'gauge,event' },
    { name: 'focusleave', parameters: 'gauge,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'gauge' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_ux_Gauge.EVENTNAMES);
//    return Ext_Gadget.getEventNames(eventnames);
//}

var ExtGaugeComponent_1;
class ExtGaugeMetaData extends Ext_ux_Gauge {
    static getAll() {
        ExtGaugeMetaData.PROPERTIES = Ext_ux_Gauge.getProperties(ExtGaugeMetaData.PROPERTIES);
        ExtGaugeMetaData.EVENTS = Ext_ux_Gauge.getEvents(ExtGaugeMetaData.EVENTS);
        ExtGaugeMetaData.EVENTS.forEach((event) => {
            ExtGaugeMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGaugeMetaData.PROPERTIES = [];
ExtGaugeMetaData.EVENTS = [];
ExtGaugeMetaData.EVENTNAMES = [];
(function () { ExtGaugeMetaData.getAll(); })();
let ExtGaugeComponent = ExtGaugeComponent_1 = class ExtGaugeComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGaugeMetaData.PROPERTIES, ExtGaugeMetaData.EVENTS);
        this.xtype = 'gauge';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGaugeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGaugeComponent = ExtGaugeComponent_1 = __decorate([
    Component({
        selector: 'ext-gauge',
        inputs: ExtGaugeMetaData.PROPERTIES,
        outputs: ExtGaugeMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGaugeComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGaugeComponent);

class Ext_Map extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_Map.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Map.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_Map.PROPERTIES = [
    'geo',
    'map',
    'mapListeners',
    'mapOptions',
    'markers',
    'markerTemplate',
    'useCurrentLocation',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Map.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,map,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'map,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'map' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'map,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centerchange', parameters: 'map,map,center' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,map,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'map,event' },
    { name: 'focusenter', parameters: 'map,event' },
    { name: 'focusleave', parameters: 'map,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maprender', parameters: 'map,map' },
    { name: 'markerclick', parameters: 'map,info' },
    { name: 'markerdblclick', parameters: 'map,info' },
    { name: 'markerdrag', parameters: 'map,info' },
    { name: 'markerdragend', parameters: 'map,info' },
    { name: 'markerdragstart', parameters: 'map,info' },
    { name: 'markermousedown', parameters: 'map,info' },
    { name: 'markermouseout', parameters: 'map,info' },
    { name: 'markermouseover', parameters: 'map,info' },
    { name: 'markermouseup', parameters: 'map,info' },
    { name: 'markerrightclick', parameters: 'map,info' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'map,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'remove', parameters: 'map,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'map,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'map' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'typechange', parameters: 'map,map,mapType' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'zoomchange', parameters: 'map,map,zoomLevel' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Map.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

var ExtMapComponent_1;
class ExtMapMetaData extends Ext_Map {
    static getAll() {
        ExtMapMetaData.PROPERTIES = Ext_Map.getProperties(ExtMapMetaData.PROPERTIES);
        ExtMapMetaData.EVENTS = Ext_Map.getEvents(ExtMapMetaData.EVENTS);
        ExtMapMetaData.EVENTS.forEach((event) => {
            ExtMapMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtMapMetaData.PROPERTIES = [];
ExtMapMetaData.EVENTS = [];
ExtMapMetaData.EVENTNAMES = [];
(function () { ExtMapMetaData.getAll(); })();
let ExtMapComponent = ExtMapComponent_1 = class ExtMapComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtMapMetaData.PROPERTIES, ExtMapMetaData.EVENTS);
        this.xtype = 'map';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtMapComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtMapComponent = ExtMapComponent_1 = __decorate([
    Component({
        selector: 'ext-map',
        inputs: ExtMapMetaData.PROPERTIES,
        outputs: ExtMapMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtMapComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtMapComponent);

class Ext_ux_rating_Picker extends Ext_Gadget {
    static getProperties(properties) {
        properties = properties.concat(Ext_ux_rating_Picker.PROPERTIES);
        return Ext_Gadget.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_ux_rating_Picker.EVENTS);
        return Ext_Gadget.getEvents(events);
    }
}
Ext_ux_rating_Picker.PROPERTIES = [
    'animate',
    'family',
    'glyphs',
    'limit',
    'minimum',
    'overStyle',
    'rounding',
    'scale',
    'selectedStyle',
    'tip',
    'tooltipText',
    'trackingValue',
    'trackOver',
    'value',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_ux_rating_Picker.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'rating' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'rating,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'rating,event' },
    { name: 'focusenter', parameters: 'rating,event' },
    { name: 'focusleave', parameters: 'rating,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'rating' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_ux_rating_Picker.EVENTNAMES);
//    return Ext_Gadget.getEventNames(eventnames);
//}

var ExtRatingComponent_1;
class ExtRatingMetaData extends Ext_ux_rating_Picker {
    static getAll() {
        ExtRatingMetaData.PROPERTIES = Ext_ux_rating_Picker.getProperties(ExtRatingMetaData.PROPERTIES);
        ExtRatingMetaData.EVENTS = Ext_ux_rating_Picker.getEvents(ExtRatingMetaData.EVENTS);
        ExtRatingMetaData.EVENTS.forEach((event) => {
            ExtRatingMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtRatingMetaData.PROPERTIES = [];
ExtRatingMetaData.EVENTS = [];
ExtRatingMetaData.EVENTNAMES = [];
(function () { ExtRatingMetaData.getAll(); })();
let ExtRatingComponent = ExtRatingComponent_1 = class ExtRatingComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtRatingMetaData.PROPERTIES, ExtRatingMetaData.EVENTS);
        this.xtype = 'rating';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtRatingComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtRatingComponent = ExtRatingComponent_1 = __decorate([
    Component({
        selector: 'ext-rating',
        inputs: ExtRatingMetaData.PROPERTIES,
        outputs: ExtRatingMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtRatingComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtRatingComponent);

class Ext_Video extends Ext_Media {
    static getProperties(properties) {
        properties = properties.concat(Ext_Video.PROPERTIES);
        return Ext_Media.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_Video.EVENTS);
        return Ext_Media.getEvents(events);
    }
}
Ext_Video.PROPERTIES = [
    'posterUrl',
    'showPosterOnPause',
    'url',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_Video.EVENTS = [
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'video' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'video,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'ended', parameters: 'video,time' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'video,event' },
    { name: 'focusenter', parameters: 'video,event' },
    { name: 'focusleave', parameters: 'video,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'mutedchange', parameters: 'video,muted' },
    { name: 'orientationchange', parameters: '' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'pause', parameters: 'video,time' },
    { name: 'play', parameters: 'video' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'stop', parameters: 'video' },
    { name: 'timeupdate', parameters: 'video,time' },
    { name: 'tofront', parameters: 'video' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'volumechange', parameters: 'video,volume' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_Video.EVENTNAMES);
//    return Ext_Media.getEventNames(eventnames);
//}

var ExtVideoComponent_1;
class ExtVideoMetaData extends Ext_Video {
    static getAll() {
        ExtVideoMetaData.PROPERTIES = Ext_Video.getProperties(ExtVideoMetaData.PROPERTIES);
        ExtVideoMetaData.EVENTS = Ext_Video.getEvents(ExtVideoMetaData.EVENTS);
        ExtVideoMetaData.EVENTS.forEach((event) => {
            ExtVideoMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtVideoMetaData.PROPERTIES = [];
ExtVideoMetaData.EVENTS = [];
ExtVideoMetaData.EVENTNAMES = [];
(function () { ExtVideoMetaData.getAll(); })();
let ExtVideoComponent = ExtVideoComponent_1 = class ExtVideoComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtVideoMetaData.PROPERTIES, ExtVideoMetaData.EVENTS);
        this.xtype = 'video';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtVideoComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtVideoComponent = ExtVideoComponent_1 = __decorate([
    Component({
        selector: 'ext-video',
        inputs: ExtVideoMetaData.PROPERTIES,
        outputs: ExtVideoMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtVideoComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtVideoComponent);

class Ext_viewport_Default extends Ext_Container {
    static getProperties(properties) {
        properties = properties.concat(Ext_viewport_Default.PROPERTIES);
        return Ext_Container.getProperties(properties);
    }
    static getEvents(events) {
        events = events.concat(Ext_viewport_Default.EVENTS);
        return Ext_Container.getEvents(events);
    }
}
Ext_viewport_Default.PROPERTIES = [
    'autoBlurInput',
    'autoMaximize',
    'autoRender',
    'height',
    'layout',
    'menus',
    'orientation',
    'preventZooming',
    'swipeThreshold',
    'width',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
Ext_viewport_Default.EVENTS = [
    { name: 'activate', parameters: 'newActiveItem,viewport,oldActiveItem' },
    { name: 'activeItemchange', parameters: 'sender,value,oldValue' },
    { name: 'add', parameters: 'viewport,item,index' },
    { name: 'added', parameters: 'sender,container,index' },
    { name: 'beforeactiveItemchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforebottomchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforecenteredchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedisabledchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforedockedchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeheightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehiddenchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforehide', parameters: 'sender' },
    { name: 'beforeleftchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforemaxWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminHeightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeminWidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeorientationchange', parameters: '' },
    { name: 'beforerightchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforescrollablechange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforeshow', parameters: 'sender' },
    { name: 'beforetofront', parameters: 'viewport' },
    { name: 'beforetopchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'beforewidthchange', parameters: 'sender,value,oldValue,undefined' },
    { name: 'blur', parameters: 'viewport,event' },
    { name: 'bottomchange', parameters: 'sender,value,oldValue' },
    { name: 'centeredchange', parameters: 'sender,value,oldValue' },
    { name: 'deactivate', parameters: 'oldActiveItem,viewport,newActiveItem' },
    { name: 'destroy', parameters: '' },
    { name: 'disabledchange', parameters: 'sender,value,oldValue' },
    { name: 'dockedchange', parameters: 'sender,value,oldValue' },
    { name: 'erased', parameters: 'sender' },
    { name: 'floatingchange', parameters: 'sender,positioned' },
    { name: 'focus', parameters: 'viewport,event' },
    { name: 'focusenter', parameters: 'viewport,event' },
    { name: 'focusleave', parameters: 'viewport,event' },
    { name: 'fullscreen', parameters: 'sender' },
    { name: 'heightchange', parameters: 'sender,value,oldValue' },
    { name: 'hiddenchange', parameters: 'sender,value,oldValue' },
    { name: 'hide', parameters: 'sender' },
    { name: 'initialize', parameters: 'sender' },
    { name: 'leftchange', parameters: 'sender,value,oldValue' },
    { name: 'maxHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'maximize', parameters: 'viewport' },
    { name: 'maxWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'minHeightchange', parameters: 'sender,value,oldValue' },
    { name: 'minWidthchange', parameters: 'sender,value,oldValue' },
    { name: 'move', parameters: 'viewport,item,toIndex,fromIndex' },
    { name: 'moved', parameters: 'sender,container,toIndex,fromIndex' },
    { name: 'orientationchange', parameters: 'viewport,newOrientation,width,height' },
    { name: 'painted', parameters: 'sender,element' },
    { name: 'positionedchange', parameters: 'sender,positioned' },
    { name: 'ready', parameters: 'viewport' },
    { name: 'remove', parameters: 'viewport,item,index' },
    { name: 'removed', parameters: 'sender,container,index' },
    { name: 'renderedchange', parameters: 'viewport,item,rendered' },
    { name: 'resize', parameters: 'element,info' },
    { name: 'rightchange', parameters: 'sender,value,oldValue' },
    { name: 'scrollablechange', parameters: 'sender,value,oldValue' },
    { name: 'show', parameters: 'sender' },
    { name: 'tofront', parameters: 'viewport' },
    { name: 'topchange', parameters: 'sender,value,oldValue' },
    { name: 'updatedata', parameters: 'sender,newData' },
    { name: 'widthchange', parameters: 'sender,value,oldValue' },
    { name: 'ready', parameters: '' }
];
//public static PROPERTIESOBJECT: any = {[object Object]};
//static METHODS: any[] = [];
//public static MJGEVENTNAMES: string[] = [];
//static getEventNames(eventnames) {
//    eventnames = eventnames.concat(Ext_viewport_Default.EVENTNAMES);
//    return Ext_Container.getEventNames(eventnames);
//}

var ExtViewportComponent_1;
class ExtViewportMetaData extends Ext_viewport_Default {
    static getAll() {
        ExtViewportMetaData.PROPERTIES = Ext_viewport_Default.getProperties(ExtViewportMetaData.PROPERTIES);
        ExtViewportMetaData.EVENTS = Ext_viewport_Default.getEvents(ExtViewportMetaData.EVENTS);
        ExtViewportMetaData.EVENTS.forEach((event) => {
            ExtViewportMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtViewportMetaData.PROPERTIES = [];
ExtViewportMetaData.EVENTS = [];
ExtViewportMetaData.EVENTNAMES = [];
(function () { ExtViewportMetaData.getAll(); })();
let ExtViewportComponent = ExtViewportComponent_1 = class ExtViewportComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtViewportMetaData.PROPERTIES, ExtViewportMetaData.EVENTS);
        this.xtype = 'viewport';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtViewportComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtViewportComponent = ExtViewportComponent_1 = __decorate([
    Component({
        selector: 'ext-viewport',
        inputs: ExtViewportMetaData.PROPERTIES,
        outputs: ExtViewportMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtViewportComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtViewportComponent);

var ExtWidgetComponent_1;
class ExtWidgetMetaData extends Ext_Gadget {
    static getAll() {
        ExtWidgetMetaData.PROPERTIES = Ext_Gadget.getProperties(ExtWidgetMetaData.PROPERTIES);
        ExtWidgetMetaData.EVENTS = Ext_Gadget.getEvents(ExtWidgetMetaData.EVENTS);
        ExtWidgetMetaData.EVENTS.forEach((event) => {
            ExtWidgetMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtWidgetMetaData.PROPERTIES = [];
ExtWidgetMetaData.EVENTS = [];
ExtWidgetMetaData.EVENTNAMES = [];
(function () { ExtWidgetMetaData.getAll(); })();
let ExtWidgetComponent = ExtWidgetComponent_1 = class ExtWidgetComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtWidgetMetaData.PROPERTIES, ExtWidgetMetaData.EVENTS);
        this.xtype = 'widget';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtWidgetComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtWidgetComponent = ExtWidgetComponent_1 = __decorate([
    Component({
        selector: 'ext-widget',
        inputs: ExtWidgetMetaData.PROPERTIES,
        outputs: ExtWidgetMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtWidgetComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf()),
    __metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtWidgetComponent);

let ExtAngularModule = class ExtAngularModule {
};
ExtAngularModule = __decorate([
    NgModule({
        imports: [],
        declarations: [
            ExtActionsheetComponent,
            ExtAudioComponent,
            ExtBreadcrumbbarComponent,
            ExtButtonComponent,
            ExtCalendar_eventComponent,
            ExtCalendar_form_addComponent,
            ExtCalendar_calendar_pickerComponent,
            ExtCalendar_form_editComponent,
            ExtCalendar_timefieldComponent,
            ExtCalendar_daysheaderComponent,
            ExtCalendar_weeksheaderComponent,
            ExtCalendar_listComponent,
            ExtCalendar_dayComponent,
            ExtCalendar_daysComponent,
            ExtCalendar_monthComponent,
            ExtCalendarComponent,
            ExtCalendar_weekComponent,
            ExtCalendar_weeksComponent,
            ExtCalendar_dayviewComponent,
            ExtCalendar_daysviewComponent,
            ExtCalendar_monthviewComponent,
            ExtCalendar_multiviewComponent,
            ExtCalendar_weekviewComponent,
            ExtCalendar_weeksviewComponent,
            ExtCarouselComponent,
            ExtCartesianComponent,
            ExtLegendComponent,
            ExtChartnavigatorComponent,
            ExtPolarComponent,
            ExtSpacefillingComponent,
            ExtChipComponent,
            ExtComponentComponent,
            ExtContainerComponent,
            ExtD3_canvasComponent,
            ExtD3_heatmapComponent,
            ExtD3_packComponent,
            ExtD3_partitionComponent,
            ExtD3_sunburstComponent,
            ExtD3_treeComponent,
            ExtD3_treemapComponent,
            ExtD3_svgComponent,
            ExtBoundlistComponent,
            ExtChipviewComponent,
            ExtComponentdataviewComponent,
            ExtDataitemComponent,
            ExtDataviewComponent,
            ExtEmptytextComponent,
            ExtIndexbarComponent,
            ExtItemheaderComponent,
            ExtListComponent,
            ExtListitemComponent,
            ExtListitemplaceholderComponent,
            ExtListswiperitemComponent,
            ExtListswiperstepperComponent,
            ExtNestedlistComponent,
            ExtPullrefreshbarComponent,
            ExtPullrefreshspinnerComponent,
            ExtSimplelistitemComponent,
            ExtDialogComponent,
            ExtDrawComponent,
            ExtSurfaceComponent,
            ExtEditorComponent,
            ExtCheckboxComponent,
            ExtCheckboxgroupComponent,
            ExtComboboxComponent,
            ExtContainerfieldComponent,
            ExtDatefieldComponent,
            ExtDatepickernativefieldComponent,
            ExtDisplayfieldComponent,
            ExtEmailfieldComponent,
            ExtFieldComponent,
            ExtGroupcontainerComponent,
            ExtFilefieldComponent,
            ExtFilebuttonComponent,
            ExtHiddenfieldComponent,
            ExtInputfieldComponent,
            ExtNumberfieldComponent,
            ExtFieldpanelComponent,
            ExtPasswordfieldComponent,
            ExtPickerfieldComponent,
            ExtRadioComponent,
            ExtRadiogroupComponent,
            ExtSearchfieldComponent,
            ExtSelectfieldComponent,
            ExtSinglesliderfieldComponent,
            ExtSliderfieldComponent,
            ExtSpinnerfieldComponent,
            ExtTextfieldComponent,
            ExtTextareafieldComponent,
            ExtTimefieldComponent,
            ExtTogglefieldComponent,
            ExtCleartriggerComponent,
            ExtDatetriggerComponent,
            ExtExpandtriggerComponent,
            ExtMenutriggerComponent,
            ExtRevealtriggerComponent,
            ExtSpindowntriggerComponent,
            ExtSpinuptriggerComponent,
            ExtTimetriggerComponent,
            ExtTriggerComponent,
            ExtUrlfieldComponent,
            ExtFieldsetComponent,
            ExtFormpanelComponent,
            ExtFroalaeditorComponent,
            ExtFroalaeditorfieldComponent,
            ExtGridcellbaseComponent,
            ExtBooleancellComponent,
            ExtGridcellComponent,
            ExtCheckcellComponent,
            ExtDatecellComponent,
            ExtNumbercellComponent,
            ExtRownumberercellComponent,
            ExtTextcellComponent,
            ExtTreecellComponent,
            ExtWidgetcellComponent,
            ExtCelleditorComponent,
            ExtBooleancolumnComponent,
            ExtCheckcolumnComponent,
            ExtGridcolumnComponent,
            ExtDatecolumnComponent,
            ExtDragcolumnComponent,
            ExtNumbercolumnComponent,
            ExtRownumbererComponent,
            ExtSelectioncolumnComponent,
            ExtTextcolumnComponent,
            ExtTreecolumnComponent,
            ExtGridComponent,
            ExtHeadercontainerComponent,
            ExtLockedgridComponent,
            ExtLockedgridregionComponent,
            ExtGridcolumnsmenuComponent,
            ExtGridgroupbythismenuitemComponent,
            ExtGridshowingroupsmenuitemComponent,
            ExtGridsortascmenuitemComponent,
            ExtGridsortdescmenuitemComponent,
            ExtPagingtoolbarComponent,
            ExtGridrowComponent,
            ExtRowbodyComponent,
            ExtRoweditorbarComponent,
            ExtRoweditorcellComponent,
            ExtRoweditorComponent,
            ExtRoweditorgapComponent,
            ExtRowheaderComponent,
            ExtGridsummaryrowComponent,
            ExtTreeComponent,
            ExtImageComponent,
            ExtIndicatorComponent,
            ExtLabelComponent,
            ExtTreelistComponent,
            ExtTreelistitemComponent,
            ExtLoadmaskComponent,
            ExtMaskComponent,
            ExtMediaComponent,
            ExtMenucheckitemComponent,
            ExtMenuitemComponent,
            ExtMenuComponent,
            ExtMenuradioitemComponent,
            ExtMenuseparatorComponent,
            ExtMessageboxComponent,
            ExtNavigationviewComponent,
            ExtPanelComponent,
            ExtAccordionComponent,
            ExtDatepanelComponent,
            ExtDatetitleComponent,
            ExtPanelheaderComponent,
            ExtTimepanelComponent,
            ExtPaneltitleComponent,
            ExtYearpickerComponent,
            ExtDatepickerComponent,
            ExtPickerComponent,
            ExtSelectpickerComponent,
            ExtPickerslotComponent,
            ExtTabletpickerComponent,
            ExtPivotgridcellComponent,
            ExtPivotgridgroupcellComponent,
            ExtPivotd3containerComponent,
            ExtPivotheatmapComponent,
            ExtPivottreemapComponent,
            ExtPivotgridComponent,
            ExtPivotconfigfieldComponent,
            ExtPivotconfigcontainerComponent,
            ExtPivotconfigformComponent,
            ExtPivotconfigpanelComponent,
            ExtPivotsettingsComponent,
            ExtPivotrangeeditorComponent,
            ExtPivotgridrowComponent,
            ExtProgressComponent,
            ExtSegmentedbuttonComponent,
            ExtSheetComponent,
            ExtSliderComponent,
            ExtThumbComponent,
            ExtTogglesliderComponent,
            ExtSpacerComponent,
            ExtSparklinebarComponent,
            ExtSparklineComponent,
            ExtSparklineboxComponent,
            ExtSparklinebulletComponent,
            ExtSparklinediscreteComponent,
            ExtSparklinelineComponent,
            ExtSparklinepieComponent,
            ExtSparklinetristateComponent,
            ExtSplitbuttonComponent,
            ExtTabbarComponent,
            ExtTabpanelComponent,
            ExtTabComponent,
            ExtTooltipComponent,
            ExtTitleComponent,
            ExtTitlebarComponent,
            ExtToolComponent,
            ExtToolbarComponent,
            ExtColorbuttonComponent,
            ExtColorpickercolorpreviewComponent,
            ExtColorfieldComponent,
            ExtColorselectorComponent,
            ExtGaugeComponent,
            ExtMapComponent,
            ExtRatingComponent,
            ExtVideoComponent,
            ExtViewportComponent,
            ExtWidgetComponent,
        ],
        providers: [],
        entryComponents: [],
        exports: [
            ExtActionsheetComponent,
            ExtAudioComponent,
            ExtBreadcrumbbarComponent,
            ExtButtonComponent,
            ExtCalendar_eventComponent,
            ExtCalendar_form_addComponent,
            ExtCalendar_calendar_pickerComponent,
            ExtCalendar_form_editComponent,
            ExtCalendar_timefieldComponent,
            ExtCalendar_daysheaderComponent,
            ExtCalendar_weeksheaderComponent,
            ExtCalendar_listComponent,
            ExtCalendar_dayComponent,
            ExtCalendar_daysComponent,
            ExtCalendar_monthComponent,
            ExtCalendarComponent,
            ExtCalendar_weekComponent,
            ExtCalendar_weeksComponent,
            ExtCalendar_dayviewComponent,
            ExtCalendar_daysviewComponent,
            ExtCalendar_monthviewComponent,
            ExtCalendar_multiviewComponent,
            ExtCalendar_weekviewComponent,
            ExtCalendar_weeksviewComponent,
            ExtCarouselComponent,
            ExtCartesianComponent,
            ExtLegendComponent,
            ExtChartnavigatorComponent,
            ExtPolarComponent,
            ExtSpacefillingComponent,
            ExtChipComponent,
            ExtComponentComponent,
            ExtContainerComponent,
            ExtD3_canvasComponent,
            ExtD3_heatmapComponent,
            ExtD3_packComponent,
            ExtD3_partitionComponent,
            ExtD3_sunburstComponent,
            ExtD3_treeComponent,
            ExtD3_treemapComponent,
            ExtD3_svgComponent,
            ExtBoundlistComponent,
            ExtChipviewComponent,
            ExtComponentdataviewComponent,
            ExtDataitemComponent,
            ExtDataviewComponent,
            ExtEmptytextComponent,
            ExtIndexbarComponent,
            ExtItemheaderComponent,
            ExtListComponent,
            ExtListitemComponent,
            ExtListitemplaceholderComponent,
            ExtListswiperitemComponent,
            ExtListswiperstepperComponent,
            ExtNestedlistComponent,
            ExtPullrefreshbarComponent,
            ExtPullrefreshspinnerComponent,
            ExtSimplelistitemComponent,
            ExtDialogComponent,
            ExtDrawComponent,
            ExtSurfaceComponent,
            ExtEditorComponent,
            ExtCheckboxComponent,
            ExtCheckboxgroupComponent,
            ExtComboboxComponent,
            ExtContainerfieldComponent,
            ExtDatefieldComponent,
            ExtDatepickernativefieldComponent,
            ExtDisplayfieldComponent,
            ExtEmailfieldComponent,
            ExtFieldComponent,
            ExtGroupcontainerComponent,
            ExtFilefieldComponent,
            ExtFilebuttonComponent,
            ExtHiddenfieldComponent,
            ExtInputfieldComponent,
            ExtNumberfieldComponent,
            ExtFieldpanelComponent,
            ExtPasswordfieldComponent,
            ExtPickerfieldComponent,
            ExtRadioComponent,
            ExtRadiogroupComponent,
            ExtSearchfieldComponent,
            ExtSelectfieldComponent,
            ExtSinglesliderfieldComponent,
            ExtSliderfieldComponent,
            ExtSpinnerfieldComponent,
            ExtTextfieldComponent,
            ExtTextareafieldComponent,
            ExtTimefieldComponent,
            ExtTogglefieldComponent,
            ExtCleartriggerComponent,
            ExtDatetriggerComponent,
            ExtExpandtriggerComponent,
            ExtMenutriggerComponent,
            ExtRevealtriggerComponent,
            ExtSpindowntriggerComponent,
            ExtSpinuptriggerComponent,
            ExtTimetriggerComponent,
            ExtTriggerComponent,
            ExtUrlfieldComponent,
            ExtFieldsetComponent,
            ExtFormpanelComponent,
            ExtFroalaeditorComponent,
            ExtFroalaeditorfieldComponent,
            ExtGridcellbaseComponent,
            ExtBooleancellComponent,
            ExtGridcellComponent,
            ExtCheckcellComponent,
            ExtDatecellComponent,
            ExtNumbercellComponent,
            ExtRownumberercellComponent,
            ExtTextcellComponent,
            ExtTreecellComponent,
            ExtWidgetcellComponent,
            ExtCelleditorComponent,
            ExtBooleancolumnComponent,
            ExtCheckcolumnComponent,
            ExtGridcolumnComponent,
            ExtDatecolumnComponent,
            ExtDragcolumnComponent,
            ExtNumbercolumnComponent,
            ExtRownumbererComponent,
            ExtSelectioncolumnComponent,
            ExtTextcolumnComponent,
            ExtTreecolumnComponent,
            ExtGridComponent,
            ExtHeadercontainerComponent,
            ExtLockedgridComponent,
            ExtLockedgridregionComponent,
            ExtGridcolumnsmenuComponent,
            ExtGridgroupbythismenuitemComponent,
            ExtGridshowingroupsmenuitemComponent,
            ExtGridsortascmenuitemComponent,
            ExtGridsortdescmenuitemComponent,
            ExtPagingtoolbarComponent,
            ExtGridrowComponent,
            ExtRowbodyComponent,
            ExtRoweditorbarComponent,
            ExtRoweditorcellComponent,
            ExtRoweditorComponent,
            ExtRoweditorgapComponent,
            ExtRowheaderComponent,
            ExtGridsummaryrowComponent,
            ExtTreeComponent,
            ExtImageComponent,
            ExtIndicatorComponent,
            ExtLabelComponent,
            ExtTreelistComponent,
            ExtTreelistitemComponent,
            ExtLoadmaskComponent,
            ExtMaskComponent,
            ExtMediaComponent,
            ExtMenucheckitemComponent,
            ExtMenuitemComponent,
            ExtMenuComponent,
            ExtMenuradioitemComponent,
            ExtMenuseparatorComponent,
            ExtMessageboxComponent,
            ExtNavigationviewComponent,
            ExtPanelComponent,
            ExtAccordionComponent,
            ExtDatepanelComponent,
            ExtDatetitleComponent,
            ExtPanelheaderComponent,
            ExtTimepanelComponent,
            ExtPaneltitleComponent,
            ExtYearpickerComponent,
            ExtDatepickerComponent,
            ExtPickerComponent,
            ExtSelectpickerComponent,
            ExtPickerslotComponent,
            ExtTabletpickerComponent,
            ExtPivotgridcellComponent,
            ExtPivotgridgroupcellComponent,
            ExtPivotd3containerComponent,
            ExtPivotheatmapComponent,
            ExtPivottreemapComponent,
            ExtPivotgridComponent,
            ExtPivotconfigfieldComponent,
            ExtPivotconfigcontainerComponent,
            ExtPivotconfigformComponent,
            ExtPivotconfigpanelComponent,
            ExtPivotsettingsComponent,
            ExtPivotrangeeditorComponent,
            ExtPivotgridrowComponent,
            ExtProgressComponent,
            ExtSegmentedbuttonComponent,
            ExtSheetComponent,
            ExtSliderComponent,
            ExtThumbComponent,
            ExtTogglesliderComponent,
            ExtSpacerComponent,
            ExtSparklinebarComponent,
            ExtSparklineComponent,
            ExtSparklineboxComponent,
            ExtSparklinebulletComponent,
            ExtSparklinediscreteComponent,
            ExtSparklinelineComponent,
            ExtSparklinepieComponent,
            ExtSparklinetristateComponent,
            ExtSplitbuttonComponent,
            ExtTabbarComponent,
            ExtTabpanelComponent,
            ExtTabComponent,
            ExtTooltipComponent,
            ExtTitleComponent,
            ExtTitlebarComponent,
            ExtToolComponent,
            ExtToolbarComponent,
            ExtColorbuttonComponent,
            ExtColorpickercolorpreviewComponent,
            ExtColorfieldComponent,
            ExtColorselectorComponent,
            ExtGaugeComponent,
            ExtMapComponent,
            ExtRatingComponent,
            ExtVideoComponent,
            ExtViewportComponent,
            ExtWidgetComponent,
        ]
    })
], ExtAngularModule);

/*
 * Public API Surface of ext-angular
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ExtAngularModule, ExtActionsheetMetaData as ɵa, ExtActionsheetComponent as ɵb, Ext_Gadget as ɵba, ExtToolComponent as ɵbaa, Ext_panel_Tool as ɵbab, ExtToolbarMetaData as ɵbac, ExtToolbarComponent as ɵbad, ExtColorbuttonMetaData as ɵbae, ExtColorbuttonComponent as ɵbaf, Ext_ux_colorpick_Button as ɵbag, ExtColorpickercolorpreviewMetaData as ɵbah, ExtColorpickercolorpreviewComponent as ɵbai, Ext_ux_colorpick_ColorPreview as ɵbaj, ExtColorfieldMetaData as ɵbak, ExtColorfieldComponent as ɵbal, Ext_ux_colorpick_Field as ɵbam, ExtColorselectorMetaData as ɵban, ExtColorselectorComponent as ɵbao, Ext_ux_colorpick_Selector as ɵbap, ExtGaugeMetaData as ɵbaq, ExtGaugeComponent as ɵbar, Ext_ux_Gauge as ɵbas, ExtMapMetaData as ɵbat, ExtMapComponent as ɵbau, Ext_Map as ɵbav, ExtRatingMetaData as ɵbaw, ExtRatingComponent as ɵbax, Ext_ux_rating_Picker as ɵbay, ExtVideoMetaData as ɵbaz, ExtCalendar_form_addMetaData as ɵbb, ExtVideoComponent as ɵbba, Ext_Video as ɵbbb, ExtViewportMetaData as ɵbbc, ExtViewportComponent as ɵbbd, Ext_viewport_Default as ɵbbe, ExtWidgetMetaData as ɵbbf, ExtWidgetComponent as ɵbbg, ExtCalendar_form_addComponent as ɵbc, Ext_calendar_form_Add as ɵbd, Ext_calendar_form_Form as ɵbe, Ext_calendar_form_AbstractForm as ɵbf, Ext_form_Panel as ɵbg, Ext_field_Panel as ɵbh, ExtCalendar_calendar_pickerMetaData as ɵbi, ExtCalendar_calendar_pickerComponent as ɵbj, Ext_calendar_form_CalendarPicker as ɵbk, Ext_field_Select as ɵbl, Ext_field_Picker as ɵbm, Ext_field_Text as ɵbn, Ext_field_Input as ɵbo, Ext_field_Field as ɵbp, ExtCalendar_form_editMetaData as ɵbq, ExtCalendar_form_editComponent as ɵbr, Ext_calendar_form_Edit as ɵbs, ExtCalendar_timefieldMetaData as ɵbt, ExtCalendar_timefieldComponent as ɵbu, Ext_calendar_form_TimeField as ɵbv, ExtCalendar_daysheaderMetaData as ɵbw, ExtCalendar_daysheaderComponent as ɵbx, Ext_calendar_header_Days as ɵby, Ext_calendar_header_Base as ɵbz, EngBase as ɵc, ExtCalendar_weeksheaderMetaData as ɵca, ExtCalendar_weeksheaderComponent as ɵcb, Ext_calendar_header_Weeks as ɵcc, ExtCalendar_listMetaData as ɵcd, ExtCalendar_listComponent as ɵce, Ext_calendar_List as ɵcf, Ext_calendar_AbstractList as ɵcg, Ext_dataview_DataView as ɵch, Ext_dataview_Abstract as ɵci, ExtCalendar_dayMetaData as ɵcj, ExtCalendar_dayComponent as ɵck, Ext_calendar_panel_Day as ɵcl, Ext_calendar_panel_Days as ɵcm, Ext_calendar_panel_Base as ɵcn, Ext_calendar_panel_AbstractBase as ɵco, ExtCalendar_daysMetaData as ɵcp, ExtCalendar_daysComponent as ɵcq, ExtCalendar_monthMetaData as ɵcr, ExtCalendar_monthComponent as ɵcs, Ext_calendar_panel_Month as ɵct, Ext_calendar_panel_Weeks as ɵcu, ExtCalendarMetaData as ɵcv, ExtCalendarComponent as ɵcw, Ext_calendar_panel_Panel as ɵcx, Ext_calendar_panel_AbstractPanel as ɵcy, ExtCalendar_weekMetaData as ɵcz, Ext_ActionSheet as ɵd, ExtCalendar_weekComponent as ɵda, Ext_calendar_panel_Week as ɵdb, ExtCalendar_weeksMetaData as ɵdc, ExtCalendar_weeksComponent as ɵdd, ExtCalendar_dayviewMetaData as ɵde, ExtCalendar_dayviewComponent as ɵdf, Ext_calendar_view_Day as ɵdg, Ext_calendar_view_Days as ɵdh, Ext_calendar_view_Base as ɵdi, ExtCalendar_daysviewMetaData as ɵdj, ExtCalendar_daysviewComponent as ɵdk, ExtCalendar_monthviewMetaData as ɵdl, ExtCalendar_monthviewComponent as ɵdm, Ext_calendar_view_Month as ɵdn, Ext_calendar_view_Weeks as ɵdo, ExtCalendar_multiviewMetaData as ɵdp, ExtCalendar_multiviewComponent as ɵdq, Ext_calendar_view_Multi as ɵdr, Ext_container_Container as ɵds, ExtCalendar_weekviewMetaData as ɵdt, ExtCalendar_weekviewComponent as ɵdu, Ext_calendar_view_Week as ɵdv, ExtCalendar_weeksviewMetaData as ɵdw, ExtCalendar_weeksviewComponent as ɵdx, ExtCarouselMetaData as ɵdy, ExtCarouselComponent as ɵdz, Ext_Sheet as ɵe, Ext_Carousel as ɵea, ExtCartesianMetaData as ɵeb, ExtCartesianComponent as ɵec, Ext_chart_Chart as ɵed, Ext_chart_AbstractChart as ɵee, Ext_draw_Container as ɵef, Ext_draw_ContainerBase as ɵeg, ExtLegendMetaData as ɵeh, ExtLegendComponent as ɵei, Ext_chart_Legend as ɵej, Ext_chart_legend_LegendBase as ɵek, ExtChartnavigatorMetaData as ɵel, ExtChartnavigatorComponent as ɵem, Ext_chart_navigator_Container as ɵen, Ext_chart_navigator_ContainerBase as ɵeo, ExtPolarMetaData as ɵep, ExtPolarComponent as ɵeq, Ext_chart_PolarChart as ɵer, ExtSpacefillingMetaData as ɵes, ExtSpacefillingComponent as ɵet, Ext_chart_SpaceFillingChart as ɵeu, ExtChipMetaData as ɵev, ExtChipComponent as ɵew, Ext_Chip as ɵex, ExtComponentMetaData as ɵey, ExtComponentComponent as ɵez, Ext_Panel as ɵf, ExtContainerMetaData as ɵfa, ExtContainerComponent as ɵfb, ExtD3_canvasMetaData as ɵfc, ExtD3_canvasComponent as ɵfd, Ext_d3_canvas_Canvas as ɵfe, Ext_d3_Component as ɵff, Ext_d3_ComponentBase as ɵfg, ExtD3_heatmapMetaData as ɵfh, ExtD3_heatmapComponent as ɵfi, Ext_d3_HeatMap as ɵfj, Ext_d3_svg_Svg as ɵfk, ExtD3_packMetaData as ɵfl, ExtD3_packComponent as ɵfm, Ext_d3_hierarchy_Pack as ɵfn, Ext_d3_hierarchy_Hierarchy as ɵfo, ExtD3_partitionMetaData as ɵfp, ExtD3_partitionComponent as ɵfq, Ext_d3_hierarchy_partition_Partition as ɵfr, ExtD3_sunburstMetaData as ɵfs, ExtD3_sunburstComponent as ɵft, Ext_d3_hierarchy_partition_Sunburst as ɵfu, ExtD3_treeMetaData as ɵfv, ExtD3_treeComponent as ɵfw, Ext_d3_hierarchy_tree_HorizontalTree as ɵfx, Ext_d3_hierarchy_tree_Tree as ɵfy, ExtD3_treemapMetaData as ɵfz, Ext_Container as ɵg, ExtD3_treemapComponent as ɵga, Ext_d3_hierarchy_TreeMap as ɵgb, ExtD3_svgMetaData as ɵgc, ExtD3_svgComponent as ɵgd, ExtBoundlistMetaData as ɵge, ExtBoundlistComponent as ɵgf, Ext_dataview_BoundList as ɵgg, Ext_dataview_List as ɵgh, Ext_dataview_Component as ɵgi, ExtChipviewMetaData as ɵgj, ExtChipviewComponent as ɵgk, Ext_dataview_ChipView as ɵgl, ExtComponentdataviewMetaData as ɵgm, ExtComponentdataviewComponent as ɵgn, ExtDataitemMetaData as ɵgo, ExtDataitemComponent as ɵgp, Ext_dataview_component_DataItem as ɵgq, ExtDataviewMetaData as ɵgr, ExtDataviewComponent as ɵgs, Ext_DataView as ɵgt, ExtEmptytextMetaData as ɵgu, ExtEmptytextComponent as ɵgv, Ext_dataview_EmptyText as ɵgw, ExtIndexbarMetaData as ɵgx, ExtIndexbarComponent as ɵgy, Ext_IndexBar as ɵgz, Ext_Component as ɵh, ExtItemheaderMetaData as ɵha, ExtItemheaderComponent as ɵhb, Ext_dataview_ItemHeader as ɵhc, ExtListMetaData as ɵhd, ExtListComponent as ɵhe, Ext_List as ɵhf, ExtListitemMetaData as ɵhg, ExtListitemComponent as ɵhh, Ext_dataview_component_ListItem as ɵhi, Ext_dataview_DataItem as ɵhj, ExtListitemplaceholderMetaData as ɵhk, ExtListitemplaceholderComponent as ɵhl, Ext_dataview_ListItemPlaceholder as ɵhm, Ext_dataview_SimpleListItem as ɵhn, ExtListswiperitemMetaData as ɵho, ExtListswiperitemComponent as ɵhp, Ext_dataview_listswiper_Item as ɵhq, ExtListswiperstepperMetaData as ɵhr, ExtListswiperstepperComponent as ɵhs, Ext_dataview_listswiper_Stepper as ɵht, ExtNestedlistMetaData as ɵhu, ExtNestedlistComponent as ɵhv, Ext_NestedList as ɵhw, ExtPullrefreshbarMetaData as ɵhx, ExtPullrefreshbarComponent as ɵhy, Ext_dataview_pullrefresh_Bar as ɵhz, Ext_Widget as ɵi, Ext_dataview_pullrefresh_Item as ɵia, ExtPullrefreshspinnerMetaData as ɵib, ExtPullrefreshspinnerComponent as ɵic, Ext_dataview_pullrefresh_Spinner as ɵid, ExtSimplelistitemMetaData as ɵie, ExtSimplelistitemComponent as ɵif, Ext_dataview_component_SimpleListItem as ɵig, ExtDialogMetaData as ɵih, ExtDialogComponent as ɵii, Ext_window_Window as ɵij, ExtDrawMetaData as ɵik, ExtDrawComponent as ɵil, Ext_draw_Component as ɵim, ExtSurfaceMetaData as ɵin, ExtSurfaceComponent as ɵio, Ext_draw_Surface as ɵip, Ext_draw_SurfaceBase as ɵiq, ExtEditorMetaData as ɵir, ExtEditorComponent as ɵis, Ext_Editor as ɵit, ExtCheckboxMetaData as ɵiu, ExtCheckboxComponent as ɵiv, Ext_form_Checkbox as ɵiw, ExtCheckboxgroupMetaData as ɵix, ExtCheckboxgroupComponent as ɵiy, Ext_field_CheckboxGroup as ɵiz, Ext_Evented as ɵj, Ext_field_FieldGroupContainer as ɵja, Ext_field_Container as ɵjb, ExtComboboxMetaData as ɵjc, ExtComboboxComponent as ɵjd, Ext_form_field_ComboBox as ɵje, ExtContainerfieldMetaData as ɵjf, ExtContainerfieldComponent as ɵjg, ExtDatefieldMetaData as ɵjh, ExtDatefieldComponent as ɵji, Ext_field_DatePicker as ɵjj, ExtDatepickernativefieldMetaData as ɵjk, ExtDatepickernativefieldComponent as ɵjl, Ext_form_DatePickerNative as ɵjm, Ext_field_Date as ɵjn, ExtDisplayfieldMetaData as ɵjo, ExtDisplayfieldComponent as ɵjp, Ext_form_Display as ɵjq, ExtEmailfieldMetaData as ɵjr, ExtEmailfieldComponent as ɵjs, Ext_form_Email as ɵjt, ExtFieldMetaData as ɵju, ExtFieldComponent as ɵjv, Ext_form_Field as ɵjw, ExtGroupcontainerMetaData as ɵjx, ExtGroupcontainerComponent as ɵjy, ExtFilefieldMetaData as ɵjz, Ext_Base as ɵk, ExtFilefieldComponent as ɵka, Ext_field_File as ɵkb, ExtFilebuttonMetaData as ɵkc, ExtFilebuttonComponent as ɵkd, Ext_field_FileButton as ɵke, ExtHiddenfieldMetaData as ɵkf, ExtHiddenfieldComponent as ɵkg, Ext_form_Hidden as ɵkh, ExtInputfieldMetaData as ɵki, ExtInputfieldComponent as ɵkj, ExtNumberfieldMetaData as ɵkk, ExtNumberfieldComponent as ɵkl, Ext_form_Number as ɵkm, ExtFieldpanelMetaData as ɵkn, ExtFieldpanelComponent as ɵko, ExtPasswordfieldMetaData as ɵkp, ExtPasswordfieldComponent as ɵkq, Ext_form_Password as ɵkr, ExtPickerfieldMetaData as ɵks, ExtPickerfieldComponent as ɵkt, ExtRadioMetaData as ɵku, ExtRadioComponent as ɵkv, Ext_form_Radio as ɵkw, Ext_field_Checkbox as ɵkx, ExtRadiogroupMetaData as ɵky, ExtRadiogroupComponent as ɵkz, ExtAudioMetaData as ɵl, Ext_field_RadioGroup as ɵla, ExtSearchfieldMetaData as ɵlb, ExtSearchfieldComponent as ɵlc, Ext_form_Search as ɵld, ExtSelectfieldMetaData as ɵle, ExtSelectfieldComponent as ɵlf, Ext_form_Select as ɵlg, ExtSinglesliderfieldMetaData as ɵlh, ExtSinglesliderfieldComponent as ɵli, Ext_field_SingleSlider as ɵlj, Ext_field_Slider as ɵlk, ExtSliderfieldMetaData as ɵll, ExtSliderfieldComponent as ɵlm, Ext_form_Slider as ɵln, ExtSpinnerfieldMetaData as ɵlo, ExtSpinnerfieldComponent as ɵlp, Ext_form_Spinner as ɵlq, Ext_field_Number as ɵlr, ExtTextfieldMetaData as ɵls, ExtTextfieldComponent as ɵlt, Ext_form_Text as ɵlu, ExtTextareafieldMetaData as ɵlv, ExtTextareafieldComponent as ɵlw, Ext_form_TextArea as ɵlx, ExtTimefieldMetaData as ɵly, ExtTimefieldComponent as ɵlz, ExtAudioComponent as ɵm, Ext_field_Time as ɵma, ExtTogglefieldMetaData as ɵmb, ExtTogglefieldComponent as ɵmc, Ext_form_Toggle as ɵmd, ExtCleartriggerMetaData as ɵme, ExtCleartriggerComponent as ɵmf, Ext_field_trigger_Clear as ɵmg, Ext_field_trigger_Trigger as ɵmh, Ext_field_trigger_Base as ɵmi, ExtDatetriggerMetaData as ɵmj, ExtDatetriggerComponent as ɵmk, Ext_field_trigger_Date as ɵml, Ext_field_trigger_Expand as ɵmm, ExtExpandtriggerMetaData as ɵmn, ExtExpandtriggerComponent as ɵmo, ExtMenutriggerMetaData as ɵmp, ExtMenutriggerComponent as ɵmq, Ext_field_trigger_Menu as ɵmr, ExtRevealtriggerMetaData as ɵms, ExtRevealtriggerComponent as ɵmt, Ext_field_trigger_Reveal as ɵmu, ExtSpindowntriggerMetaData as ɵmv, ExtSpindowntriggerComponent as ɵmw, Ext_field_trigger_SpinDown as ɵmx, ExtSpinuptriggerMetaData as ɵmy, ExtSpinuptriggerComponent as ɵmz, Ext_Audio as ɵn, Ext_field_trigger_SpinUp as ɵna, ExtTimetriggerMetaData as ɵnb, ExtTimetriggerComponent as ɵnc, Ext_field_trigger_Time as ɵnd, ExtTriggerMetaData as ɵne, ExtTriggerComponent as ɵnf, ExtUrlfieldMetaData as ɵng, ExtUrlfieldComponent as ɵnh, Ext_form_Url as ɵni, ExtFieldsetMetaData as ɵnj, ExtFieldsetComponent as ɵnk, Ext_form_FieldSet as ɵnl, ExtFormpanelMetaData as ɵnm, ExtFormpanelComponent as ɵnn, Ext_form_FormPanel as ɵno, ExtFroalaeditorMetaData as ɵnp, ExtFroalaeditorComponent as ɵnq, Ext_froala_Editor as ɵnr, ExtFroalaeditorfieldMetaData as ɵns, ExtFroalaeditorfieldComponent as ɵnt, Ext_froala_EditorField as ɵnu, ExtGridcellbaseMetaData as ɵnv, ExtGridcellbaseComponent as ɵnw, Ext_grid_cell_Base as ɵnx, ExtBooleancellMetaData as ɵny, ExtBooleancellComponent as ɵnz, Ext_Media as ɵo, Ext_grid_cell_Boolean as ɵoa, Ext_grid_cell_Text as ɵob, ExtGridcellMetaData as ɵoc, ExtGridcellComponent as ɵod, Ext_grid_cell_Cell as ɵoe, ExtCheckcellMetaData as ɵof, ExtCheckcellComponent as ɵog, Ext_grid_cell_Check as ɵoh, ExtDatecellMetaData as ɵoi, ExtDatecellComponent as ɵoj, Ext_grid_cell_Date as ɵok, ExtNumbercellMetaData as ɵol, ExtNumbercellComponent as ɵom, Ext_grid_cell_Number as ɵon, ExtRownumberercellMetaData as ɵoo, ExtRownumberercellComponent as ɵop, Ext_grid_cell_RowNumberer as ɵoq, ExtTextcellMetaData as ɵor, ExtTextcellComponent as ɵos, ExtTreecellMetaData as ɵot, ExtTreecellComponent as ɵou, Ext_grid_cell_Tree as ɵov, ExtWidgetcellMetaData as ɵow, ExtWidgetcellComponent as ɵox, Ext_grid_cell_Widget as ɵoy, ExtCelleditorMetaData as ɵoz, ExtBreadcrumbbarMetaData as ɵp, ExtCelleditorComponent as ɵpa, Ext_grid_CellEditor as ɵpb, ExtBooleancolumnMetaData as ɵpc, ExtBooleancolumnComponent as ɵpd, Ext_grid_column_Boolean as ɵpe, Ext_grid_column_Column as ɵpf, Ext_grid_HeaderContainer as ɵpg, ExtCheckcolumnMetaData as ɵph, ExtCheckcolumnComponent as ɵpi, Ext_grid_column_Check as ɵpj, ExtGridcolumnMetaData as ɵpk, ExtGridcolumnComponent as ɵpl, Ext_grid_column_Template as ɵpm, ExtDatecolumnMetaData as ɵpn, ExtDatecolumnComponent as ɵpo, Ext_grid_column_Date as ɵpp, ExtDragcolumnMetaData as ɵpq, ExtDragcolumnComponent as ɵpr, Ext_grid_column_Drag as ɵps, ExtNumbercolumnMetaData as ɵpt, ExtNumbercolumnComponent as ɵpu, Ext_grid_column_Number as ɵpv, ExtRownumbererMetaData as ɵpw, ExtRownumbererComponent as ɵpx, Ext_grid_column_RowNumberer as ɵpy, ExtSelectioncolumnMetaData as ɵpz, ExtBreadcrumbbarComponent as ɵq, ExtSelectioncolumnComponent as ɵqa, Ext_grid_column_Selection as ɵqb, ExtTextcolumnMetaData as ɵqc, ExtTextcolumnComponent as ɵqd, Ext_grid_column_Text as ɵqe, ExtTreecolumnMetaData as ɵqf, ExtTreecolumnComponent as ɵqg, Ext_grid_column_Tree as ɵqh, ExtGridMetaData as ɵqi, ExtGridComponent as ɵqj, Ext_grid_Grid as ɵqk, ExtHeadercontainerMetaData as ɵql, ExtHeadercontainerComponent as ɵqm, ExtLockedgridMetaData as ɵqn, ExtLockedgridComponent as ɵqo, Ext_grid_LockedGrid as ɵqp, ExtLockedgridregionMetaData as ɵqq, ExtLockedgridregionComponent as ɵqr, Ext_grid_LockedGridRegion as ɵqs, ExtGridcolumnsmenuMetaData as ɵqt, ExtGridcolumnsmenuComponent as ɵqu, Ext_grid_menu_Columns as ɵqv, Ext_grid_menu_Shared as ɵqw, Ext_menu_Item as ɵqx, ExtGridgroupbythismenuitemMetaData as ɵqy, ExtGridgroupbythismenuitemComponent as ɵqz, Ext_BreadcrumbBar as ɵr, Ext_grid_menu_GroupByThis as ɵra, ExtGridshowingroupsmenuitemMetaData as ɵrb, ExtGridshowingroupsmenuitemComponent as ɵrc, Ext_grid_menu_ShowInGroups as ɵrd, Ext_menu_CheckItem as ɵre, ExtGridsortascmenuitemMetaData as ɵrf, ExtGridsortascmenuitemComponent as ɵrg, Ext_grid_menu_SortAsc as ɵrh, Ext_menu_RadioItem as ɵri, ExtGridsortdescmenuitemMetaData as ɵrj, ExtGridsortdescmenuitemComponent as ɵrk, Ext_grid_menu_SortDesc as ɵrl, ExtPagingtoolbarMetaData as ɵrm, ExtPagingtoolbarComponent as ɵrn, Ext_grid_PagingToolbar as ɵro, ExtGridrowMetaData as ɵrp, ExtGridrowComponent as ɵrq, Ext_grid_Row as ɵrr, ExtRowbodyMetaData as ɵrs, ExtRowbodyComponent as ɵrt, Ext_grid_RowBody as ɵru, ExtRoweditorbarMetaData as ɵrv, ExtRoweditorbarComponent as ɵrw, Ext_grid_rowedit_Bar as ɵrx, ExtRoweditorcellMetaData as ɵry, ExtRoweditorcellComponent as ɵrz, Ext_Toolbar as ɵs, Ext_grid_rowedit_Cell as ɵsa, ExtRoweditorMetaData as ɵsb, ExtRoweditorComponent as ɵsc, Ext_grid_rowedit_Editor as ɵsd, Ext_dataview_ListItem as ɵse, ExtRoweditorgapMetaData as ɵsf, ExtRoweditorgapComponent as ɵsg, Ext_grid_rowedit_Gap as ɵsh, ExtRowheaderMetaData as ɵsi, ExtRowheaderComponent as ɵsj, Ext_grid_RowHeader as ɵsk, ExtGridsummaryrowMetaData as ɵsl, ExtGridsummaryrowComponent as ɵsm, Ext_grid_SummaryRow as ɵsn, ExtTreeMetaData as ɵso, ExtTreeComponent as ɵsp, Ext_tree_Tree as ɵsq, ExtImageMetaData as ɵsr, ExtImageComponent as ɵss, Ext_Image as ɵst, ExtIndicatorMetaData as ɵsu, ExtIndicatorComponent as ɵsv, Ext_Indicator as ɵsw, ExtLabelMetaData as ɵsx, ExtLabelComponent as ɵsy, Ext_Label as ɵsz, ExtButtonMetaData as ɵt, ExtTreelistMetaData as ɵta, ExtTreelistComponent as ɵtb, Ext_list_Tree as ɵtc, ExtTreelistitemMetaData as ɵtd, ExtTreelistitemComponent as ɵte, Ext_list_TreeItem as ɵtf, Ext_list_AbstractTreeItem as ɵtg, ExtLoadmaskMetaData as ɵth, ExtLoadmaskComponent as ɵti, Ext_LoadMask as ɵtj, Ext_Mask as ɵtk, ExtMaskMetaData as ɵtl, ExtMaskComponent as ɵtm, ExtMediaMetaData as ɵtn, ExtMediaComponent as ɵto, ExtMenucheckitemMetaData as ɵtp, ExtMenucheckitemComponent as ɵtq, ExtMenuitemMetaData as ɵtr, ExtMenuitemComponent as ɵts, Ext_menu_TextItem as ɵtt, ExtMenuMetaData as ɵtu, ExtMenuComponent as ɵtv, Ext_menu_Menu as ɵtw, ExtMenuradioitemMetaData as ɵtx, ExtMenuradioitemComponent as ɵty, ExtMenuseparatorMetaData as ɵtz, ExtButtonComponent as ɵu, ExtMenuseparatorComponent as ɵua, Ext_menu_Separator as ɵub, ExtMessageboxMetaData as ɵuc, ExtMessageboxComponent as ɵud, Ext_MessageBox as ɵue, Ext_Dialog as ɵuf, ExtNavigationviewMetaData as ɵug, ExtNavigationviewComponent as ɵuh, Ext_NavigationView as ɵui, ExtPanelMetaData as ɵuj, ExtPanelComponent as ɵuk, Ext_panel_Panel as ɵul, ExtAccordionMetaData as ɵum, ExtAccordionComponent as ɵun, Ext_panel_Accordion as ɵuo, ExtDatepanelMetaData as ɵup, ExtDatepanelComponent as ɵuq, Ext_panel_Date as ɵur, ExtDatetitleMetaData as ɵus, ExtDatetitleComponent as ɵut, Ext_panel_DateTitle as ɵuu, Ext_panel_Title as ɵuv, ExtPanelheaderMetaData as ɵuw, ExtPanelheaderComponent as ɵux, Ext_panel_Header as ɵuy, ExtTimepanelMetaData as ɵuz, Ext_Button as ɵv, ExtTimepanelComponent as ɵva, Ext_panel_Time as ɵvb, ExtPaneltitleMetaData as ɵvc, ExtPaneltitleComponent as ɵvd, ExtYearpickerMetaData as ɵve, ExtYearpickerComponent as ɵvf, Ext_panel_YearPicker as ɵvg, ExtDatepickerMetaData as ɵvh, ExtDatepickerComponent as ɵvi, Ext_DatePicker as ɵvj, Ext_picker_Picker as ɵvk, ExtPickerMetaData as ɵvl, ExtPickerComponent as ɵvm, Ext_Picker as ɵvn, ExtSelectpickerMetaData as ɵvo, ExtSelectpickerComponent as ɵvp, Ext_picker_SelectPicker as ɵvq, ExtPickerslotMetaData as ɵvr, ExtPickerslotComponent as ɵvs, Ext_picker_Slot as ɵvt, ExtTabletpickerMetaData as ɵvu, ExtTabletpickerComponent as ɵvv, Ext_picker_Tablet as ɵvw, ExtPivotgridcellMetaData as ɵvx, ExtPivotgridcellComponent as ɵvy, Ext_pivot_cell_Cell as ɵvz, ExtCalendar_eventMetaData as ɵw, ExtPivotgridgroupcellMetaData as ɵwa, ExtPivotgridgroupcellComponent as ɵwb, Ext_pivot_cell_Group as ɵwc, ExtPivotd3containerMetaData as ɵwd, ExtPivotd3containerComponent as ɵwe, Ext_pivot_d3_Container as ɵwf, Ext_pivot_d3_AbstractContainer as ɵwg, ExtPivotheatmapMetaData as ɵwh, ExtPivotheatmapComponent as ɵwi, Ext_pivot_d3_HeatMap as ɵwj, ExtPivottreemapMetaData as ɵwk, ExtPivottreemapComponent as ɵwl, Ext_pivot_d3_TreeMap as ɵwm, ExtPivotgridMetaData as ɵwn, ExtPivotgridComponent as ɵwo, Ext_pivot_Grid as ɵwp, ExtPivotconfigfieldMetaData as ɵwq, ExtPivotconfigfieldComponent as ɵwr, Ext_pivot_plugin_configurator_Column as ɵws, ExtPivotconfigcontainerMetaData as ɵwt, ExtPivotconfigcontainerComponent as ɵwu, Ext_pivot_plugin_configurator_Container as ɵwv, ExtPivotconfigformMetaData as ɵww, ExtPivotconfigformComponent as ɵwx, Ext_pivot_plugin_configurator_Form as ɵwy, ExtPivotconfigpanelMetaData as ɵwz, ExtCalendar_eventComponent as ɵx, ExtPivotconfigpanelComponent as ɵxa, Ext_pivot_plugin_configurator_Panel as ɵxb, ExtPivotsettingsMetaData as ɵxc, ExtPivotsettingsComponent as ɵxd, Ext_pivot_plugin_configurator_Settings as ɵxe, ExtPivotrangeeditorMetaData as ɵxf, ExtPivotrangeeditorComponent as ɵxg, Ext_pivot_plugin_rangeeditor_Panel as ɵxh, ExtPivotgridrowMetaData as ɵxi, ExtPivotgridrowComponent as ɵxj, Ext_pivot_Row as ɵxk, ExtProgressMetaData as ɵxl, ExtProgressComponent as ɵxm, Ext_ProgressBarWidget as ɵxn, ExtSegmentedbuttonMetaData as ɵxo, ExtSegmentedbuttonComponent as ɵxp, Ext_button_Segmented as ɵxq, ExtSheetMetaData as ɵxr, ExtSheetComponent as ɵxs, ExtSliderMetaData as ɵxt, ExtSliderComponent as ɵxu, Ext_slider_Slider as ɵxv, ExtThumbMetaData as ɵxw, ExtThumbComponent as ɵxx, Ext_slider_Thumb as ɵxy, ExtTogglesliderMetaData as ɵxz, Ext_calendar_Event as ɵy, ExtTogglesliderComponent as ɵya, Ext_slider_Toggle as ɵyb, ExtSpacerMetaData as ɵyc, ExtSpacerComponent as ɵyd, Ext_Spacer as ɵye, ExtSparklinebarMetaData as ɵyf, ExtSparklinebarComponent as ɵyg, Ext_sparkline_Bar as ɵyh, Ext_sparkline_BarBase as ɵyi, Ext_sparkline_Base as ɵyj, ExtSparklineMetaData as ɵyk, ExtSparklineComponent as ɵyl, ExtSparklineboxMetaData as ɵym, ExtSparklineboxComponent as ɵyn, Ext_sparkline_Box as ɵyo, ExtSparklinebulletMetaData as ɵyp, ExtSparklinebulletComponent as ɵyq, Ext_sparkline_Bullet as ɵyr, ExtSparklinediscreteMetaData as ɵys, ExtSparklinediscreteComponent as ɵyt, Ext_sparkline_Discrete as ɵyu, ExtSparklinelineMetaData as ɵyv, ExtSparklinelineComponent as ɵyw, Ext_sparkline_Line as ɵyx, ExtSparklinepieMetaData as ɵyy, ExtSparklinepieComponent as ɵyz, Ext_calendar_EventBase as ɵz, Ext_sparkline_Pie as ɵza, ExtSparklinetristateMetaData as ɵzb, ExtSparklinetristateComponent as ɵzc, Ext_sparkline_TriState as ɵzd, ExtSplitbuttonMetaData as ɵze, ExtSplitbuttonComponent as ɵzf, Ext_SplitButton as ɵzg, ExtTabbarMetaData as ɵzh, ExtTabbarComponent as ɵzi, Ext_TabBar as ɵzj, ExtTabpanelMetaData as ɵzk, ExtTabpanelComponent as ɵzl, Ext_TabPanel as ɵzm, ExtTabMetaData as ɵzn, ExtTabComponent as ɵzo, Ext_Tab as ɵzp, ExtTooltipMetaData as ɵzq, ExtTooltipComponent as ɵzr, Ext_tip_ToolTip as ɵzs, ExtTitleMetaData as ɵzt, ExtTitleComponent as ɵzu, Ext_Title as ɵzv, ExtTitlebarMetaData as ɵzw, ExtTitlebarComponent as ɵzx, Ext_TitleBar as ɵzy, ExtToolMetaData as ɵzz };
//# sourceMappingURL=sencha-ext-angular.js.map
