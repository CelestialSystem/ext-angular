var ExtPivotconfigcontainerComponent_1;
import * as tslib_1 from "tslib";
import { Ext_pivot_plugin_configurator_Container } from './Ext/pivot/plugin/configurator/Container';
export class ExtPivotconfigcontainerMetaData extends Ext_pivot_plugin_configurator_Container {
    static getAll() {
        ExtPivotconfigcontainerMetaData.PROPERTIES = Ext_pivot_plugin_configurator_Container.getProperties(ExtPivotconfigcontainerMetaData.PROPERTIES);
        ExtPivotconfigcontainerMetaData.EVENTS = Ext_pivot_plugin_configurator_Container.getEvents(ExtPivotconfigcontainerMetaData.EVENTS);
        ExtPivotconfigcontainerMetaData.EVENTS.forEach((event) => {
            ExtPivotconfigcontainerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPivotconfigcontainerMetaData.PROPERTIES = [];
ExtPivotconfigcontainerMetaData.EVENTS = [];
ExtPivotconfigcontainerMetaData.EVENTNAMES = [];
(function () { ExtPivotconfigcontainerMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtPivotconfigcontainerComponent = ExtPivotconfigcontainerComponent_1 = class ExtPivotconfigcontainerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPivotconfigcontainerMetaData.PROPERTIES, ExtPivotconfigcontainerMetaData.EVENTS);
        this.xtype = 'pivotconfigcontainer';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPivotconfigcontainerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPivotconfigcontainerComponent = ExtPivotconfigcontainerComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-pivotconfigcontainer',
        inputs: ExtPivotconfigcontainerMetaData.PROPERTIES,
        outputs: ExtPivotconfigcontainerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPivotconfigcontainerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPivotconfigcontainerComponent);
export { ExtPivotconfigcontainerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LXBpdm90Y29uZmlnY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzZW5jaGEvZXh0LWFuZ3VsYXIvIiwic291cmNlcyI6WyJzcmMvZXh0LXBpdm90Y29uZmlnY29udGFpbmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSx1Q0FBdUMsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ3BHLE1BQU0sT0FBTywrQkFBZ0MsU0FBUSx1Q0FBdUM7SUFJeEYsTUFBTSxDQUFDLE1BQU07UUFDVCwrQkFBK0IsQ0FBQyxVQUFVLEdBQUcsdUNBQXVDLENBQUMsYUFBYSxDQUFDLCtCQUErQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQy9JLCtCQUErQixDQUFDLE1BQU0sR0FBRyx1Q0FBdUMsQ0FBQyxTQUFTLENBQUMsK0JBQStCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbkksK0JBQStCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQzNELCtCQUErQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hFLENBQUMsQ0FBQyxDQUFBO0lBQ0wsQ0FBQzs7QUFUWSwwQ0FBVSxHQUFhLEVBQUUsQ0FBQztBQUMxQixzQ0FBTSxHQUFVLEVBQUUsQ0FBQztBQUNuQiwwQ0FBVSxHQUFhLEVBQUUsQ0FBQztBQVM1QyxDQUFDLGNBQWEsK0JBQStCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBRTVELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUNMLElBQUksRUFDSixRQUFRLEVBQ1IsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixTQUFTLEVBQ1QsVUFBVSxFQUNWLFVBQVUsRUFDVixhQUFhLEVBQ2QsTUFBTSxlQUFlLENBQUM7QUFTdkIsSUFBYSxnQ0FBZ0Msd0NBQTdDLE1BQWEsZ0NBQWlDLFNBQVEsT0FBTztJQUV6RCxZQUNJLElBQWdCLEVBQ2dCLGFBQXNCO1FBRXRELEtBQUssQ0FDRCxJQUFJLEVBQ0osYUFBYSxFQUNiLCtCQUErQixDQUFDLFVBQVUsRUFDMUMsK0JBQStCLENBQUMsTUFBTSxDQUN6QyxDQUFBO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxzQkFBc0IsQ0FBQTtJQUN2QyxDQUFDO0lBRU0sUUFBUTtRQUNYLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNyQixDQUFDO0lBRU0sZUFBZTtRQUNsQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQTtJQUM1QixDQUFDO0lBRU0sV0FBVyxDQUFDLE9BQXNCO1FBQ3JDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDL0IsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7SUFDeEIsQ0FBQztDQUNKLENBQUE7O1lBM0JhLFVBQVU7WUFDK0IsT0FBTyx1QkFBckQsSUFBSSxZQUFJLFFBQVEsWUFBSSxRQUFROztBQUp4QixnQ0FBZ0M7SUFQNUMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLDBCQUEwQjtRQUNwQyxNQUFNLEVBQUUsK0JBQStCLENBQUMsVUFBVTtRQUNsRCxPQUFPLEVBQUUsK0JBQStCLENBQUMsVUFBVTtRQUNuRCxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxrQ0FBZ0MsQ0FBQyxFQUFDLENBQUM7UUFDaEcsUUFBUSxFQUFFLDZCQUE2QjtLQUN4QyxDQUFDO0lBS08sbUJBQUEsSUFBSSxFQUFFLENBQUEsRUFBRSxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLFFBQVEsRUFBRSxDQUFBOzZDQUR6QixVQUFVO1FBQytCLE9BQU87R0FKakQsZ0NBQWdDLENBOEI1QztTQTlCWSxnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRfcGl2b3RfcGx1Z2luX2NvbmZpZ3VyYXRvcl9Db250YWluZXIgfSBmcm9tICcuL0V4dC9waXZvdC9wbHVnaW4vY29uZmlndXJhdG9yL0NvbnRhaW5lcic7XG5leHBvcnQgY2xhc3MgRXh0UGl2b3Rjb25maWdjb250YWluZXJNZXRhRGF0YSBleHRlbmRzIEV4dF9waXZvdF9wbHVnaW5fY29uZmlndXJhdG9yX0NvbnRhaW5lciB7XG4gICAgcHVibGljIHN0YXRpYyBQUk9QRVJUSUVTOiBzdHJpbmdbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlRTOiBhbnlbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlROQU1FUzogc3RyaW5nW10gPSBbXTtcbiAgICBzdGF0aWMgZ2V0QWxsKCkge1xuICAgICAgICBFeHRQaXZvdGNvbmZpZ2NvbnRhaW5lck1ldGFEYXRhLlBST1BFUlRJRVMgPSBFeHRfcGl2b3RfcGx1Z2luX2NvbmZpZ3VyYXRvcl9Db250YWluZXIuZ2V0UHJvcGVydGllcyhFeHRQaXZvdGNvbmZpZ2NvbnRhaW5lck1ldGFEYXRhLlBST1BFUlRJRVMpO1xuICAgICAgICBFeHRQaXZvdGNvbmZpZ2NvbnRhaW5lck1ldGFEYXRhLkVWRU5UUyA9IEV4dF9waXZvdF9wbHVnaW5fY29uZmlndXJhdG9yX0NvbnRhaW5lci5nZXRFdmVudHMoRXh0UGl2b3Rjb25maWdjb250YWluZXJNZXRhRGF0YS5FVkVOVFMpO1xuICAgICAgICBFeHRQaXZvdGNvbmZpZ2NvbnRhaW5lck1ldGFEYXRhLkVWRU5UUy5mb3JFYWNoKCAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgRXh0UGl2b3Rjb25maWdjb250YWluZXJNZXRhRGF0YS5FVkVOVE5BTUVTLnB1c2goZXZlbnQubmFtZSk7XG4gICAgICAgIH0pXG4gICAgIH1cbn1cbihmdW5jdGlvbiAoKSB7RXh0UGl2b3Rjb25maWdjb250YWluZXJNZXRhRGF0YS5nZXRBbGwoKTt9KSgpO1xuXG5pbXBvcnQgeyBFbmdCYXNlIH0gZnJvbSAnLi9lbmctYmFzZSc7XG5pbXBvcnQge1xuICBIb3N0LFxuICBPcHRpb25hbCxcbiAgU2tpcFNlbGYsXG4gIC8vT3V0cHV0LFxuICAvL09uSW5pdCxcbiAgLy9BZnRlclZpZXdJbml0LFxuICAvL09uQ2hhbmdlcyxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBmb3J3YXJkUmVmLFxuICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdleHQtcGl2b3Rjb25maWdjb250YWluZXInLFxuICBpbnB1dHM6IEV4dFBpdm90Y29uZmlnY29udGFpbmVyTWV0YURhdGEuUFJPUEVSVElFUyxcbiAgb3V0cHV0czogRXh0UGl2b3Rjb25maWdjb250YWluZXJNZXRhRGF0YS5FVkVOVE5BTUVTLFxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogRW5nQmFzZSwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRXh0UGl2b3Rjb25maWdjb250YWluZXJDb21wb25lbnQpfV0sXG4gIHRlbXBsYXRlOiAnPG5nLXRlbXBsYXRlPjwvbmctdGVtcGxhdGU+J1xufSlcbmV4cG9ydCBjbGFzcyBFeHRQaXZvdGNvbmZpZ2NvbnRhaW5lckNvbXBvbmVudCBleHRlbmRzIEVuZ0Jhc2Uge1xuICAgIHh0eXBlOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGVSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgIEBIb3N0KCkgQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgaG9zdENvbXBvbmVudDogRW5nQmFzZVxuICAgICl7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgZVJlZixcbiAgICAgICAgICAgIGhvc3RDb21wb25lbnQsXG4gICAgICAgICAgICBFeHRQaXZvdGNvbmZpZ2NvbnRhaW5lck1ldGFEYXRhLlBST1BFUlRJRVMsXG4gICAgICAgICAgICBFeHRQaXZvdGNvbmZpZ2NvbnRhaW5lck1ldGFEYXRhLkVWRU5UU1xuICAgICAgICApXG4gICAgICAgIHRoaXMueHR5cGUgPSAncGl2b3Rjb25maWdjb250YWluZXInXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmJhc2VPbkluaXQoKVxuICAgIH1cblxuICAgIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIHRoaXMuYmFzZUFmdGVyVmlld0luaXQoKVxuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uQ2hhbmdlcyhjaGFuZ2VzKVxuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5iYXNlT25EZXN0cm95KClcbiAgICB9XG59XG4iXX0=