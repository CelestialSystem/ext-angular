var ExtD3_sunburstComponent_1;
import * as tslib_1 from "tslib";
import { Ext_d3_hierarchy_partition_Sunburst } from './Ext/d3/hierarchy/partition/Sunburst';
export class ExtD3_sunburstMetaData extends Ext_d3_hierarchy_partition_Sunburst {
    static getAll() {
        ExtD3_sunburstMetaData.PROPERTIES = Ext_d3_hierarchy_partition_Sunburst.getProperties(ExtD3_sunburstMetaData.PROPERTIES);
        ExtD3_sunburstMetaData.EVENTS = Ext_d3_hierarchy_partition_Sunburst.getEvents(ExtD3_sunburstMetaData.EVENTS);
        ExtD3_sunburstMetaData.EVENTS.forEach((event) => {
            ExtD3_sunburstMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtD3_sunburstMetaData.PROPERTIES = [];
ExtD3_sunburstMetaData.EVENTS = [];
ExtD3_sunburstMetaData.EVENTNAMES = [];
(function () { ExtD3_sunburstMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtD3_sunburstComponent = ExtD3_sunburstComponent_1 = class ExtD3_sunburstComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtD3_sunburstMetaData.PROPERTIES, ExtD3_sunburstMetaData.EVENTS);
        this.xtype = 'd3-sunburst';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtD3_sunburstComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtD3_sunburstComponent = ExtD3_sunburstComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-d3-sunburst',
        inputs: ExtD3_sunburstMetaData.PROPERTIES,
        outputs: ExtD3_sunburstMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtD3_sunburstComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtD3_sunburstComponent);
export { ExtD3_sunburstComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LWQzLXN1bmJ1cnN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzZW5jaGEvZXh0LWFuZ3VsYXIvIiwic291cmNlcyI6WyJzcmMvZXh0LWQzLXN1bmJ1cnN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQzVGLE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxtQ0FBbUM7SUFJM0UsTUFBTSxDQUFDLE1BQU07UUFDVCxzQkFBc0IsQ0FBQyxVQUFVLEdBQUcsbUNBQW1DLENBQUMsYUFBYSxDQUFDLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3pILHNCQUFzQixDQUFDLE1BQU0sR0FBRyxtQ0FBbUMsQ0FBQyxTQUFTLENBQUMsc0JBQXNCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0csc0JBQXNCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ2xELHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFBO0lBQ0wsQ0FBQzs7QUFUWSxpQ0FBVSxHQUFhLEVBQUUsQ0FBQztBQUMxQiw2QkFBTSxHQUFVLEVBQUUsQ0FBQztBQUNuQixpQ0FBVSxHQUFhLEVBQUUsQ0FBQztBQVM1QyxDQUFDLGNBQWEsc0JBQXNCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBRW5ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUNMLElBQUksRUFDSixRQUFRLEVBQ1IsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixTQUFTLEVBQ1QsVUFBVSxFQUNWLFVBQVUsRUFDVixhQUFhLEVBQ2QsTUFBTSxlQUFlLENBQUM7QUFTdkIsSUFBYSx1QkFBdUIsK0JBQXBDLE1BQWEsdUJBQXdCLFNBQVEsT0FBTztJQUVoRCxZQUNJLElBQWdCLEVBQ2dCLGFBQXNCO1FBRXRELEtBQUssQ0FDRCxJQUFJLEVBQ0osYUFBYSxFQUNiLHNCQUFzQixDQUFDLFVBQVUsRUFDakMsc0JBQXNCLENBQUMsTUFBTSxDQUNoQyxDQUFBO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUE7SUFDOUIsQ0FBQztJQUVNLFFBQVE7UUFDWCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDckIsQ0FBQztJQUVNLGVBQWU7UUFDbEIsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUE7SUFDNUIsQ0FBQztJQUVNLFdBQVcsQ0FBQyxPQUFzQjtRQUNyQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQy9CLENBQUM7SUFFTSxXQUFXO1FBQ2QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQ3hCLENBQUM7Q0FDSixDQUFBOztZQTNCYSxVQUFVO1lBQytCLE9BQU8sdUJBQXJELElBQUksWUFBSSxRQUFRLFlBQUksUUFBUTs7QUFKeEIsdUJBQXVCO0lBUG5DLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxpQkFBaUI7UUFDM0IsTUFBTSxFQUFFLHNCQUFzQixDQUFDLFVBQVU7UUFDekMsT0FBTyxFQUFFLHNCQUFzQixDQUFDLFVBQVU7UUFDMUMsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMseUJBQXVCLENBQUMsRUFBQyxDQUFDO1FBQ3ZGLFFBQVEsRUFBRSw2QkFBNkI7S0FDeEMsQ0FBQztJQUtPLG1CQUFBLElBQUksRUFBRSxDQUFBLEVBQUUsbUJBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxtQkFBQSxRQUFRLEVBQUUsQ0FBQTs2Q0FEekIsVUFBVTtRQUMrQixPQUFPO0dBSmpELHVCQUF1QixDQThCbkM7U0E5QlksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXh0X2QzX2hpZXJhcmNoeV9wYXJ0aXRpb25fU3VuYnVyc3QgfSBmcm9tICcuL0V4dC9kMy9oaWVyYXJjaHkvcGFydGl0aW9uL1N1bmJ1cnN0JztcbmV4cG9ydCBjbGFzcyBFeHREM19zdW5idXJzdE1ldGFEYXRhIGV4dGVuZHMgRXh0X2QzX2hpZXJhcmNoeV9wYXJ0aXRpb25fU3VuYnVyc3Qge1xuICAgIHB1YmxpYyBzdGF0aWMgUFJPUEVSVElFUzogc3RyaW5nW10gPSBbXTtcbiAgICBwdWJsaWMgc3RhdGljIEVWRU5UUzogYW55W10gPSBbXTtcbiAgICBwdWJsaWMgc3RhdGljIEVWRU5UTkFNRVM6IHN0cmluZ1tdID0gW107XG4gICAgc3RhdGljIGdldEFsbCgpIHtcbiAgICAgICAgRXh0RDNfc3VuYnVyc3RNZXRhRGF0YS5QUk9QRVJUSUVTID0gRXh0X2QzX2hpZXJhcmNoeV9wYXJ0aXRpb25fU3VuYnVyc3QuZ2V0UHJvcGVydGllcyhFeHREM19zdW5idXJzdE1ldGFEYXRhLlBST1BFUlRJRVMpO1xuICAgICAgICBFeHREM19zdW5idXJzdE1ldGFEYXRhLkVWRU5UUyA9IEV4dF9kM19oaWVyYXJjaHlfcGFydGl0aW9uX1N1bmJ1cnN0LmdldEV2ZW50cyhFeHREM19zdW5idXJzdE1ldGFEYXRhLkVWRU5UUyk7XG4gICAgICAgIEV4dEQzX3N1bmJ1cnN0TWV0YURhdGEuRVZFTlRTLmZvckVhY2goIChldmVudDogYW55KSA9PiB7XG4gICAgICAgICAgICBFeHREM19zdW5idXJzdE1ldGFEYXRhLkVWRU5UTkFNRVMucHVzaChldmVudC5uYW1lKTtcbiAgICAgICAgfSlcbiAgICAgfVxufVxuKGZ1bmN0aW9uICgpIHtFeHREM19zdW5idXJzdE1ldGFEYXRhLmdldEFsbCgpO30pKCk7XG5cbmltcG9ydCB7IEVuZ0Jhc2UgfSBmcm9tICcuL2VuZy1iYXNlJztcbmltcG9ydCB7XG4gIEhvc3QsXG4gIE9wdGlvbmFsLFxuICBTa2lwU2VsZixcbiAgLy9PdXRwdXQsXG4gIC8vT25Jbml0LFxuICAvL0FmdGVyVmlld0luaXQsXG4gIC8vT25DaGFuZ2VzLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIGZvcndhcmRSZWYsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2V4dC1kMy1zdW5idXJzdCcsXG4gIGlucHV0czogRXh0RDNfc3VuYnVyc3RNZXRhRGF0YS5QUk9QRVJUSUVTLFxuICBvdXRwdXRzOiBFeHREM19zdW5idXJzdE1ldGFEYXRhLkVWRU5UTkFNRVMsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBFbmdCYXNlLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBFeHREM19zdW5idXJzdENvbXBvbmVudCl9XSxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGU+PC9uZy10ZW1wbGF0ZT4nXG59KVxuZXhwb3J0IGNsYXNzIEV4dEQzX3N1bmJ1cnN0Q29tcG9uZW50IGV4dGVuZHMgRW5nQmFzZSB7XG4gICAgeHR5cGU6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZVJlZjogRWxlbWVudFJlZixcbiAgICAgICAgQEhvc3QoKSBAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBob3N0Q29tcG9uZW50OiBFbmdCYXNlXG4gICAgKXtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBlUmVmLFxuICAgICAgICAgICAgaG9zdENvbXBvbmVudCxcbiAgICAgICAgICAgIEV4dEQzX3N1bmJ1cnN0TWV0YURhdGEuUFJPUEVSVElFUyxcbiAgICAgICAgICAgIEV4dEQzX3N1bmJ1cnN0TWV0YURhdGEuRVZFTlRTXG4gICAgICAgIClcbiAgICAgICAgdGhpcy54dHlwZSA9ICdkMy1zdW5idXJzdCdcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uSW5pdCgpXG4gICAgfVxuXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5iYXNlQWZ0ZXJWaWV3SW5pdCgpXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5iYXNlT25DaGFuZ2VzKGNoYW5nZXMpXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLmJhc2VPbkRlc3Ryb3koKVxuICAgIH1cbn1cbiJdfQ==