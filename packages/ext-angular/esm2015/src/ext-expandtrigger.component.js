var ExtExpandtriggerComponent_1;
import * as tslib_1 from "tslib";
import { Ext_field_trigger_Expand } from './Ext/field/trigger/Expand';
export class ExtExpandtriggerMetaData extends Ext_field_trigger_Expand {
    static getAll() {
        ExtExpandtriggerMetaData.PROPERTIES = Ext_field_trigger_Expand.getProperties(ExtExpandtriggerMetaData.PROPERTIES);
        ExtExpandtriggerMetaData.EVENTS = Ext_field_trigger_Expand.getEvents(ExtExpandtriggerMetaData.EVENTS);
        ExtExpandtriggerMetaData.EVENTS.forEach((event) => {
            ExtExpandtriggerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtExpandtriggerMetaData.PROPERTIES = [];
ExtExpandtriggerMetaData.EVENTS = [];
ExtExpandtriggerMetaData.EVENTNAMES = [];
(function () { ExtExpandtriggerMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtExpandtriggerComponent = ExtExpandtriggerComponent_1 = class ExtExpandtriggerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtExpandtriggerMetaData.PROPERTIES, ExtExpandtriggerMetaData.EVENTS);
        this.xtype = 'expandtrigger';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtExpandtriggerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtExpandtriggerComponent = ExtExpandtriggerComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-expandtrigger',
        inputs: ExtExpandtriggerMetaData.PROPERTIES,
        outputs: ExtExpandtriggerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtExpandtriggerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtExpandtriggerComponent);
export { ExtExpandtriggerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LWV4cGFuZHRyaWdnZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNlbmNoYS9leHQtYW5ndWxhci8iLCJzb3VyY2VzIjpbInNyYy9leHQtZXhwYW5kdHJpZ2dlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN0RSxNQUFNLE9BQU8sd0JBQXlCLFNBQVEsd0JBQXdCO0lBSWxFLE1BQU0sQ0FBQyxNQUFNO1FBQ1Qsd0JBQXdCLENBQUMsVUFBVSxHQUFHLHdCQUF3QixDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsSCx3QkFBd0IsQ0FBQyxNQUFNLEdBQUcsd0JBQXdCLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RHLHdCQUF3QixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUUsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUNwRCx3QkFBd0IsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN6RCxDQUFDLENBQUMsQ0FBQTtJQUNMLENBQUM7O0FBVFksbUNBQVUsR0FBYSxFQUFFLENBQUM7QUFDMUIsK0JBQU0sR0FBVSxFQUFFLENBQUM7QUFDbkIsbUNBQVUsR0FBYSxFQUFFLENBQUM7QUFTNUMsQ0FBQyxjQUFhLHdCQUF3QixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUVyRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3JDLE9BQU8sRUFDTCxJQUFJLEVBQ0osUUFBUSxFQUNSLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osU0FBUyxFQUNULFVBQVUsRUFDVixVQUFVLEVBQ1YsYUFBYSxFQUNkLE1BQU0sZUFBZSxDQUFDO0FBU3ZCLElBQWEseUJBQXlCLGlDQUF0QyxNQUFhLHlCQUEwQixTQUFRLE9BQU87SUFFbEQsWUFDSSxJQUFnQixFQUNnQixhQUFzQjtRQUV0RCxLQUFLLENBQ0QsSUFBSSxFQUNKLGFBQWEsRUFDYix3QkFBd0IsQ0FBQyxVQUFVLEVBQ25DLHdCQUF3QixDQUFDLE1BQU0sQ0FDbEMsQ0FBQTtRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFBO0lBQ2hDLENBQUM7SUFFTSxRQUFRO1FBQ1gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQ3JCLENBQUM7SUFFTSxlQUFlO1FBQ2xCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFFTSxXQUFXLENBQUMsT0FBc0I7UUFDckMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBRU0sV0FBVztRQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQTtJQUN4QixDQUFDO0NBQ0osQ0FBQTs7WUEzQmEsVUFBVTtZQUMrQixPQUFPLHVCQUFyRCxJQUFJLFlBQUksUUFBUSxZQUFJLFFBQVE7O0FBSnhCLHlCQUF5QjtJQVByQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsbUJBQW1CO1FBQzdCLE1BQU0sRUFBRSx3QkFBd0IsQ0FBQyxVQUFVO1FBQzNDLE9BQU8sRUFBRSx3QkFBd0IsQ0FBQyxVQUFVO1FBQzVDLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDJCQUF5QixDQUFDLEVBQUMsQ0FBQztRQUN6RixRQUFRLEVBQUUsNkJBQTZCO0tBQ3hDLENBQUM7SUFLTyxtQkFBQSxJQUFJLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsbUJBQUEsUUFBUSxFQUFFLENBQUE7NkNBRHpCLFVBQVU7UUFDK0IsT0FBTztHQUpqRCx5QkFBeUIsQ0E4QnJDO1NBOUJZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dF9maWVsZF90cmlnZ2VyX0V4cGFuZCB9IGZyb20gJy4vRXh0L2ZpZWxkL3RyaWdnZXIvRXhwYW5kJztcbmV4cG9ydCBjbGFzcyBFeHRFeHBhbmR0cmlnZ2VyTWV0YURhdGEgZXh0ZW5kcyBFeHRfZmllbGRfdHJpZ2dlcl9FeHBhbmQge1xuICAgIHB1YmxpYyBzdGF0aWMgUFJPUEVSVElFUzogc3RyaW5nW10gPSBbXTtcbiAgICBwdWJsaWMgc3RhdGljIEVWRU5UUzogYW55W10gPSBbXTtcbiAgICBwdWJsaWMgc3RhdGljIEVWRU5UTkFNRVM6IHN0cmluZ1tdID0gW107XG4gICAgc3RhdGljIGdldEFsbCgpIHtcbiAgICAgICAgRXh0RXhwYW5kdHJpZ2dlck1ldGFEYXRhLlBST1BFUlRJRVMgPSBFeHRfZmllbGRfdHJpZ2dlcl9FeHBhbmQuZ2V0UHJvcGVydGllcyhFeHRFeHBhbmR0cmlnZ2VyTWV0YURhdGEuUFJPUEVSVElFUyk7XG4gICAgICAgIEV4dEV4cGFuZHRyaWdnZXJNZXRhRGF0YS5FVkVOVFMgPSBFeHRfZmllbGRfdHJpZ2dlcl9FeHBhbmQuZ2V0RXZlbnRzKEV4dEV4cGFuZHRyaWdnZXJNZXRhRGF0YS5FVkVOVFMpO1xuICAgICAgICBFeHRFeHBhbmR0cmlnZ2VyTWV0YURhdGEuRVZFTlRTLmZvckVhY2goIChldmVudDogYW55KSA9PiB7XG4gICAgICAgICAgICBFeHRFeHBhbmR0cmlnZ2VyTWV0YURhdGEuRVZFTlROQU1FUy5wdXNoKGV2ZW50Lm5hbWUpO1xuICAgICAgICB9KVxuICAgICB9XG59XG4oZnVuY3Rpb24gKCkge0V4dEV4cGFuZHRyaWdnZXJNZXRhRGF0YS5nZXRBbGwoKTt9KSgpO1xuXG5pbXBvcnQgeyBFbmdCYXNlIH0gZnJvbSAnLi9lbmctYmFzZSc7XG5pbXBvcnQge1xuICBIb3N0LFxuICBPcHRpb25hbCxcbiAgU2tpcFNlbGYsXG4gIC8vT3V0cHV0LFxuICAvL09uSW5pdCxcbiAgLy9BZnRlclZpZXdJbml0LFxuICAvL09uQ2hhbmdlcyxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBmb3J3YXJkUmVmLFxuICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdleHQtZXhwYW5kdHJpZ2dlcicsXG4gIGlucHV0czogRXh0RXhwYW5kdHJpZ2dlck1ldGFEYXRhLlBST1BFUlRJRVMsXG4gIG91dHB1dHM6IEV4dEV4cGFuZHRyaWdnZXJNZXRhRGF0YS5FVkVOVE5BTUVTLFxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogRW5nQmFzZSwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRXh0RXhwYW5kdHJpZ2dlckNvbXBvbmVudCl9XSxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGU+PC9uZy10ZW1wbGF0ZT4nXG59KVxuZXhwb3J0IGNsYXNzIEV4dEV4cGFuZHRyaWdnZXJDb21wb25lbnQgZXh0ZW5kcyBFbmdCYXNlIHtcbiAgICB4dHlwZTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBlUmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBASG9zdCgpIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIGhvc3RDb21wb25lbnQ6IEVuZ0Jhc2VcbiAgICApe1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIGVSZWYsXG4gICAgICAgICAgICBob3N0Q29tcG9uZW50LFxuICAgICAgICAgICAgRXh0RXhwYW5kdHJpZ2dlck1ldGFEYXRhLlBST1BFUlRJRVMsXG4gICAgICAgICAgICBFeHRFeHBhbmR0cmlnZ2VyTWV0YURhdGEuRVZFTlRTXG4gICAgICAgIClcbiAgICAgICAgdGhpcy54dHlwZSA9ICdleHBhbmR0cmlnZ2VyJ1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5iYXNlT25Jbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICB0aGlzLmJhc2VBZnRlclZpZXdJbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICB0aGlzLmJhc2VPbkNoYW5nZXMoY2hhbmdlcylcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uRGVzdHJveSgpXG4gICAgfVxufVxuIl19