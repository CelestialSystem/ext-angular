var ExtSpindowntriggerComponent_1;
import * as tslib_1 from "tslib";
import { Ext_field_trigger_SpinDown } from './Ext/field/trigger/SpinDown';
export class ExtSpindowntriggerMetaData extends Ext_field_trigger_SpinDown {
    static getAll() {
        ExtSpindowntriggerMetaData.PROPERTIES = Ext_field_trigger_SpinDown.getProperties(ExtSpindowntriggerMetaData.PROPERTIES);
        ExtSpindowntriggerMetaData.EVENTS = Ext_field_trigger_SpinDown.getEvents(ExtSpindowntriggerMetaData.EVENTS);
        ExtSpindowntriggerMetaData.EVENTS.forEach((event) => {
            ExtSpindowntriggerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtSpindowntriggerMetaData.PROPERTIES = [];
ExtSpindowntriggerMetaData.EVENTS = [];
ExtSpindowntriggerMetaData.EVENTNAMES = [];
(function () { ExtSpindowntriggerMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtSpindowntriggerComponent = ExtSpindowntriggerComponent_1 = class ExtSpindowntriggerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtSpindowntriggerMetaData.PROPERTIES, ExtSpindowntriggerMetaData.EVENTS);
        this.xtype = 'spindowntrigger';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSpindowntriggerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtSpindowntriggerComponent = ExtSpindowntriggerComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-spindowntrigger',
        inputs: ExtSpindowntriggerMetaData.PROPERTIES,
        outputs: ExtSpindowntriggerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSpindowntriggerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtSpindowntriggerComponent);
export { ExtSpindowntriggerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LXNwaW5kb3dudHJpZ2dlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac2VuY2hhL2V4dC1hbmd1bGFyLyIsInNvdXJjZXMiOlsic3JjL2V4dC1zcGluZG93bnRyaWdnZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDMUUsTUFBTSxPQUFPLDBCQUEyQixTQUFRLDBCQUEwQjtJQUl0RSxNQUFNLENBQUMsTUFBTTtRQUNULDBCQUEwQixDQUFDLFVBQVUsR0FBRywwQkFBMEIsQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEgsMEJBQTBCLENBQUMsTUFBTSxHQUFHLDBCQUEwQixDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1RywwQkFBMEIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFFLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDdEQsMEJBQTBCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUE7SUFDTCxDQUFDOztBQVRZLHFDQUFVLEdBQWEsRUFBRSxDQUFDO0FBQzFCLGlDQUFNLEdBQVUsRUFBRSxDQUFDO0FBQ25CLHFDQUFVLEdBQWEsRUFBRSxDQUFDO0FBUzVDLENBQUMsY0FBYSwwQkFBMEIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFdkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyQyxPQUFPLEVBQ0wsSUFBSSxFQUNKLFFBQVEsRUFDUixRQUFRO0FBQ1IsU0FBUztBQUNULFNBQVM7QUFDVCxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLFNBQVMsRUFDVCxVQUFVLEVBQ1YsVUFBVSxFQUNWLGFBQWEsRUFDZCxNQUFNLGVBQWUsQ0FBQztBQVN2QixJQUFhLDJCQUEyQixtQ0FBeEMsTUFBYSwyQkFBNEIsU0FBUSxPQUFPO0lBRXBELFlBQ0ksSUFBZ0IsRUFDZ0IsYUFBc0I7UUFFdEQsS0FBSyxDQUNELElBQUksRUFDSixhQUFhLEVBQ2IsMEJBQTBCLENBQUMsVUFBVSxFQUNyQywwQkFBMEIsQ0FBQyxNQUFNLENBQ3BDLENBQUE7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLGlCQUFpQixDQUFBO0lBQ2xDLENBQUM7SUFFTSxRQUFRO1FBQ1gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQ3JCLENBQUM7SUFFTSxlQUFlO1FBQ2xCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFFTSxXQUFXLENBQUMsT0FBc0I7UUFDckMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBRU0sV0FBVztRQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQTtJQUN4QixDQUFDO0NBQ0osQ0FBQTs7WUEzQmEsVUFBVTtZQUMrQixPQUFPLHVCQUFyRCxJQUFJLFlBQUksUUFBUSxZQUFJLFFBQVE7O0FBSnhCLDJCQUEyQjtJQVB2QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUscUJBQXFCO1FBQy9CLE1BQU0sRUFBRSwwQkFBMEIsQ0FBQyxVQUFVO1FBQzdDLE9BQU8sRUFBRSwwQkFBMEIsQ0FBQyxVQUFVO1FBQzlDLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDZCQUEyQixDQUFDLEVBQUMsQ0FBQztRQUMzRixRQUFRLEVBQUUsNkJBQTZCO0tBQ3hDLENBQUM7SUFLTyxtQkFBQSxJQUFJLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsbUJBQUEsUUFBUSxFQUFFLENBQUE7NkNBRHpCLFVBQVU7UUFDK0IsT0FBTztHQUpqRCwyQkFBMkIsQ0E4QnZDO1NBOUJZLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dF9maWVsZF90cmlnZ2VyX1NwaW5Eb3duIH0gZnJvbSAnLi9FeHQvZmllbGQvdHJpZ2dlci9TcGluRG93bic7XG5leHBvcnQgY2xhc3MgRXh0U3BpbmRvd250cmlnZ2VyTWV0YURhdGEgZXh0ZW5kcyBFeHRfZmllbGRfdHJpZ2dlcl9TcGluRG93biB7XG4gICAgcHVibGljIHN0YXRpYyBQUk9QRVJUSUVTOiBzdHJpbmdbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlRTOiBhbnlbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlROQU1FUzogc3RyaW5nW10gPSBbXTtcbiAgICBzdGF0aWMgZ2V0QWxsKCkge1xuICAgICAgICBFeHRTcGluZG93bnRyaWdnZXJNZXRhRGF0YS5QUk9QRVJUSUVTID0gRXh0X2ZpZWxkX3RyaWdnZXJfU3BpbkRvd24uZ2V0UHJvcGVydGllcyhFeHRTcGluZG93bnRyaWdnZXJNZXRhRGF0YS5QUk9QRVJUSUVTKTtcbiAgICAgICAgRXh0U3BpbmRvd250cmlnZ2VyTWV0YURhdGEuRVZFTlRTID0gRXh0X2ZpZWxkX3RyaWdnZXJfU3BpbkRvd24uZ2V0RXZlbnRzKEV4dFNwaW5kb3dudHJpZ2dlck1ldGFEYXRhLkVWRU5UUyk7XG4gICAgICAgIEV4dFNwaW5kb3dudHJpZ2dlck1ldGFEYXRhLkVWRU5UUy5mb3JFYWNoKCAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgRXh0U3BpbmRvd250cmlnZ2VyTWV0YURhdGEuRVZFTlROQU1FUy5wdXNoKGV2ZW50Lm5hbWUpO1xuICAgICAgICB9KVxuICAgICB9XG59XG4oZnVuY3Rpb24gKCkge0V4dFNwaW5kb3dudHJpZ2dlck1ldGFEYXRhLmdldEFsbCgpO30pKCk7XG5cbmltcG9ydCB7IEVuZ0Jhc2UgfSBmcm9tICcuL2VuZy1iYXNlJztcbmltcG9ydCB7XG4gIEhvc3QsXG4gIE9wdGlvbmFsLFxuICBTa2lwU2VsZixcbiAgLy9PdXRwdXQsXG4gIC8vT25Jbml0LFxuICAvL0FmdGVyVmlld0luaXQsXG4gIC8vT25DaGFuZ2VzLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIGZvcndhcmRSZWYsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2V4dC1zcGluZG93bnRyaWdnZXInLFxuICBpbnB1dHM6IEV4dFNwaW5kb3dudHJpZ2dlck1ldGFEYXRhLlBST1BFUlRJRVMsXG4gIG91dHB1dHM6IEV4dFNwaW5kb3dudHJpZ2dlck1ldGFEYXRhLkVWRU5UTkFNRVMsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBFbmdCYXNlLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBFeHRTcGluZG93bnRyaWdnZXJDb21wb25lbnQpfV0sXG4gIHRlbXBsYXRlOiAnPG5nLXRlbXBsYXRlPjwvbmctdGVtcGxhdGU+J1xufSlcbmV4cG9ydCBjbGFzcyBFeHRTcGluZG93bnRyaWdnZXJDb21wb25lbnQgZXh0ZW5kcyBFbmdCYXNlIHtcbiAgICB4dHlwZTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBlUmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBASG9zdCgpIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIGhvc3RDb21wb25lbnQ6IEVuZ0Jhc2VcbiAgICApe1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIGVSZWYsXG4gICAgICAgICAgICBob3N0Q29tcG9uZW50LFxuICAgICAgICAgICAgRXh0U3BpbmRvd250cmlnZ2VyTWV0YURhdGEuUFJPUEVSVElFUyxcbiAgICAgICAgICAgIEV4dFNwaW5kb3dudHJpZ2dlck1ldGFEYXRhLkVWRU5UU1xuICAgICAgICApXG4gICAgICAgIHRoaXMueHR5cGUgPSAnc3BpbmRvd250cmlnZ2VyJ1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5iYXNlT25Jbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICB0aGlzLmJhc2VBZnRlclZpZXdJbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICB0aGlzLmJhc2VPbkNoYW5nZXMoY2hhbmdlcylcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uRGVzdHJveSgpXG4gICAgfVxufVxuIl19