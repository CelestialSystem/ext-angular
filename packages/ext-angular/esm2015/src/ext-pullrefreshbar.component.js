var ExtPullrefreshbarComponent_1;
import * as tslib_1 from "tslib";
import { Ext_dataview_pullrefresh_Bar } from './Ext/dataview/pullrefresh/Bar';
export class ExtPullrefreshbarMetaData extends Ext_dataview_pullrefresh_Bar {
    static getAll() {
        ExtPullrefreshbarMetaData.PROPERTIES = Ext_dataview_pullrefresh_Bar.getProperties(ExtPullrefreshbarMetaData.PROPERTIES);
        ExtPullrefreshbarMetaData.EVENTS = Ext_dataview_pullrefresh_Bar.getEvents(ExtPullrefreshbarMetaData.EVENTS);
        ExtPullrefreshbarMetaData.EVENTS.forEach((event) => {
            ExtPullrefreshbarMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPullrefreshbarMetaData.PROPERTIES = [];
ExtPullrefreshbarMetaData.EVENTS = [];
ExtPullrefreshbarMetaData.EVENTNAMES = [];
(function () { ExtPullrefreshbarMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtPullrefreshbarComponent = ExtPullrefreshbarComponent_1 = class ExtPullrefreshbarComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPullrefreshbarMetaData.PROPERTIES, ExtPullrefreshbarMetaData.EVENTS);
        this.xtype = 'pullrefreshbar';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPullrefreshbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPullrefreshbarComponent = ExtPullrefreshbarComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-pullrefreshbar',
        inputs: ExtPullrefreshbarMetaData.PROPERTIES,
        outputs: ExtPullrefreshbarMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPullrefreshbarComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPullrefreshbarComponent);
export { ExtPullrefreshbarComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LXB1bGxyZWZyZXNoYmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzZW5jaGEvZXh0LWFuZ3VsYXIvIiwic291cmNlcyI6WyJzcmMvZXh0LXB1bGxyZWZyZXNoYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQzlFLE1BQU0sT0FBTyx5QkFBMEIsU0FBUSw0QkFBNEI7SUFJdkUsTUFBTSxDQUFDLE1BQU07UUFDVCx5QkFBeUIsQ0FBQyxVQUFVLEdBQUcsNEJBQTRCLENBQUMsYUFBYSxDQUFDLHlCQUF5QixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hILHlCQUF5QixDQUFDLE1BQU0sR0FBRyw0QkFBNEIsQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUcseUJBQXlCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ3JELHlCQUF5QixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFELENBQUMsQ0FBQyxDQUFBO0lBQ0wsQ0FBQzs7QUFUWSxvQ0FBVSxHQUFhLEVBQUUsQ0FBQztBQUMxQixnQ0FBTSxHQUFVLEVBQUUsQ0FBQztBQUNuQixvQ0FBVSxHQUFhLEVBQUUsQ0FBQztBQVM1QyxDQUFDLGNBQWEseUJBQXlCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBRXRELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUNMLElBQUksRUFDSixRQUFRLEVBQ1IsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixTQUFTLEVBQ1QsVUFBVSxFQUNWLFVBQVUsRUFDVixhQUFhLEVBQ2QsTUFBTSxlQUFlLENBQUM7QUFTdkIsSUFBYSwwQkFBMEIsa0NBQXZDLE1BQWEsMEJBQTJCLFNBQVEsT0FBTztJQUVuRCxZQUNJLElBQWdCLEVBQ2dCLGFBQXNCO1FBRXRELEtBQUssQ0FDRCxJQUFJLEVBQ0osYUFBYSxFQUNiLHlCQUF5QixDQUFDLFVBQVUsRUFDcEMseUJBQXlCLENBQUMsTUFBTSxDQUNuQyxDQUFBO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQTtJQUNqQyxDQUFDO0lBRU0sUUFBUTtRQUNYLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNyQixDQUFDO0lBRU0sZUFBZTtRQUNsQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQTtJQUM1QixDQUFDO0lBRU0sV0FBVyxDQUFDLE9BQXNCO1FBQ3JDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDL0IsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7SUFDeEIsQ0FBQztDQUNKLENBQUE7O1lBM0JhLFVBQVU7WUFDK0IsT0FBTyx1QkFBckQsSUFBSSxZQUFJLFFBQVEsWUFBSSxRQUFROztBQUp4QiwwQkFBMEI7SUFQdEMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLG9CQUFvQjtRQUM5QixNQUFNLEVBQUUseUJBQXlCLENBQUMsVUFBVTtRQUM1QyxPQUFPLEVBQUUseUJBQXlCLENBQUMsVUFBVTtRQUM3QyxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyw0QkFBMEIsQ0FBQyxFQUFDLENBQUM7UUFDMUYsUUFBUSxFQUFFLDZCQUE2QjtLQUN4QyxDQUFDO0lBS08sbUJBQUEsSUFBSSxFQUFFLENBQUEsRUFBRSxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLFFBQVEsRUFBRSxDQUFBOzZDQUR6QixVQUFVO1FBQytCLE9BQU87R0FKakQsMEJBQTBCLENBOEJ0QztTQTlCWSwwQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRfZGF0YXZpZXdfcHVsbHJlZnJlc2hfQmFyIH0gZnJvbSAnLi9FeHQvZGF0YXZpZXcvcHVsbHJlZnJlc2gvQmFyJztcbmV4cG9ydCBjbGFzcyBFeHRQdWxscmVmcmVzaGJhck1ldGFEYXRhIGV4dGVuZHMgRXh0X2RhdGF2aWV3X3B1bGxyZWZyZXNoX0JhciB7XG4gICAgcHVibGljIHN0YXRpYyBQUk9QRVJUSUVTOiBzdHJpbmdbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlRTOiBhbnlbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlROQU1FUzogc3RyaW5nW10gPSBbXTtcbiAgICBzdGF0aWMgZ2V0QWxsKCkge1xuICAgICAgICBFeHRQdWxscmVmcmVzaGJhck1ldGFEYXRhLlBST1BFUlRJRVMgPSBFeHRfZGF0YXZpZXdfcHVsbHJlZnJlc2hfQmFyLmdldFByb3BlcnRpZXMoRXh0UHVsbHJlZnJlc2hiYXJNZXRhRGF0YS5QUk9QRVJUSUVTKTtcbiAgICAgICAgRXh0UHVsbHJlZnJlc2hiYXJNZXRhRGF0YS5FVkVOVFMgPSBFeHRfZGF0YXZpZXdfcHVsbHJlZnJlc2hfQmFyLmdldEV2ZW50cyhFeHRQdWxscmVmcmVzaGJhck1ldGFEYXRhLkVWRU5UUyk7XG4gICAgICAgIEV4dFB1bGxyZWZyZXNoYmFyTWV0YURhdGEuRVZFTlRTLmZvckVhY2goIChldmVudDogYW55KSA9PiB7XG4gICAgICAgICAgICBFeHRQdWxscmVmcmVzaGJhck1ldGFEYXRhLkVWRU5UTkFNRVMucHVzaChldmVudC5uYW1lKTtcbiAgICAgICAgfSlcbiAgICAgfVxufVxuKGZ1bmN0aW9uICgpIHtFeHRQdWxscmVmcmVzaGJhck1ldGFEYXRhLmdldEFsbCgpO30pKCk7XG5cbmltcG9ydCB7IEVuZ0Jhc2UgfSBmcm9tICcuL2VuZy1iYXNlJztcbmltcG9ydCB7XG4gIEhvc3QsXG4gIE9wdGlvbmFsLFxuICBTa2lwU2VsZixcbiAgLy9PdXRwdXQsXG4gIC8vT25Jbml0LFxuICAvL0FmdGVyVmlld0luaXQsXG4gIC8vT25DaGFuZ2VzLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIGZvcndhcmRSZWYsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2V4dC1wdWxscmVmcmVzaGJhcicsXG4gIGlucHV0czogRXh0UHVsbHJlZnJlc2hiYXJNZXRhRGF0YS5QUk9QRVJUSUVTLFxuICBvdXRwdXRzOiBFeHRQdWxscmVmcmVzaGJhck1ldGFEYXRhLkVWRU5UTkFNRVMsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBFbmdCYXNlLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBFeHRQdWxscmVmcmVzaGJhckNvbXBvbmVudCl9XSxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGU+PC9uZy10ZW1wbGF0ZT4nXG59KVxuZXhwb3J0IGNsYXNzIEV4dFB1bGxyZWZyZXNoYmFyQ29tcG9uZW50IGV4dGVuZHMgRW5nQmFzZSB7XG4gICAgeHR5cGU6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZVJlZjogRWxlbWVudFJlZixcbiAgICAgICAgQEhvc3QoKSBAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBob3N0Q29tcG9uZW50OiBFbmdCYXNlXG4gICAgKXtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBlUmVmLFxuICAgICAgICAgICAgaG9zdENvbXBvbmVudCxcbiAgICAgICAgICAgIEV4dFB1bGxyZWZyZXNoYmFyTWV0YURhdGEuUFJPUEVSVElFUyxcbiAgICAgICAgICAgIEV4dFB1bGxyZWZyZXNoYmFyTWV0YURhdGEuRVZFTlRTXG4gICAgICAgIClcbiAgICAgICAgdGhpcy54dHlwZSA9ICdwdWxscmVmcmVzaGJhcidcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uSW5pdCgpXG4gICAgfVxuXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5iYXNlQWZ0ZXJWaWV3SW5pdCgpXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5iYXNlT25DaGFuZ2VzKGNoYW5nZXMpXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLmJhc2VPbkRlc3Ryb3koKVxuICAgIH1cbn1cbiJdfQ==