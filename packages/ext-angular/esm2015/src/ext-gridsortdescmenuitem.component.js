var ExtGridsortdescmenuitemComponent_1;
import * as tslib_1 from "tslib";
import { Ext_grid_menu_SortDesc } from './Ext/grid/menu/SortDesc';
export class ExtGridsortdescmenuitemMetaData extends Ext_grid_menu_SortDesc {
    static getAll() {
        ExtGridsortdescmenuitemMetaData.PROPERTIES = Ext_grid_menu_SortDesc.getProperties(ExtGridsortdescmenuitemMetaData.PROPERTIES);
        ExtGridsortdescmenuitemMetaData.EVENTS = Ext_grid_menu_SortDesc.getEvents(ExtGridsortdescmenuitemMetaData.EVENTS);
        ExtGridsortdescmenuitemMetaData.EVENTS.forEach((event) => {
            ExtGridsortdescmenuitemMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGridsortdescmenuitemMetaData.PROPERTIES = [];
ExtGridsortdescmenuitemMetaData.EVENTS = [];
ExtGridsortdescmenuitemMetaData.EVENTNAMES = [];
(function () { ExtGridsortdescmenuitemMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtGridsortdescmenuitemComponent = ExtGridsortdescmenuitemComponent_1 = class ExtGridsortdescmenuitemComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGridsortdescmenuitemMetaData.PROPERTIES, ExtGridsortdescmenuitemMetaData.EVENTS);
        this.xtype = 'gridsortdescmenuitem';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGridsortdescmenuitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGridsortdescmenuitemComponent = ExtGridsortdescmenuitemComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-gridsortdescmenuitem',
        inputs: ExtGridsortdescmenuitemMetaData.PROPERTIES,
        outputs: ExtGridsortdescmenuitemMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGridsortdescmenuitemComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGridsortdescmenuitemComponent);
export { ExtGridsortdescmenuitemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LWdyaWRzb3J0ZGVzY21lbnVpdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzZW5jaGEvZXh0LWFuZ3VsYXIvIiwic291cmNlcyI6WyJzcmMvZXh0LWdyaWRzb3J0ZGVzY21lbnVpdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sT0FBTywrQkFBZ0MsU0FBUSxzQkFBc0I7SUFJdkUsTUFBTSxDQUFDLE1BQU07UUFDVCwrQkFBK0IsQ0FBQyxVQUFVLEdBQUcsc0JBQXNCLENBQUMsYUFBYSxDQUFDLCtCQUErQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzlILCtCQUErQixDQUFDLE1BQU0sR0FBRyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsK0JBQStCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEgsK0JBQStCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQzNELCtCQUErQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hFLENBQUMsQ0FBQyxDQUFBO0lBQ0wsQ0FBQzs7QUFUWSwwQ0FBVSxHQUFhLEVBQUUsQ0FBQztBQUMxQixzQ0FBTSxHQUFVLEVBQUUsQ0FBQztBQUNuQiwwQ0FBVSxHQUFhLEVBQUUsQ0FBQztBQVM1QyxDQUFDLGNBQWEsK0JBQStCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBRTVELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUNMLElBQUksRUFDSixRQUFRLEVBQ1IsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixTQUFTLEVBQ1QsVUFBVSxFQUNWLFVBQVUsRUFDVixhQUFhLEVBQ2QsTUFBTSxlQUFlLENBQUM7QUFTdkIsSUFBYSxnQ0FBZ0Msd0NBQTdDLE1BQWEsZ0NBQWlDLFNBQVEsT0FBTztJQUV6RCxZQUNJLElBQWdCLEVBQ2dCLGFBQXNCO1FBRXRELEtBQUssQ0FDRCxJQUFJLEVBQ0osYUFBYSxFQUNiLCtCQUErQixDQUFDLFVBQVUsRUFDMUMsK0JBQStCLENBQUMsTUFBTSxDQUN6QyxDQUFBO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxzQkFBc0IsQ0FBQTtJQUN2QyxDQUFDO0lBRU0sUUFBUTtRQUNYLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNyQixDQUFDO0lBRU0sZUFBZTtRQUNsQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQTtJQUM1QixDQUFDO0lBRU0sV0FBVyxDQUFDLE9BQXNCO1FBQ3JDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDL0IsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7SUFDeEIsQ0FBQztDQUNKLENBQUE7O1lBM0JhLFVBQVU7WUFDK0IsT0FBTyx1QkFBckQsSUFBSSxZQUFJLFFBQVEsWUFBSSxRQUFROztBQUp4QixnQ0FBZ0M7SUFQNUMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLDBCQUEwQjtRQUNwQyxNQUFNLEVBQUUsK0JBQStCLENBQUMsVUFBVTtRQUNsRCxPQUFPLEVBQUUsK0JBQStCLENBQUMsVUFBVTtRQUNuRCxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxrQ0FBZ0MsQ0FBQyxFQUFDLENBQUM7UUFDaEcsUUFBUSxFQUFFLDZCQUE2QjtLQUN4QyxDQUFDO0lBS08sbUJBQUEsSUFBSSxFQUFFLENBQUEsRUFBRSxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLFFBQVEsRUFBRSxDQUFBOzZDQUR6QixVQUFVO1FBQytCLE9BQU87R0FKakQsZ0NBQWdDLENBOEI1QztTQTlCWSxnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRfZ3JpZF9tZW51X1NvcnREZXNjIH0gZnJvbSAnLi9FeHQvZ3JpZC9tZW51L1NvcnREZXNjJztcbmV4cG9ydCBjbGFzcyBFeHRHcmlkc29ydGRlc2NtZW51aXRlbU1ldGFEYXRhIGV4dGVuZHMgRXh0X2dyaWRfbWVudV9Tb3J0RGVzYyB7XG4gICAgcHVibGljIHN0YXRpYyBQUk9QRVJUSUVTOiBzdHJpbmdbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlRTOiBhbnlbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlROQU1FUzogc3RyaW5nW10gPSBbXTtcbiAgICBzdGF0aWMgZ2V0QWxsKCkge1xuICAgICAgICBFeHRHcmlkc29ydGRlc2NtZW51aXRlbU1ldGFEYXRhLlBST1BFUlRJRVMgPSBFeHRfZ3JpZF9tZW51X1NvcnREZXNjLmdldFByb3BlcnRpZXMoRXh0R3JpZHNvcnRkZXNjbWVudWl0ZW1NZXRhRGF0YS5QUk9QRVJUSUVTKTtcbiAgICAgICAgRXh0R3JpZHNvcnRkZXNjbWVudWl0ZW1NZXRhRGF0YS5FVkVOVFMgPSBFeHRfZ3JpZF9tZW51X1NvcnREZXNjLmdldEV2ZW50cyhFeHRHcmlkc29ydGRlc2NtZW51aXRlbU1ldGFEYXRhLkVWRU5UUyk7XG4gICAgICAgIEV4dEdyaWRzb3J0ZGVzY21lbnVpdGVtTWV0YURhdGEuRVZFTlRTLmZvckVhY2goIChldmVudDogYW55KSA9PiB7XG4gICAgICAgICAgICBFeHRHcmlkc29ydGRlc2NtZW51aXRlbU1ldGFEYXRhLkVWRU5UTkFNRVMucHVzaChldmVudC5uYW1lKTtcbiAgICAgICAgfSlcbiAgICAgfVxufVxuKGZ1bmN0aW9uICgpIHtFeHRHcmlkc29ydGRlc2NtZW51aXRlbU1ldGFEYXRhLmdldEFsbCgpO30pKCk7XG5cbmltcG9ydCB7IEVuZ0Jhc2UgfSBmcm9tICcuL2VuZy1iYXNlJztcbmltcG9ydCB7XG4gIEhvc3QsXG4gIE9wdGlvbmFsLFxuICBTa2lwU2VsZixcbiAgLy9PdXRwdXQsXG4gIC8vT25Jbml0LFxuICAvL0FmdGVyVmlld0luaXQsXG4gIC8vT25DaGFuZ2VzLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIGZvcndhcmRSZWYsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2V4dC1ncmlkc29ydGRlc2NtZW51aXRlbScsXG4gIGlucHV0czogRXh0R3JpZHNvcnRkZXNjbWVudWl0ZW1NZXRhRGF0YS5QUk9QRVJUSUVTLFxuICBvdXRwdXRzOiBFeHRHcmlkc29ydGRlc2NtZW51aXRlbU1ldGFEYXRhLkVWRU5UTkFNRVMsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBFbmdCYXNlLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBFeHRHcmlkc29ydGRlc2NtZW51aXRlbUNvbXBvbmVudCl9XSxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGU+PC9uZy10ZW1wbGF0ZT4nXG59KVxuZXhwb3J0IGNsYXNzIEV4dEdyaWRzb3J0ZGVzY21lbnVpdGVtQ29tcG9uZW50IGV4dGVuZHMgRW5nQmFzZSB7XG4gICAgeHR5cGU6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZVJlZjogRWxlbWVudFJlZixcbiAgICAgICAgQEhvc3QoKSBAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBob3N0Q29tcG9uZW50OiBFbmdCYXNlXG4gICAgKXtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBlUmVmLFxuICAgICAgICAgICAgaG9zdENvbXBvbmVudCxcbiAgICAgICAgICAgIEV4dEdyaWRzb3J0ZGVzY21lbnVpdGVtTWV0YURhdGEuUFJPUEVSVElFUyxcbiAgICAgICAgICAgIEV4dEdyaWRzb3J0ZGVzY21lbnVpdGVtTWV0YURhdGEuRVZFTlRTXG4gICAgICAgIClcbiAgICAgICAgdGhpcy54dHlwZSA9ICdncmlkc29ydGRlc2NtZW51aXRlbSdcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uSW5pdCgpXG4gICAgfVxuXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5iYXNlQWZ0ZXJWaWV3SW5pdCgpXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5iYXNlT25DaGFuZ2VzKGNoYW5nZXMpXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLmJhc2VPbkRlc3Ryb3koKVxuICAgIH1cbn1cbiJdfQ==