var ExtColorpickercolorpreviewComponent_1;
import * as tslib_1 from "tslib";
import { Ext_ux_colorpick_ColorPreview } from './Ext/ux/colorpick/ColorPreview';
export class ExtColorpickercolorpreviewMetaData extends Ext_ux_colorpick_ColorPreview {
    static getAll() {
        ExtColorpickercolorpreviewMetaData.PROPERTIES = Ext_ux_colorpick_ColorPreview.getProperties(ExtColorpickercolorpreviewMetaData.PROPERTIES);
        ExtColorpickercolorpreviewMetaData.EVENTS = Ext_ux_colorpick_ColorPreview.getEvents(ExtColorpickercolorpreviewMetaData.EVENTS);
        ExtColorpickercolorpreviewMetaData.EVENTS.forEach((event) => {
            ExtColorpickercolorpreviewMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtColorpickercolorpreviewMetaData.PROPERTIES = [];
ExtColorpickercolorpreviewMetaData.EVENTS = [];
ExtColorpickercolorpreviewMetaData.EVENTNAMES = [];
(function () { ExtColorpickercolorpreviewMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtColorpickercolorpreviewComponent = ExtColorpickercolorpreviewComponent_1 = class ExtColorpickercolorpreviewComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtColorpickercolorpreviewMetaData.PROPERTIES, ExtColorpickercolorpreviewMetaData.EVENTS);
        this.xtype = 'colorpickercolorpreview';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtColorpickercolorpreviewComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtColorpickercolorpreviewComponent = ExtColorpickercolorpreviewComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-colorpickercolorpreview',
        inputs: ExtColorpickercolorpreviewMetaData.PROPERTIES,
        outputs: ExtColorpickercolorpreviewMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtColorpickercolorpreviewComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtColorpickercolorpreviewComponent);
export { ExtColorpickercolorpreviewComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LWNvbG9ycGlja2VyY29sb3JwcmV2aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzZW5jaGEvZXh0LWFuZ3VsYXIvIiwic291cmNlcyI6WyJzcmMvZXh0LWNvbG9ycGlja2VyY29sb3JwcmV2aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2hGLE1BQU0sT0FBTyxrQ0FBbUMsU0FBUSw2QkFBNkI7SUFJakYsTUFBTSxDQUFDLE1BQU07UUFDVCxrQ0FBa0MsQ0FBQyxVQUFVLEdBQUcsNkJBQTZCLENBQUMsYUFBYSxDQUFDLGtDQUFrQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzNJLGtDQUFrQyxDQUFDLE1BQU0sR0FBRyw2QkFBNkIsQ0FBQyxTQUFTLENBQUMsa0NBQWtDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0gsa0NBQWtDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQzlELGtDQUFrQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25FLENBQUMsQ0FBQyxDQUFBO0lBQ0wsQ0FBQzs7QUFUWSw2Q0FBVSxHQUFhLEVBQUUsQ0FBQztBQUMxQix5Q0FBTSxHQUFVLEVBQUUsQ0FBQztBQUNuQiw2Q0FBVSxHQUFhLEVBQUUsQ0FBQztBQVM1QyxDQUFDLGNBQWEsa0NBQWtDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBRS9ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUNMLElBQUksRUFDSixRQUFRLEVBQ1IsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixTQUFTLEVBQ1QsVUFBVSxFQUNWLFVBQVUsRUFDVixhQUFhLEVBQ2QsTUFBTSxlQUFlLENBQUM7QUFTdkIsSUFBYSxtQ0FBbUMsMkNBQWhELE1BQWEsbUNBQW9DLFNBQVEsT0FBTztJQUU1RCxZQUNJLElBQWdCLEVBQ2dCLGFBQXNCO1FBRXRELEtBQUssQ0FDRCxJQUFJLEVBQ0osYUFBYSxFQUNiLGtDQUFrQyxDQUFDLFVBQVUsRUFDN0Msa0NBQWtDLENBQUMsTUFBTSxDQUM1QyxDQUFBO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyx5QkFBeUIsQ0FBQTtJQUMxQyxDQUFDO0lBRU0sUUFBUTtRQUNYLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNyQixDQUFDO0lBRU0sZUFBZTtRQUNsQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQTtJQUM1QixDQUFDO0lBRU0sV0FBVyxDQUFDLE9BQXNCO1FBQ3JDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDL0IsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7SUFDeEIsQ0FBQztDQUNKLENBQUE7O1lBM0JhLFVBQVU7WUFDK0IsT0FBTyx1QkFBckQsSUFBSSxZQUFJLFFBQVEsWUFBSSxRQUFROztBQUp4QixtQ0FBbUM7SUFQL0MsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLDZCQUE2QjtRQUN2QyxNQUFNLEVBQUUsa0NBQWtDLENBQUMsVUFBVTtRQUNyRCxPQUFPLEVBQUUsa0NBQWtDLENBQUMsVUFBVTtRQUN0RCxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxxQ0FBbUMsQ0FBQyxFQUFDLENBQUM7UUFDbkcsUUFBUSxFQUFFLDZCQUE2QjtLQUN4QyxDQUFDO0lBS08sbUJBQUEsSUFBSSxFQUFFLENBQUEsRUFBRSxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLFFBQVEsRUFBRSxDQUFBOzZDQUR6QixVQUFVO1FBQytCLE9BQU87R0FKakQsbUNBQW1DLENBOEIvQztTQTlCWSxtQ0FBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRfdXhfY29sb3JwaWNrX0NvbG9yUHJldmlldyB9IGZyb20gJy4vRXh0L3V4L2NvbG9ycGljay9Db2xvclByZXZpZXcnO1xuZXhwb3J0IGNsYXNzIEV4dENvbG9ycGlja2VyY29sb3JwcmV2aWV3TWV0YURhdGEgZXh0ZW5kcyBFeHRfdXhfY29sb3JwaWNrX0NvbG9yUHJldmlldyB7XG4gICAgcHVibGljIHN0YXRpYyBQUk9QRVJUSUVTOiBzdHJpbmdbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlRTOiBhbnlbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlROQU1FUzogc3RyaW5nW10gPSBbXTtcbiAgICBzdGF0aWMgZ2V0QWxsKCkge1xuICAgICAgICBFeHRDb2xvcnBpY2tlcmNvbG9ycHJldmlld01ldGFEYXRhLlBST1BFUlRJRVMgPSBFeHRfdXhfY29sb3JwaWNrX0NvbG9yUHJldmlldy5nZXRQcm9wZXJ0aWVzKEV4dENvbG9ycGlja2VyY29sb3JwcmV2aWV3TWV0YURhdGEuUFJPUEVSVElFUyk7XG4gICAgICAgIEV4dENvbG9ycGlja2VyY29sb3JwcmV2aWV3TWV0YURhdGEuRVZFTlRTID0gRXh0X3V4X2NvbG9ycGlja19Db2xvclByZXZpZXcuZ2V0RXZlbnRzKEV4dENvbG9ycGlja2VyY29sb3JwcmV2aWV3TWV0YURhdGEuRVZFTlRTKTtcbiAgICAgICAgRXh0Q29sb3JwaWNrZXJjb2xvcnByZXZpZXdNZXRhRGF0YS5FVkVOVFMuZm9yRWFjaCggKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgICAgIEV4dENvbG9ycGlja2VyY29sb3JwcmV2aWV3TWV0YURhdGEuRVZFTlROQU1FUy5wdXNoKGV2ZW50Lm5hbWUpO1xuICAgICAgICB9KVxuICAgICB9XG59XG4oZnVuY3Rpb24gKCkge0V4dENvbG9ycGlja2VyY29sb3JwcmV2aWV3TWV0YURhdGEuZ2V0QWxsKCk7fSkoKTtcblxuaW1wb3J0IHsgRW5nQmFzZSB9IGZyb20gJy4vZW5nLWJhc2UnO1xuaW1wb3J0IHtcbiAgSG9zdCxcbiAgT3B0aW9uYWwsXG4gIFNraXBTZWxmLFxuICAvL091dHB1dCxcbiAgLy9PbkluaXQsXG4gIC8vQWZ0ZXJWaWV3SW5pdCxcbiAgLy9PbkNoYW5nZXMsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgZm9yd2FyZFJlZixcbiAgU2ltcGxlQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZXh0LWNvbG9ycGlja2VyY29sb3JwcmV2aWV3JyxcbiAgaW5wdXRzOiBFeHRDb2xvcnBpY2tlcmNvbG9ycHJldmlld01ldGFEYXRhLlBST1BFUlRJRVMsXG4gIG91dHB1dHM6IEV4dENvbG9ycGlja2VyY29sb3JwcmV2aWV3TWV0YURhdGEuRVZFTlROQU1FUyxcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IEVuZ0Jhc2UsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEV4dENvbG9ycGlja2VyY29sb3JwcmV2aWV3Q29tcG9uZW50KX1dLFxuICB0ZW1wbGF0ZTogJzxuZy10ZW1wbGF0ZT48L25nLXRlbXBsYXRlPidcbn0pXG5leHBvcnQgY2xhc3MgRXh0Q29sb3JwaWNrZXJjb2xvcnByZXZpZXdDb21wb25lbnQgZXh0ZW5kcyBFbmdCYXNlIHtcbiAgICB4dHlwZTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBlUmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBASG9zdCgpIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIGhvc3RDb21wb25lbnQ6IEVuZ0Jhc2VcbiAgICApe1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIGVSZWYsXG4gICAgICAgICAgICBob3N0Q29tcG9uZW50LFxuICAgICAgICAgICAgRXh0Q29sb3JwaWNrZXJjb2xvcnByZXZpZXdNZXRhRGF0YS5QUk9QRVJUSUVTLFxuICAgICAgICAgICAgRXh0Q29sb3JwaWNrZXJjb2xvcnByZXZpZXdNZXRhRGF0YS5FVkVOVFNcbiAgICAgICAgKVxuICAgICAgICB0aGlzLnh0eXBlID0gJ2NvbG9ycGlja2VyY29sb3JwcmV2aWV3J1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5iYXNlT25Jbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICB0aGlzLmJhc2VBZnRlclZpZXdJbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICB0aGlzLmJhc2VPbkNoYW5nZXMoY2hhbmdlcylcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uRGVzdHJveSgpXG4gICAgfVxufVxuIl19