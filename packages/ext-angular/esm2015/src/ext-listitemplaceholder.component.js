var ExtListitemplaceholderComponent_1;
import * as tslib_1 from "tslib";
import { Ext_dataview_ListItemPlaceholder } from './Ext/dataview/ListItemPlaceholder';
export class ExtListitemplaceholderMetaData extends Ext_dataview_ListItemPlaceholder {
    static getAll() {
        ExtListitemplaceholderMetaData.PROPERTIES = Ext_dataview_ListItemPlaceholder.getProperties(ExtListitemplaceholderMetaData.PROPERTIES);
        ExtListitemplaceholderMetaData.EVENTS = Ext_dataview_ListItemPlaceholder.getEvents(ExtListitemplaceholderMetaData.EVENTS);
        ExtListitemplaceholderMetaData.EVENTS.forEach((event) => {
            ExtListitemplaceholderMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtListitemplaceholderMetaData.PROPERTIES = [];
ExtListitemplaceholderMetaData.EVENTS = [];
ExtListitemplaceholderMetaData.EVENTNAMES = [];
(function () { ExtListitemplaceholderMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtListitemplaceholderComponent = ExtListitemplaceholderComponent_1 = class ExtListitemplaceholderComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtListitemplaceholderMetaData.PROPERTIES, ExtListitemplaceholderMetaData.EVENTS);
        this.xtype = 'listitemplaceholder';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtListitemplaceholderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtListitemplaceholderComponent = ExtListitemplaceholderComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-listitemplaceholder',
        inputs: ExtListitemplaceholderMetaData.PROPERTIES,
        outputs: ExtListitemplaceholderMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtListitemplaceholderComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtListitemplaceholderComponent);
export { ExtListitemplaceholderComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LWxpc3RpdGVtcGxhY2Vob2xkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNlbmNoYS9leHQtYW5ndWxhci8iLCJzb3VyY2VzIjpbInNyYy9leHQtbGlzdGl0ZW1wbGFjZWhvbGRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUN0RixNQUFNLE9BQU8sOEJBQStCLFNBQVEsZ0NBQWdDO0lBSWhGLE1BQU0sQ0FBQyxNQUFNO1FBQ1QsOEJBQThCLENBQUMsVUFBVSxHQUFHLGdDQUFnQyxDQUFDLGFBQWEsQ0FBQyw4QkFBOEIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN0SSw4QkFBOEIsQ0FBQyxNQUFNLEdBQUcsZ0NBQWdDLENBQUMsU0FBUyxDQUFDLDhCQUE4QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFILDhCQUE4QixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUUsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUMxRCw4QkFBOEIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUMsQ0FBQTtJQUNMLENBQUM7O0FBVFkseUNBQVUsR0FBYSxFQUFFLENBQUM7QUFDMUIscUNBQU0sR0FBVSxFQUFFLENBQUM7QUFDbkIseUNBQVUsR0FBYSxFQUFFLENBQUM7QUFTNUMsQ0FBQyxjQUFhLDhCQUE4QixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUUzRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3JDLE9BQU8sRUFDTCxJQUFJLEVBQ0osUUFBUSxFQUNSLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osU0FBUyxFQUNULFVBQVUsRUFDVixVQUFVLEVBQ1YsYUFBYSxFQUNkLE1BQU0sZUFBZSxDQUFDO0FBU3ZCLElBQWEsK0JBQStCLHVDQUE1QyxNQUFhLCtCQUFnQyxTQUFRLE9BQU87SUFFeEQsWUFDSSxJQUFnQixFQUNnQixhQUFzQjtRQUV0RCxLQUFLLENBQ0QsSUFBSSxFQUNKLGFBQWEsRUFDYiw4QkFBOEIsQ0FBQyxVQUFVLEVBQ3pDLDhCQUE4QixDQUFDLE1BQU0sQ0FDeEMsQ0FBQTtRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcscUJBQXFCLENBQUE7SUFDdEMsQ0FBQztJQUVNLFFBQVE7UUFDWCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDckIsQ0FBQztJQUVNLGVBQWU7UUFDbEIsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUE7SUFDNUIsQ0FBQztJQUVNLFdBQVcsQ0FBQyxPQUFzQjtRQUNyQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQy9CLENBQUM7SUFFTSxXQUFXO1FBQ2QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQ3hCLENBQUM7Q0FDSixDQUFBOztZQTNCYSxVQUFVO1lBQytCLE9BQU8sdUJBQXJELElBQUksWUFBSSxRQUFRLFlBQUksUUFBUTs7QUFKeEIsK0JBQStCO0lBUDNDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSx5QkFBeUI7UUFDbkMsTUFBTSxFQUFFLDhCQUE4QixDQUFDLFVBQVU7UUFDakQsT0FBTyxFQUFFLDhCQUE4QixDQUFDLFVBQVU7UUFDbEQsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsaUNBQStCLENBQUMsRUFBQyxDQUFDO1FBQy9GLFFBQVEsRUFBRSw2QkFBNkI7S0FDeEMsQ0FBQztJQUtPLG1CQUFBLElBQUksRUFBRSxDQUFBLEVBQUUsbUJBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxtQkFBQSxRQUFRLEVBQUUsQ0FBQTs2Q0FEekIsVUFBVTtRQUMrQixPQUFPO0dBSmpELCtCQUErQixDQThCM0M7U0E5QlksK0JBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXh0X2RhdGF2aWV3X0xpc3RJdGVtUGxhY2Vob2xkZXIgfSBmcm9tICcuL0V4dC9kYXRhdmlldy9MaXN0SXRlbVBsYWNlaG9sZGVyJztcbmV4cG9ydCBjbGFzcyBFeHRMaXN0aXRlbXBsYWNlaG9sZGVyTWV0YURhdGEgZXh0ZW5kcyBFeHRfZGF0YXZpZXdfTGlzdEl0ZW1QbGFjZWhvbGRlciB7XG4gICAgcHVibGljIHN0YXRpYyBQUk9QRVJUSUVTOiBzdHJpbmdbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlRTOiBhbnlbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlROQU1FUzogc3RyaW5nW10gPSBbXTtcbiAgICBzdGF0aWMgZ2V0QWxsKCkge1xuICAgICAgICBFeHRMaXN0aXRlbXBsYWNlaG9sZGVyTWV0YURhdGEuUFJPUEVSVElFUyA9IEV4dF9kYXRhdmlld19MaXN0SXRlbVBsYWNlaG9sZGVyLmdldFByb3BlcnRpZXMoRXh0TGlzdGl0ZW1wbGFjZWhvbGRlck1ldGFEYXRhLlBST1BFUlRJRVMpO1xuICAgICAgICBFeHRMaXN0aXRlbXBsYWNlaG9sZGVyTWV0YURhdGEuRVZFTlRTID0gRXh0X2RhdGF2aWV3X0xpc3RJdGVtUGxhY2Vob2xkZXIuZ2V0RXZlbnRzKEV4dExpc3RpdGVtcGxhY2Vob2xkZXJNZXRhRGF0YS5FVkVOVFMpO1xuICAgICAgICBFeHRMaXN0aXRlbXBsYWNlaG9sZGVyTWV0YURhdGEuRVZFTlRTLmZvckVhY2goIChldmVudDogYW55KSA9PiB7XG4gICAgICAgICAgICBFeHRMaXN0aXRlbXBsYWNlaG9sZGVyTWV0YURhdGEuRVZFTlROQU1FUy5wdXNoKGV2ZW50Lm5hbWUpO1xuICAgICAgICB9KVxuICAgICB9XG59XG4oZnVuY3Rpb24gKCkge0V4dExpc3RpdGVtcGxhY2Vob2xkZXJNZXRhRGF0YS5nZXRBbGwoKTt9KSgpO1xuXG5pbXBvcnQgeyBFbmdCYXNlIH0gZnJvbSAnLi9lbmctYmFzZSc7XG5pbXBvcnQge1xuICBIb3N0LFxuICBPcHRpb25hbCxcbiAgU2tpcFNlbGYsXG4gIC8vT3V0cHV0LFxuICAvL09uSW5pdCxcbiAgLy9BZnRlclZpZXdJbml0LFxuICAvL09uQ2hhbmdlcyxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBmb3J3YXJkUmVmLFxuICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdleHQtbGlzdGl0ZW1wbGFjZWhvbGRlcicsXG4gIGlucHV0czogRXh0TGlzdGl0ZW1wbGFjZWhvbGRlck1ldGFEYXRhLlBST1BFUlRJRVMsXG4gIG91dHB1dHM6IEV4dExpc3RpdGVtcGxhY2Vob2xkZXJNZXRhRGF0YS5FVkVOVE5BTUVTLFxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogRW5nQmFzZSwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRXh0TGlzdGl0ZW1wbGFjZWhvbGRlckNvbXBvbmVudCl9XSxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGU+PC9uZy10ZW1wbGF0ZT4nXG59KVxuZXhwb3J0IGNsYXNzIEV4dExpc3RpdGVtcGxhY2Vob2xkZXJDb21wb25lbnQgZXh0ZW5kcyBFbmdCYXNlIHtcbiAgICB4dHlwZTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBlUmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBASG9zdCgpIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIGhvc3RDb21wb25lbnQ6IEVuZ0Jhc2VcbiAgICApe1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIGVSZWYsXG4gICAgICAgICAgICBob3N0Q29tcG9uZW50LFxuICAgICAgICAgICAgRXh0TGlzdGl0ZW1wbGFjZWhvbGRlck1ldGFEYXRhLlBST1BFUlRJRVMsXG4gICAgICAgICAgICBFeHRMaXN0aXRlbXBsYWNlaG9sZGVyTWV0YURhdGEuRVZFTlRTXG4gICAgICAgIClcbiAgICAgICAgdGhpcy54dHlwZSA9ICdsaXN0aXRlbXBsYWNlaG9sZGVyJ1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5iYXNlT25Jbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICB0aGlzLmJhc2VBZnRlclZpZXdJbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICB0aGlzLmJhc2VPbkNoYW5nZXMoY2hhbmdlcylcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uRGVzdHJveSgpXG4gICAgfVxufVxuIl19