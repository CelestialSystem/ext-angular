var ExtGridshowingroupsmenuitemComponent_1;
import * as tslib_1 from "tslib";
import { Ext_grid_menu_ShowInGroups } from './Ext/grid/menu/ShowInGroups';
export class ExtGridshowingroupsmenuitemMetaData extends Ext_grid_menu_ShowInGroups {
    static getAll() {
        ExtGridshowingroupsmenuitemMetaData.PROPERTIES = Ext_grid_menu_ShowInGroups.getProperties(ExtGridshowingroupsmenuitemMetaData.PROPERTIES);
        ExtGridshowingroupsmenuitemMetaData.EVENTS = Ext_grid_menu_ShowInGroups.getEvents(ExtGridshowingroupsmenuitemMetaData.EVENTS);
        ExtGridshowingroupsmenuitemMetaData.EVENTS.forEach((event) => {
            ExtGridshowingroupsmenuitemMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGridshowingroupsmenuitemMetaData.PROPERTIES = [];
ExtGridshowingroupsmenuitemMetaData.EVENTS = [];
ExtGridshowingroupsmenuitemMetaData.EVENTNAMES = [];
(function () { ExtGridshowingroupsmenuitemMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtGridshowingroupsmenuitemComponent = ExtGridshowingroupsmenuitemComponent_1 = class ExtGridshowingroupsmenuitemComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGridshowingroupsmenuitemMetaData.PROPERTIES, ExtGridshowingroupsmenuitemMetaData.EVENTS);
        this.xtype = 'gridshowingroupsmenuitem';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGridshowingroupsmenuitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGridshowingroupsmenuitemComponent = ExtGridshowingroupsmenuitemComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-gridshowingroupsmenuitem',
        inputs: ExtGridshowingroupsmenuitemMetaData.PROPERTIES,
        outputs: ExtGridshowingroupsmenuitemMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGridshowingroupsmenuitemComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGridshowingroupsmenuitemComponent);
export { ExtGridshowingroupsmenuitemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LWdyaWRzaG93aW5ncm91cHNtZW51aXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac2VuY2hhL2V4dC1hbmd1bGFyLyIsInNvdXJjZXMiOlsic3JjL2V4dC1ncmlkc2hvd2luZ3JvdXBzbWVudWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDMUUsTUFBTSxPQUFPLG1DQUFvQyxTQUFRLDBCQUEwQjtJQUkvRSxNQUFNLENBQUMsTUFBTTtRQUNULG1DQUFtQyxDQUFDLFVBQVUsR0FBRywwQkFBMEIsQ0FBQyxhQUFhLENBQUMsbUNBQW1DLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDMUksbUNBQW1DLENBQUMsTUFBTSxHQUFHLDBCQUEwQixDQUFDLFNBQVMsQ0FBQyxtQ0FBbUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5SCxtQ0FBbUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFFLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDL0QsbUNBQW1DLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEUsQ0FBQyxDQUFDLENBQUE7SUFDTCxDQUFDOztBQVRZLDhDQUFVLEdBQWEsRUFBRSxDQUFDO0FBQzFCLDBDQUFNLEdBQVUsRUFBRSxDQUFDO0FBQ25CLDhDQUFVLEdBQWEsRUFBRSxDQUFDO0FBUzVDLENBQUMsY0FBYSxtQ0FBbUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFaEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyQyxPQUFPLEVBQ0wsSUFBSSxFQUNKLFFBQVEsRUFDUixRQUFRO0FBQ1IsU0FBUztBQUNULFNBQVM7QUFDVCxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLFNBQVMsRUFDVCxVQUFVLEVBQ1YsVUFBVSxFQUNWLGFBQWEsRUFDZCxNQUFNLGVBQWUsQ0FBQztBQVN2QixJQUFhLG9DQUFvQyw0Q0FBakQsTUFBYSxvQ0FBcUMsU0FBUSxPQUFPO0lBRTdELFlBQ0ksSUFBZ0IsRUFDZ0IsYUFBc0I7UUFFdEQsS0FBSyxDQUNELElBQUksRUFDSixhQUFhLEVBQ2IsbUNBQW1DLENBQUMsVUFBVSxFQUM5QyxtQ0FBbUMsQ0FBQyxNQUFNLENBQzdDLENBQUE7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLDBCQUEwQixDQUFBO0lBQzNDLENBQUM7SUFFTSxRQUFRO1FBQ1gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQ3JCLENBQUM7SUFFTSxlQUFlO1FBQ2xCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFFTSxXQUFXLENBQUMsT0FBc0I7UUFDckMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBRU0sV0FBVztRQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQTtJQUN4QixDQUFDO0NBQ0osQ0FBQTs7WUEzQmEsVUFBVTtZQUMrQixPQUFPLHVCQUFyRCxJQUFJLFlBQUksUUFBUSxZQUFJLFFBQVE7O0FBSnhCLG9DQUFvQztJQVBoRCxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsOEJBQThCO1FBQ3hDLE1BQU0sRUFBRSxtQ0FBbUMsQ0FBQyxVQUFVO1FBQ3RELE9BQU8sRUFBRSxtQ0FBbUMsQ0FBQyxVQUFVO1FBQ3ZELFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHNDQUFvQyxDQUFDLEVBQUMsQ0FBQztRQUNwRyxRQUFRLEVBQUUsNkJBQTZCO0tBQ3hDLENBQUM7SUFLTyxtQkFBQSxJQUFJLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsbUJBQUEsUUFBUSxFQUFFLENBQUE7NkNBRHpCLFVBQVU7UUFDK0IsT0FBTztHQUpqRCxvQ0FBb0MsQ0E4QmhEO1NBOUJZLG9DQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dF9ncmlkX21lbnVfU2hvd0luR3JvdXBzIH0gZnJvbSAnLi9FeHQvZ3JpZC9tZW51L1Nob3dJbkdyb3Vwcyc7XG5leHBvcnQgY2xhc3MgRXh0R3JpZHNob3dpbmdyb3Vwc21lbnVpdGVtTWV0YURhdGEgZXh0ZW5kcyBFeHRfZ3JpZF9tZW51X1Nob3dJbkdyb3VwcyB7XG4gICAgcHVibGljIHN0YXRpYyBQUk9QRVJUSUVTOiBzdHJpbmdbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlRTOiBhbnlbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlROQU1FUzogc3RyaW5nW10gPSBbXTtcbiAgICBzdGF0aWMgZ2V0QWxsKCkge1xuICAgICAgICBFeHRHcmlkc2hvd2luZ3JvdXBzbWVudWl0ZW1NZXRhRGF0YS5QUk9QRVJUSUVTID0gRXh0X2dyaWRfbWVudV9TaG93SW5Hcm91cHMuZ2V0UHJvcGVydGllcyhFeHRHcmlkc2hvd2luZ3JvdXBzbWVudWl0ZW1NZXRhRGF0YS5QUk9QRVJUSUVTKTtcbiAgICAgICAgRXh0R3JpZHNob3dpbmdyb3Vwc21lbnVpdGVtTWV0YURhdGEuRVZFTlRTID0gRXh0X2dyaWRfbWVudV9TaG93SW5Hcm91cHMuZ2V0RXZlbnRzKEV4dEdyaWRzaG93aW5ncm91cHNtZW51aXRlbU1ldGFEYXRhLkVWRU5UUyk7XG4gICAgICAgIEV4dEdyaWRzaG93aW5ncm91cHNtZW51aXRlbU1ldGFEYXRhLkVWRU5UUy5mb3JFYWNoKCAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgRXh0R3JpZHNob3dpbmdyb3Vwc21lbnVpdGVtTWV0YURhdGEuRVZFTlROQU1FUy5wdXNoKGV2ZW50Lm5hbWUpO1xuICAgICAgICB9KVxuICAgICB9XG59XG4oZnVuY3Rpb24gKCkge0V4dEdyaWRzaG93aW5ncm91cHNtZW51aXRlbU1ldGFEYXRhLmdldEFsbCgpO30pKCk7XG5cbmltcG9ydCB7IEVuZ0Jhc2UgfSBmcm9tICcuL2VuZy1iYXNlJztcbmltcG9ydCB7XG4gIEhvc3QsXG4gIE9wdGlvbmFsLFxuICBTa2lwU2VsZixcbiAgLy9PdXRwdXQsXG4gIC8vT25Jbml0LFxuICAvL0FmdGVyVmlld0luaXQsXG4gIC8vT25DaGFuZ2VzLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIGZvcndhcmRSZWYsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2V4dC1ncmlkc2hvd2luZ3JvdXBzbWVudWl0ZW0nLFxuICBpbnB1dHM6IEV4dEdyaWRzaG93aW5ncm91cHNtZW51aXRlbU1ldGFEYXRhLlBST1BFUlRJRVMsXG4gIG91dHB1dHM6IEV4dEdyaWRzaG93aW5ncm91cHNtZW51aXRlbU1ldGFEYXRhLkVWRU5UTkFNRVMsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBFbmdCYXNlLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBFeHRHcmlkc2hvd2luZ3JvdXBzbWVudWl0ZW1Db21wb25lbnQpfV0sXG4gIHRlbXBsYXRlOiAnPG5nLXRlbXBsYXRlPjwvbmctdGVtcGxhdGU+J1xufSlcbmV4cG9ydCBjbGFzcyBFeHRHcmlkc2hvd2luZ3JvdXBzbWVudWl0ZW1Db21wb25lbnQgZXh0ZW5kcyBFbmdCYXNlIHtcbiAgICB4dHlwZTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBlUmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBASG9zdCgpIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIGhvc3RDb21wb25lbnQ6IEVuZ0Jhc2VcbiAgICApe1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIGVSZWYsXG4gICAgICAgICAgICBob3N0Q29tcG9uZW50LFxuICAgICAgICAgICAgRXh0R3JpZHNob3dpbmdyb3Vwc21lbnVpdGVtTWV0YURhdGEuUFJPUEVSVElFUyxcbiAgICAgICAgICAgIEV4dEdyaWRzaG93aW5ncm91cHNtZW51aXRlbU1ldGFEYXRhLkVWRU5UU1xuICAgICAgICApXG4gICAgICAgIHRoaXMueHR5cGUgPSAnZ3JpZHNob3dpbmdyb3Vwc21lbnVpdGVtJ1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5iYXNlT25Jbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICB0aGlzLmJhc2VBZnRlclZpZXdJbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICB0aGlzLmJhc2VPbkNoYW5nZXMoY2hhbmdlcylcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uRGVzdHJveSgpXG4gICAgfVxufVxuIl19