var ExtPullrefreshspinnerComponent_1;
import * as tslib_1 from "tslib";
import { Ext_dataview_pullrefresh_Spinner } from './Ext/dataview/pullrefresh/Spinner';
export class ExtPullrefreshspinnerMetaData extends Ext_dataview_pullrefresh_Spinner {
    static getAll() {
        ExtPullrefreshspinnerMetaData.PROPERTIES = Ext_dataview_pullrefresh_Spinner.getProperties(ExtPullrefreshspinnerMetaData.PROPERTIES);
        ExtPullrefreshspinnerMetaData.EVENTS = Ext_dataview_pullrefresh_Spinner.getEvents(ExtPullrefreshspinnerMetaData.EVENTS);
        ExtPullrefreshspinnerMetaData.EVENTS.forEach((event) => {
            ExtPullrefreshspinnerMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtPullrefreshspinnerMetaData.PROPERTIES = [];
ExtPullrefreshspinnerMetaData.EVENTS = [];
ExtPullrefreshspinnerMetaData.EVENTNAMES = [];
(function () { ExtPullrefreshspinnerMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtPullrefreshspinnerComponent = ExtPullrefreshspinnerComponent_1 = class ExtPullrefreshspinnerComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtPullrefreshspinnerMetaData.PROPERTIES, ExtPullrefreshspinnerMetaData.EVENTS);
        this.xtype = 'pullrefreshspinner';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtPullrefreshspinnerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtPullrefreshspinnerComponent = ExtPullrefreshspinnerComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-pullrefreshspinner',
        inputs: ExtPullrefreshspinnerMetaData.PROPERTIES,
        outputs: ExtPullrefreshspinnerMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtPullrefreshspinnerComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtPullrefreshspinnerComponent);
export { ExtPullrefreshspinnerComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LXB1bGxyZWZyZXNoc3Bpbm5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac2VuY2hhL2V4dC1hbmd1bGFyLyIsInNvdXJjZXMiOlsic3JjL2V4dC1wdWxscmVmcmVzaHNwaW5uZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDdEYsTUFBTSxPQUFPLDZCQUE4QixTQUFRLGdDQUFnQztJQUkvRSxNQUFNLENBQUMsTUFBTTtRQUNULDZCQUE2QixDQUFDLFVBQVUsR0FBRyxnQ0FBZ0MsQ0FBQyxhQUFhLENBQUMsNkJBQTZCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDcEksNkJBQTZCLENBQUMsTUFBTSxHQUFHLGdDQUFnQyxDQUFDLFNBQVMsQ0FBQyw2QkFBNkIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4SCw2QkFBNkIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFFLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDekQsNkJBQTZCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUQsQ0FBQyxDQUFDLENBQUE7SUFDTCxDQUFDOztBQVRZLHdDQUFVLEdBQWEsRUFBRSxDQUFDO0FBQzFCLG9DQUFNLEdBQVUsRUFBRSxDQUFDO0FBQ25CLHdDQUFVLEdBQWEsRUFBRSxDQUFDO0FBUzVDLENBQUMsY0FBYSw2QkFBNkIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFMUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyQyxPQUFPLEVBQ0wsSUFBSSxFQUNKLFFBQVEsRUFDUixRQUFRO0FBQ1IsU0FBUztBQUNULFNBQVM7QUFDVCxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLFNBQVMsRUFDVCxVQUFVLEVBQ1YsVUFBVSxFQUNWLGFBQWEsRUFDZCxNQUFNLGVBQWUsQ0FBQztBQVN2QixJQUFhLDhCQUE4QixzQ0FBM0MsTUFBYSw4QkFBK0IsU0FBUSxPQUFPO0lBRXZELFlBQ0ksSUFBZ0IsRUFDZ0IsYUFBc0I7UUFFdEQsS0FBSyxDQUNELElBQUksRUFDSixhQUFhLEVBQ2IsNkJBQTZCLENBQUMsVUFBVSxFQUN4Qyw2QkFBNkIsQ0FBQyxNQUFNLENBQ3ZDLENBQUE7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLG9CQUFvQixDQUFBO0lBQ3JDLENBQUM7SUFFTSxRQUFRO1FBQ1gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQ3JCLENBQUM7SUFFTSxlQUFlO1FBQ2xCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFFTSxXQUFXLENBQUMsT0FBc0I7UUFDckMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBRU0sV0FBVztRQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQTtJQUN4QixDQUFDO0NBQ0osQ0FBQTs7WUEzQmEsVUFBVTtZQUMrQixPQUFPLHVCQUFyRCxJQUFJLFlBQUksUUFBUSxZQUFJLFFBQVE7O0FBSnhCLDhCQUE4QjtJQVAxQyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsd0JBQXdCO1FBQ2xDLE1BQU0sRUFBRSw2QkFBNkIsQ0FBQyxVQUFVO1FBQ2hELE9BQU8sRUFBRSw2QkFBNkIsQ0FBQyxVQUFVO1FBQ2pELFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLGdDQUE4QixDQUFDLEVBQUMsQ0FBQztRQUM5RixRQUFRLEVBQUUsNkJBQTZCO0tBQ3hDLENBQUM7SUFLTyxtQkFBQSxJQUFJLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsbUJBQUEsUUFBUSxFQUFFLENBQUE7NkNBRHpCLFVBQVU7UUFDK0IsT0FBTztHQUpqRCw4QkFBOEIsQ0E4QjFDO1NBOUJZLDhCQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dF9kYXRhdmlld19wdWxscmVmcmVzaF9TcGlubmVyIH0gZnJvbSAnLi9FeHQvZGF0YXZpZXcvcHVsbHJlZnJlc2gvU3Bpbm5lcic7XG5leHBvcnQgY2xhc3MgRXh0UHVsbHJlZnJlc2hzcGlubmVyTWV0YURhdGEgZXh0ZW5kcyBFeHRfZGF0YXZpZXdfcHVsbHJlZnJlc2hfU3Bpbm5lciB7XG4gICAgcHVibGljIHN0YXRpYyBQUk9QRVJUSUVTOiBzdHJpbmdbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlRTOiBhbnlbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlROQU1FUzogc3RyaW5nW10gPSBbXTtcbiAgICBzdGF0aWMgZ2V0QWxsKCkge1xuICAgICAgICBFeHRQdWxscmVmcmVzaHNwaW5uZXJNZXRhRGF0YS5QUk9QRVJUSUVTID0gRXh0X2RhdGF2aWV3X3B1bGxyZWZyZXNoX1NwaW5uZXIuZ2V0UHJvcGVydGllcyhFeHRQdWxscmVmcmVzaHNwaW5uZXJNZXRhRGF0YS5QUk9QRVJUSUVTKTtcbiAgICAgICAgRXh0UHVsbHJlZnJlc2hzcGlubmVyTWV0YURhdGEuRVZFTlRTID0gRXh0X2RhdGF2aWV3X3B1bGxyZWZyZXNoX1NwaW5uZXIuZ2V0RXZlbnRzKEV4dFB1bGxyZWZyZXNoc3Bpbm5lck1ldGFEYXRhLkVWRU5UUyk7XG4gICAgICAgIEV4dFB1bGxyZWZyZXNoc3Bpbm5lck1ldGFEYXRhLkVWRU5UUy5mb3JFYWNoKCAoZXZlbnQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgRXh0UHVsbHJlZnJlc2hzcGlubmVyTWV0YURhdGEuRVZFTlROQU1FUy5wdXNoKGV2ZW50Lm5hbWUpO1xuICAgICAgICB9KVxuICAgICB9XG59XG4oZnVuY3Rpb24gKCkge0V4dFB1bGxyZWZyZXNoc3Bpbm5lck1ldGFEYXRhLmdldEFsbCgpO30pKCk7XG5cbmltcG9ydCB7IEVuZ0Jhc2UgfSBmcm9tICcuL2VuZy1iYXNlJztcbmltcG9ydCB7XG4gIEhvc3QsXG4gIE9wdGlvbmFsLFxuICBTa2lwU2VsZixcbiAgLy9PdXRwdXQsXG4gIC8vT25Jbml0LFxuICAvL0FmdGVyVmlld0luaXQsXG4gIC8vT25DaGFuZ2VzLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIGZvcndhcmRSZWYsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2V4dC1wdWxscmVmcmVzaHNwaW5uZXInLFxuICBpbnB1dHM6IEV4dFB1bGxyZWZyZXNoc3Bpbm5lck1ldGFEYXRhLlBST1BFUlRJRVMsXG4gIG91dHB1dHM6IEV4dFB1bGxyZWZyZXNoc3Bpbm5lck1ldGFEYXRhLkVWRU5UTkFNRVMsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBFbmdCYXNlLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBFeHRQdWxscmVmcmVzaHNwaW5uZXJDb21wb25lbnQpfV0sXG4gIHRlbXBsYXRlOiAnPG5nLXRlbXBsYXRlPjwvbmctdGVtcGxhdGU+J1xufSlcbmV4cG9ydCBjbGFzcyBFeHRQdWxscmVmcmVzaHNwaW5uZXJDb21wb25lbnQgZXh0ZW5kcyBFbmdCYXNlIHtcbiAgICB4dHlwZTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBlUmVmOiBFbGVtZW50UmVmLFxuICAgICAgICBASG9zdCgpIEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIGhvc3RDb21wb25lbnQ6IEVuZ0Jhc2VcbiAgICApe1xuICAgICAgICBzdXBlcihcbiAgICAgICAgICAgIGVSZWYsXG4gICAgICAgICAgICBob3N0Q29tcG9uZW50LFxuICAgICAgICAgICAgRXh0UHVsbHJlZnJlc2hzcGlubmVyTWV0YURhdGEuUFJPUEVSVElFUyxcbiAgICAgICAgICAgIEV4dFB1bGxyZWZyZXNoc3Bpbm5lck1ldGFEYXRhLkVWRU5UU1xuICAgICAgICApXG4gICAgICAgIHRoaXMueHR5cGUgPSAncHVsbHJlZnJlc2hzcGlubmVyJ1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5iYXNlT25Jbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdBZnRlclZpZXdJbml0KCkge1xuICAgICAgICB0aGlzLmJhc2VBZnRlclZpZXdJbml0KClcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgICAgICB0aGlzLmJhc2VPbkNoYW5nZXMoY2hhbmdlcylcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uRGVzdHJveSgpXG4gICAgfVxufVxuIl19