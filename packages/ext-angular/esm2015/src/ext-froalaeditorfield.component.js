var ExtFroalaeditorfieldComponent_1;
import * as tslib_1 from "tslib";
import { Ext_froala_EditorField } from './Ext/froala/EditorField';
export class ExtFroalaeditorfieldMetaData extends Ext_froala_EditorField {
    static getAll() {
        ExtFroalaeditorfieldMetaData.PROPERTIES = Ext_froala_EditorField.getProperties(ExtFroalaeditorfieldMetaData.PROPERTIES);
        ExtFroalaeditorfieldMetaData.EVENTS = Ext_froala_EditorField.getEvents(ExtFroalaeditorfieldMetaData.EVENTS);
        ExtFroalaeditorfieldMetaData.EVENTS.forEach((event) => {
            ExtFroalaeditorfieldMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtFroalaeditorfieldMetaData.PROPERTIES = [];
ExtFroalaeditorfieldMetaData.EVENTS = [];
ExtFroalaeditorfieldMetaData.EVENTNAMES = [];
(function () { ExtFroalaeditorfieldMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtFroalaeditorfieldComponent = ExtFroalaeditorfieldComponent_1 = class ExtFroalaeditorfieldComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtFroalaeditorfieldMetaData.PROPERTIES, ExtFroalaeditorfieldMetaData.EVENTS);
        this.xtype = 'froalaeditorfield';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtFroalaeditorfieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtFroalaeditorfieldComponent = ExtFroalaeditorfieldComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-froalaeditorfield',
        inputs: ExtFroalaeditorfieldMetaData.PROPERTIES,
        outputs: ExtFroalaeditorfieldMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtFroalaeditorfieldComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtFroalaeditorfieldComponent);
export { ExtFroalaeditorfieldComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LWZyb2FsYWVkaXRvcmZpZWxkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzZW5jaGEvZXh0LWFuZ3VsYXIvIiwic291cmNlcyI6WyJzcmMvZXh0LWZyb2FsYWVkaXRvcmZpZWxkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2xFLE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxzQkFBc0I7SUFJcEUsTUFBTSxDQUFDLE1BQU07UUFDVCw0QkFBNEIsQ0FBQyxVQUFVLEdBQUcsc0JBQXNCLENBQUMsYUFBYSxDQUFDLDRCQUE0QixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hILDRCQUE0QixDQUFDLE1BQU0sR0FBRyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsNEJBQTRCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUcsNEJBQTRCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ3hELDRCQUE0QixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFBO0lBQ0wsQ0FBQzs7QUFUWSx1Q0FBVSxHQUFhLEVBQUUsQ0FBQztBQUMxQixtQ0FBTSxHQUFVLEVBQUUsQ0FBQztBQUNuQix1Q0FBVSxHQUFhLEVBQUUsQ0FBQztBQVM1QyxDQUFDLGNBQWEsNEJBQTRCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBRXpELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUNMLElBQUksRUFDSixRQUFRLEVBQ1IsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixTQUFTLEVBQ1QsVUFBVSxFQUNWLFVBQVUsRUFDVixhQUFhLEVBQ2QsTUFBTSxlQUFlLENBQUM7QUFTdkIsSUFBYSw2QkFBNkIscUNBQTFDLE1BQWEsNkJBQThCLFNBQVEsT0FBTztJQUV0RCxZQUNJLElBQWdCLEVBQ2dCLGFBQXNCO1FBRXRELEtBQUssQ0FDRCxJQUFJLEVBQ0osYUFBYSxFQUNiLDRCQUE0QixDQUFDLFVBQVUsRUFDdkMsNEJBQTRCLENBQUMsTUFBTSxDQUN0QyxDQUFBO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxtQkFBbUIsQ0FBQTtJQUNwQyxDQUFDO0lBRU0sUUFBUTtRQUNYLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNyQixDQUFDO0lBRU0sZUFBZTtRQUNsQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQTtJQUM1QixDQUFDO0lBRU0sV0FBVyxDQUFDLE9BQXNCO1FBQ3JDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDL0IsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7SUFDeEIsQ0FBQztDQUNKLENBQUE7O1lBM0JhLFVBQVU7WUFDK0IsT0FBTyx1QkFBckQsSUFBSSxZQUFJLFFBQVEsWUFBSSxRQUFROztBQUp4Qiw2QkFBNkI7SUFQekMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLHVCQUF1QjtRQUNqQyxNQUFNLEVBQUUsNEJBQTRCLENBQUMsVUFBVTtRQUMvQyxPQUFPLEVBQUUsNEJBQTRCLENBQUMsVUFBVTtRQUNoRCxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQywrQkFBNkIsQ0FBQyxFQUFDLENBQUM7UUFDN0YsUUFBUSxFQUFFLDZCQUE2QjtLQUN4QyxDQUFDO0lBS08sbUJBQUEsSUFBSSxFQUFFLENBQUEsRUFBRSxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLFFBQVEsRUFBRSxDQUFBOzZDQUR6QixVQUFVO1FBQytCLE9BQU87R0FKakQsNkJBQTZCLENBOEJ6QztTQTlCWSw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRfZnJvYWxhX0VkaXRvckZpZWxkIH0gZnJvbSAnLi9FeHQvZnJvYWxhL0VkaXRvckZpZWxkJztcbmV4cG9ydCBjbGFzcyBFeHRGcm9hbGFlZGl0b3JmaWVsZE1ldGFEYXRhIGV4dGVuZHMgRXh0X2Zyb2FsYV9FZGl0b3JGaWVsZCB7XG4gICAgcHVibGljIHN0YXRpYyBQUk9QRVJUSUVTOiBzdHJpbmdbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlRTOiBhbnlbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlROQU1FUzogc3RyaW5nW10gPSBbXTtcbiAgICBzdGF0aWMgZ2V0QWxsKCkge1xuICAgICAgICBFeHRGcm9hbGFlZGl0b3JmaWVsZE1ldGFEYXRhLlBST1BFUlRJRVMgPSBFeHRfZnJvYWxhX0VkaXRvckZpZWxkLmdldFByb3BlcnRpZXMoRXh0RnJvYWxhZWRpdG9yZmllbGRNZXRhRGF0YS5QUk9QRVJUSUVTKTtcbiAgICAgICAgRXh0RnJvYWxhZWRpdG9yZmllbGRNZXRhRGF0YS5FVkVOVFMgPSBFeHRfZnJvYWxhX0VkaXRvckZpZWxkLmdldEV2ZW50cyhFeHRGcm9hbGFlZGl0b3JmaWVsZE1ldGFEYXRhLkVWRU5UUyk7XG4gICAgICAgIEV4dEZyb2FsYWVkaXRvcmZpZWxkTWV0YURhdGEuRVZFTlRTLmZvckVhY2goIChldmVudDogYW55KSA9PiB7XG4gICAgICAgICAgICBFeHRGcm9hbGFlZGl0b3JmaWVsZE1ldGFEYXRhLkVWRU5UTkFNRVMucHVzaChldmVudC5uYW1lKTtcbiAgICAgICAgfSlcbiAgICAgfVxufVxuKGZ1bmN0aW9uICgpIHtFeHRGcm9hbGFlZGl0b3JmaWVsZE1ldGFEYXRhLmdldEFsbCgpO30pKCk7XG5cbmltcG9ydCB7IEVuZ0Jhc2UgfSBmcm9tICcuL2VuZy1iYXNlJztcbmltcG9ydCB7XG4gIEhvc3QsXG4gIE9wdGlvbmFsLFxuICBTa2lwU2VsZixcbiAgLy9PdXRwdXQsXG4gIC8vT25Jbml0LFxuICAvL0FmdGVyVmlld0luaXQsXG4gIC8vT25DaGFuZ2VzLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIGZvcndhcmRSZWYsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2V4dC1mcm9hbGFlZGl0b3JmaWVsZCcsXG4gIGlucHV0czogRXh0RnJvYWxhZWRpdG9yZmllbGRNZXRhRGF0YS5QUk9QRVJUSUVTLFxuICBvdXRwdXRzOiBFeHRGcm9hbGFlZGl0b3JmaWVsZE1ldGFEYXRhLkVWRU5UTkFNRVMsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBFbmdCYXNlLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBFeHRGcm9hbGFlZGl0b3JmaWVsZENvbXBvbmVudCl9XSxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGU+PC9uZy10ZW1wbGF0ZT4nXG59KVxuZXhwb3J0IGNsYXNzIEV4dEZyb2FsYWVkaXRvcmZpZWxkQ29tcG9uZW50IGV4dGVuZHMgRW5nQmFzZSB7XG4gICAgeHR5cGU6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZVJlZjogRWxlbWVudFJlZixcbiAgICAgICAgQEhvc3QoKSBAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBob3N0Q29tcG9uZW50OiBFbmdCYXNlXG4gICAgKXtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBlUmVmLFxuICAgICAgICAgICAgaG9zdENvbXBvbmVudCxcbiAgICAgICAgICAgIEV4dEZyb2FsYWVkaXRvcmZpZWxkTWV0YURhdGEuUFJPUEVSVElFUyxcbiAgICAgICAgICAgIEV4dEZyb2FsYWVkaXRvcmZpZWxkTWV0YURhdGEuRVZFTlRTXG4gICAgICAgIClcbiAgICAgICAgdGhpcy54dHlwZSA9ICdmcm9hbGFlZGl0b3JmaWVsZCdcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uSW5pdCgpXG4gICAgfVxuXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5iYXNlQWZ0ZXJWaWV3SW5pdCgpXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5iYXNlT25DaGFuZ2VzKGNoYW5nZXMpXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLmJhc2VPbkRlc3Ryb3koKVxuICAgIH1cbn1cbiJdfQ==