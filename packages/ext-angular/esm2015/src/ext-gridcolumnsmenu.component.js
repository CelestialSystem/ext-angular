var ExtGridcolumnsmenuComponent_1;
import * as tslib_1 from "tslib";
import { Ext_grid_menu_Columns } from './Ext/grid/menu/Columns';
export class ExtGridcolumnsmenuMetaData extends Ext_grid_menu_Columns {
    static getAll() {
        ExtGridcolumnsmenuMetaData.PROPERTIES = Ext_grid_menu_Columns.getProperties(ExtGridcolumnsmenuMetaData.PROPERTIES);
        ExtGridcolumnsmenuMetaData.EVENTS = Ext_grid_menu_Columns.getEvents(ExtGridcolumnsmenuMetaData.EVENTS);
        ExtGridcolumnsmenuMetaData.EVENTS.forEach((event) => {
            ExtGridcolumnsmenuMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGridcolumnsmenuMetaData.PROPERTIES = [];
ExtGridcolumnsmenuMetaData.EVENTS = [];
ExtGridcolumnsmenuMetaData.EVENTNAMES = [];
(function () { ExtGridcolumnsmenuMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtGridcolumnsmenuComponent = ExtGridcolumnsmenuComponent_1 = class ExtGridcolumnsmenuComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGridcolumnsmenuMetaData.PROPERTIES, ExtGridcolumnsmenuMetaData.EVENTS);
        this.xtype = 'gridcolumnsmenu';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGridcolumnsmenuComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGridcolumnsmenuComponent = ExtGridcolumnsmenuComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-gridcolumnsmenu',
        inputs: ExtGridcolumnsmenuMetaData.PROPERTIES,
        outputs: ExtGridcolumnsmenuMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGridcolumnsmenuComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGridcolumnsmenuComponent);
export { ExtGridcolumnsmenuComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LWdyaWRjb2x1bW5zbWVudS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac2VuY2hhL2V4dC1hbmd1bGFyLyIsInNvdXJjZXMiOlsic3JjL2V4dC1ncmlkY29sdW1uc21lbnUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDaEUsTUFBTSxPQUFPLDBCQUEyQixTQUFRLHFCQUFxQjtJQUlqRSxNQUFNLENBQUMsTUFBTTtRQUNULDBCQUEwQixDQUFDLFVBQVUsR0FBRyxxQkFBcUIsQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkgsMEJBQTBCLENBQUMsTUFBTSxHQUFHLHFCQUFxQixDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2RywwQkFBMEIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFFLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDdEQsMEJBQTBCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUE7SUFDTCxDQUFDOztBQVRZLHFDQUFVLEdBQWEsRUFBRSxDQUFDO0FBQzFCLGlDQUFNLEdBQVUsRUFBRSxDQUFDO0FBQ25CLHFDQUFVLEdBQWEsRUFBRSxDQUFDO0FBUzVDLENBQUMsY0FBYSwwQkFBMEIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFdkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyQyxPQUFPLEVBQ0wsSUFBSSxFQUNKLFFBQVEsRUFDUixRQUFRO0FBQ1IsU0FBUztBQUNULFNBQVM7QUFDVCxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLFNBQVMsRUFDVCxVQUFVLEVBQ1YsVUFBVSxFQUNWLGFBQWEsRUFDZCxNQUFNLGVBQWUsQ0FBQztBQVN2QixJQUFhLDJCQUEyQixtQ0FBeEMsTUFBYSwyQkFBNEIsU0FBUSxPQUFPO0lBRXBELFlBQ0ksSUFBZ0IsRUFDZ0IsYUFBc0I7UUFFdEQsS0FBSyxDQUNELElBQUksRUFDSixhQUFhLEVBQ2IsMEJBQTBCLENBQUMsVUFBVSxFQUNyQywwQkFBMEIsQ0FBQyxNQUFNLENBQ3BDLENBQUE7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLGlCQUFpQixDQUFBO0lBQ2xDLENBQUM7SUFFTSxRQUFRO1FBQ1gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQ3JCLENBQUM7SUFFTSxlQUFlO1FBQ2xCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFFTSxXQUFXLENBQUMsT0FBc0I7UUFDckMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBRU0sV0FBVztRQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQTtJQUN4QixDQUFDO0NBQ0osQ0FBQTs7WUEzQmEsVUFBVTtZQUMrQixPQUFPLHVCQUFyRCxJQUFJLFlBQUksUUFBUSxZQUFJLFFBQVE7O0FBSnhCLDJCQUEyQjtJQVB2QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUscUJBQXFCO1FBQy9CLE1BQU0sRUFBRSwwQkFBMEIsQ0FBQyxVQUFVO1FBQzdDLE9BQU8sRUFBRSwwQkFBMEIsQ0FBQyxVQUFVO1FBQzlDLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDZCQUEyQixDQUFDLEVBQUMsQ0FBQztRQUMzRixRQUFRLEVBQUUsNkJBQTZCO0tBQ3hDLENBQUM7SUFLTyxtQkFBQSxJQUFJLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsbUJBQUEsUUFBUSxFQUFFLENBQUE7NkNBRHpCLFVBQVU7UUFDK0IsT0FBTztHQUpqRCwyQkFBMkIsQ0E4QnZDO1NBOUJZLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dF9ncmlkX21lbnVfQ29sdW1ucyB9IGZyb20gJy4vRXh0L2dyaWQvbWVudS9Db2x1bW5zJztcbmV4cG9ydCBjbGFzcyBFeHRHcmlkY29sdW1uc21lbnVNZXRhRGF0YSBleHRlbmRzIEV4dF9ncmlkX21lbnVfQ29sdW1ucyB7XG4gICAgcHVibGljIHN0YXRpYyBQUk9QRVJUSUVTOiBzdHJpbmdbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlRTOiBhbnlbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlROQU1FUzogc3RyaW5nW10gPSBbXTtcbiAgICBzdGF0aWMgZ2V0QWxsKCkge1xuICAgICAgICBFeHRHcmlkY29sdW1uc21lbnVNZXRhRGF0YS5QUk9QRVJUSUVTID0gRXh0X2dyaWRfbWVudV9Db2x1bW5zLmdldFByb3BlcnRpZXMoRXh0R3JpZGNvbHVtbnNtZW51TWV0YURhdGEuUFJPUEVSVElFUyk7XG4gICAgICAgIEV4dEdyaWRjb2x1bW5zbWVudU1ldGFEYXRhLkVWRU5UUyA9IEV4dF9ncmlkX21lbnVfQ29sdW1ucy5nZXRFdmVudHMoRXh0R3JpZGNvbHVtbnNtZW51TWV0YURhdGEuRVZFTlRTKTtcbiAgICAgICAgRXh0R3JpZGNvbHVtbnNtZW51TWV0YURhdGEuRVZFTlRTLmZvckVhY2goIChldmVudDogYW55KSA9PiB7XG4gICAgICAgICAgICBFeHRHcmlkY29sdW1uc21lbnVNZXRhRGF0YS5FVkVOVE5BTUVTLnB1c2goZXZlbnQubmFtZSk7XG4gICAgICAgIH0pXG4gICAgIH1cbn1cbihmdW5jdGlvbiAoKSB7RXh0R3JpZGNvbHVtbnNtZW51TWV0YURhdGEuZ2V0QWxsKCk7fSkoKTtcblxuaW1wb3J0IHsgRW5nQmFzZSB9IGZyb20gJy4vZW5nLWJhc2UnO1xuaW1wb3J0IHtcbiAgSG9zdCxcbiAgT3B0aW9uYWwsXG4gIFNraXBTZWxmLFxuICAvL091dHB1dCxcbiAgLy9PbkluaXQsXG4gIC8vQWZ0ZXJWaWV3SW5pdCxcbiAgLy9PbkNoYW5nZXMsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgZm9yd2FyZFJlZixcbiAgU2ltcGxlQ2hhbmdlc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZXh0LWdyaWRjb2x1bW5zbWVudScsXG4gIGlucHV0czogRXh0R3JpZGNvbHVtbnNtZW51TWV0YURhdGEuUFJPUEVSVElFUyxcbiAgb3V0cHV0czogRXh0R3JpZGNvbHVtbnNtZW51TWV0YURhdGEuRVZFTlROQU1FUyxcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IEVuZ0Jhc2UsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEV4dEdyaWRjb2x1bW5zbWVudUNvbXBvbmVudCl9XSxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGU+PC9uZy10ZW1wbGF0ZT4nXG59KVxuZXhwb3J0IGNsYXNzIEV4dEdyaWRjb2x1bW5zbWVudUNvbXBvbmVudCBleHRlbmRzIEVuZ0Jhc2Uge1xuICAgIHh0eXBlOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGVSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgIEBIb3N0KCkgQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgaG9zdENvbXBvbmVudDogRW5nQmFzZVxuICAgICl7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgZVJlZixcbiAgICAgICAgICAgIGhvc3RDb21wb25lbnQsXG4gICAgICAgICAgICBFeHRHcmlkY29sdW1uc21lbnVNZXRhRGF0YS5QUk9QRVJUSUVTLFxuICAgICAgICAgICAgRXh0R3JpZGNvbHVtbnNtZW51TWV0YURhdGEuRVZFTlRTXG4gICAgICAgIClcbiAgICAgICAgdGhpcy54dHlwZSA9ICdncmlkY29sdW1uc21lbnUnXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmJhc2VPbkluaXQoKVxuICAgIH1cblxuICAgIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIHRoaXMuYmFzZUFmdGVyVmlld0luaXQoKVxuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uQ2hhbmdlcyhjaGFuZ2VzKVxuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5iYXNlT25EZXN0cm95KClcbiAgICB9XG59XG4iXX0=