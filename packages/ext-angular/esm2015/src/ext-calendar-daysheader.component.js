var ExtCalendar_daysheaderComponent_1;
import * as tslib_1 from "tslib";
import { Ext_calendar_header_Days } from './Ext/calendar/header/Days';
export class ExtCalendar_daysheaderMetaData extends Ext_calendar_header_Days {
    static getAll() {
        ExtCalendar_daysheaderMetaData.PROPERTIES = Ext_calendar_header_Days.getProperties(ExtCalendar_daysheaderMetaData.PROPERTIES);
        ExtCalendar_daysheaderMetaData.EVENTS = Ext_calendar_header_Days.getEvents(ExtCalendar_daysheaderMetaData.EVENTS);
        ExtCalendar_daysheaderMetaData.EVENTS.forEach((event) => {
            ExtCalendar_daysheaderMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_daysheaderMetaData.PROPERTIES = [];
ExtCalendar_daysheaderMetaData.EVENTS = [];
ExtCalendar_daysheaderMetaData.EVENTNAMES = [];
(function () { ExtCalendar_daysheaderMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtCalendar_daysheaderComponent = ExtCalendar_daysheaderComponent_1 = class ExtCalendar_daysheaderComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_daysheaderMetaData.PROPERTIES, ExtCalendar_daysheaderMetaData.EVENTS);
        this.xtype = 'calendar-daysheader';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_daysheaderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_daysheaderComponent = ExtCalendar_daysheaderComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-calendar-daysheader',
        inputs: ExtCalendar_daysheaderMetaData.PROPERTIES,
        outputs: ExtCalendar_daysheaderMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_daysheaderComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_daysheaderComponent);
export { ExtCalendar_daysheaderComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LWNhbGVuZGFyLWRheXNoZWFkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNlbmNoYS9leHQtYW5ndWxhci8iLCJzb3VyY2VzIjpbInNyYy9leHQtY2FsZW5kYXItZGF5c2hlYWRlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN0RSxNQUFNLE9BQU8sOEJBQStCLFNBQVEsd0JBQXdCO0lBSXhFLE1BQU0sQ0FBQyxNQUFNO1FBQ1QsOEJBQThCLENBQUMsVUFBVSxHQUFHLHdCQUF3QixDQUFDLGFBQWEsQ0FBQyw4QkFBOEIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5SCw4QkFBOEIsQ0FBQyxNQUFNLEdBQUcsd0JBQXdCLENBQUMsU0FBUyxDQUFDLDhCQUE4QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2xILDhCQUE4QixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUUsQ0FBQyxLQUFVLEVBQUUsRUFBRTtZQUMxRCw4QkFBOEIsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvRCxDQUFDLENBQUMsQ0FBQTtJQUNMLENBQUM7O0FBVFkseUNBQVUsR0FBYSxFQUFFLENBQUM7QUFDMUIscUNBQU0sR0FBVSxFQUFFLENBQUM7QUFDbkIseUNBQVUsR0FBYSxFQUFFLENBQUM7QUFTNUMsQ0FBQyxjQUFhLDhCQUE4QixDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUUzRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3JDLE9BQU8sRUFDTCxJQUFJLEVBQ0osUUFBUSxFQUNSLFFBQVE7QUFDUixTQUFTO0FBQ1QsU0FBUztBQUNULGdCQUFnQjtBQUNoQixZQUFZO0FBQ1osU0FBUyxFQUNULFVBQVUsRUFDVixVQUFVLEVBQ1YsYUFBYSxFQUNkLE1BQU0sZUFBZSxDQUFDO0FBU3ZCLElBQWEsK0JBQStCLHVDQUE1QyxNQUFhLCtCQUFnQyxTQUFRLE9BQU87SUFFeEQsWUFDSSxJQUFnQixFQUNnQixhQUFzQjtRQUV0RCxLQUFLLENBQ0QsSUFBSSxFQUNKLGFBQWEsRUFDYiw4QkFBOEIsQ0FBQyxVQUFVLEVBQ3pDLDhCQUE4QixDQUFDLE1BQU0sQ0FDeEMsQ0FBQTtRQUNELElBQUksQ0FBQyxLQUFLLEdBQUcscUJBQXFCLENBQUE7SUFDdEMsQ0FBQztJQUVNLFFBQVE7UUFDWCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDckIsQ0FBQztJQUVNLGVBQWU7UUFDbEIsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUE7SUFDNUIsQ0FBQztJQUVNLFdBQVcsQ0FBQyxPQUFzQjtRQUNyQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQy9CLENBQUM7SUFFTSxXQUFXO1FBQ2QsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQ3hCLENBQUM7Q0FDSixDQUFBOztZQTNCYSxVQUFVO1lBQytCLE9BQU8sdUJBQXJELElBQUksWUFBSSxRQUFRLFlBQUksUUFBUTs7QUFKeEIsK0JBQStCO0lBUDNDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSx5QkFBeUI7UUFDbkMsTUFBTSxFQUFFLDhCQUE4QixDQUFDLFVBQVU7UUFDakQsT0FBTyxFQUFFLDhCQUE4QixDQUFDLFVBQVU7UUFDbEQsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsaUNBQStCLENBQUMsRUFBQyxDQUFDO1FBQy9GLFFBQVEsRUFBRSw2QkFBNkI7S0FDeEMsQ0FBQztJQUtPLG1CQUFBLElBQUksRUFBRSxDQUFBLEVBQUUsbUJBQUEsUUFBUSxFQUFFLENBQUEsRUFBRSxtQkFBQSxRQUFRLEVBQUUsQ0FBQTs2Q0FEekIsVUFBVTtRQUMrQixPQUFPO0dBSmpELCtCQUErQixDQThCM0M7U0E5QlksK0JBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXh0X2NhbGVuZGFyX2hlYWRlcl9EYXlzIH0gZnJvbSAnLi9FeHQvY2FsZW5kYXIvaGVhZGVyL0RheXMnO1xuZXhwb3J0IGNsYXNzIEV4dENhbGVuZGFyX2RheXNoZWFkZXJNZXRhRGF0YSBleHRlbmRzIEV4dF9jYWxlbmRhcl9oZWFkZXJfRGF5cyB7XG4gICAgcHVibGljIHN0YXRpYyBQUk9QRVJUSUVTOiBzdHJpbmdbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlRTOiBhbnlbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlROQU1FUzogc3RyaW5nW10gPSBbXTtcbiAgICBzdGF0aWMgZ2V0QWxsKCkge1xuICAgICAgICBFeHRDYWxlbmRhcl9kYXlzaGVhZGVyTWV0YURhdGEuUFJPUEVSVElFUyA9IEV4dF9jYWxlbmRhcl9oZWFkZXJfRGF5cy5nZXRQcm9wZXJ0aWVzKEV4dENhbGVuZGFyX2RheXNoZWFkZXJNZXRhRGF0YS5QUk9QRVJUSUVTKTtcbiAgICAgICAgRXh0Q2FsZW5kYXJfZGF5c2hlYWRlck1ldGFEYXRhLkVWRU5UUyA9IEV4dF9jYWxlbmRhcl9oZWFkZXJfRGF5cy5nZXRFdmVudHMoRXh0Q2FsZW5kYXJfZGF5c2hlYWRlck1ldGFEYXRhLkVWRU5UUyk7XG4gICAgICAgIEV4dENhbGVuZGFyX2RheXNoZWFkZXJNZXRhRGF0YS5FVkVOVFMuZm9yRWFjaCggKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgICAgIEV4dENhbGVuZGFyX2RheXNoZWFkZXJNZXRhRGF0YS5FVkVOVE5BTUVTLnB1c2goZXZlbnQubmFtZSk7XG4gICAgICAgIH0pXG4gICAgIH1cbn1cbihmdW5jdGlvbiAoKSB7RXh0Q2FsZW5kYXJfZGF5c2hlYWRlck1ldGFEYXRhLmdldEFsbCgpO30pKCk7XG5cbmltcG9ydCB7IEVuZ0Jhc2UgfSBmcm9tICcuL2VuZy1iYXNlJztcbmltcG9ydCB7XG4gIEhvc3QsXG4gIE9wdGlvbmFsLFxuICBTa2lwU2VsZixcbiAgLy9PdXRwdXQsXG4gIC8vT25Jbml0LFxuICAvL0FmdGVyVmlld0luaXQsXG4gIC8vT25DaGFuZ2VzLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIGZvcndhcmRSZWYsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2V4dC1jYWxlbmRhci1kYXlzaGVhZGVyJyxcbiAgaW5wdXRzOiBFeHRDYWxlbmRhcl9kYXlzaGVhZGVyTWV0YURhdGEuUFJPUEVSVElFUyxcbiAgb3V0cHV0czogRXh0Q2FsZW5kYXJfZGF5c2hlYWRlck1ldGFEYXRhLkVWRU5UTkFNRVMsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBFbmdCYXNlLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBFeHRDYWxlbmRhcl9kYXlzaGVhZGVyQ29tcG9uZW50KX1dLFxuICB0ZW1wbGF0ZTogJzxuZy10ZW1wbGF0ZT48L25nLXRlbXBsYXRlPidcbn0pXG5leHBvcnQgY2xhc3MgRXh0Q2FsZW5kYXJfZGF5c2hlYWRlckNvbXBvbmVudCBleHRlbmRzIEVuZ0Jhc2Uge1xuICAgIHh0eXBlOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGVSZWY6IEVsZW1lbnRSZWYsXG4gICAgICAgIEBIb3N0KCkgQE9wdGlvbmFsKCkgQFNraXBTZWxmKCkgaG9zdENvbXBvbmVudDogRW5nQmFzZVxuICAgICl7XG4gICAgICAgIHN1cGVyKFxuICAgICAgICAgICAgZVJlZixcbiAgICAgICAgICAgIGhvc3RDb21wb25lbnQsXG4gICAgICAgICAgICBFeHRDYWxlbmRhcl9kYXlzaGVhZGVyTWV0YURhdGEuUFJPUEVSVElFUyxcbiAgICAgICAgICAgIEV4dENhbGVuZGFyX2RheXNoZWFkZXJNZXRhRGF0YS5FVkVOVFNcbiAgICAgICAgKVxuICAgICAgICB0aGlzLnh0eXBlID0gJ2NhbGVuZGFyLWRheXNoZWFkZXInXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25Jbml0KCkge1xuICAgICAgICB0aGlzLmJhc2VPbkluaXQoKVxuICAgIH1cblxuICAgIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgICAgIHRoaXMuYmFzZUFmdGVyVmlld0luaXQoKVxuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uQ2hhbmdlcyhjaGFuZ2VzKVxuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5iYXNlT25EZXN0cm95KClcbiAgICB9XG59XG4iXX0=