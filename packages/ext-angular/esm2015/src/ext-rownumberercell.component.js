var ExtRownumberercellComponent_1;
import * as tslib_1 from "tslib";
import { Ext_grid_cell_RowNumberer } from './Ext/grid/cell/RowNumberer';
export class ExtRownumberercellMetaData extends Ext_grid_cell_RowNumberer {
    static getAll() {
        ExtRownumberercellMetaData.PROPERTIES = Ext_grid_cell_RowNumberer.getProperties(ExtRownumberercellMetaData.PROPERTIES);
        ExtRownumberercellMetaData.EVENTS = Ext_grid_cell_RowNumberer.getEvents(ExtRownumberercellMetaData.EVENTS);
        ExtRownumberercellMetaData.EVENTS.forEach((event) => {
            ExtRownumberercellMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtRownumberercellMetaData.PROPERTIES = [];
ExtRownumberercellMetaData.EVENTS = [];
ExtRownumberercellMetaData.EVENTNAMES = [];
(function () { ExtRownumberercellMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtRownumberercellComponent = ExtRownumberercellComponent_1 = class ExtRownumberercellComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtRownumberercellMetaData.PROPERTIES, ExtRownumberercellMetaData.EVENTS);
        this.xtype = 'rownumberercell';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtRownumberercellComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtRownumberercellComponent = ExtRownumberercellComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-rownumberercell',
        inputs: ExtRownumberercellMetaData.PROPERTIES,
        outputs: ExtRownumberercellMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtRownumberercellComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtRownumberercellComponent);
export { ExtRownumberercellComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LXJvd251bWJlcmVyY2VsbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac2VuY2hhL2V4dC1hbmd1bGFyLyIsInNvdXJjZXMiOlsic3JjL2V4dC1yb3dudW1iZXJlcmNlbGwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDeEUsTUFBTSxPQUFPLDBCQUEyQixTQUFRLHlCQUF5QjtJQUlyRSxNQUFNLENBQUMsTUFBTTtRQUNULDBCQUEwQixDQUFDLFVBQVUsR0FBRyx5QkFBeUIsQ0FBQyxhQUFhLENBQUMsMEJBQTBCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkgsMEJBQTBCLENBQUMsTUFBTSxHQUFHLHlCQUF5QixDQUFDLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMzRywwQkFBMEIsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFFLENBQUMsS0FBVSxFQUFFLEVBQUU7WUFDdEQsMEJBQTBCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0QsQ0FBQyxDQUFDLENBQUE7SUFDTCxDQUFDOztBQVRZLHFDQUFVLEdBQWEsRUFBRSxDQUFDO0FBQzFCLGlDQUFNLEdBQVUsRUFBRSxDQUFDO0FBQ25CLHFDQUFVLEdBQWEsRUFBRSxDQUFDO0FBUzVDLENBQUMsY0FBYSwwQkFBMEIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFBLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFdkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyQyxPQUFPLEVBQ0wsSUFBSSxFQUNKLFFBQVEsRUFDUixRQUFRO0FBQ1IsU0FBUztBQUNULFNBQVM7QUFDVCxnQkFBZ0I7QUFDaEIsWUFBWTtBQUNaLFNBQVMsRUFDVCxVQUFVLEVBQ1YsVUFBVSxFQUNWLGFBQWEsRUFDZCxNQUFNLGVBQWUsQ0FBQztBQVN2QixJQUFhLDJCQUEyQixtQ0FBeEMsTUFBYSwyQkFBNEIsU0FBUSxPQUFPO0lBRXBELFlBQ0ksSUFBZ0IsRUFDZ0IsYUFBc0I7UUFFdEQsS0FBSyxDQUNELElBQUksRUFDSixhQUFhLEVBQ2IsMEJBQTBCLENBQUMsVUFBVSxFQUNyQywwQkFBMEIsQ0FBQyxNQUFNLENBQ3BDLENBQUE7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLGlCQUFpQixDQUFBO0lBQ2xDLENBQUM7SUFFTSxRQUFRO1FBQ1gsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQ3JCLENBQUM7SUFFTSxlQUFlO1FBQ2xCLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFBO0lBQzVCLENBQUM7SUFFTSxXQUFXLENBQUMsT0FBc0I7UUFDckMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMvQixDQUFDO0lBRU0sV0FBVztRQUNkLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQTtJQUN4QixDQUFDO0NBQ0osQ0FBQTs7WUEzQmEsVUFBVTtZQUMrQixPQUFPLHVCQUFyRCxJQUFJLFlBQUksUUFBUSxZQUFJLFFBQVE7O0FBSnhCLDJCQUEyQjtJQVB2QyxTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUscUJBQXFCO1FBQy9CLE1BQU0sRUFBRSwwQkFBMEIsQ0FBQyxVQUFVO1FBQzdDLE9BQU8sRUFBRSwwQkFBMEIsQ0FBQyxVQUFVO1FBQzlDLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDZCQUEyQixDQUFDLEVBQUMsQ0FBQztRQUMzRixRQUFRLEVBQUUsNkJBQTZCO0tBQ3hDLENBQUM7SUFLTyxtQkFBQSxJQUFJLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsbUJBQUEsUUFBUSxFQUFFLENBQUE7NkNBRHpCLFVBQVU7UUFDK0IsT0FBTztHQUpqRCwyQkFBMkIsQ0E4QnZDO1NBOUJZLDJCQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4dF9ncmlkX2NlbGxfUm93TnVtYmVyZXIgfSBmcm9tICcuL0V4dC9ncmlkL2NlbGwvUm93TnVtYmVyZXInO1xuZXhwb3J0IGNsYXNzIEV4dFJvd251bWJlcmVyY2VsbE1ldGFEYXRhIGV4dGVuZHMgRXh0X2dyaWRfY2VsbF9Sb3dOdW1iZXJlciB7XG4gICAgcHVibGljIHN0YXRpYyBQUk9QRVJUSUVTOiBzdHJpbmdbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlRTOiBhbnlbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlROQU1FUzogc3RyaW5nW10gPSBbXTtcbiAgICBzdGF0aWMgZ2V0QWxsKCkge1xuICAgICAgICBFeHRSb3dudW1iZXJlcmNlbGxNZXRhRGF0YS5QUk9QRVJUSUVTID0gRXh0X2dyaWRfY2VsbF9Sb3dOdW1iZXJlci5nZXRQcm9wZXJ0aWVzKEV4dFJvd251bWJlcmVyY2VsbE1ldGFEYXRhLlBST1BFUlRJRVMpO1xuICAgICAgICBFeHRSb3dudW1iZXJlcmNlbGxNZXRhRGF0YS5FVkVOVFMgPSBFeHRfZ3JpZF9jZWxsX1Jvd051bWJlcmVyLmdldEV2ZW50cyhFeHRSb3dudW1iZXJlcmNlbGxNZXRhRGF0YS5FVkVOVFMpO1xuICAgICAgICBFeHRSb3dudW1iZXJlcmNlbGxNZXRhRGF0YS5FVkVOVFMuZm9yRWFjaCggKGV2ZW50OiBhbnkpID0+IHtcbiAgICAgICAgICAgIEV4dFJvd251bWJlcmVyY2VsbE1ldGFEYXRhLkVWRU5UTkFNRVMucHVzaChldmVudC5uYW1lKTtcbiAgICAgICAgfSlcbiAgICAgfVxufVxuKGZ1bmN0aW9uICgpIHtFeHRSb3dudW1iZXJlcmNlbGxNZXRhRGF0YS5nZXRBbGwoKTt9KSgpO1xuXG5pbXBvcnQgeyBFbmdCYXNlIH0gZnJvbSAnLi9lbmctYmFzZSc7XG5pbXBvcnQge1xuICBIb3N0LFxuICBPcHRpb25hbCxcbiAgU2tpcFNlbGYsXG4gIC8vT3V0cHV0LFxuICAvL09uSW5pdCxcbiAgLy9BZnRlclZpZXdJbml0LFxuICAvL09uQ2hhbmdlcyxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBmb3J3YXJkUmVmLFxuICBTaW1wbGVDaGFuZ2VzXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdleHQtcm93bnVtYmVyZXJjZWxsJyxcbiAgaW5wdXRzOiBFeHRSb3dudW1iZXJlcmNlbGxNZXRhRGF0YS5QUk9QRVJUSUVTLFxuICBvdXRwdXRzOiBFeHRSb3dudW1iZXJlcmNlbGxNZXRhRGF0YS5FVkVOVE5BTUVTLFxuICBwcm92aWRlcnM6IFt7cHJvdmlkZTogRW5nQmFzZSwgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gRXh0Um93bnVtYmVyZXJjZWxsQ29tcG9uZW50KX1dLFxuICB0ZW1wbGF0ZTogJzxuZy10ZW1wbGF0ZT48L25nLXRlbXBsYXRlPidcbn0pXG5leHBvcnQgY2xhc3MgRXh0Um93bnVtYmVyZXJjZWxsQ29tcG9uZW50IGV4dGVuZHMgRW5nQmFzZSB7XG4gICAgeHR5cGU6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZVJlZjogRWxlbWVudFJlZixcbiAgICAgICAgQEhvc3QoKSBAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBob3N0Q29tcG9uZW50OiBFbmdCYXNlXG4gICAgKXtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBlUmVmLFxuICAgICAgICAgICAgaG9zdENvbXBvbmVudCxcbiAgICAgICAgICAgIEV4dFJvd251bWJlcmVyY2VsbE1ldGFEYXRhLlBST1BFUlRJRVMsXG4gICAgICAgICAgICBFeHRSb3dudW1iZXJlcmNlbGxNZXRhRGF0YS5FVkVOVFNcbiAgICAgICAgKVxuICAgICAgICB0aGlzLnh0eXBlID0gJ3Jvd251bWJlcmVyY2VsbCdcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uSW5pdCgpXG4gICAgfVxuXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5iYXNlQWZ0ZXJWaWV3SW5pdCgpXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5iYXNlT25DaGFuZ2VzKGNoYW5nZXMpXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLmJhc2VPbkRlc3Ryb3koKVxuICAgIH1cbn1cbiJdfQ==