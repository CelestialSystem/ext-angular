var ExtGridgroupbythismenuitemComponent_1;
import * as tslib_1 from "tslib";
import { Ext_grid_menu_GroupByThis } from './Ext/grid/menu/GroupByThis';
export class ExtGridgroupbythismenuitemMetaData extends Ext_grid_menu_GroupByThis {
    static getAll() {
        ExtGridgroupbythismenuitemMetaData.PROPERTIES = Ext_grid_menu_GroupByThis.getProperties(ExtGridgroupbythismenuitemMetaData.PROPERTIES);
        ExtGridgroupbythismenuitemMetaData.EVENTS = Ext_grid_menu_GroupByThis.getEvents(ExtGridgroupbythismenuitemMetaData.EVENTS);
        ExtGridgroupbythismenuitemMetaData.EVENTS.forEach((event) => {
            ExtGridgroupbythismenuitemMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtGridgroupbythismenuitemMetaData.PROPERTIES = [];
ExtGridgroupbythismenuitemMetaData.EVENTS = [];
ExtGridgroupbythismenuitemMetaData.EVENTNAMES = [];
(function () { ExtGridgroupbythismenuitemMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtGridgroupbythismenuitemComponent = ExtGridgroupbythismenuitemComponent_1 = class ExtGridgroupbythismenuitemComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtGridgroupbythismenuitemMetaData.PROPERTIES, ExtGridgroupbythismenuitemMetaData.EVENTS);
        this.xtype = 'gridgroupbythismenuitem';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtGridgroupbythismenuitemComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtGridgroupbythismenuitemComponent = ExtGridgroupbythismenuitemComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-gridgroupbythismenuitem',
        inputs: ExtGridgroupbythismenuitemMetaData.PROPERTIES,
        outputs: ExtGridgroupbythismenuitemMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtGridgroupbythismenuitemComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtGridgroupbythismenuitemComponent);
export { ExtGridgroupbythismenuitemComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LWdyaWRncm91cGJ5dGhpc21lbnVpdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzZW5jaGEvZXh0LWFuZ3VsYXIvIiwic291cmNlcyI6WyJzcmMvZXh0LWdyaWRncm91cGJ5dGhpc21lbnVpdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3hFLE1BQU0sT0FBTyxrQ0FBbUMsU0FBUSx5QkFBeUI7SUFJN0UsTUFBTSxDQUFDLE1BQU07UUFDVCxrQ0FBa0MsQ0FBQyxVQUFVLEdBQUcseUJBQXlCLENBQUMsYUFBYSxDQUFDLGtDQUFrQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZJLGtDQUFrQyxDQUFDLE1BQU0sR0FBRyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsa0NBQWtDLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDM0gsa0NBQWtDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQzlELGtDQUFrQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25FLENBQUMsQ0FBQyxDQUFBO0lBQ0wsQ0FBQzs7QUFUWSw2Q0FBVSxHQUFhLEVBQUUsQ0FBQztBQUMxQix5Q0FBTSxHQUFVLEVBQUUsQ0FBQztBQUNuQiw2Q0FBVSxHQUFhLEVBQUUsQ0FBQztBQVM1QyxDQUFDLGNBQWEsa0NBQWtDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBRS9ELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUNMLElBQUksRUFDSixRQUFRLEVBQ1IsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixTQUFTLEVBQ1QsVUFBVSxFQUNWLFVBQVUsRUFDVixhQUFhLEVBQ2QsTUFBTSxlQUFlLENBQUM7QUFTdkIsSUFBYSxtQ0FBbUMsMkNBQWhELE1BQWEsbUNBQW9DLFNBQVEsT0FBTztJQUU1RCxZQUNJLElBQWdCLEVBQ2dCLGFBQXNCO1FBRXRELEtBQUssQ0FDRCxJQUFJLEVBQ0osYUFBYSxFQUNiLGtDQUFrQyxDQUFDLFVBQVUsRUFDN0Msa0NBQWtDLENBQUMsTUFBTSxDQUM1QyxDQUFBO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyx5QkFBeUIsQ0FBQTtJQUMxQyxDQUFDO0lBRU0sUUFBUTtRQUNYLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNyQixDQUFDO0lBRU0sZUFBZTtRQUNsQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQTtJQUM1QixDQUFDO0lBRU0sV0FBVyxDQUFDLE9BQXNCO1FBQ3JDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDL0IsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7SUFDeEIsQ0FBQztDQUNKLENBQUE7O1lBM0JhLFVBQVU7WUFDK0IsT0FBTyx1QkFBckQsSUFBSSxZQUFJLFFBQVEsWUFBSSxRQUFROztBQUp4QixtQ0FBbUM7SUFQL0MsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLDZCQUE2QjtRQUN2QyxNQUFNLEVBQUUsa0NBQWtDLENBQUMsVUFBVTtRQUNyRCxPQUFPLEVBQUUsa0NBQWtDLENBQUMsVUFBVTtRQUN0RCxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxxQ0FBbUMsQ0FBQyxFQUFDLENBQUM7UUFDbkcsUUFBUSxFQUFFLDZCQUE2QjtLQUN4QyxDQUFDO0lBS08sbUJBQUEsSUFBSSxFQUFFLENBQUEsRUFBRSxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLFFBQVEsRUFBRSxDQUFBOzZDQUR6QixVQUFVO1FBQytCLE9BQU87R0FKakQsbUNBQW1DLENBOEIvQztTQTlCWSxtQ0FBbUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRfZ3JpZF9tZW51X0dyb3VwQnlUaGlzIH0gZnJvbSAnLi9FeHQvZ3JpZC9tZW51L0dyb3VwQnlUaGlzJztcbmV4cG9ydCBjbGFzcyBFeHRHcmlkZ3JvdXBieXRoaXNtZW51aXRlbU1ldGFEYXRhIGV4dGVuZHMgRXh0X2dyaWRfbWVudV9Hcm91cEJ5VGhpcyB7XG4gICAgcHVibGljIHN0YXRpYyBQUk9QRVJUSUVTOiBzdHJpbmdbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlRTOiBhbnlbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlROQU1FUzogc3RyaW5nW10gPSBbXTtcbiAgICBzdGF0aWMgZ2V0QWxsKCkge1xuICAgICAgICBFeHRHcmlkZ3JvdXBieXRoaXNtZW51aXRlbU1ldGFEYXRhLlBST1BFUlRJRVMgPSBFeHRfZ3JpZF9tZW51X0dyb3VwQnlUaGlzLmdldFByb3BlcnRpZXMoRXh0R3JpZGdyb3VwYnl0aGlzbWVudWl0ZW1NZXRhRGF0YS5QUk9QRVJUSUVTKTtcbiAgICAgICAgRXh0R3JpZGdyb3VwYnl0aGlzbWVudWl0ZW1NZXRhRGF0YS5FVkVOVFMgPSBFeHRfZ3JpZF9tZW51X0dyb3VwQnlUaGlzLmdldEV2ZW50cyhFeHRHcmlkZ3JvdXBieXRoaXNtZW51aXRlbU1ldGFEYXRhLkVWRU5UUyk7XG4gICAgICAgIEV4dEdyaWRncm91cGJ5dGhpc21lbnVpdGVtTWV0YURhdGEuRVZFTlRTLmZvckVhY2goIChldmVudDogYW55KSA9PiB7XG4gICAgICAgICAgICBFeHRHcmlkZ3JvdXBieXRoaXNtZW51aXRlbU1ldGFEYXRhLkVWRU5UTkFNRVMucHVzaChldmVudC5uYW1lKTtcbiAgICAgICAgfSlcbiAgICAgfVxufVxuKGZ1bmN0aW9uICgpIHtFeHRHcmlkZ3JvdXBieXRoaXNtZW51aXRlbU1ldGFEYXRhLmdldEFsbCgpO30pKCk7XG5cbmltcG9ydCB7IEVuZ0Jhc2UgfSBmcm9tICcuL2VuZy1iYXNlJztcbmltcG9ydCB7XG4gIEhvc3QsXG4gIE9wdGlvbmFsLFxuICBTa2lwU2VsZixcbiAgLy9PdXRwdXQsXG4gIC8vT25Jbml0LFxuICAvL0FmdGVyVmlld0luaXQsXG4gIC8vT25DaGFuZ2VzLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIGZvcndhcmRSZWYsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2V4dC1ncmlkZ3JvdXBieXRoaXNtZW51aXRlbScsXG4gIGlucHV0czogRXh0R3JpZGdyb3VwYnl0aGlzbWVudWl0ZW1NZXRhRGF0YS5QUk9QRVJUSUVTLFxuICBvdXRwdXRzOiBFeHRHcmlkZ3JvdXBieXRoaXNtZW51aXRlbU1ldGFEYXRhLkVWRU5UTkFNRVMsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBFbmdCYXNlLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBFeHRHcmlkZ3JvdXBieXRoaXNtZW51aXRlbUNvbXBvbmVudCl9XSxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGU+PC9uZy10ZW1wbGF0ZT4nXG59KVxuZXhwb3J0IGNsYXNzIEV4dEdyaWRncm91cGJ5dGhpc21lbnVpdGVtQ29tcG9uZW50IGV4dGVuZHMgRW5nQmFzZSB7XG4gICAgeHR5cGU6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZVJlZjogRWxlbWVudFJlZixcbiAgICAgICAgQEhvc3QoKSBAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBob3N0Q29tcG9uZW50OiBFbmdCYXNlXG4gICAgKXtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBlUmVmLFxuICAgICAgICAgICAgaG9zdENvbXBvbmVudCxcbiAgICAgICAgICAgIEV4dEdyaWRncm91cGJ5dGhpc21lbnVpdGVtTWV0YURhdGEuUFJPUEVSVElFUyxcbiAgICAgICAgICAgIEV4dEdyaWRncm91cGJ5dGhpc21lbnVpdGVtTWV0YURhdGEuRVZFTlRTXG4gICAgICAgIClcbiAgICAgICAgdGhpcy54dHlwZSA9ICdncmlkZ3JvdXBieXRoaXNtZW51aXRlbSdcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uSW5pdCgpXG4gICAgfVxuXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5iYXNlQWZ0ZXJWaWV3SW5pdCgpXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5iYXNlT25DaGFuZ2VzKGNoYW5nZXMpXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLmJhc2VPbkRlc3Ryb3koKVxuICAgIH1cbn1cbiJdfQ==