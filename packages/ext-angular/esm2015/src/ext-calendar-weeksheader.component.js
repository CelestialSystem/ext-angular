var ExtCalendar_weeksheaderComponent_1;
import * as tslib_1 from "tslib";
import { Ext_calendar_header_Weeks } from './Ext/calendar/header/Weeks';
export class ExtCalendar_weeksheaderMetaData extends Ext_calendar_header_Weeks {
    static getAll() {
        ExtCalendar_weeksheaderMetaData.PROPERTIES = Ext_calendar_header_Weeks.getProperties(ExtCalendar_weeksheaderMetaData.PROPERTIES);
        ExtCalendar_weeksheaderMetaData.EVENTS = Ext_calendar_header_Weeks.getEvents(ExtCalendar_weeksheaderMetaData.EVENTS);
        ExtCalendar_weeksheaderMetaData.EVENTS.forEach((event) => {
            ExtCalendar_weeksheaderMetaData.EVENTNAMES.push(event.name);
        });
    }
}
ExtCalendar_weeksheaderMetaData.PROPERTIES = [];
ExtCalendar_weeksheaderMetaData.EVENTS = [];
ExtCalendar_weeksheaderMetaData.EVENTNAMES = [];
(function () { ExtCalendar_weeksheaderMetaData.getAll(); })();
import { EngBase } from './eng-base';
import { Host, Optional, SkipSelf, 
//Output,
//OnInit,
//AfterViewInit,
//OnChanges,
Component, ElementRef, forwardRef, SimpleChanges } from '@angular/core';
let ExtCalendar_weeksheaderComponent = ExtCalendar_weeksheaderComponent_1 = class ExtCalendar_weeksheaderComponent extends EngBase {
    constructor(eRef, hostComponent) {
        super(eRef, hostComponent, ExtCalendar_weeksheaderMetaData.PROPERTIES, ExtCalendar_weeksheaderMetaData.EVENTS);
        this.xtype = 'calendar-weeksheader';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtCalendar_weeksheaderComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] }
];
ExtCalendar_weeksheaderComponent = ExtCalendar_weeksheaderComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ext-calendar-weeksheader',
        inputs: ExtCalendar_weeksheaderMetaData.PROPERTIES,
        outputs: ExtCalendar_weeksheaderMetaData.EVENTNAMES,
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtCalendar_weeksheaderComponent_1) }],
        template: '<ng-template></ng-template>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf()),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        EngBase])
], ExtCalendar_weeksheaderComponent);
export { ExtCalendar_weeksheaderComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LWNhbGVuZGFyLXdlZWtzaGVhZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzZW5jaGEvZXh0LWFuZ3VsYXIvIiwic291cmNlcyI6WyJzcmMvZXh0LWNhbGVuZGFyLXdlZWtzaGVhZGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3hFLE1BQU0sT0FBTywrQkFBZ0MsU0FBUSx5QkFBeUI7SUFJMUUsTUFBTSxDQUFDLE1BQU07UUFDVCwrQkFBK0IsQ0FBQyxVQUFVLEdBQUcseUJBQXlCLENBQUMsYUFBYSxDQUFDLCtCQUErQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pJLCtCQUErQixDQUFDLE1BQU0sR0FBRyx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsK0JBQStCLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckgsK0JBQStCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBRSxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQzNELCtCQUErQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2hFLENBQUMsQ0FBQyxDQUFBO0lBQ0wsQ0FBQzs7QUFUWSwwQ0FBVSxHQUFhLEVBQUUsQ0FBQztBQUMxQixzQ0FBTSxHQUFVLEVBQUUsQ0FBQztBQUNuQiwwQ0FBVSxHQUFhLEVBQUUsQ0FBQztBQVM1QyxDQUFDLGNBQWEsK0JBQStCLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBRTVELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUNMLElBQUksRUFDSixRQUFRLEVBQ1IsUUFBUTtBQUNSLFNBQVM7QUFDVCxTQUFTO0FBQ1QsZ0JBQWdCO0FBQ2hCLFlBQVk7QUFDWixTQUFTLEVBQ1QsVUFBVSxFQUNWLFVBQVUsRUFDVixhQUFhLEVBQ2QsTUFBTSxlQUFlLENBQUM7QUFTdkIsSUFBYSxnQ0FBZ0Msd0NBQTdDLE1BQWEsZ0NBQWlDLFNBQVEsT0FBTztJQUV6RCxZQUNJLElBQWdCLEVBQ2dCLGFBQXNCO1FBRXRELEtBQUssQ0FDRCxJQUFJLEVBQ0osYUFBYSxFQUNiLCtCQUErQixDQUFDLFVBQVUsRUFDMUMsK0JBQStCLENBQUMsTUFBTSxDQUN6QyxDQUFBO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxzQkFBc0IsQ0FBQTtJQUN2QyxDQUFDO0lBRU0sUUFBUTtRQUNYLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNyQixDQUFDO0lBRU0sZUFBZTtRQUNsQixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQTtJQUM1QixDQUFDO0lBRU0sV0FBVyxDQUFDLE9BQXNCO1FBQ3JDLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDL0IsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUE7SUFDeEIsQ0FBQztDQUNKLENBQUE7O1lBM0JhLFVBQVU7WUFDK0IsT0FBTyx1QkFBckQsSUFBSSxZQUFJLFFBQVEsWUFBSSxRQUFROztBQUp4QixnQ0FBZ0M7SUFQNUMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLDBCQUEwQjtRQUNwQyxNQUFNLEVBQUUsK0JBQStCLENBQUMsVUFBVTtRQUNsRCxPQUFPLEVBQUUsK0JBQStCLENBQUMsVUFBVTtRQUNuRCxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxrQ0FBZ0MsQ0FBQyxFQUFDLENBQUM7UUFDaEcsUUFBUSxFQUFFLDZCQUE2QjtLQUN4QyxDQUFDO0lBS08sbUJBQUEsSUFBSSxFQUFFLENBQUEsRUFBRSxtQkFBQSxRQUFRLEVBQUUsQ0FBQSxFQUFFLG1CQUFBLFFBQVEsRUFBRSxDQUFBOzZDQUR6QixVQUFVO1FBQytCLE9BQU87R0FKakQsZ0NBQWdDLENBOEI1QztTQTlCWSxnQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHRfY2FsZW5kYXJfaGVhZGVyX1dlZWtzIH0gZnJvbSAnLi9FeHQvY2FsZW5kYXIvaGVhZGVyL1dlZWtzJztcbmV4cG9ydCBjbGFzcyBFeHRDYWxlbmRhcl93ZWVrc2hlYWRlck1ldGFEYXRhIGV4dGVuZHMgRXh0X2NhbGVuZGFyX2hlYWRlcl9XZWVrcyB7XG4gICAgcHVibGljIHN0YXRpYyBQUk9QRVJUSUVTOiBzdHJpbmdbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlRTOiBhbnlbXSA9IFtdO1xuICAgIHB1YmxpYyBzdGF0aWMgRVZFTlROQU1FUzogc3RyaW5nW10gPSBbXTtcbiAgICBzdGF0aWMgZ2V0QWxsKCkge1xuICAgICAgICBFeHRDYWxlbmRhcl93ZWVrc2hlYWRlck1ldGFEYXRhLlBST1BFUlRJRVMgPSBFeHRfY2FsZW5kYXJfaGVhZGVyX1dlZWtzLmdldFByb3BlcnRpZXMoRXh0Q2FsZW5kYXJfd2Vla3NoZWFkZXJNZXRhRGF0YS5QUk9QRVJUSUVTKTtcbiAgICAgICAgRXh0Q2FsZW5kYXJfd2Vla3NoZWFkZXJNZXRhRGF0YS5FVkVOVFMgPSBFeHRfY2FsZW5kYXJfaGVhZGVyX1dlZWtzLmdldEV2ZW50cyhFeHRDYWxlbmRhcl93ZWVrc2hlYWRlck1ldGFEYXRhLkVWRU5UUyk7XG4gICAgICAgIEV4dENhbGVuZGFyX3dlZWtzaGVhZGVyTWV0YURhdGEuRVZFTlRTLmZvckVhY2goIChldmVudDogYW55KSA9PiB7XG4gICAgICAgICAgICBFeHRDYWxlbmRhcl93ZWVrc2hlYWRlck1ldGFEYXRhLkVWRU5UTkFNRVMucHVzaChldmVudC5uYW1lKTtcbiAgICAgICAgfSlcbiAgICAgfVxufVxuKGZ1bmN0aW9uICgpIHtFeHRDYWxlbmRhcl93ZWVrc2hlYWRlck1ldGFEYXRhLmdldEFsbCgpO30pKCk7XG5cbmltcG9ydCB7IEVuZ0Jhc2UgfSBmcm9tICcuL2VuZy1iYXNlJztcbmltcG9ydCB7XG4gIEhvc3QsXG4gIE9wdGlvbmFsLFxuICBTa2lwU2VsZixcbiAgLy9PdXRwdXQsXG4gIC8vT25Jbml0LFxuICAvL0FmdGVyVmlld0luaXQsXG4gIC8vT25DaGFuZ2VzLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIGZvcndhcmRSZWYsXG4gIFNpbXBsZUNoYW5nZXNcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2V4dC1jYWxlbmRhci13ZWVrc2hlYWRlcicsXG4gIGlucHV0czogRXh0Q2FsZW5kYXJfd2Vla3NoZWFkZXJNZXRhRGF0YS5QUk9QRVJUSUVTLFxuICBvdXRwdXRzOiBFeHRDYWxlbmRhcl93ZWVrc2hlYWRlck1ldGFEYXRhLkVWRU5UTkFNRVMsXG4gIHByb3ZpZGVyczogW3twcm92aWRlOiBFbmdCYXNlLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBFeHRDYWxlbmRhcl93ZWVrc2hlYWRlckNvbXBvbmVudCl9XSxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGU+PC9uZy10ZW1wbGF0ZT4nXG59KVxuZXhwb3J0IGNsYXNzIEV4dENhbGVuZGFyX3dlZWtzaGVhZGVyQ29tcG9uZW50IGV4dGVuZHMgRW5nQmFzZSB7XG4gICAgeHR5cGU6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgZVJlZjogRWxlbWVudFJlZixcbiAgICAgICAgQEhvc3QoKSBAT3B0aW9uYWwoKSBAU2tpcFNlbGYoKSBob3N0Q29tcG9uZW50OiBFbmdCYXNlXG4gICAgKXtcbiAgICAgICAgc3VwZXIoXG4gICAgICAgICAgICBlUmVmLFxuICAgICAgICAgICAgaG9zdENvbXBvbmVudCxcbiAgICAgICAgICAgIEV4dENhbGVuZGFyX3dlZWtzaGVhZGVyTWV0YURhdGEuUFJPUEVSVElFUyxcbiAgICAgICAgICAgIEV4dENhbGVuZGFyX3dlZWtzaGVhZGVyTWV0YURhdGEuRVZFTlRTXG4gICAgICAgIClcbiAgICAgICAgdGhpcy54dHlwZSA9ICdjYWxlbmRhci13ZWVrc2hlYWRlcidcbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkluaXQoKSB7XG4gICAgICAgIHRoaXMuYmFzZU9uSW5pdCgpXG4gICAgfVxuXG4gICAgcHVibGljIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAgICAgdGhpcy5iYXNlQWZ0ZXJWaWV3SW5pdCgpXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAgICAgdGhpcy5iYXNlT25DaGFuZ2VzKGNoYW5nZXMpXG4gICAgfVxuXG4gICAgcHVibGljIG5nT25EZXN0cm95KCkge1xuICAgICAgICB0aGlzLmJhc2VPbkRlc3Ryb3koKVxuICAgIH1cbn1cbiJdfQ==