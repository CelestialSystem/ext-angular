import * as tslib_1 from "tslib";
//import EWCSparklineline from '../dist/ext-sparklineline.component.js';
//inputs: (new EWCSparklineline()).properties,
import EWCSparklineline from '@sencha/ext-web-components-classic/dist/ext-sparklineline.component.js';
import { Host, Optional, SkipSelf, Component, ElementRef, forwardRef, ViewContainerRef } from '@angular/core';
import { EngBase } from './angularbase';
var ExtSparklinelineComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ExtSparklinelineComponent, _super);
    function ExtSparklinelineComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'chartRangeMax', 'chartRangeMaxX', 'chartRangeMin', 'chartRangeMinX', 'cls', 'controller', 'defaultListenerScope', 'disabled', 'disableTooltips', 'drawNormalOnTop', 'undefined', 'fillColor', 'focusCls', 'height', 'hidden', 'hideMode', 'highlightColor', 'highlightLighten', 'highlightLineColor', 'highlightSpotColor', 'instanceCls', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lineColor', 'lineWidth', 'listeners', 'margin', 'maxSpotColor', 'minSpotColor', 'name', 'nameable', 'normalRangeColor', 'normalRangeMax', 'normalRangeMin', 'plugins', 'publishes', 'reference', 'renderTo', 'ripple', 'session', 'shareableName', 'spotColor', 'spotRadius', 'style', 'tipTpl', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'touchAction', 'twoWayBindable', 'ui', 'userCls', 'values', 'valueSpots', 'viewModel', 'width',], (new EWCSparklineline()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'widthchange',], vc) || this;
        _this.xtype = 'sparklineline';
        return _this;
    }
    ExtSparklinelineComponent_1 = ExtSparklinelineComponent;
    ExtSparklinelineComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSparklinelineComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSparklinelineComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSparklinelineComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSparklinelineComponent_1;
    ExtSparklinelineComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSparklinelineComponent = ExtSparklinelineComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'ExtSparklineline',
            inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'chartRangeMax', 'chartRangeMaxX', 'chartRangeMin', 'chartRangeMinX', 'cls', 'controller', 'defaultListenerScope', 'disabled', 'disableTooltips', 'drawNormalOnTop', 'undefined', 'fillColor', 'focusCls', 'height', 'hidden', 'hideMode', 'highlightColor', 'highlightLighten', 'highlightLineColor', 'highlightSpotColor', 'instanceCls', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lineColor', 'lineWidth', 'listeners', 'margin', 'maxSpotColor', 'minSpotColor', 'name', 'nameable', 'normalRangeColor', 'normalRangeMax', 'normalRangeMin', 'plugins', 'publishes', 'reference', 'renderTo', 'ripple', 'session', 'shareableName', 'spotColor', 'spotRadius', 'style', 'tipTpl', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'touchAction', 'twoWayBindable', 'ui', 'userCls', 'values', 'valueSpots', 'viewModel', 'width',],
            outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'widthchange',],
            providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklinelineComponent_1; }) }],
            template: '<ng-content></ng-content>'
        }),
        tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf())
    ], ExtSparklinelineComponent);
    return ExtSparklinelineComponent;
}(EngBase));
export { ExtSparklinelineComponent };
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSparklineline()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);
//# sourceMappingURL=data:application/json;base64,