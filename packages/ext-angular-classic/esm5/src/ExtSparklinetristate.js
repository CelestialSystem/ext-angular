import { __decorate, __extends, __param } from "tslib";
//import EWCSparklinetristate from '../dist/ext-sparklinetristate.component.js';
//inputs: (new EWCSparklinetristate()).properties,
//import EWCSparklinetristate from '@sencha/ext-web-components-classic/dist/ext-sparklinetristate.component.js';
import { EWCSparklinetristate } from '@sencha/ext-web-components-classic';
import { Host, Optional, SkipSelf, Component, ElementRef, forwardRef, ViewContainerRef } from '@angular/core';
import { EngBase } from './runtime/angularbase';
var ExtSparklinetristateComponent = /** @class */ (function (_super) {
    __extends(ExtSparklinetristateComponent, _super);
    function ExtSparklinetristateComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'barSpacing', 'barWidth', 'bind', 'border', 'cls', 'colorMap', 'controller', 'defaultListenerScope', 'disabled', 'disableTooltips', 'undefined', 'focusCls', 'height', 'hidden', 'hideMode', 'highlightColor', 'highlightLighten', 'instanceCls', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lineColor', 'listeners', 'margin', 'name', 'nameable', 'negBarColor', 'plugins', 'posBarColor', 'publishes', 'reference', 'renderTo', 'ripple', 'session', 'shareableName', 'style', 'tipTpl', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'touchAction', 'twoWayBindable', 'ui', 'userCls', 'values', 'viewModel', 'width', 'zeroBarColor',], (new EWCSparklinetristate()).events, ['ready', 'created', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'widthchange',], vc) || this;
        _this.xtype = 'sparklinetristate';
        return _this;
    }
    ExtSparklinetristateComponent_1 = ExtSparklinetristateComponent;
    ExtSparklinetristateComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSparklinetristateComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSparklinetristateComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSparklinetristateComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSparklinetristateComponent_1;
    ExtSparklinetristateComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSparklinetristateComponent = ExtSparklinetristateComponent_1 = __decorate([
        Component({
            selector: 'ExtSparklinetristate',
            inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'barSpacing', 'barWidth', 'bind', 'border', 'cls', 'colorMap', 'controller', 'defaultListenerScope', 'disabled', 'disableTooltips', 'undefined', 'focusCls', 'height', 'hidden', 'hideMode', 'highlightColor', 'highlightLighten', 'instanceCls', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lineColor', 'listeners', 'margin', 'name', 'nameable', 'negBarColor', 'plugins', 'posBarColor', 'publishes', 'reference', 'renderTo', 'ripple', 'session', 'shareableName', 'style', 'tipTpl', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'touchAction', 'twoWayBindable', 'ui', 'userCls', 'values', 'viewModel', 'width', 'zeroBarColor',],
            outputs: ['ready', 'created', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'widthchange',],
            providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklinetristateComponent_1; }) }],
            template: '<ng-content></ng-content>'
        }),
        __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSparklinetristateComponent);
    return ExtSparklinetristateComponent;
}(EngBase));
export { ExtSparklinetristateComponent };
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSparklinetristate()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);
//# sourceMappingURL=data:application/json;base64,