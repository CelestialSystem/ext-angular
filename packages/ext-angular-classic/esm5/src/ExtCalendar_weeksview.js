import { __decorate, __extends, __param } from "tslib";
//import EWCCalendar_weeksview from '../dist/ext-calendar-weeksview.component.js';
//inputs: (new EWCCalendar_weeksview()).properties,
//import EWCCalendar_weeksview from '@sencha/ext-web-components-classic/dist/ext-calendar-weeksview.component.js';
import { EWCCalendar_weeksview } from '@sencha/ext-web-components-classic';
import { Host, Optional, SkipSelf, Component, ElementRef, forwardRef, ViewContainerRef } from '@angular/core';
import { EngBase } from './angularbase';
var ExtCalendar_weeksviewComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_weeksviewComponent, _super);
    function ExtCalendar_weeksviewComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'addForm', 'addOnSelect', 'allowSelection', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'compact', 'compactOptions', 'controller', 'controlStoreRange', 'dayFormat', 'defaultListenerScope', 'disabled', 'draggable', 'droppable', 'editForm', 'eventDefaults', 'undefined', 'firstDayOfWeek', 'focusCls', 'gestureNavigation', 'header', 'height', 'hidden', 'hideMode', 'instanceCls', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'overflowText', 'plugins', 'publishes', 'reference', 'renderTo', 'ripple', 'session', 'shareableName', 'showOverflow', 'store', 'style', 'timezoneOffset', 'touchAction', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'visibleDays', 'visibleWeeks', 'weekendDays', 'width',], (new EWCCalendar_weeksview()).events, ['ready', 'beforedisabledchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeheightchange', 'beforehiddenchange', 'beforewidthchange', 'blur', 'disabledchange', 'eventadd', 'eventdrop', 'eventedit', 'eventtap', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'select', 'selectrange', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'valuechange', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-weeksview';
        return _this;
    }
    ExtCalendar_weeksviewComponent_1 = ExtCalendar_weeksviewComponent;
    ExtCalendar_weeksviewComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_weeksviewComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_weeksviewComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_weeksviewComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_weeksviewComponent_1;
    ExtCalendar_weeksviewComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_weeksviewComponent = ExtCalendar_weeksviewComponent_1 = __decorate([
        Component({
            selector: 'ExtCalendar_weeksview',
            inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'addForm', 'addOnSelect', 'allowSelection', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'compact', 'compactOptions', 'controller', 'controlStoreRange', 'dayFormat', 'defaultListenerScope', 'disabled', 'draggable', 'droppable', 'editForm', 'eventDefaults', 'undefined', 'firstDayOfWeek', 'focusCls', 'gestureNavigation', 'header', 'height', 'hidden', 'hideMode', 'instanceCls', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'overflowText', 'plugins', 'publishes', 'reference', 'renderTo', 'ripple', 'session', 'shareableName', 'showOverflow', 'store', 'style', 'timezoneOffset', 'touchAction', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'visibleDays', 'visibleWeeks', 'weekendDays', 'width',],
            outputs: ['ready', 'beforedisabledchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeheightchange', 'beforehiddenchange', 'beforewidthchange', 'blur', 'disabledchange', 'eventadd', 'eventdrop', 'eventedit', 'eventtap', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'select', 'selectrange', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'valuechange', 'widthchange',],
            providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_weeksviewComponent_1; }) }],
            template: '<ng-content></ng-content>'
        }),
        __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_weeksviewComponent);
    return ExtCalendar_weeksviewComponent;
}(EngBase));
export { ExtCalendar_weeksviewComponent };
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_weeksview()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);
//# sourceMappingURL=data:application/json;base64,