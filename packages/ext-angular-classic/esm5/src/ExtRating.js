import * as tslib_1 from "tslib";
//import EWCRating from '../dist/ext-rating.component.js';
//inputs: (new EWCRating()).properties,
import EWCRating from '@sencha/ext-web-components-classic/dist/ext-rating.component.js';
import { Host, Optional, SkipSelf, Component, ElementRef, forwardRef, ViewContainerRef } from '@angular/core';
import { EngBase } from './angularbase';
var ExtRatingComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ExtRatingComponent, _super);
    function ExtRatingComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'animate', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'family', 'focusCls', 'glyphs', 'height', 'hidden', 'hideMode', 'instanceCls', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'limit', 'listeners', 'margin', 'minimum', 'name', 'nameable', 'overStyle', 'plugins', 'publishes', 'reference', 'renderTo', 'ripple', 'rounding', 'scale', 'selectedStyle', 'session', 'shareableName', 'style', 'tip', 'tooltipText', 'touchAction', 'trackingValue', 'trackOver', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width',], (new EWCRating()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'widthchange',], vc) || this;
        _this.xtype = 'rating';
        return _this;
    }
    ExtRatingComponent_1 = ExtRatingComponent;
    ExtRatingComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtRatingComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtRatingComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtRatingComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtRatingComponent_1;
    ExtRatingComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtRatingComponent = ExtRatingComponent_1 = tslib_1.__decorate([
        Component({
            selector: 'ExtRating',
            inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'animate', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'family', 'focusCls', 'glyphs', 'height', 'hidden', 'hideMode', 'instanceCls', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'limit', 'listeners', 'margin', 'minimum', 'name', 'nameable', 'overStyle', 'plugins', 'publishes', 'reference', 'renderTo', 'ripple', 'rounding', 'scale', 'selectedStyle', 'session', 'shareableName', 'style', 'tip', 'tooltipText', 'touchAction', 'trackingValue', 'trackOver', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width',],
            outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'widthchange',],
            providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtRatingComponent_1; }) }],
            template: '<ng-content></ng-content>'
        }),
        tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf())
    ], ExtRatingComponent);
    return ExtRatingComponent;
}(EngBase));
export { ExtRatingComponent };
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCRating()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);
//# sourceMappingURL=data:application/json;base64,