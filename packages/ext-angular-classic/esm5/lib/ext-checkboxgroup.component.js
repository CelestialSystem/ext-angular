/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef } from '@angular/core';
import { base } from './base';
var checkboxgroupMetaData = /** @class */ (function () {
    function checkboxgroupMetaData() {
    }
    checkboxgroupMetaData.XTYPE = 'checkboxgroup';
    checkboxgroupMetaData.PROPERTIESOBJECT = {
        "actions": "Object",
        "activeChildTabIndex": "Number",
        "activeCounter": "Number",
        "activeError": "String",
        "activeErrorsTpl": "String/String[]/Ext.XTemplate",
        "activeItem": "String/Number",
        "afterBodyEl": "String/Array/Ext.XTemplate",
        "afterLabelTextTpl": "String/Array/Ext.XTemplate",
        "afterLabelTpl": "String/Array/Ext.XTemplate",
        "afterSubTpl": "String/Array/Ext.XTemplate",
        "alignOnScroll": "Boolean",
        "alignTarget": "String",
        "allowBlank": "Boolean",
        "allowFocusingDisabledChildren": "Boolean",
        "alwaysOnTop": "Boolean/Number",
        "anchor": "String",
        "anchorSize": "Number/Object",
        "animateShadow": "Boolean",
        "ariaAttributes": "Object",
        "ariaDescribedBy": "String",
        "ariaErrorText": "String",
        "ariaHelp": "String",
        "ariaLabel": "String",
        "ariaLabelledBy": "String",
        "autoDestroy": "Boolean",
        "autoEl": "String/Object",
        "autoFitErrors": "Boolean",
        "autoRender": "Boolean/String/HTMLElement/Ext.dom.Element",
        "autoScroll": "Boolean",
        "autoShow": "Boolean",
        "baseBodyCls": "String",
        "baseCls": "String",
        "beforeBodyEl": "String/Array/Ext.XTemplate",
        "beforeLabelTextTpl": "String/Array/Ext.XTemplate",
        "beforeLabelTpl": "String/Array/Ext.XTemplate",
        "beforeSubTpl": "String/Array/Ext.XTemplate",
        "bind": "Object/String",
        "blankText": "String",
        "border": "Number/String/Boolean",
        "bubbleEvents": "String[]",
        "childEls": "Object/String[]/Object[]",
        "cls": "String/String[]",
        "columns": "String/Number/Number[]",
        "columnWidth": "Number",
        "combineErrors": "Boolean",
        "combineLabels": "Boolean",
        "componentCls": "String",
        "componentLayout": "String/Object",
        "constrain": "Boolean",
        "constraintInsets": "Object/String",
        "constrainTo": "Ext.util.Region/Ext.dom.Element",
        "contentEl": "String",
        "controller": "String/Object/Ext.app.ViewController",
        "data": "Object",
        "defaultAlign": "String",
        "defaultFocus": "String",
        "defaultListenerScope": "Boolean",
        "defaults": "Object/Function",
        "defaultType": "String",
        "detachOnRemove": "Boolean",
        "disabled": "Boolean",
        "disabledCls": "String",
        "dock": "'top'/'bottom'/'left'/'right'",
        "draggable": "Boolean/Object",
        "errorMsgCls": "String",
        "fieldBodyCls": "String",
        "fieldDefaults": "Object",
        "fieldLabel": "String",
        "fixed": "Boolean",
        "flex": "Number",
        "floating": "Boolean",
        "focusableContainer": "Boolean",
        "focusCls": "String",
        "focusOnToFront": "Boolean",
        "formBind": "Boolean",
        "formItemCls": "String",
        "frame": "Boolean",
        "height": "Number|String",
        "hidden": "Boolean",
        "hideEmptyLabel": "Boolean",
        "hideLabel": "Boolean",
        "hideMode": "String",
        "html": "String/Object",
        "id": "String",
        "inactiveChildTabIndex": "Number",
        "invalidCls": "String",
        "itemId": "String",
        "items": "Ext.form.field.Checkbox[]/Object[]",
        "keyMap": "Object",
        "keyMapEnabled": "Boolean",
        "keyMapTarget": "String",
        "labelableRenderTpl": "String/String[]/Ext.XTemplate",
        "labelAlign": "String",
        "labelAttrTpl": "String/Array/Ext.XTemplate",
        "labelCls": "String",
        "labelClsExtra": "String",
        "labelConnector": "String",
        "labelPad": "Number",
        "labelSeparator": "String",
        "labelStyle": "String",
        "labelWidth": "Number",
        "layout": "Ext.enums.Layout/Object",
        "liquidLayout": "Boolean",
        "listeners": "Object",
        "liveDrag": "Boolean",
        "loader": "Ext.ComponentLoader/Object",
        "margin": "Number/String",
        "maskDefaults": "Object",
        "maskElement": "String",
        "maxHeight": "Number",
        "maxWidth": "Number",
        "minHeight": "Number",
        "minWidth": "Number",
        "modal": "Boolean",
        "modelValidation": "Boolean",
        "msgTarget": "String",
        "name": "String",
        "nameable": "Boolean",
        "nameHolder": "Boolean",
        "overCls": "String",
        "overflowX": "String",
        "overflowY": "String",
        "padding": "Number/String",
        "plugins": "Array/Ext.enums.Plugin/Object/Ext.plugin.Abstract",
        "preventMark": "Boolean",
        "publishes": "String/String[]/Object",
        "reference": "String",
        "referenceHolder": "Boolean",
        "region": "'north'/'south'/'east'/'west'/'center'",
        "renderConfig": "Object",
        "renderData": "Object",
        "renderSelectors": "Object",
        "renderTo": "String/HTMLElement/Ext.dom.Element",
        "renderTpl": "Ext.XTemplate/String/String[]",
        "resetFocusPosition": "Boolean",
        "resizable": "Boolean/Object",
        "resizeHandles": "String",
        "saveDelay": "Number",
        "scrollable": "Boolean/String/Object",
        "session": "Boolean/Object/Ext.data.Session",
        "shadow": "String/Boolean",
        "shadowOffset": "Number",
        "shareableName": "Boolean",
        "shim": "Boolean",
        "shrinkWrap": "Boolean/Number",
        "stateEvents": "String[]",
        "stateful": "Boolean/Object",
        "stateId": "String",
        "style": "String/Object",
        "submitValue": "Boolean",
        "suspendLayout": "Boolean",
        "tabGuard": "Boolean",
        "tabIndex": "Number",
        "toFrontOnShow": "Boolean",
        "touchAction": "Object",
        "tpl": "Ext.XTemplate/Ext.Template/String/String[]",
        "tplWriteMode": "String",
        "twoWayBindable": "String/String[]/Object",
        "ui": "String",
        "uiCls": "String[]",
        "userCls": "String/String[]",
        "validateOnChange": "Boolean",
        "validation": "Boolean/String",
        "validationField": "Ext.data.Field",
        "value": "Object",
        "valuePublishEvent": "String[]/String",
        "vertical": "Boolean",
        "viewModel": "String/Object/Ext.app.ViewModel",
        "weight": "Number",
        "width": "Number|String",
        "xtype": "Ext.enums.Widget",
        "platformConfig": "Object",
        "responsiveConfig": "Object",
        "fitToParent": "Boolean",
        "config": "Object",
    };
    checkboxgroupMetaData.PROPERTIES = [
        'actions',
        'activeChildTabIndex',
        'activeCounter',
        'activeError',
        'activeErrorsTpl',
        'activeItem',
        'afterBodyEl',
        'afterLabelTextTpl',
        'afterLabelTpl',
        'afterSubTpl',
        'alignOnScroll',
        'alignTarget',
        'allowBlank',
        'allowFocusingDisabledChildren',
        'alwaysOnTop',
        'anchor',
        'anchorSize',
        'animateShadow',
        'ariaAttributes',
        'ariaDescribedBy',
        'ariaErrorText',
        'ariaHelp',
        'ariaLabel',
        'ariaLabelledBy',
        'autoDestroy',
        'autoEl',
        'autoFitErrors',
        'autoRender',
        'autoScroll',
        'autoShow',
        'baseBodyCls',
        'baseCls',
        'beforeBodyEl',
        'beforeLabelTextTpl',
        'beforeLabelTpl',
        'beforeSubTpl',
        'bind',
        'blankText',
        'border',
        'bubbleEvents',
        'childEls',
        'cls',
        'columns',
        'columnWidth',
        'combineErrors',
        'combineLabels',
        'componentCls',
        'componentLayout',
        'constrain',
        'constraintInsets',
        'constrainTo',
        'contentEl',
        'controller',
        'data',
        'defaultAlign',
        'defaultFocus',
        'defaultListenerScope',
        'defaults',
        'defaultType',
        'detachOnRemove',
        'disabled',
        'disabledCls',
        'dock',
        'draggable',
        'errorMsgCls',
        'fieldBodyCls',
        'fieldDefaults',
        'fieldLabel',
        'fixed',
        'flex',
        'floating',
        'focusableContainer',
        'focusCls',
        'focusOnToFront',
        'formBind',
        'formItemCls',
        'frame',
        'height',
        'hidden',
        'hideEmptyLabel',
        'hideLabel',
        'hideMode',
        'html',
        'id',
        'inactiveChildTabIndex',
        'invalidCls',
        'itemId',
        'items',
        'keyMap',
        'keyMapEnabled',
        'keyMapTarget',
        'labelableRenderTpl',
        'labelAlign',
        'labelAttrTpl',
        'labelCls',
        'labelClsExtra',
        'labelConnector',
        'labelPad',
        'labelSeparator',
        'labelStyle',
        'labelWidth',
        'layout',
        'liquidLayout',
        'listeners',
        'liveDrag',
        'loader',
        'margin',
        'maskDefaults',
        'maskElement',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'modal',
        'modelValidation',
        'msgTarget',
        'name',
        'nameable',
        'nameHolder',
        'overCls',
        'overflowX',
        'overflowY',
        'padding',
        'plugins',
        'preventMark',
        'publishes',
        'reference',
        'referenceHolder',
        'region',
        'renderConfig',
        'renderData',
        'renderSelectors',
        'renderTo',
        'renderTpl',
        'resetFocusPosition',
        'resizable',
        'resizeHandles',
        'saveDelay',
        'scrollable',
        'session',
        'shadow',
        'shadowOffset',
        'shareableName',
        'shim',
        'shrinkWrap',
        'stateEvents',
        'stateful',
        'stateId',
        'style',
        'submitValue',
        'suspendLayout',
        'tabGuard',
        'tabIndex',
        'toFrontOnShow',
        'touchAction',
        'tpl',
        'tplWriteMode',
        'twoWayBindable',
        'ui',
        'uiCls',
        'userCls',
        'validateOnChange',
        'validation',
        'validationField',
        'value',
        'valuePublishEvent',
        'vertical',
        'viewModel',
        'weight',
        'width',
        'xtype',
        'platformConfig',
        'responsiveConfig',
        'fitToParent',
        'config'
    ];
    checkboxgroupMetaData.EVENTS = [
        { name: 'activate', parameters: 'checkboxgroup' },
        { name: 'add', parameters: 'checkboxgroup,component,index' },
        { name: 'added', parameters: 'checkboxgroup,container,pos' },
        { name: 'afterlayout', parameters: 'checkboxgroup,layout' },
        { name: 'afterlayoutanimation', parameters: 'checkboxgroup' },
        { name: 'afterrender', parameters: 'checkboxgroup' },
        { name: 'beforeactivate', parameters: 'checkboxgroup' },
        { name: 'beforeadd', parameters: 'checkboxgroup,component,index' },
        { name: 'beforedeactivate', parameters: 'checkboxgroup' },
        { name: 'beforedestroy', parameters: 'checkboxgroup' },
        { name: 'beforehide', parameters: 'checkboxgroup' },
        { name: 'beforeremove', parameters: 'checkboxgroup,component' },
        { name: 'beforerender', parameters: 'checkboxgroup' },
        { name: 'beforeshow', parameters: 'checkboxgroup' },
        { name: 'beforestaterestore', parameters: 'checkboxgroup,state' },
        { name: 'beforestatesave', parameters: 'checkboxgroup,state' },
        { name: 'blur', parameters: 'checkboxgroup,event' },
        { name: 'boxready', parameters: 'checkboxgroup,width,height' },
        { name: 'change', parameters: 'checkboxgroup,newValue,oldValue' },
        { name: 'childmove', parameters: 'checkboxgroup,component,prevIndex,newIndex' },
        { name: 'deactivate', parameters: 'checkboxgroup' },
        { name: 'destroy', parameters: 'checkboxgroup' },
        { name: 'dirtychange', parameters: 'checkboxgroup,isDirty' },
        { name: 'disable', parameters: 'checkboxgroup' },
        { name: 'enable', parameters: 'checkboxgroup' },
        { name: 'errorchange', parameters: 'checkboxgroup,error' },
        { name: 'fielderrorchange', parameters: 'checkboxgroup,field,error' },
        { name: 'fieldvaliditychange', parameters: 'checkboxgroup,field,isValid' },
        { name: 'focus', parameters: 'checkboxgroup,event' },
        { name: 'focusenter', parameters: 'checkboxgroup,event' },
        { name: 'focusleave', parameters: 'checkboxgroup,event' },
        { name: 'hide', parameters: 'checkboxgroup' },
        { name: 'move', parameters: 'checkboxgroup,x,y' },
        { name: 'remove', parameters: 'checkboxgroup,component' },
        { name: 'removed', parameters: 'checkboxgroup,ownerCt' },
        { name: 'render', parameters: 'checkboxgroup' },
        { name: 'resize', parameters: 'checkboxgroup,width,height,oldWidth,oldHeight' },
        { name: 'show', parameters: 'checkboxgroup' },
        { name: 'staterestore', parameters: 'checkboxgroup,state' },
        { name: 'statesave', parameters: 'checkboxgroup,state' },
        { name: 'validitychange', parameters: 'checkboxgroup,isValid' },
        { name: 'ready', parameters: '' }
    ];
    checkboxgroupMetaData.EVENTNAMES = [
        'activate',
        'add',
        'added',
        'afterlayout',
        'afterlayoutanimation',
        'afterrender',
        'beforeactivate',
        'beforeadd',
        'beforedeactivate',
        'beforedestroy',
        'beforehide',
        'beforeremove',
        'beforerender',
        'beforeshow',
        'beforestaterestore',
        'beforestatesave',
        'blur',
        'boxready',
        'change',
        'childmove',
        'deactivate',
        'destroy',
        'dirtychange',
        'disable',
        'enable',
        'errorchange',
        'fielderrorchange',
        'fieldvaliditychange',
        'focus',
        'focusenter',
        'focusleave',
        'hide',
        'move',
        'remove',
        'removed',
        'render',
        'resize',
        'show',
        'staterestore',
        'statesave',
        'validitychange',
        'ready'
    ];
    return checkboxgroupMetaData;
}());
export { checkboxgroupMetaData };
if (false) {
    /** @type {?} */
    checkboxgroupMetaData.XTYPE;
    /** @type {?} */
    checkboxgroupMetaData.PROPERTIESOBJECT;
    /** @type {?} */
    checkboxgroupMetaData.PROPERTIES;
    /** @type {?} */
    checkboxgroupMetaData.EVENTS;
    /** @type {?} */
    checkboxgroupMetaData.EVENTNAMES;
}
var ExtCheckboxgroupComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ExtCheckboxgroupComponent, _super);
    function ExtCheckboxgroupComponent(eRef) {
        return _super.call(this, eRef, checkboxgroupMetaData) || this;
    }
    /**
     * @return {?}
     */
    ExtCheckboxgroupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { this.baseOnInit(checkboxgroupMetaData); };
    //public ngOnChanges(changes: SimpleChanges) {this.baseOnChanges(changes)}
    //public ngOnChanges(changes: SimpleChanges) {this.baseOnChanges(changes)}
    /**
     * @return {?}
     */
    ExtCheckboxgroupComponent.prototype.ngAfterContentInit = 
    //public ngOnChanges(changes: SimpleChanges) {this.baseOnChanges(changes)}
    /**
     * @return {?}
     */
    function () {
        this.baseAfterContentInit();
        this['ready'].emit(this);
    };
    ExtCheckboxgroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'checkboxgroup',
                    inputs: checkboxgroupMetaData.PROPERTIES,
                    outputs: checkboxgroupMetaData.EVENTNAMES,
                    providers: [{ provide: base, useExisting: forwardRef(function () { return ExtCheckboxgroupComponent; }) }],
                    template: '<ng-template #dynamic></ng-template>'
                }] }
    ];
    /** @nocollapse */
    ExtCheckboxgroupComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ExtCheckboxgroupComponent;
}(base));
export { ExtCheckboxgroupComponent };
//# sourceMappingURL=data:application/json;base64,