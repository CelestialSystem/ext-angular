/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef } from '@angular/core';
import { base } from './base';
export class colorpickersliderMetaData {
}
colorpickersliderMetaData.XTYPE = 'colorpickerslider';
colorpickersliderMetaData.PROPERTIESOBJECT = {
    "actions": "Object",
    "activeChildTabIndex": "Number",
    "activeCounter": "Number",
    "activeItem": "String/Number",
    "alignOnScroll": "Boolean",
    "alignTarget": "String",
    "allowFocusingDisabledChildren": "Boolean",
    "alwaysOnTop": "Boolean/Number",
    "anchor": "String",
    "anchorSize": "Number/Object",
    "animateShadow": "Boolean",
    "ariaAttributes": "Object",
    "ariaDescribedBy": "String",
    "ariaLabel": "String",
    "ariaLabelledBy": "String",
    "autoDestroy": "Boolean",
    "autoEl": "String/Object",
    "autoRender": "Boolean/String/HTMLElement/Ext.dom.Element",
    "autoScroll": "Boolean",
    "autoShow": "Boolean",
    "baseCls": "String",
    "bind": "Object/String",
    "border": "Number/String/Boolean",
    "bubbleEvents": "String[]",
    "childEls": "Object/String[]/Object[]",
    "cls": "String/String[]",
    "columnWidth": "Number",
    "componentCls": "String",
    "componentLayout": "String/Object",
    "constrain": "Boolean",
    "constraintInsets": "Object/String",
    "constrainTo": "Ext.util.Region/Ext.dom.Element",
    "contentEl": "String",
    "controller": "String/Object/Ext.app.ViewController",
    "data": "Object",
    "defaultAlign": "String",
    "defaultFocus": "String",
    "defaultListenerScope": "Boolean",
    "defaults": "Object/Function",
    "defaultType": "String",
    "detachOnRemove": "Boolean",
    "disabled": "Boolean",
    "disabledCls": "String",
    "dock": "'top'/'bottom'/'left'/'right'",
    "draggable": "Boolean/Object",
    "fixed": "Boolean",
    "flex": "Number",
    "floating": "Boolean",
    "focusableContainer": "Boolean",
    "focusCls": "String",
    "focusOnToFront": "Boolean",
    "formBind": "Boolean",
    "frame": "Boolean",
    "height": "Number|String",
    "hidden": "Boolean",
    "hideMode": "String",
    "html": "String/Object",
    "id": "String",
    "inactiveChildTabIndex": "Number",
    "itemId": "String",
    "items": "Object/Object[]",
    "keyMap": "Object",
    "keyMapEnabled": "Boolean",
    "keyMapTarget": "String",
    "layout": "Ext.enums.Layout/Object",
    "liquidLayout": "Boolean",
    "listeners": "Object",
    "liveDrag": "Boolean",
    "loader": "Ext.ComponentLoader/Object",
    "margin": "Number/String",
    "maskDefaults": "Object",
    "maskElement": "String",
    "maxHeight": "Number",
    "maxWidth": "Number",
    "minHeight": "Number",
    "minWidth": "Number",
    "modal": "Boolean",
    "modelValidation": "Boolean",
    "nameable": "Boolean",
    "nameHolder": "Boolean",
    "overCls": "String",
    "overflowX": "String",
    "overflowY": "String",
    "padding": "Number/String",
    "plugins": "Array/Ext.enums.Plugin/Object/Ext.plugin.Abstract",
    "publishes": "String/String[]/Object",
    "reference": "String",
    "referenceHolder": "Boolean",
    "region": "'north'/'south'/'east'/'west'/'center'",
    "renderConfig": "Object",
    "renderData": "Object",
    "renderSelectors": "Object",
    "renderTo": "String/HTMLElement/Ext.dom.Element",
    "renderTpl": "Ext.XTemplate/String/String[]",
    "resetFocusPosition": "Boolean",
    "resizable": "Boolean/Object",
    "resizeHandles": "String",
    "saveDelay": "Number",
    "scrollable": "Boolean/String/Object",
    "session": "Boolean/Object/Ext.data.Session",
    "shadow": "String/Boolean",
    "shadowOffset": "Number",
    "shareableName": "Boolean",
    "shim": "Boolean",
    "shrinkWrap": "Boolean/Number",
    "stateEvents": "String[]",
    "stateful": "Boolean/Object",
    "stateId": "String",
    "style": "String/Object",
    "suspendLayout": "Boolean",
    "tabGuard": "Boolean",
    "tabIndex": "Number",
    "toFrontOnShow": "Boolean",
    "touchAction": "Object",
    "tpl": "Ext.XTemplate/Ext.Template/String/String[]",
    "tplWriteMode": "String",
    "twoWayBindable": "String/String[]/Object",
    "ui": "String",
    "uiCls": "String[]",
    "userCls": "String/String[]",
    "viewModel": "String/Object/Ext.app.ViewModel",
    "weight": "Number",
    "width": "Number|String",
    "xtype": "Ext.enums.Widget",
    "platformConfig": "Object",
    "fitToParent": "Boolean",
    "config": "Object",
};
colorpickersliderMetaData.PROPERTIES = [
    'actions',
    'activeChildTabIndex',
    'activeCounter',
    'activeItem',
    'alignOnScroll',
    'alignTarget',
    'allowFocusingDisabledChildren',
    'alwaysOnTop',
    'anchor',
    'anchorSize',
    'animateShadow',
    'ariaAttributes',
    'ariaDescribedBy',
    'ariaLabel',
    'ariaLabelledBy',
    'autoDestroy',
    'autoEl',
    'autoRender',
    'autoScroll',
    'autoShow',
    'baseCls',
    'bind',
    'border',
    'bubbleEvents',
    'childEls',
    'cls',
    'columnWidth',
    'componentCls',
    'componentLayout',
    'constrain',
    'constraintInsets',
    'constrainTo',
    'contentEl',
    'controller',
    'data',
    'defaultAlign',
    'defaultFocus',
    'defaultListenerScope',
    'defaults',
    'defaultType',
    'detachOnRemove',
    'disabled',
    'disabledCls',
    'dock',
    'draggable',
    'fixed',
    'flex',
    'floating',
    'focusableContainer',
    'focusCls',
    'focusOnToFront',
    'formBind',
    'frame',
    'height',
    'hidden',
    'hideMode',
    'html',
    'id',
    'inactiveChildTabIndex',
    'itemId',
    'items',
    'keyMap',
    'keyMapEnabled',
    'keyMapTarget',
    'layout',
    'liquidLayout',
    'listeners',
    'liveDrag',
    'loader',
    'margin',
    'maskDefaults',
    'maskElement',
    'maxHeight',
    'maxWidth',
    'minHeight',
    'minWidth',
    'modal',
    'modelValidation',
    'nameable',
    'nameHolder',
    'overCls',
    'overflowX',
    'overflowY',
    'padding',
    'plugins',
    'publishes',
    'reference',
    'referenceHolder',
    'region',
    'renderConfig',
    'renderData',
    'renderSelectors',
    'renderTo',
    'renderTpl',
    'resetFocusPosition',
    'resizable',
    'resizeHandles',
    'saveDelay',
    'scrollable',
    'session',
    'shadow',
    'shadowOffset',
    'shareableName',
    'shim',
    'shrinkWrap',
    'stateEvents',
    'stateful',
    'stateId',
    'style',
    'suspendLayout',
    'tabGuard',
    'tabIndex',
    'toFrontOnShow',
    'touchAction',
    'tpl',
    'tplWriteMode',
    'twoWayBindable',
    'ui',
    'uiCls',
    'userCls',
    'viewModel',
    'weight',
    'width',
    'xtype',
    'platformConfig',
    'fitToParent',
    'config'
];
colorpickersliderMetaData.EVENTS = [
    { name: 'activate', parameters: 'colorpickerslider' },
    { name: 'add', parameters: 'colorpickerslider,component,index' },
    { name: 'added', parameters: 'colorpickerslider,container,pos' },
    { name: 'afterlayout', parameters: 'colorpickerslider,layout' },
    { name: 'afterlayoutanimation', parameters: 'colorpickerslider' },
    { name: 'afterrender', parameters: 'colorpickerslider' },
    { name: 'beforeactivate', parameters: 'colorpickerslider' },
    { name: 'beforeadd', parameters: 'colorpickerslider,component,index' },
    { name: 'beforedeactivate', parameters: 'colorpickerslider' },
    { name: 'beforedestroy', parameters: 'colorpickerslider' },
    { name: 'beforehide', parameters: 'colorpickerslider' },
    { name: 'beforeremove', parameters: 'colorpickerslider,component' },
    { name: 'beforerender', parameters: 'colorpickerslider' },
    { name: 'beforeshow', parameters: 'colorpickerslider' },
    { name: 'beforestaterestore', parameters: 'colorpickerslider,state' },
    { name: 'beforestatesave', parameters: 'colorpickerslider,state' },
    { name: 'blur', parameters: 'colorpickerslider,event' },
    { name: 'boxready', parameters: 'colorpickerslider,width,height' },
    { name: 'childmove', parameters: 'colorpickerslider,component,prevIndex,newIndex' },
    { name: 'deactivate', parameters: 'colorpickerslider' },
    { name: 'destroy', parameters: 'colorpickerslider' },
    { name: 'disable', parameters: 'colorpickerslider' },
    { name: 'enable', parameters: 'colorpickerslider' },
    { name: 'focus', parameters: 'colorpickerslider,event' },
    { name: 'focusenter', parameters: 'colorpickerslider,event' },
    { name: 'focusleave', parameters: 'colorpickerslider,event' },
    { name: 'hide', parameters: 'colorpickerslider' },
    { name: 'move', parameters: 'colorpickerslider,x,y' },
    { name: 'remove', parameters: 'colorpickerslider,component' },
    { name: 'removed', parameters: 'colorpickerslider,ownerCt' },
    { name: 'render', parameters: 'colorpickerslider' },
    { name: 'resize', parameters: 'colorpickerslider,width,height,oldWidth,oldHeight' },
    { name: 'show', parameters: 'colorpickerslider' },
    { name: 'staterestore', parameters: 'colorpickerslider,state' },
    { name: 'statesave', parameters: 'colorpickerslider,state' },
    { name: 'ready', parameters: '' }
];
colorpickersliderMetaData.EVENTNAMES = [
    'activate',
    'add',
    'added',
    'afterlayout',
    'afterlayoutanimation',
    'afterrender',
    'beforeactivate',
    'beforeadd',
    'beforedeactivate',
    'beforedestroy',
    'beforehide',
    'beforeremove',
    'beforerender',
    'beforeshow',
    'beforestaterestore',
    'beforestatesave',
    'blur',
    'boxready',
    'childmove',
    'deactivate',
    'destroy',
    'disable',
    'enable',
    'focus',
    'focusenter',
    'focusleave',
    'hide',
    'move',
    'remove',
    'removed',
    'render',
    'resize',
    'show',
    'staterestore',
    'statesave',
    'ready'
];
if (false) {
    /** @type {?} */
    colorpickersliderMetaData.XTYPE;
    /** @type {?} */
    colorpickersliderMetaData.PROPERTIESOBJECT;
    /** @type {?} */
    colorpickersliderMetaData.PROPERTIES;
    /** @type {?} */
    colorpickersliderMetaData.EVENTS;
    /** @type {?} */
    colorpickersliderMetaData.EVENTNAMES;
}
export class ExtColorpickersliderComponent extends base {
    /**
     * @param {?} eRef
     */
    constructor(eRef) { super(eRef, colorpickersliderMetaData); }
    /**
     * @return {?}
     */
    ngOnInit() { this.baseOnInit(colorpickersliderMetaData); }
    //public ngOnChanges(changes: SimpleChanges) {this.baseOnChanges(changes)}
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.baseAfterContentInit();
        this['ready'].emit(this);
    }
}
ExtColorpickersliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'colorpickerslider',
                inputs: colorpickersliderMetaData.PROPERTIES,
                outputs: colorpickersliderMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: forwardRef(() => ExtColorpickersliderComponent) }],
                template: '<ng-template #dynamic></ng-template>'
            }] }
];
/** @nocollapse */
ExtColorpickersliderComponent.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,