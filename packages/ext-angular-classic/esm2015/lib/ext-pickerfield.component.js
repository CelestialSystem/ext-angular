/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, forwardRef } from '@angular/core';
import { base } from './base';
export class pickerfieldMetaData {
}
pickerfieldMetaData.XTYPE = 'pickerfield';
pickerfieldMetaData.PROPERTIESOBJECT = {
    "activeCounter": "Number",
    "activeError": "String",
    "activeErrorsTpl": "String/String[]/Ext.XTemplate",
    "afterBodyEl": "String/Array/Ext.XTemplate",
    "afterLabelTextTpl": "String/Array/Ext.XTemplate",
    "afterLabelTpl": "String/Array/Ext.XTemplate",
    "afterSubTpl": "String/Array/Ext.XTemplate",
    "alignOnScroll": "Boolean",
    "alignTarget": "String",
    "allowBlank": "Boolean",
    "allowOnlyWhitespace": "Boolean",
    "alwaysOnTop": "Boolean/Number",
    "anchor": "String",
    "animateShadow": "Boolean",
    "ariaAttributes": "Object",
    "ariaDescribedBy": "String",
    "ariaErrorText": "String",
    "ariaHelp": "String",
    "ariaLabel": "String",
    "ariaLabelledBy": "String",
    "autoEl": "String/Object",
    "autoFitErrors": "Boolean",
    "autoHideInputMask": "Boolean",
    "autoRender": "Boolean/String/HTMLElement/Ext.dom.Element",
    "autoScroll": "Boolean",
    "autoShow": "Boolean",
    "baseBodyCls": "String",
    "baseCls": "String",
    "beforeBodyEl": "String/Array/Ext.XTemplate",
    "beforeLabelTextTpl": "String/Array/Ext.XTemplate",
    "beforeLabelTpl": "String/Array/Ext.XTemplate",
    "beforeSubTpl": "String/Array/Ext.XTemplate",
    "bind": "Object/String",
    "blankText": "String",
    "border": "Number/String/Boolean",
    "checkChangeBuffer": "Number",
    "checkChangeEvents": "String[]",
    "childEls": "Object/String[]/Object[]",
    "cls": "String/String[]",
    "columnWidth": "Number",
    "componentCls": "String",
    "componentLayout": "String/Object",
    "constrain": "Boolean",
    "constraintInsets": "Object/String",
    "constrainTo": "Ext.util.Region/Ext.dom.Element",
    "contentEl": "String",
    "controller": "String/Object/Ext.app.ViewController",
    "data": "Object",
    "defaultAlign": "String",
    "defaultListenerScope": "Boolean",
    "dirtyCls": "String",
    "disabled": "Boolean",
    "disabledCls": "String",
    "disableKeyFilter": "Boolean",
    "dock": "'top'/'bottom'/'left'/'right'",
    "draggable": "Boolean/Object",
    "editable": "Boolean",
    "emptyCls": "String",
    "emptyText": "String",
    "enableKeyEvents": "Boolean",
    "enforceMaxLength": "Boolean",
    "errorMsgCls": "String",
    "fieldBodyCls": "String",
    "fieldCls": "String",
    "fieldLabel": "String",
    "fieldStyle": "String",
    "fieldSubTpl": "Ext.XTemplate",
    "fixed": "Boolean",
    "flex": "Number",
    "floating": "Boolean",
    "focusCls": "String",
    "focusOnToFront": "Boolean",
    "formatText": "String",
    "formBind": "Boolean",
    "formItemCls": "String",
    "frame": "Boolean",
    "grow": "Boolean",
    "growMax": "Number",
    "growMin": "Number",
    "height": "Number|String",
    "hidden": "Boolean",
    "hideEmptyLabel": "Boolean",
    "hideLabel": "Boolean",
    "hideMode": "String",
    "hideTrigger": "Boolean",
    "html": "String/Object",
    "id": "String",
    "inputAttrTpl": "String/Array/Ext.XTemplate",
    "inputId": "String",
    "inputMask": "String/Ext.field.InputMask",
    "inputType": "String",
    "inputWrapCls": "String",
    "invalidCls": "String",
    "invalidText": "String",
    "isTextInput": "Boolean",
    "itemId": "String",
    "keyMap": "Object",
    "keyMapEnabled": "Boolean",
    "keyMapTarget": "String",
    "labelableRenderTpl": "String/String[]/Ext.XTemplate",
    "labelAlign": "String",
    "labelAttrTpl": "String/Array/Ext.XTemplate",
    "labelCls": "String",
    "labelClsExtra": "String",
    "labelPad": "Number",
    "labelSeparator": "String",
    "labelStyle": "String",
    "labelWidth": "Number",
    "liquidLayout": "Boolean",
    "listeners": "Object",
    "liveDrag": "Boolean",
    "loader": "Ext.ComponentLoader/Object",
    "margin": "Number/String",
    "maskDefaults": "Object",
    "maskElement": "String",
    "maskRe": "RegExp",
    "matchFieldWidth": "Boolean",
    "maxHeight": "Number",
    "maxLength": "Number",
    "maxLengthText": "String",
    "maxWidth": "Number",
    "minHeight": "Number",
    "minLength": "Number",
    "minLengthText": "String",
    "minWidth": "Number",
    "modal": "Boolean",
    "modelValidation": "Boolean",
    "msgTarget": "String",
    "name": "String",
    "nameable": "Boolean",
    "openCls": "String",
    "overCls": "String",
    "overflowX": "String",
    "overflowY": "String",
    "padding": "Number/String",
    "pickerAlign": "String",
    "pickerOffset": "Number[]",
    "plugins": "Array/Ext.enums.Plugin/Object/Ext.plugin.Abstract",
    "preventMark": "Boolean",
    "publishes": "String/String[]/Object",
    "readOnly": "Boolean",
    "readOnlyCls": "String",
    "reference": "String",
    "regex": "RegExp",
    "regexText": "String",
    "region": "'north'/'south'/'east'/'west'/'center'",
    "renderConfig": "Object",
    "renderData": "Object",
    "renderSelectors": "Object",
    "renderTo": "String/HTMLElement/Ext.dom.Element",
    "renderTpl": "Ext.XTemplate/String/String[]",
    "repeatTriggerClick": "Boolean",
    "requiredCls": "String",
    "resizable": "Boolean/Object",
    "resizeHandles": "String",
    "saveDelay": "Number",
    "scrollable": "Boolean/String/Object",
    "selectOnFocus": "Boolean",
    "session": "Boolean/Object/Ext.data.Session",
    "shadow": "String/Boolean",
    "shadowOffset": "Number",
    "shareableName": "Boolean",
    "shim": "Boolean",
    "shrinkWrap": "Boolean/Number",
    "size": "Number",
    "stateEvents": "String[]",
    "stateful": "Boolean/Object",
    "stateId": "String",
    "stripCharsRe": "RegExp",
    "style": "String/Object",
    "submitValue": "Boolean",
    "tabIndex": "Number",
    "toFrontOnShow": "Boolean",
    "touchAction": "Object",
    "tpl": "Ext.XTemplate/Ext.Template/String/String[]",
    "tplWriteMode": "String",
    "triggerCls": "String",
    "triggers": "Object",
    "triggerWrapCls": "String",
    "twoWayBindable": "String/String[]/Object",
    "ui": "String",
    "uiCls": "String[]",
    "userCls": "String/String[]",
    "validateBlank": "Boolean",
    "validateOnBlur": "Boolean",
    "validateOnChange": "Boolean",
    "validateOnFocusLeave": "Boolean",
    "validation": "Boolean/String",
    "validationField": "Ext.data.Field",
    "validator": "Function",
    "value": "Object",
    "valuePublishEvent": "String[]/String",
    "viewModel": "String/Object/Ext.app.ViewModel",
    "vtype": "String",
    "vtypeText": "String",
    "weight": "Number",
    "width": "Number|String",
    "xtype": "Ext.enums.Widget",
    "platformConfig": "Object",
    "responsiveConfig": "Object",
    "fitToParent": "Boolean",
    "config": "Object",
};
pickerfieldMetaData.PROPERTIES = [
    'activeCounter',
    'activeError',
    'activeErrorsTpl',
    'afterBodyEl',
    'afterLabelTextTpl',
    'afterLabelTpl',
    'afterSubTpl',
    'alignOnScroll',
    'alignTarget',
    'allowBlank',
    'allowOnlyWhitespace',
    'alwaysOnTop',
    'anchor',
    'animateShadow',
    'ariaAttributes',
    'ariaDescribedBy',
    'ariaErrorText',
    'ariaHelp',
    'ariaLabel',
    'ariaLabelledBy',
    'autoEl',
    'autoFitErrors',
    'autoHideInputMask',
    'autoRender',
    'autoScroll',
    'autoShow',
    'baseBodyCls',
    'baseCls',
    'beforeBodyEl',
    'beforeLabelTextTpl',
    'beforeLabelTpl',
    'beforeSubTpl',
    'bind',
    'blankText',
    'border',
    'checkChangeBuffer',
    'checkChangeEvents',
    'childEls',
    'cls',
    'columnWidth',
    'componentCls',
    'componentLayout',
    'constrain',
    'constraintInsets',
    'constrainTo',
    'contentEl',
    'controller',
    'data',
    'defaultAlign',
    'defaultListenerScope',
    'dirtyCls',
    'disabled',
    'disabledCls',
    'disableKeyFilter',
    'dock',
    'draggable',
    'editable',
    'emptyCls',
    'emptyText',
    'enableKeyEvents',
    'enforceMaxLength',
    'errorMsgCls',
    'fieldBodyCls',
    'fieldCls',
    'fieldLabel',
    'fieldStyle',
    'fieldSubTpl',
    'fixed',
    'flex',
    'floating',
    'focusCls',
    'focusOnToFront',
    'formatText',
    'formBind',
    'formItemCls',
    'frame',
    'grow',
    'growMax',
    'growMin',
    'height',
    'hidden',
    'hideEmptyLabel',
    'hideLabel',
    'hideMode',
    'hideTrigger',
    'html',
    'id',
    'inputAttrTpl',
    'inputId',
    'inputMask',
    'inputType',
    'inputWrapCls',
    'invalidCls',
    'invalidText',
    'isTextInput',
    'itemId',
    'keyMap',
    'keyMapEnabled',
    'keyMapTarget',
    'labelableRenderTpl',
    'labelAlign',
    'labelAttrTpl',
    'labelCls',
    'labelClsExtra',
    'labelPad',
    'labelSeparator',
    'labelStyle',
    'labelWidth',
    'liquidLayout',
    'listeners',
    'liveDrag',
    'loader',
    'margin',
    'maskDefaults',
    'maskElement',
    'maskRe',
    'matchFieldWidth',
    'maxHeight',
    'maxLength',
    'maxLengthText',
    'maxWidth',
    'minHeight',
    'minLength',
    'minLengthText',
    'minWidth',
    'modal',
    'modelValidation',
    'msgTarget',
    'name',
    'nameable',
    'openCls',
    'overCls',
    'overflowX',
    'overflowY',
    'padding',
    'pickerAlign',
    'pickerOffset',
    'plugins',
    'preventMark',
    'publishes',
    'readOnly',
    'readOnlyCls',
    'reference',
    'regex',
    'regexText',
    'region',
    'renderConfig',
    'renderData',
    'renderSelectors',
    'renderTo',
    'renderTpl',
    'repeatTriggerClick',
    'requiredCls',
    'resizable',
    'resizeHandles',
    'saveDelay',
    'scrollable',
    'selectOnFocus',
    'session',
    'shadow',
    'shadowOffset',
    'shareableName',
    'shim',
    'shrinkWrap',
    'size',
    'stateEvents',
    'stateful',
    'stateId',
    'stripCharsRe',
    'style',
    'submitValue',
    'tabIndex',
    'toFrontOnShow',
    'touchAction',
    'tpl',
    'tplWriteMode',
    'triggerCls',
    'triggers',
    'triggerWrapCls',
    'twoWayBindable',
    'ui',
    'uiCls',
    'userCls',
    'validateBlank',
    'validateOnBlur',
    'validateOnChange',
    'validateOnFocusLeave',
    'validation',
    'validationField',
    'validator',
    'value',
    'valuePublishEvent',
    'viewModel',
    'vtype',
    'vtypeText',
    'weight',
    'width',
    'xtype',
    'platformConfig',
    'responsiveConfig',
    'fitToParent',
    'config'
];
pickerfieldMetaData.EVENTS = [
    { name: 'activate', parameters: 'pickerfield' },
    { name: 'added', parameters: 'pickerfield,container,pos' },
    { name: 'afterlayoutanimation', parameters: 'pickerfield' },
    { name: 'afterrender', parameters: 'pickerfield' },
    { name: 'autosize', parameters: 'pickerfield,width' },
    { name: 'beforeactivate', parameters: 'pickerfield' },
    { name: 'beforedeactivate', parameters: 'pickerfield' },
    { name: 'beforedestroy', parameters: 'pickerfield' },
    { name: 'beforehide', parameters: 'pickerfield' },
    { name: 'beforerender', parameters: 'pickerfield' },
    { name: 'beforeshow', parameters: 'pickerfield' },
    { name: 'beforestaterestore', parameters: 'pickerfield,state' },
    { name: 'beforestatesave', parameters: 'pickerfield,state' },
    { name: 'blur', parameters: 'pickerfield,event' },
    { name: 'boxready', parameters: 'pickerfield,width,height' },
    { name: 'change', parameters: 'pickerfield,newValue,oldValue' },
    { name: 'collapse', parameters: 'field' },
    { name: 'deactivate', parameters: 'pickerfield' },
    { name: 'destroy', parameters: 'pickerfield' },
    { name: 'dirtychange', parameters: 'pickerfield,isDirty' },
    { name: 'disable', parameters: 'pickerfield' },
    { name: 'enable', parameters: 'pickerfield' },
    { name: 'errorchange', parameters: 'pickerfield,error' },
    { name: 'expand', parameters: 'field' },
    { name: 'focus', parameters: 'pickerfield,event' },
    { name: 'focusenter', parameters: 'pickerfield,event' },
    { name: 'focusleave', parameters: 'pickerfield,event' },
    { name: 'hide', parameters: 'pickerfield' },
    { name: 'keydown', parameters: 'pickerfield,e' },
    { name: 'keypress', parameters: 'pickerfield,e' },
    { name: 'keyup', parameters: 'pickerfield,e' },
    { name: 'move', parameters: 'pickerfield,x,y' },
    { name: 'paste', parameters: 'pickerfield,e' },
    { name: 'removed', parameters: 'pickerfield,ownerCt' },
    { name: 'render', parameters: 'pickerfield' },
    { name: 'resize', parameters: 'pickerfield,width,height,oldWidth,oldHeight' },
    { name: 'select', parameters: 'field,value' },
    { name: 'show', parameters: 'pickerfield' },
    { name: 'specialkey', parameters: 'pickerfield,e' },
    { name: 'staterestore', parameters: 'pickerfield,state' },
    { name: 'statesave', parameters: 'pickerfield,state' },
    { name: 'validitychange', parameters: 'pickerfield,isValid' },
    { name: 'writeablechange', parameters: 'pickerfield,Read' },
    { name: 'ready', parameters: '' }
];
pickerfieldMetaData.EVENTNAMES = [
    'activate',
    'added',
    'afterlayoutanimation',
    'afterrender',
    'autosize',
    'beforeactivate',
    'beforedeactivate',
    'beforedestroy',
    'beforehide',
    'beforerender',
    'beforeshow',
    'beforestaterestore',
    'beforestatesave',
    'blur',
    'boxready',
    'change',
    'collapse',
    'deactivate',
    'destroy',
    'dirtychange',
    'disable',
    'enable',
    'errorchange',
    'expand',
    'focus',
    'focusenter',
    'focusleave',
    'hide',
    'keydown',
    'keypress',
    'keyup',
    'move',
    'paste',
    'removed',
    'render',
    'resize',
    'select',
    'show',
    'specialkey',
    'staterestore',
    'statesave',
    'validitychange',
    'writeablechange',
    'ready'
];
if (false) {
    /** @type {?} */
    pickerfieldMetaData.XTYPE;
    /** @type {?} */
    pickerfieldMetaData.PROPERTIESOBJECT;
    /** @type {?} */
    pickerfieldMetaData.PROPERTIES;
    /** @type {?} */
    pickerfieldMetaData.EVENTS;
    /** @type {?} */
    pickerfieldMetaData.EVENTNAMES;
}
export class ExtPickerfieldComponent extends base {
    /**
     * @param {?} eRef
     */
    constructor(eRef) { super(eRef, pickerfieldMetaData); }
    /**
     * @return {?}
     */
    ngOnInit() { this.baseOnInit(pickerfieldMetaData); }
    //public ngOnChanges(changes: SimpleChanges) {this.baseOnChanges(changes)}
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.baseAfterContentInit();
        this['ready'].emit(this);
    }
}
ExtPickerfieldComponent.decorators = [
    { type: Component, args: [{
                selector: 'pickerfield',
                inputs: pickerfieldMetaData.PROPERTIES,
                outputs: pickerfieldMetaData.EVENTNAMES,
                providers: [{ provide: base, useExisting: forwardRef(() => ExtPickerfieldComponent) }],
                template: '<ng-template #dynamic></ng-template>'
            }] }
];
/** @nocollapse */
ExtPickerfieldComponent.ctorParameters = () => [
    { type: ElementRef }
];
//# sourceMappingURL=data:application/json;base64,