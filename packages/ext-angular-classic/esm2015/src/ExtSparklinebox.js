var ExtSparklineboxComponent_1;
import * as tslib_1 from "tslib";
//import EWCSparklinebox from '../dist/ext-sparklinebox.component.js';
//inputs: (new EWCSparklinebox()).properties,
import EWCSparklinebox from '@sencha/ext-web-components-classic/dist/ext-sparklinebox.component.js';
import { Host, Optional, SkipSelf, Component, ElementRef, forwardRef, ViewContainerRef } from '@angular/core';
import { EngBase } from './angularbase';
let ExtSparklineboxComponent = ExtSparklineboxComponent_1 = class ExtSparklineboxComponent extends EngBase {
    constructor(eRef, hostComponent, vc) {
        super(eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'boxFillColor', 'boxLineColor', 'chartRangeMax', 'chartRangeMin', 'cls', 'controller', 'defaultListenerScope', 'disabled', 'disableTooltips', 'undefined', 'focusCls', 'height', 'hidden', 'hideMode', 'highlightColor', 'highlightLighten', 'instanceCls', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lineColor', 'listeners', 'margin', 'medianColor', 'name', 'nameable', 'outlierFillColor', 'outlierIQR', 'outlierLineColor', 'plugins', 'publishes', 'raw', 'reference', 'renderTo', 'ripple', 'session', 'shareableName', 'showOutliers', 'spotRadius', 'style', 'target', 'targetColor', 'tipTpl', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'touchAction', 'twoWayBindable', 'ui', 'userCls', 'values', 'viewModel', 'whiskerColor', 'width',], (new EWCSparklinebox()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'widthchange',], vc);
        this.xtype = 'sparklinebox';
    }
    ngOnInit() {
        this.baseOnInit();
    }
    ngAfterViewInit() {
        this.baseAfterViewInit();
    }
    ngOnChanges(changes) {
        this.baseOnChanges(changes);
    }
    ngOnDestroy() {
        this.baseOnDestroy();
    }
};
ExtSparklineboxComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
    { type: ViewContainerRef }
];
ExtSparklineboxComponent = ExtSparklineboxComponent_1 = tslib_1.__decorate([
    Component({
        selector: 'ExtSparklinebox',
        inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'boxFillColor', 'boxLineColor', 'chartRangeMax', 'chartRangeMin', 'cls', 'controller', 'defaultListenerScope', 'disabled', 'disableTooltips', 'undefined', 'focusCls', 'height', 'hidden', 'hideMode', 'highlightColor', 'highlightLighten', 'instanceCls', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lineColor', 'listeners', 'margin', 'medianColor', 'name', 'nameable', 'outlierFillColor', 'outlierIQR', 'outlierLineColor', 'plugins', 'publishes', 'raw', 'reference', 'renderTo', 'ripple', 'session', 'shareableName', 'showOutliers', 'spotRadius', 'style', 'target', 'targetColor', 'tipTpl', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'touchAction', 'twoWayBindable', 'ui', 'userCls', 'values', 'viewModel', 'whiskerColor', 'width',],
        outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'widthchange',],
        providers: [{ provide: EngBase, useExisting: forwardRef(() => ExtSparklineboxComponent_1) }],
        template: '<ng-content></ng-content>'
    }),
    tslib_1.__param(1, Host()), tslib_1.__param(1, Optional()), tslib_1.__param(1, SkipSelf())
], ExtSparklineboxComponent);
export { ExtSparklineboxComponent };
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSparklinebox()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);
//# sourceMappingURL=data:application/json;base64,