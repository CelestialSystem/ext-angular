'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require('@babel/polyfill');

const v = require('./pluginUtil').logv;

class ExtWebpackPlugin {
  constructor(options) {
    this.plugin = require(`./pluginUtil`)._constructor(options);
  }

  apply(compiler) {
    const vars = this.plugin.vars;
    const options = this.plugin.options;

    if (!compiler.hooks) {
      console.log('not webpack 4');
      return;
    }

    compiler.hooks.thisCompilation.tap(`ext-this-compilation`, compilation => {
      require(`./pluginUtil`)._thisCompilation(compiler, compilation, vars, options);

      if (vars.pluginErrors.length > 0) {
        compilation.errors.push(new Error(vars.pluginErrors.join("")));
        return;
      }
    });
    compiler.hooks.compilation.tap(`ext-compilation`, compilation => {
      require(`./pluginUtil`)._compilation(compiler, compilation, vars, options);
    }); //    compilation.hooks.htmlWebpackPluginBeforeHtmlGeneration.tap(`ext-html-generation`,(data) => {

    compiler.hooks.emit.tapAsync(`ext-emit`, (compilation, callback) => {
      require(`./pluginUtil`)._emit(compiler, compilation, vars, options, callback);
    });
    compiler.hooks.afterCompile.tap('ext-after-compile', compilation => {
      require(`./pluginUtil`)._afterCompile(compiler, compilation, vars, options);
    });
    compiler.hooks.done.tap(`ext-done`, () => {
      require(`./pluginUtil`)._done(vars, options);

      require('./pluginUtil').log(vars.app + `Completed ext-webpack-plugin processing`);
    });
  }

}

exports.default = ExtWebpackPlugin;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwidiIsImxvZ3YiLCJFeHRXZWJwYWNrUGx1Z2luIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwicGx1Z2luIiwiX2NvbnN0cnVjdG9yIiwiYXBwbHkiLCJjb21waWxlciIsInZhcnMiLCJob29rcyIsImNvbnNvbGUiLCJsb2ciLCJ0aGlzQ29tcGlsYXRpb24iLCJ0YXAiLCJjb21waWxhdGlvbiIsIl90aGlzQ29tcGlsYXRpb24iLCJwbHVnaW5FcnJvcnMiLCJsZW5ndGgiLCJlcnJvcnMiLCJwdXNoIiwiRXJyb3IiLCJqb2luIiwiX2NvbXBpbGF0aW9uIiwiZW1pdCIsInRhcEFzeW5jIiwiY2FsbGJhY2siLCJfZW1pdCIsImFmdGVyQ29tcGlsZSIsIl9hZnRlckNvbXBpbGUiLCJkb25lIiwiX2RvbmUiLCJhcHAiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBQ0FBLE9BQU8sQ0FBQyxpQkFBRCxDQUFQOztBQUNBLE1BQU1DLENBQUMsR0FBR0QsT0FBTyxDQUFDLGNBQUQsQ0FBUCxDQUF3QkUsSUFBbEM7O0FBQ2UsTUFBTUMsZ0JBQU4sQ0FBdUI7QUFFcENDLEVBQUFBLFdBQVcsQ0FBQ0MsT0FBRCxFQUFVO0FBQ25CLFNBQUtDLE1BQUwsR0FBY04sT0FBTyxDQUFFLGNBQUYsQ0FBUCxDQUF3Qk8sWUFBeEIsQ0FBcUNGLE9BQXJDLENBQWQ7QUFDRDs7QUFFREcsRUFBQUEsS0FBSyxDQUFDQyxRQUFELEVBQVc7QUFDZCxVQUFNQyxJQUFJLEdBQUcsS0FBS0osTUFBTCxDQUFZSSxJQUF6QjtBQUNBLFVBQU1MLE9BQU8sR0FBRyxLQUFLQyxNQUFMLENBQVlELE9BQTVCOztBQUNBLFFBQUksQ0FBQ0ksUUFBUSxDQUFDRSxLQUFkLEVBQXFCO0FBQUNDLE1BQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLGVBQVo7QUFBNkI7QUFBTzs7QUFFMURKLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlRyxlQUFmLENBQStCQyxHQUEvQixDQUFvQyxzQkFBcEMsRUFBNERDLFdBQUQsSUFBaUI7QUFDMUVoQixNQUFBQSxPQUFPLENBQUUsY0FBRixDQUFQLENBQXdCaUIsZ0JBQXhCLENBQXlDUixRQUF6QyxFQUFtRE8sV0FBbkQsRUFBZ0VOLElBQWhFLEVBQXNFTCxPQUF0RTs7QUFDQSxVQUFJSyxJQUFJLENBQUNRLFlBQUwsQ0FBa0JDLE1BQWxCLEdBQTJCLENBQS9CLEVBQWtDO0FBQ2hDSCxRQUFBQSxXQUFXLENBQUNJLE1BQVosQ0FBbUJDLElBQW5CLENBQXlCLElBQUlDLEtBQUosQ0FBVVosSUFBSSxDQUFDUSxZQUFMLENBQWtCSyxJQUFsQixDQUF1QixFQUF2QixDQUFWLENBQXpCO0FBQ0E7QUFDRDtBQUNGLEtBTkQ7QUFRQWQsSUFBQUEsUUFBUSxDQUFDRSxLQUFULENBQWVLLFdBQWYsQ0FBMkJELEdBQTNCLENBQWdDLGlCQUFoQyxFQUFtREMsV0FBRCxJQUFpQjtBQUNqRWhCLE1BQUFBLE9BQU8sQ0FBRSxjQUFGLENBQVAsQ0FBd0J3QixZQUF4QixDQUFxQ2YsUUFBckMsRUFBK0NPLFdBQS9DLEVBQTRETixJQUE1RCxFQUFrRUwsT0FBbEU7QUFDRCxLQUZELEVBYmMsQ0FpQmxCOztBQUVJSSxJQUFBQSxRQUFRLENBQUNFLEtBQVQsQ0FBZWMsSUFBZixDQUFvQkMsUUFBcEIsQ0FBOEIsVUFBOUIsRUFBeUMsQ0FBQ1YsV0FBRCxFQUFjVyxRQUFkLEtBQTJCO0FBQ2xFM0IsTUFBQUEsT0FBTyxDQUFFLGNBQUYsQ0FBUCxDQUF3QjRCLEtBQXhCLENBQThCbkIsUUFBOUIsRUFBd0NPLFdBQXhDLEVBQXFETixJQUFyRCxFQUEyREwsT0FBM0QsRUFBb0VzQixRQUFwRTtBQUNELEtBRkQ7QUFJQWxCLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFla0IsWUFBZixDQUE0QmQsR0FBNUIsQ0FBZ0MsbUJBQWhDLEVBQXNEQyxXQUFELElBQWlCO0FBQ3BFaEIsTUFBQUEsT0FBTyxDQUFFLGNBQUYsQ0FBUCxDQUF3QjhCLGFBQXhCLENBQXNDckIsUUFBdEMsRUFBZ0RPLFdBQWhELEVBQTZETixJQUE3RCxFQUFtRUwsT0FBbkU7QUFDRCxLQUZEO0FBSUFJLElBQUFBLFFBQVEsQ0FBQ0UsS0FBVCxDQUFlb0IsSUFBZixDQUFvQmhCLEdBQXBCLENBQXlCLFVBQXpCLEVBQW9DLE1BQU07QUFDeENmLE1BQUFBLE9BQU8sQ0FBRSxjQUFGLENBQVAsQ0FBd0JnQyxLQUF4QixDQUE4QnRCLElBQTlCLEVBQW9DTCxPQUFwQzs7QUFDQUwsTUFBQUEsT0FBTyxDQUFDLGNBQUQsQ0FBUCxDQUF3QmEsR0FBeEIsQ0FBNEJILElBQUksQ0FBQ3VCLEdBQUwsR0FBWSx5Q0FBeEM7QUFDRCxLQUhEO0FBSUQ7O0FBckNtQyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xucmVxdWlyZSgnQGJhYmVsL3BvbHlmaWxsJylcbmNvbnN0IHYgPSByZXF1aXJlKCcuL3BsdWdpblV0aWwnKS5sb2d2XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHRXZWJwYWNrUGx1Z2luIHtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5wbHVnaW4gPSByZXF1aXJlKGAuL3BsdWdpblV0aWxgKS5fY29uc3RydWN0b3Iob3B0aW9ucylcbiAgfVxuXG4gIGFwcGx5KGNvbXBpbGVyKSB7XG4gICAgY29uc3QgdmFycyA9IHRoaXMucGx1Z2luLnZhcnNcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5wbHVnaW4ub3B0aW9uc1xuICAgIGlmICghY29tcGlsZXIuaG9va3MpIHtjb25zb2xlLmxvZygnbm90IHdlYnBhY2sgNCcpO3JldHVybn1cblxuICAgIGNvbXBpbGVyLmhvb2tzLnRoaXNDb21waWxhdGlvbi50YXAoYGV4dC10aGlzLWNvbXBpbGF0aW9uYCwgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICByZXF1aXJlKGAuL3BsdWdpblV0aWxgKS5fdGhpc0NvbXBpbGF0aW9uKGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucylcbiAgICAgIGlmICh2YXJzLnBsdWdpbkVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbXBpbGF0aW9uLmVycm9ycy5wdXNoKCBuZXcgRXJyb3IodmFycy5wbHVnaW5FcnJvcnMuam9pbihcIlwiKSkgKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29tcGlsZXIuaG9va3MuY29tcGlsYXRpb24udGFwKGBleHQtY29tcGlsYXRpb25gLCAoY29tcGlsYXRpb24pID0+IHtcbiAgICAgIHJlcXVpcmUoYC4vcGx1Z2luVXRpbGApLl9jb21waWxhdGlvbihjb21waWxlciwgY29tcGlsYXRpb24sIHZhcnMsIG9wdGlvbnMpXG4gICAgfSlcblxuLy8gICAgY29tcGlsYXRpb24uaG9va3MuaHRtbFdlYnBhY2tQbHVnaW5CZWZvcmVIdG1sR2VuZXJhdGlvbi50YXAoYGV4dC1odG1sLWdlbmVyYXRpb25gLChkYXRhKSA9PiB7XG5cbiAgICBjb21waWxlci5ob29rcy5lbWl0LnRhcEFzeW5jKGBleHQtZW1pdGAsIChjb21waWxhdGlvbiwgY2FsbGJhY2spID0+IHtcbiAgICAgIHJlcXVpcmUoYC4vcGx1Z2luVXRpbGApLl9lbWl0KGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucywgY2FsbGJhY2spXG4gICAgfSlcblxuICAgIGNvbXBpbGVyLmhvb2tzLmFmdGVyQ29tcGlsZS50YXAoJ2V4dC1hZnRlci1jb21waWxlJywgKGNvbXBpbGF0aW9uKSA9PiB7XG4gICAgICByZXF1aXJlKGAuL3BsdWdpblV0aWxgKS5fYWZ0ZXJDb21waWxlKGNvbXBpbGVyLCBjb21waWxhdGlvbiwgdmFycywgb3B0aW9ucylcbiAgICB9KVxuXG4gICAgY29tcGlsZXIuaG9va3MuZG9uZS50YXAoYGV4dC1kb25lYCwgKCkgPT4ge1xuICAgICAgcmVxdWlyZShgLi9wbHVnaW5VdGlsYCkuX2RvbmUodmFycywgb3B0aW9ucylcbiAgICAgIHJlcXVpcmUoJy4vcGx1Z2luVXRpbCcpLmxvZyh2YXJzLmFwcCArIGBDb21wbGV0ZWQgZXh0LXdlYnBhY2stcGx1Z2luIHByb2Nlc3NpbmdgKVxuICAgIH0pXG4gIH1cbn1cbiJdfQ==