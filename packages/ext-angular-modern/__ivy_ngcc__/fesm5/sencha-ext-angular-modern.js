import { __decorate, __extends, __param } from 'tslib';
import { EventEmitter, ContentChildren, ElementRef, Host, Optional, SkipSelf, ViewContainerRef, Component, forwardRef, NgModule, APP_INITIALIZER } from '@angular/core';
import { EWCActionsheet, EWCAudio, EWCBreadcrumbbar, EWCButton, EWCCalendar_event, EWCCalendar_form_add, EWCCalendar_calendar_picker, EWCCalendar_form_edit, EWCCalendar_timefield, EWCCalendar_daysheader, EWCCalendar_weeksheader, EWCCalendar_list, EWCCalendar_day, EWCCalendar_days, EWCCalendar_month, EWCCalendar, EWCCalendar_week, EWCCalendar_weeks, EWCCalendar_dayview, EWCCalendar_daysview, EWCCalendar_monthview, EWCCalendar_multiview, EWCCalendar_weekview, EWCCalendar_weeksview, EWCCarousel, EWCCartesian, EWCChart, EWCLegend, EWCChartnavigator, EWCPolar, EWCSpacefilling, EWCChip, EWCComponent, EWCContainer, EWCD3_canvas, EWCD3_heatmap, EWCD3_pack, EWCD3_partition, EWCD3_sunburst, EWCD3_tree, EWCD3_horizontal_tree, EWCD3_treemap, EWCD3_svg, EWCD3, EWCBoundlist, EWCChipview, EWCComponentdataview, EWCDataitem, EWCDataview, EWCEmptytext, EWCIndexbar, EWCItemheader, EWCList, EWCListitem, EWCListitemplaceholder, EWCListswiperitem, EWCListswiperstepper, EWCNestedlist, EWCPullrefreshbar, EWCPullrefreshspinner, EWCSimplelistitem, EWCDialog, EWCWindow, EWCDraw, EWCSurface, EWCEditor, EWCCheckbox, EWCCheckboxfield, EWCCheckboxgroup, EWCCombobox, EWCComboboxfield, EWCContainerfield, EWCFieldcontainer, EWCDatefield, EWCDatepickerfield, EWCDatepickernativefield, EWCDisplayfield, EWCEmailfield, EWCField, EWCGroupcontainer, EWCFilefield, EWCFilebutton, EWCHiddenfield, EWCInputfield, EWCNumberfield, EWCFieldpanel, EWCPasswordfield, EWCPickerfield, EWCRadio, EWCRadiofield, EWCRadiogroup, EWCSearchfield, EWCSelectfield, EWCSinglesliderfield, EWCSliderfield, EWCSpinnerfield, EWCTextfield, EWCTextareafield, EWCTimefield, EWCTogglefield, EWCCleartrigger, EWCDatetrigger, EWCExpandtrigger, EWCMenutrigger, EWCRevealtrigger, EWCSpindowntrigger, EWCSpinuptrigger, EWCTimetrigger, EWCTrigger, EWCUrlfield, EWCFieldset, EWCFormpanel, EWCFroalaeditor, EWCFroalaeditorfield, EWCGridcellbase, EWCBooleancell, EWCGridcell, EWCCheckcell, EWCDatecell, EWCNumbercell, EWCRownumberercell, EWCTextcell, EWCTreecell, EWCWidgetcell, EWCCelleditor, EWCBooleancolumn, EWCCheckcolumn, EWCGridcolumn, EWCColumn, EWCTemplatecolumn, EWCDatecolumn, EWCDragcolumn, EWCNumbercolumn, EWCRownumberer, EWCSelectioncolumn, EWCTextcolumn, EWCTreecolumn, EWCGrid, EWCHeadercontainer, EWCLockedgrid, EWCLockedgridregion, EWCGridcolumnsmenu, EWCGridgroupbythismenuitem, EWCGridshowingroupsmenuitem, EWCGridsortascmenuitem, EWCGridsortdescmenuitem, EWCPagingtoolbar, EWCGridrow, EWCRowbody, EWCRoweditorbar, EWCRoweditorcell, EWCRoweditor, EWCRoweditorgap, EWCRowheader, EWCGridsummaryrow, EWCTree, EWCImage, EWCImg, EWCIndicator, EWCLabel, EWCTreelist, EWCTreelistitem, EWCLoadmask, EWCMask, EWCMedia, EWCMenucheckitem, EWCMenuitem, EWCMenu, EWCMenuradioitem, EWCMenuseparator, EWCMessagebox, EWCNavigationview, EWCPanel, EWCAccordion, EWCDatepanel, EWCDatetitle, EWCPanelheader, EWCTimepanel, EWCPaneltitle, EWCYearpicker, EWCDatepicker, EWCPicker, EWCSelectpicker, EWCPickerslot, EWCTabletpicker, EWCPivotgridcell, EWCPivotgridgroupcell, EWCPivotd3container, EWCPivotheatmap, EWCPivottreemap, EWCPivotgrid, EWCPivotconfigfield, EWCPivotconfigcontainer, EWCPivotconfigform, EWCPivotconfigpanel, EWCPivotsettings, EWCPivotrangeeditor, EWCPivotgridrow, EWCProgress, EWCProgressbarwidget, EWCSegmentedbutton, EWCSheet, EWCSlider, EWCThumb, EWCToggleslider, EWCSpacer, EWCSparklinebar, EWCSparkline, EWCSparklinebox, EWCSparklinebullet, EWCSparklinediscrete, EWCSparklineline, EWCSparklinepie, EWCSparklinetristate, EWCSplitbutton, EWCTabbar, EWCTabpanel, EWCTab, EWCTooltip, EWCTitle, EWCTitlebar, EWCTool, EWCPaneltool, EWCToolbar, EWCColorbutton, EWCColorpickercolorpreview, EWCColorfield, EWCColorselector, EWCGauge, EWCMap, EWCGoogle_map, EWCRating, EWCVideo, EWCViewport, EWCWidget } from '@sencha/ext-web-components-modern';

import * as ɵngcc0 from '@angular/core';

var _c0 = ["extitem"];
var _c1 = ["*"];
function doAngularXTemplate() {
    console.log('in doAngularXTemplate');
}

function doAngularCell() {
    console.log('in doAngularCell');
}

var Ext = window['Ext'];
var EngBase = /** @class */ (function () {
    function EngBase(eRef, hostComponent, properties, events, eventnames, vc) {
        this.node = eRef.nativeElement;
        this.parentNode = hostComponent;
        this.properties = properties;
        this.eventnames = eventnames;
        //this.vc = vc;
        var me = this;
        this.eventnames.forEach(function (eventname) {
            if (eventname != "layout") {
                me[eventname] = new EventEmitter();
            }
        });
        this.A = {};
        this.A.props = {};
        this.base = EngBase;
        if (window['ExtAngular'] == null) {
            window['ExtAngular'] = 'loaded';
            doAngularXTemplate();
            if (Ext.isModern == true) {
                doAngularCell();
            }
        }
    }
    Object.defineProperty(EngBase.prototype, "childComponents", {
        //@ViewChildren(EngBase) _viewchildComponents: QueryList<EngBase>;
        get: function () {
            var _this = this;
            if (this._childComponents == undefined) {
                return [];
            }
            return this._childComponents.filter(function (item) { return item !== _this; });
        },
        enumerable: true,
        configurable: true
    });
    EngBase.prototype.baseOnInit = function () {
        //console.log('baseOnInit')
        this.node.newDiv = document.createElement('ext-' + this.xtype);
        for (var i = 0; i < this.properties.length; i++) {
            var property = this.properties[i];
            if (this[property] !== undefined) {
                if (property != 'fullscreen' && property != 'xtype') {
                    this.node.newDiv.attributeObjects[property] = this[property];
                }
            }
        }
        // for (var i = 0; i < this.properties.length; i++) {
        //     var property = this.properties[i];
        //     if (this[property] !== undefined) {
        //         if (property != 'fullscreen' && property != 'xtype') {
        //             if (typeof this[property] == 'function') {
        //               this.node.newDiv.attributeObjects[property] = this[property]
        //               this.node.newDiv.setAttribute(property, 'function');
        //             }
        //             else if (typeof this[property] == 'object') {
        //               var sPropVal = ''
        //               try {
        //                 sPropVal = JSON.stringify(this[property])
        //                 this.node.newDiv.setAttribute(property, sPropVal);
        //               }
        //               catch(e) {
        //                 this.node.newDiv.attributeObjects[property] = this[property];
        //                 this.node.newDiv.setAttribute(property, 'object');
        //               }
        //             }
        //             else {
        //               this.node.newDiv.setAttribute(property, this[property]);
        //             }
        //         }
        //     }
        // }
        var me = this;
        me.node.newDiv.doCreateExtComponent();
        this.eventnames.forEach(function (eventname) {
            me.node.newDiv.addEventListener(eventname, function (event) {
                if (me[eventname] != false) {
                    if (eventname != 'layout') {
                        //console.log(eventname)
                        //console.log(me[eventname])
                        me[eventname].emit(event.detail);
                    }
                    //me[eventname].emit(event.detail);
                }
            });
        });
        if (this.node.parentNode.nodeName.substring(0, 3) !== 'EXT') {
            this.node.after(this.node.newDiv);
        }
        else {
            this.node.parentNode.newDiv.appendChild(this.node.newDiv);
        }
    };
    EngBase.prototype.baseAfterViewInit = function () {
        var me = this;
        this._extitems.toArray().forEach(function (item) {
            //me.node.newDiv.appendChild(Ext.get(item.nativeElement).dom);
            me.node.newDiv.appendChild(item.nativeElement);
        });
    };
    EngBase.prototype.baseOnChanges = function (changes) {
        for (var propName in changes) {
            var val = changes[propName].currentValue;
            if (this.node.newDiv != undefined) {
                var propertyVal = '';
                if (typeof val == 'string') {
                    propertyVal = val;
                }
                else {
                    propertyVal = JSON.stringify(val);
                }
                this.node.newDiv.setAttribute(propName, propertyVal);
            }
        }
    };
    EngBase.prototype.baseOnDestroy = function () {
        try {
            if (this.node.parentNode != undefined) {
                if (this.node.parentNode.newDiv != undefined) {
                    this.node.parentNode.newDiv.removeChild(this.node.newDiv);
                }
            }
        }
        catch (e) {
            console.log(e.toString());
        }
    };
    __decorate([
        ContentChildren('extitem')
    ], EngBase.prototype, "_extitems", void 0);
    __decorate([
        ContentChildren(EngBase)
    ], EngBase.prototype, "_childComponents", void 0);
EngBase.ɵfac = function EngBase_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };
EngBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: EngBase, contentQueries: function EngBase_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, _c0, false);
        ɵngcc0.ɵɵcontentQuery(dirIndex, EngBase, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._extitems = _t);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._childComponents = _t);
    } } });

    return EngBase;
}());

var ExtActionsheetComponent = /** @class */ (function (_super) {
    __extends(ExtActionsheetComponent, _super);
    function ExtActionsheetComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'cover', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'enter', 'undefined', 'undefined', 'exit', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'reveal', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'side', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'stretchX', 'stretchY', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCActionsheet()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'actionsheet';
        return _this;
    }
    ExtActionsheetComponent_1 = ExtActionsheetComponent;
    ExtActionsheetComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtActionsheetComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtActionsheetComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtActionsheetComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtActionsheetComponent_1;
    ExtActionsheetComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtActionsheetComponent = ExtActionsheetComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtActionsheetComponent);
ExtActionsheetComponent.ɵfac = function ExtActionsheetComponent_Factory(t) { return new (t || ExtActionsheetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtActionsheetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtActionsheetComponent, selectors: [["ExtActionsheet"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", cover: "cover", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", enter: "enter", undefined: "undefined", exit: "exit", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", reveal: "reveal", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", side: "side", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stretchX: "stretchX", stretchY: "stretchY", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtActionsheetComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtActionsheetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtActionsheetComponent, [{
        type: Component,
        args: [{
                selector: 'ExtActionsheet',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'cover', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'enter', 'undefined', 'undefined', 'exit', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'reveal', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'side', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'stretchX', 'stretchY', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtActionsheetComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtActionsheetComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCActionsheet()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtAudioComponent = /** @class */ (function (_super) {
    __extends(ExtAudioComponent, _super);
    function ExtAudioComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoPause', 'autoResume', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'controls', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'loop', 'margin', 'maxHeight', 'maxWidth', 'media', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'muted', 'name', 'nameable', 'padding', 'plugins', 'preload', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'volume', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCAudio()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'ended', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'mutedchange', 'orientationchange', 'painted', 'pause', 'play', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'stop', 'timeupdate', 'tofront', 'topchange', 'updatedata', 'volumechange', 'widthchange',], vc) || this;
        _this.xtype = 'audio';
        return _this;
    }
    ExtAudioComponent_1 = ExtAudioComponent;
    ExtAudioComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtAudioComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtAudioComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtAudioComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtAudioComponent_1;
    ExtAudioComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtAudioComponent = ExtAudioComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtAudioComponent);
ExtAudioComponent.ɵfac = function ExtAudioComponent_Factory(t) { return new (t || ExtAudioComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtAudioComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtAudioComponent, selectors: [["ExtAudio"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoPause: "autoPause", autoResume: "autoResume", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", controls: "controls", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", loop: "loop", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", media: "media", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", muted: "muted", name: "name", nameable: "nameable", padding: "padding", preload: "preload", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", url: "url", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", volume: "volume", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", ended: "ended", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", mutedchange: "mutedchange", orientationchange: "orientationchange", painted: "painted", pause: "pause", play: "play", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", stop: "stop", timeupdate: "timeupdate", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", volumechange: "volumechange", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtAudioComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtAudioComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtAudioComponent, [{
        type: Component,
        args: [{
                selector: 'ExtAudio',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoPause', 'autoResume', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'controls', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'loop', 'margin', 'maxHeight', 'maxWidth', 'media', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'muted', 'name', 'nameable', 'padding', 'plugins', 'preload', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'volume', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'ended', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'mutedchange', 'orientationchange', 'painted', 'pause', 'play', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'stop', 'timeupdate', 'tofront', 'topchange', 'updatedata', 'volumechange', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtAudioComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtAudioComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCAudio()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtBreadcrumbbarComponent = /** @class */ (function (_super) {
    __extends(ExtBreadcrumbbarComponent, _super);
    function ExtBreadcrumbbarComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'btnCls', 'buttonConfig', 'buttonUI', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultButtonUI', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'displayField', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showIcons', 'showMenuIcons', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'useSplitButtons', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCBreadcrumbbar()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'selectionchange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'breadcrumbbar';
        return _this;
    }
    ExtBreadcrumbbarComponent_1 = ExtBreadcrumbbarComponent;
    ExtBreadcrumbbarComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtBreadcrumbbarComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtBreadcrumbbarComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtBreadcrumbbarComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtBreadcrumbbarComponent_1;
    ExtBreadcrumbbarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtBreadcrumbbarComponent = ExtBreadcrumbbarComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtBreadcrumbbarComponent);
ExtBreadcrumbbarComponent.ɵfac = function ExtBreadcrumbbarComponent_Factory(t) { return new (t || ExtBreadcrumbbarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtBreadcrumbbarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtBreadcrumbbarComponent, selectors: [["ExtBreadcrumbbar"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", btnCls: "btnCls", buttonConfig: "buttonConfig", buttonUI: "buttonUI", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultButtonUI: "defaultButtonUI", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", displayField: "displayField", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", showIcons: "showIcons", showMenuIcons: "showMenuIcons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", title: "title", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", useSplitButtons: "useSplitButtons", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", selectionchange: "selectionchange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtBreadcrumbbarComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtBreadcrumbbarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtBreadcrumbbarComponent, [{
        type: Component,
        args: [{
                selector: 'ExtBreadcrumbbar',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'btnCls', 'buttonConfig', 'buttonUI', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultButtonUI', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'displayField', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showIcons', 'showMenuIcons', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'useSplitButtons', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'selectionchange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtBreadcrumbbarComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtBreadcrumbbarComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCBreadcrumbbar()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtButtonComponent = /** @class */ (function (_super) {
    __extends(ExtButtonComponent, _super);
    function ExtButtonComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'allowDepress', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'arrow', 'arrowAlign', 'autoEvent', 'axisLock', 'badgeText', 'bind', 'border', 'bottom', 'buttonType', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'enableToggle', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'pressed', 'pressedDelay', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stretchMenu', 'style', 'tabIndex', 'text', 'textAlign', 'toFrontOnShow', 'toggleHandler', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCButton()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforepressedchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'pressedchange', 'release', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'button';
        return _this;
    }
    ExtButtonComponent_1 = ExtButtonComponent;
    ExtButtonComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtButtonComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtButtonComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtButtonComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtButtonComponent_1;
    ExtButtonComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtButtonComponent = ExtButtonComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtButtonComponent);
ExtButtonComponent.ɵfac = function ExtButtonComponent_Factory(t) { return new (t || ExtButtonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtButtonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtButtonComponent, selectors: [["ExtButton"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", allowDepress: "allowDepress", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", arrow: "arrow", arrowAlign: "arrowAlign", autoEvent: "autoEvent", axisLock: "axisLock", badgeText: "badgeText", bind: "bind", border: "border", bottom: "bottom", buttonType: "buttonType", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", destroyMenu: "destroyMenu", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", enableToggle: "enableToggle", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", handler: "handler", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuAlign: "menuAlign", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", pressed: "pressed", pressedDelay: "pressedDelay", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stretchMenu: "stretchMenu", style: "style", tabIndex: "tabIndex", text: "text", textAlign: "textAlign", toFrontOnShow: "toFrontOnShow", toggleHandler: "toggleHandler", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforepressedchange: "beforepressedchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", pressedchange: "pressedchange", release: "release", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tap: "tap", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtButtonComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtButtonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtButtonComponent, [{
        type: Component,
        args: [{
                selector: 'ExtButton',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'allowDepress', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'arrow', 'arrowAlign', 'autoEvent', 'axisLock', 'badgeText', 'bind', 'border', 'bottom', 'buttonType', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'enableToggle', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'pressed', 'pressedDelay', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stretchMenu', 'style', 'tabIndex', 'text', 'textAlign', 'toFrontOnShow', 'toggleHandler', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforepressedchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'pressedchange', 'release', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtButtonComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtButtonComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCButton()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_eventComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_eventComponent, _super);
    function ExtCalendar_eventComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'defaultTitle', 'disabled', 'displayed', 'docked', 'draggable', 'endDate', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'mode', 'model', 'modelValidation', 'name', 'nameable', 'padding', 'palette', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'resize', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'startDate', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'timeFormat', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'view', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_event()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-event';
        return _this;
    }
    ExtCalendar_eventComponent_1 = ExtCalendar_eventComponent;
    ExtCalendar_eventComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_eventComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_eventComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_eventComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_eventComponent_1;
    ExtCalendar_eventComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_eventComponent = ExtCalendar_eventComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_eventComponent);
ExtCalendar_eventComponent.ɵfac = function ExtCalendar_eventComponent_Factory(t) { return new (t || ExtCalendar_eventComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_eventComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_eventComponent, selectors: [["ExtCalendar_event"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", defaultTitle: "defaultTitle", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", endDate: "endDate", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", mode: "mode", model: "model", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", palette: "palette", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", resize: "resize", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", startDate: "startDate", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", timeFormat: "timeFormat", title: "title", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", view: "view", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_eventComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_eventComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_eventComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_event',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'defaultTitle', 'disabled', 'displayed', 'docked', 'draggable', 'endDate', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'mode', 'model', 'modelValidation', 'name', 'nameable', 'padding', 'palette', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'resize', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'startDate', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'timeFormat', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'view', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_eventComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_eventComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_event()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_form_addComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_form_addComponent, _super);
    function ExtCalendar_form_addComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allDayField', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'api', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'baseParams', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'bubbleDirty', 'buttonAlign', 'buttons', 'buttonToolbar', 'calendarField', 'cancelButton', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultEndTime', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultStartTime', 'defaultToolWeights', 'defaultType', 'descriptionField', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'dropButton', 'enableSubmissionForm', 'enctype', 'endDateField', 'endTimeField', 'undefined', 'event', 'undefined', 'undefined', 'fieldDefaults', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'itemId', 'items', 'jsonSubmit', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'method', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multipartDetection', 'name', 'nameable', 'nameHolder', 'padding', 'paramOrder', 'paramsAsHash', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'saveButton', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'standardSubmit', 'startDateField', 'startTimeField', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submitOnAction', 'tabIndex', 'tbar', 'timeout', 'title', 'titleAlign', 'titleCollapse', 'titleField', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackResetOnLoad', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'view', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_form_add()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforesubmit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'cancel', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'drop', 'erased', 'exception', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'save', 'scrollablechange', 'show', 'submit', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-form-add';
        return _this;
    }
    ExtCalendar_form_addComponent_1 = ExtCalendar_form_addComponent;
    ExtCalendar_form_addComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_form_addComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_form_addComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_form_addComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_form_addComponent_1;
    ExtCalendar_form_addComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_form_addComponent = ExtCalendar_form_addComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_form_addComponent);
ExtCalendar_form_addComponent.ɵfac = function ExtCalendar_form_addComponent_Factory(t) { return new (t || ExtCalendar_form_addComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_form_addComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_form_addComponent, selectors: [["ExtCalendar_form_add"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allDayField: "allDayField", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", api: "api", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", baseParams: "baseParams", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", calendarField: "calendarField", cancelButton: "cancelButton", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultEndTime: "defaultEndTime", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultStartTime: "defaultStartTime", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", descriptionField: "descriptionField", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", dropButton: "dropButton", enableSubmissionForm: "enableSubmissionForm", enctype: "enctype", endDateField: "endDateField", endTimeField: "endTimeField", undefined: "undefined", event: "event", fieldDefaults: "fieldDefaults", fieldSeparators: "fieldSeparators", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", inputBorders: "inputBorders", instanceCls: "instanceCls", itemId: "itemId", items: "items", jsonSubmit: "jsonSubmit", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", method: "method", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multipartDetection: "multipartDetection", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", paramOrder: "paramOrder", paramsAsHash: "paramsAsHash", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", saveButton: "saveButton", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", standardSubmit: "standardSubmit", startDateField: "startDateField", startTimeField: "startTimeField", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", submitOnAction: "submitOnAction", tabIndex: "tabIndex", tbar: "tbar", timeout: "timeout", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", titleField: "titleField", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", trackResetOnLoad: "trackResetOnLoad", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", url: "url", userCls: "userCls", userSelectable: "userSelectable", view: "view", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforesubmit: "beforesubmit", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", cancel: "cancel", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", drop: "drop", erased: "erased", exception: "exception", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", save: "save", scrollablechange: "scrollablechange", show: "show", submit: "submit", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_form_addComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_form_addComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_form_addComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_form_add',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allDayField', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'api', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'baseParams', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'bubbleDirty', 'buttonAlign', 'buttons', 'buttonToolbar', 'calendarField', 'cancelButton', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultEndTime', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultStartTime', 'defaultToolWeights', 'defaultType', 'descriptionField', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'dropButton', 'enableSubmissionForm', 'enctype', 'endDateField', 'endTimeField', 'undefined', 'event', 'undefined', 'undefined', 'fieldDefaults', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'itemId', 'items', 'jsonSubmit', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'method', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multipartDetection', 'name', 'nameable', 'nameHolder', 'padding', 'paramOrder', 'paramsAsHash', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'saveButton', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'standardSubmit', 'startDateField', 'startTimeField', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submitOnAction', 'tabIndex', 'tbar', 'timeout', 'title', 'titleAlign', 'titleCollapse', 'titleField', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackResetOnLoad', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'view', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforesubmit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'cancel', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'drop', 'erased', 'exception', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'save', 'scrollablechange', 'show', 'submit', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_form_addComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_form_addComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_form_add()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_calendar_pickerComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_calendar_pickerComponent, _super);
    function ExtCalendar_calendar_pickerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoFocus', 'autoFocusLast', 'autoHideInputMask', 'autoLoadOnValue', 'autoSelect', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'chipView', 'clearable', 'cls', 'collapseOnSelect', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'delimiter', 'dirty', 'disabled', 'displayed', 'displayField', 'displayTpl', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'forceSelection', 'fullscreen', 'height', 'hidden', 'hiddenName', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemCls', 'itemId', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multiSelect', 'name', 'nameable', 'options', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'recordCreator', 'recordCreatorScope', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'selection', 'selectOnTab', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'store', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'valueCollection', 'valueField', 'valueNotFoundText', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_calendar_picker()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-calendar-picker';
        return _this;
    }
    ExtCalendar_calendar_pickerComponent_1 = ExtCalendar_calendar_pickerComponent;
    ExtCalendar_calendar_pickerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_calendar_pickerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_calendar_pickerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_calendar_pickerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_calendar_pickerComponent_1;
    ExtCalendar_calendar_pickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_calendar_pickerComponent = ExtCalendar_calendar_pickerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_calendar_pickerComponent);
ExtCalendar_calendar_pickerComponent.ɵfac = function ExtCalendar_calendar_pickerComponent_Factory(t) { return new (t || ExtCalendar_calendar_pickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_calendar_pickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_calendar_pickerComponent, selectors: [["ExtCalendar_calendar_picker"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alignTarget: "alignTarget", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoFocus: "autoFocus", autoFocusLast: "autoFocusLast", autoHideInputMask: "autoHideInputMask", autoLoadOnValue: "autoLoadOnValue", autoSelect: "autoSelect", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", chipView: "chipView", clearable: "clearable", cls: "cls", collapseOnSelect: "collapseOnSelect", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", delimiter: "delimiter", dirty: "dirty", disabled: "disabled", displayed: "displayed", displayField: "displayField", displayTpl: "displayTpl", docked: "docked", draggable: "draggable", edgePicker: "edgePicker", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", floatedPicker: "floatedPicker", floatedPickerAlign: "floatedPickerAlign", focusCls: "focusCls", focusTrap: "focusTrap", forceSelection: "forceSelection", fullscreen: "fullscreen", height: "height", hidden: "hidden", hiddenName: "hiddenName", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideTrigger: "hideTrigger", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemCls: "itemCls", itemId: "itemId", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", matchFieldWidth: "matchFieldWidth", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multiSelect: "multiSelect", name: "name", nameable: "nameable", options: "options", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", picker: "picker", pickerSlotAlign: "pickerSlotAlign", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", recordCreator: "recordCreator", recordCreatorScope: "recordCreatorScope", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", selection: "selection", selectOnTab: "selectOnTab", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", valueCollection: "valueCollection", valueField: "valueField", valueNotFoundText: "valueNotFoundText", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", collapse: "collapse", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", select: "select", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_calendar_pickerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_calendar_pickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_calendar_pickerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_calendar_picker',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoFocus', 'autoFocusLast', 'autoHideInputMask', 'autoLoadOnValue', 'autoSelect', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'chipView', 'clearable', 'cls', 'collapseOnSelect', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'delimiter', 'dirty', 'disabled', 'displayed', 'displayField', 'displayTpl', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'forceSelection', 'fullscreen', 'height', 'hidden', 'hiddenName', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemCls', 'itemId', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multiSelect', 'name', 'nameable', 'options', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'recordCreator', 'recordCreatorScope', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'selection', 'selectOnTab', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'store', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'valueCollection', 'valueField', 'valueNotFoundText', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_calendar_pickerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_calendar_pickerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_calendar_picker()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_form_editComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_form_editComponent, _super);
    function ExtCalendar_form_editComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allDayField', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'api', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'baseParams', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'bubbleDirty', 'buttonAlign', 'buttons', 'buttonToolbar', 'calendarField', 'cancelButton', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultEndTime', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultStartTime', 'defaultToolWeights', 'defaultType', 'descriptionField', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'dropButton', 'enableSubmissionForm', 'enctype', 'endDateField', 'endTimeField', 'undefined', 'event', 'undefined', 'undefined', 'fieldDefaults', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'itemId', 'items', 'jsonSubmit', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'method', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multipartDetection', 'name', 'nameable', 'nameHolder', 'padding', 'paramOrder', 'paramsAsHash', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'saveButton', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'standardSubmit', 'startDateField', 'startTimeField', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submitOnAction', 'tabIndex', 'tbar', 'timeout', 'title', 'titleAlign', 'titleCollapse', 'titleField', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackResetOnLoad', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'view', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_form_edit()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforesubmit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'cancel', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'drop', 'erased', 'exception', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'save', 'scrollablechange', 'show', 'submit', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-form-edit';
        return _this;
    }
    ExtCalendar_form_editComponent_1 = ExtCalendar_form_editComponent;
    ExtCalendar_form_editComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_form_editComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_form_editComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_form_editComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_form_editComponent_1;
    ExtCalendar_form_editComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_form_editComponent = ExtCalendar_form_editComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_form_editComponent);
ExtCalendar_form_editComponent.ɵfac = function ExtCalendar_form_editComponent_Factory(t) { return new (t || ExtCalendar_form_editComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_form_editComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_form_editComponent, selectors: [["ExtCalendar_form_edit"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allDayField: "allDayField", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", api: "api", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", baseParams: "baseParams", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", calendarField: "calendarField", cancelButton: "cancelButton", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultEndTime: "defaultEndTime", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultStartTime: "defaultStartTime", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", descriptionField: "descriptionField", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", dropButton: "dropButton", enableSubmissionForm: "enableSubmissionForm", enctype: "enctype", endDateField: "endDateField", endTimeField: "endTimeField", undefined: "undefined", event: "event", fieldDefaults: "fieldDefaults", fieldSeparators: "fieldSeparators", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", inputBorders: "inputBorders", instanceCls: "instanceCls", itemId: "itemId", items: "items", jsonSubmit: "jsonSubmit", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", method: "method", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multipartDetection: "multipartDetection", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", paramOrder: "paramOrder", paramsAsHash: "paramsAsHash", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", saveButton: "saveButton", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", standardSubmit: "standardSubmit", startDateField: "startDateField", startTimeField: "startTimeField", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", submitOnAction: "submitOnAction", tabIndex: "tabIndex", tbar: "tbar", timeout: "timeout", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", titleField: "titleField", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", trackResetOnLoad: "trackResetOnLoad", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", url: "url", userCls: "userCls", userSelectable: "userSelectable", view: "view", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforesubmit: "beforesubmit", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", cancel: "cancel", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", drop: "drop", erased: "erased", exception: "exception", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", save: "save", scrollablechange: "scrollablechange", show: "show", submit: "submit", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_form_editComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_form_editComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_form_editComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_form_edit',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allDayField', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'api', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'baseParams', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'bubbleDirty', 'buttonAlign', 'buttons', 'buttonToolbar', 'calendarField', 'cancelButton', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultEndTime', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultStartTime', 'defaultToolWeights', 'defaultType', 'descriptionField', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'dropButton', 'enableSubmissionForm', 'enctype', 'endDateField', 'endTimeField', 'undefined', 'event', 'undefined', 'undefined', 'fieldDefaults', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'itemId', 'items', 'jsonSubmit', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'method', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multipartDetection', 'name', 'nameable', 'nameHolder', 'padding', 'paramOrder', 'paramsAsHash', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'saveButton', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'standardSubmit', 'startDateField', 'startTimeField', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submitOnAction', 'tabIndex', 'tbar', 'timeout', 'title', 'titleAlign', 'titleCollapse', 'titleField', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackResetOnLoad', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'view', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforesubmit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'cancel', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'drop', 'erased', 'exception', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'save', 'scrollablechange', 'show', 'submit', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_form_editComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_form_editComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_form_edit()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_timefieldComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_timefieldComponent, _super);
    function ExtCalendar_timefieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoFocus', 'autoFocusLast', 'autoHideInputMask', 'autoLoadOnValue', 'autoSelect', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'chipView', 'clearable', 'cls', 'collapseOnSelect', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'delimiter', 'dirty', 'disabled', 'displayed', 'displayField', 'displayTpl', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'forceSelection', 'fullscreen', 'height', 'hidden', 'hiddenName', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemCls', 'itemId', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multiSelect', 'name', 'nameable', 'options', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'recordCreator', 'recordCreatorScope', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'selection', 'selectOnTab', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'store', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'valueCollection', 'valueField', 'valueNotFoundText', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_timefield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-timefield';
        return _this;
    }
    ExtCalendar_timefieldComponent_1 = ExtCalendar_timefieldComponent;
    ExtCalendar_timefieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_timefieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_timefieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_timefieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_timefieldComponent_1;
    ExtCalendar_timefieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_timefieldComponent = ExtCalendar_timefieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_timefieldComponent);
ExtCalendar_timefieldComponent.ɵfac = function ExtCalendar_timefieldComponent_Factory(t) { return new (t || ExtCalendar_timefieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_timefieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_timefieldComponent, selectors: [["ExtCalendar_timefield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alignTarget: "alignTarget", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoFocus: "autoFocus", autoFocusLast: "autoFocusLast", autoHideInputMask: "autoHideInputMask", autoLoadOnValue: "autoLoadOnValue", autoSelect: "autoSelect", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", chipView: "chipView", clearable: "clearable", cls: "cls", collapseOnSelect: "collapseOnSelect", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", delimiter: "delimiter", dirty: "dirty", disabled: "disabled", displayed: "displayed", displayField: "displayField", displayTpl: "displayTpl", docked: "docked", draggable: "draggable", edgePicker: "edgePicker", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", floatedPicker: "floatedPicker", floatedPickerAlign: "floatedPickerAlign", focusCls: "focusCls", focusTrap: "focusTrap", forceSelection: "forceSelection", fullscreen: "fullscreen", height: "height", hidden: "hidden", hiddenName: "hiddenName", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideTrigger: "hideTrigger", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemCls: "itemCls", itemId: "itemId", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", matchFieldWidth: "matchFieldWidth", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multiSelect: "multiSelect", name: "name", nameable: "nameable", options: "options", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", picker: "picker", pickerSlotAlign: "pickerSlotAlign", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", recordCreator: "recordCreator", recordCreatorScope: "recordCreatorScope", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", selection: "selection", selectOnTab: "selectOnTab", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", valueCollection: "valueCollection", valueField: "valueField", valueNotFoundText: "valueNotFoundText", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", collapse: "collapse", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", select: "select", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_timefieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_timefieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_timefieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_timefield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoFocus', 'autoFocusLast', 'autoHideInputMask', 'autoLoadOnValue', 'autoSelect', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'chipView', 'clearable', 'cls', 'collapseOnSelect', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'delimiter', 'dirty', 'disabled', 'displayed', 'displayField', 'displayTpl', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'forceSelection', 'fullscreen', 'height', 'hidden', 'hiddenName', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemCls', 'itemId', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multiSelect', 'name', 'nameable', 'options', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'recordCreator', 'recordCreatorScope', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'selection', 'selectOnTab', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'store', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'valueCollection', 'valueField', 'valueNotFoundText', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_timefieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_timefieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_timefield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_daysheaderComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_daysheaderComponent, _super);
    function ExtCalendar_daysheaderComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'cellCls', 'centered', 'cls', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'format', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'visibleDays', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_daysheader()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-daysheader';
        return _this;
    }
    ExtCalendar_daysheaderComponent_1 = ExtCalendar_daysheaderComponent;
    ExtCalendar_daysheaderComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_daysheaderComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_daysheaderComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_daysheaderComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_daysheaderComponent_1;
    ExtCalendar_daysheaderComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_daysheaderComponent = ExtCalendar_daysheaderComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_daysheaderComponent);
ExtCalendar_daysheaderComponent.ɵfac = function ExtCalendar_daysheaderComponent_Factory(t) { return new (t || ExtCalendar_daysheaderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_daysheaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_daysheaderComponent, selectors: [["ExtCalendar_daysheader"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", cellCls: "cellCls", centered: "centered", cls: "cls", compact: "compact", compactOptions: "compactOptions", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", format: "format", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", visibleDays: "visibleDays", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_daysheaderComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_daysheaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_daysheaderComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_daysheader',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'cellCls', 'centered', 'cls', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'format', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'visibleDays', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_daysheaderComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_daysheaderComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_daysheader()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_weeksheaderComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_weeksheaderComponent, _super);
    function ExtCalendar_weeksheaderComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'cellCls', 'centered', 'cls', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'format', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'visibleDays', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_weeksheader()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-weeksheader';
        return _this;
    }
    ExtCalendar_weeksheaderComponent_1 = ExtCalendar_weeksheaderComponent;
    ExtCalendar_weeksheaderComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_weeksheaderComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_weeksheaderComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_weeksheaderComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_weeksheaderComponent_1;
    ExtCalendar_weeksheaderComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_weeksheaderComponent = ExtCalendar_weeksheaderComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_weeksheaderComponent);
ExtCalendar_weeksheaderComponent.ɵfac = function ExtCalendar_weeksheaderComponent_Factory(t) { return new (t || ExtCalendar_weeksheaderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_weeksheaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_weeksheaderComponent, selectors: [["ExtCalendar_weeksheader"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", cellCls: "cellCls", centered: "centered", cls: "cls", compact: "compact", compactOptions: "compactOptions", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", format: "format", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", visibleDays: "visibleDays", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_weeksheaderComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_weeksheaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_weeksheaderComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_weeksheader',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'cellCls', 'centered', 'cls', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'format', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'visibleDays', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_weeksheaderComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_weeksheaderComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_weeksheader()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_listComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_listComponent, _super);
    function ExtCalendar_listComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'enableToggle', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'inline', 'innerCls', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemId', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastSelected', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'pressedDelay', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selected', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_list()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'rowselection', 'scrollablechange', 'select', 'selectionchange', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-list';
        return _this;
    }
    ExtCalendar_listComponent_1 = ExtCalendar_listComponent;
    ExtCalendar_listComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_listComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_listComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_listComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_listComponent_1;
    ExtCalendar_listComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_listComponent = ExtCalendar_listComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_listComponent);
ExtCalendar_listComponent.ɵfac = function ExtCalendar_listComponent_Factory(t) { return new (t || ExtCalendar_listComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_listComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_listComponent, selectors: [["ExtCalendar_list"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", associatedData: "associatedData", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", deferEmptyText: "deferEmptyText", deselectOnContainerClick: "deselectOnContainerClick", disabled: "disabled", disableSelection: "disableSelection", displayed: "displayed", docked: "docked", draggable: "draggable", emptyItemText: "emptyItemText", emptyState: "emptyState", emptyText: "emptyText", emptyTextDefaults: "emptyTextDefaults", emptyTextProperty: "emptyTextProperty", undefined: "undefined", enableToggle: "enableToggle", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", inline: "inline", innerCls: "innerCls", instanceCls: "instanceCls", itemButtonMode: "itemButtonMode", itemCls: "itemCls", itemId: "itemId", itemRipple: "itemRipple", items: "items", itemsFocusable: "itemsFocusable", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", lastSelected: "lastSelected", layout: "layout", left: "left", listeners: "listeners", loadingHeight: "loadingHeight", loadingText: "loadingText", manageBorders: "manageBorders", margin: "margin", markDirty: "markDirty", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", pressedDelay: "pressedDelay", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", scrollDock: "scrollDock", scrollToTopOnRefresh: "scrollToTopOnRefresh", selectable: "selectable", selected: "selected", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggerCtEvent: "triggerCtEvent", triggerEvent: "triggerEvent", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforestorechange: "beforestorechange", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", childdoubletap: "childdoubletap", childlongpress: "childlongpress", childmouseenter: "childmouseenter", childmouseleave: "childmouseleave", childsingletap: "childsingletap", childtap: "childtap", childtaphold: "childtaphold", childtouchcancel: "childtouchcancel", childtouchend: "childtouchend", childtouchmove: "childtouchmove", childtouchstart: "childtouchstart", deactivate: "deactivate", deselect: "deselect", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemdoubletap: "itemdoubletap", itemlongpress: "itemlongpress", itemmouseenter: "itemmouseenter", itemmouseleave: "itemmouseleave", itemsingletap: "itemsingletap", itemswipe: "itemswipe", itemtap: "itemtap", itemtaphold: "itemtaphold", itemtouchcancel: "itemtouchcancel", itemtouchend: "itemtouchend", itemtouchmove: "itemtouchmove", itemtouchstart: "itemtouchstart", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", navigate: "navigate", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", rowselection: "rowselection", scrollablechange: "scrollablechange", select: "select", selectionchange: "selectionchange", show: "show", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_listComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_listComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_listComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_list',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'enableToggle', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'inline', 'innerCls', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemId', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastSelected', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'pressedDelay', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selected', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'rowselection', 'scrollablechange', 'select', 'selectionchange', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_listComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_listComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_list()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_dayComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_dayComponent, _super);
    function ExtCalendar_dayComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'addForm', 'alignSelf', 'allowFocusingDisabledChildren', 'allowSelection', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'control', 'controller', 'controlStoreRange', 'data', 'dayHeader', 'dayHeaderFormat', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'displayOverlap', 'docked', 'draggable', 'droppable', 'editForm', 'endTime', 'undefined', 'eventDefaults', 'undefined', 'eventRelayers', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightToday', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'resizeEvents', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showNowMarker', 'standardButtons', 'startTime', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tbar', 'timeFormat', 'timezoneOffset', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'view', 'viewModel', 'visibleDays', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_day()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeeventresizestart', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventresize', 'eventtap', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'validateeventresize', 'valuechange', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-day';
        return _this;
    }
    ExtCalendar_dayComponent_1 = ExtCalendar_dayComponent;
    ExtCalendar_dayComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_dayComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_dayComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_dayComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_dayComponent_1;
    ExtCalendar_dayComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_dayComponent = ExtCalendar_dayComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_dayComponent);
ExtCalendar_dayComponent.ɵfac = function ExtCalendar_dayComponent_Factory(t) { return new (t || ExtCalendar_dayComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_dayComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_dayComponent, selectors: [["ExtCalendar_day"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", addForm: "addForm", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", allowSelection: "allowSelection", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", compact: "compact", compactOptions: "compactOptions", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", controlStoreRange: "controlStoreRange", data: "data", dayHeader: "dayHeader", dayHeaderFormat: "dayHeaderFormat", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", displayOverlap: "displayOverlap", docked: "docked", draggable: "draggable", droppable: "droppable", editForm: "editForm", endTime: "endTime", undefined: "undefined", eventDefaults: "eventDefaults", eventRelayers: "eventRelayers", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", gestureNavigation: "gestureNavigation", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightToday: "highlightToday", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", resizeEvents: "resizeEvents", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", showNowMarker: "showNowMarker", standardButtons: "standardButtons", startTime: "startTime", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", tbar: "tbar", timeFormat: "timeFormat", timezoneOffset: "timezoneOffset", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", view: "view", viewModel: "viewModel", visibleDays: "visibleDays", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeeventadd: "beforeeventadd", beforeeventdragstart: "beforeeventdragstart", beforeeventedit: "beforeeventedit", beforeeventresizestart: "beforeeventresizestart", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", eventadd: "eventadd", eventdrop: "eventdrop", eventedit: "eventedit", eventresize: "eventresize", eventtap: "eventtap", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", validateeventadd: "validateeventadd", validateeventdrop: "validateeventdrop", validateeventedit: "validateeventedit", validateeventresize: "validateeventresize", valuechange: "valuechange", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_dayComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_dayComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_dayComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_day',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'addForm', 'alignSelf', 'allowFocusingDisabledChildren', 'allowSelection', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'control', 'controller', 'controlStoreRange', 'data', 'dayHeader', 'dayHeaderFormat', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'displayOverlap', 'docked', 'draggable', 'droppable', 'editForm', 'endTime', 'undefined', 'eventDefaults', 'undefined', 'eventRelayers', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightToday', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'resizeEvents', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showNowMarker', 'standardButtons', 'startTime', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tbar', 'timeFormat', 'timezoneOffset', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'view', 'viewModel', 'visibleDays', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeeventresizestart', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventresize', 'eventtap', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'validateeventresize', 'valuechange', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_dayComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_dayComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_day()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_daysComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_daysComponent, _super);
    function ExtCalendar_daysComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'addForm', 'alignSelf', 'allowFocusingDisabledChildren', 'allowSelection', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'control', 'controller', 'controlStoreRange', 'data', 'dayHeader', 'dayHeaderFormat', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'displayOverlap', 'docked', 'draggable', 'droppable', 'editForm', 'endTime', 'undefined', 'eventDefaults', 'undefined', 'eventRelayers', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightToday', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'resizeEvents', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showNowMarker', 'standardButtons', 'startTime', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tbar', 'timeFormat', 'timezoneOffset', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'view', 'viewModel', 'visibleDays', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_days()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeeventresizestart', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventresize', 'eventtap', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'validateeventresize', 'valuechange', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-days';
        return _this;
    }
    ExtCalendar_daysComponent_1 = ExtCalendar_daysComponent;
    ExtCalendar_daysComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_daysComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_daysComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_daysComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_daysComponent_1;
    ExtCalendar_daysComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_daysComponent = ExtCalendar_daysComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_daysComponent);
ExtCalendar_daysComponent.ɵfac = function ExtCalendar_daysComponent_Factory(t) { return new (t || ExtCalendar_daysComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_daysComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_daysComponent, selectors: [["ExtCalendar_days"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", addForm: "addForm", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", allowSelection: "allowSelection", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", compact: "compact", compactOptions: "compactOptions", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", controlStoreRange: "controlStoreRange", data: "data", dayHeader: "dayHeader", dayHeaderFormat: "dayHeaderFormat", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", displayOverlap: "displayOverlap", docked: "docked", draggable: "draggable", droppable: "droppable", editForm: "editForm", endTime: "endTime", undefined: "undefined", eventDefaults: "eventDefaults", eventRelayers: "eventRelayers", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", gestureNavigation: "gestureNavigation", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightToday: "highlightToday", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", resizeEvents: "resizeEvents", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", showNowMarker: "showNowMarker", standardButtons: "standardButtons", startTime: "startTime", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", tbar: "tbar", timeFormat: "timeFormat", timezoneOffset: "timezoneOffset", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", view: "view", viewModel: "viewModel", visibleDays: "visibleDays", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeeventadd: "beforeeventadd", beforeeventdragstart: "beforeeventdragstart", beforeeventedit: "beforeeventedit", beforeeventresizestart: "beforeeventresizestart", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", eventadd: "eventadd", eventdrop: "eventdrop", eventedit: "eventedit", eventresize: "eventresize", eventtap: "eventtap", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", validateeventadd: "validateeventadd", validateeventdrop: "validateeventdrop", validateeventedit: "validateeventedit", validateeventresize: "validateeventresize", valuechange: "valuechange", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_daysComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_daysComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_daysComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_days',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'addForm', 'alignSelf', 'allowFocusingDisabledChildren', 'allowSelection', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'control', 'controller', 'controlStoreRange', 'data', 'dayHeader', 'dayHeaderFormat', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'displayOverlap', 'docked', 'draggable', 'droppable', 'editForm', 'endTime', 'undefined', 'eventDefaults', 'undefined', 'eventRelayers', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightToday', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'resizeEvents', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showNowMarker', 'standardButtons', 'startTime', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tbar', 'timeFormat', 'timezoneOffset', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'view', 'viewModel', 'visibleDays', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeeventresizestart', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventresize', 'eventtap', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'validateeventresize', 'valuechange', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_daysComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_daysComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_days()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_monthComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_monthComponent, _super);
    function ExtCalendar_monthComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'addForm', 'addOnSelect', 'alignSelf', 'allowFocusingDisabledChildren', 'allowSelection', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'control', 'controller', 'controlStoreRange', 'data', 'dayFormat', 'dayHeader', 'dayHeaderFormat', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'droppable', 'editForm', 'undefined', 'eventDefaults', 'undefined', 'eventRelayers', 'undefined', 'firstDayOfWeek', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightToday', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'overflowText', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showOverflow', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tbar', 'timezoneOffset', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'view', 'viewModel', 'visibleDays', 'visibleWeeks', 'weekendDays', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_month()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventtap', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'valuechange', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-month';
        return _this;
    }
    ExtCalendar_monthComponent_1 = ExtCalendar_monthComponent;
    ExtCalendar_monthComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_monthComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_monthComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_monthComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_monthComponent_1;
    ExtCalendar_monthComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_monthComponent = ExtCalendar_monthComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_monthComponent);
ExtCalendar_monthComponent.ɵfac = function ExtCalendar_monthComponent_Factory(t) { return new (t || ExtCalendar_monthComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_monthComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_monthComponent, selectors: [["ExtCalendar_month"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", addForm: "addForm", addOnSelect: "addOnSelect", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", allowSelection: "allowSelection", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", compact: "compact", compactOptions: "compactOptions", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", controlStoreRange: "controlStoreRange", data: "data", dayFormat: "dayFormat", dayHeader: "dayHeader", dayHeaderFormat: "dayHeaderFormat", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", droppable: "droppable", editForm: "editForm", undefined: "undefined", eventDefaults: "eventDefaults", eventRelayers: "eventRelayers", firstDayOfWeek: "firstDayOfWeek", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", gestureNavigation: "gestureNavigation", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightToday: "highlightToday", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", overflowText: "overflowText", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", showOverflow: "showOverflow", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", tbar: "tbar", timezoneOffset: "timezoneOffset", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", view: "view", viewModel: "viewModel", visibleDays: "visibleDays", visibleWeeks: "visibleWeeks", weekendDays: "weekendDays", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeeventadd: "beforeeventadd", beforeeventdragstart: "beforeeventdragstart", beforeeventedit: "beforeeventedit", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", eventadd: "eventadd", eventdrop: "eventdrop", eventedit: "eventedit", eventtap: "eventtap", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", validateeventadd: "validateeventadd", validateeventdrop: "validateeventdrop", validateeventedit: "validateeventedit", valuechange: "valuechange", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_monthComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_monthComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_monthComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_month',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'addForm', 'addOnSelect', 'alignSelf', 'allowFocusingDisabledChildren', 'allowSelection', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'control', 'controller', 'controlStoreRange', 'data', 'dayFormat', 'dayHeader', 'dayHeaderFormat', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'droppable', 'editForm', 'undefined', 'eventDefaults', 'undefined', 'eventRelayers', 'undefined', 'firstDayOfWeek', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightToday', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'overflowText', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showOverflow', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tbar', 'timezoneOffset', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'view', 'viewModel', 'visibleDays', 'visibleWeeks', 'weekendDays', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventtap', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'valuechange', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_monthComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_monthComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_month()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendarComponent = /** @class */ (function (_super) {
    __extends(ExtCalendarComponent, _super);
    function ExtCalendarComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'calendarList', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'control', 'controller', 'createButton', 'createButtonPosition', 'data', 'dateTitle', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultView', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightToday', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menuButton', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'nextButton', 'padding', 'plugins', 'previousButton', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'sheet', 'shim', 'showAnimation', 'sideBar', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'switcher', 'switcherPosition', 'tabIndex', 'tbar', 'timezoneOffset', 'title', 'titleAlign', 'titleBar', 'titleCollapse', 'todayButton', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'views', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'calendar';
        return _this;
    }
    ExtCalendarComponent_1 = ExtCalendarComponent;
    ExtCalendarComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendarComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendarComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendarComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendarComponent_1;
    ExtCalendarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendarComponent = ExtCalendarComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendarComponent);
ExtCalendarComponent.ɵfac = function ExtCalendarComponent_Factory(t) { return new (t || ExtCalendarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendarComponent, selectors: [["ExtCalendar"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", calendarList: "calendarList", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", compact: "compact", compactOptions: "compactOptions", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", createButton: "createButton", createButtonPosition: "createButtonPosition", data: "data", dateTitle: "dateTitle", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", defaultView: "defaultView", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightToday: "highlightToday", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menuButton: "menuButton", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", nextButton: "nextButton", padding: "padding", previousButton: "previousButton", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", sheet: "sheet", shim: "shim", showAnimation: "showAnimation", sideBar: "sideBar", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", switcher: "switcher", switcherPosition: "switcherPosition", tabIndex: "tabIndex", tbar: "tbar", timezoneOffset: "timezoneOffset", title: "title", titleAlign: "titleAlign", titleBar: "titleBar", titleCollapse: "titleCollapse", todayButton: "todayButton", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", views: "views", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendarComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendarComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'calendarList', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'control', 'controller', 'createButton', 'createButtonPosition', 'data', 'dateTitle', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultView', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightToday', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menuButton', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'nextButton', 'padding', 'plugins', 'previousButton', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'sheet', 'shim', 'showAnimation', 'sideBar', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'switcher', 'switcherPosition', 'tabIndex', 'tbar', 'timezoneOffset', 'title', 'titleAlign', 'titleBar', 'titleCollapse', 'todayButton', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'views', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendarComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendarComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_weekComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_weekComponent, _super);
    function ExtCalendar_weekComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'addForm', 'alignSelf', 'allowFocusingDisabledChildren', 'allowSelection', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'control', 'controller', 'controlStoreRange', 'data', 'dayHeader', 'dayHeaderFormat', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'displayOverlap', 'docked', 'draggable', 'droppable', 'editForm', 'endTime', 'undefined', 'eventDefaults', 'undefined', 'eventRelayers', 'undefined', 'firstDayOfWeek', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightToday', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'resizeEvents', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showNowMarker', 'standardButtons', 'startTime', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tbar', 'timeFormat', 'timezoneOffset', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'view', 'viewModel', 'visibleDays', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_week()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeeventresizestart', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventresize', 'eventtap', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'validateeventresize', 'valuechange', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-week';
        return _this;
    }
    ExtCalendar_weekComponent_1 = ExtCalendar_weekComponent;
    ExtCalendar_weekComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_weekComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_weekComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_weekComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_weekComponent_1;
    ExtCalendar_weekComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_weekComponent = ExtCalendar_weekComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_weekComponent);
ExtCalendar_weekComponent.ɵfac = function ExtCalendar_weekComponent_Factory(t) { return new (t || ExtCalendar_weekComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_weekComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_weekComponent, selectors: [["ExtCalendar_week"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", addForm: "addForm", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", allowSelection: "allowSelection", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", compact: "compact", compactOptions: "compactOptions", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", controlStoreRange: "controlStoreRange", data: "data", dayHeader: "dayHeader", dayHeaderFormat: "dayHeaderFormat", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", displayOverlap: "displayOverlap", docked: "docked", draggable: "draggable", droppable: "droppable", editForm: "editForm", endTime: "endTime", undefined: "undefined", eventDefaults: "eventDefaults", eventRelayers: "eventRelayers", firstDayOfWeek: "firstDayOfWeek", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", gestureNavigation: "gestureNavigation", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightToday: "highlightToday", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", resizeEvents: "resizeEvents", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", showNowMarker: "showNowMarker", standardButtons: "standardButtons", startTime: "startTime", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", tbar: "tbar", timeFormat: "timeFormat", timezoneOffset: "timezoneOffset", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", view: "view", viewModel: "viewModel", visibleDays: "visibleDays", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeeventadd: "beforeeventadd", beforeeventdragstart: "beforeeventdragstart", beforeeventedit: "beforeeventedit", beforeeventresizestart: "beforeeventresizestart", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", eventadd: "eventadd", eventdrop: "eventdrop", eventedit: "eventedit", eventresize: "eventresize", eventtap: "eventtap", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", validateeventadd: "validateeventadd", validateeventdrop: "validateeventdrop", validateeventedit: "validateeventedit", validateeventresize: "validateeventresize", valuechange: "valuechange", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_weekComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_weekComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_weekComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_week',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'addForm', 'alignSelf', 'allowFocusingDisabledChildren', 'allowSelection', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'control', 'controller', 'controlStoreRange', 'data', 'dayHeader', 'dayHeaderFormat', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'displayOverlap', 'docked', 'draggable', 'droppable', 'editForm', 'endTime', 'undefined', 'eventDefaults', 'undefined', 'eventRelayers', 'undefined', 'firstDayOfWeek', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightToday', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'resizeEvents', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showNowMarker', 'standardButtons', 'startTime', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tbar', 'timeFormat', 'timezoneOffset', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'view', 'viewModel', 'visibleDays', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeeventresizestart', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventresize', 'eventtap', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'validateeventresize', 'valuechange', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_weekComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_weekComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_week()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_weeksComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_weeksComponent, _super);
    function ExtCalendar_weeksComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'addForm', 'addOnSelect', 'alignSelf', 'allowFocusingDisabledChildren', 'allowSelection', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'control', 'controller', 'controlStoreRange', 'data', 'dayFormat', 'dayHeader', 'dayHeaderFormat', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'droppable', 'editForm', 'undefined', 'eventDefaults', 'undefined', 'eventRelayers', 'undefined', 'firstDayOfWeek', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightToday', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'overflowText', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showOverflow', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tbar', 'timezoneOffset', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'view', 'viewModel', 'visibleDays', 'visibleWeeks', 'weekendDays', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_weeks()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventtap', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'valuechange', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-weeks';
        return _this;
    }
    ExtCalendar_weeksComponent_1 = ExtCalendar_weeksComponent;
    ExtCalendar_weeksComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_weeksComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_weeksComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_weeksComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_weeksComponent_1;
    ExtCalendar_weeksComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_weeksComponent = ExtCalendar_weeksComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_weeksComponent);
ExtCalendar_weeksComponent.ɵfac = function ExtCalendar_weeksComponent_Factory(t) { return new (t || ExtCalendar_weeksComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_weeksComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_weeksComponent, selectors: [["ExtCalendar_weeks"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", addForm: "addForm", addOnSelect: "addOnSelect", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", allowSelection: "allowSelection", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", compact: "compact", compactOptions: "compactOptions", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", controlStoreRange: "controlStoreRange", data: "data", dayFormat: "dayFormat", dayHeader: "dayHeader", dayHeaderFormat: "dayHeaderFormat", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", droppable: "droppable", editForm: "editForm", undefined: "undefined", eventDefaults: "eventDefaults", eventRelayers: "eventRelayers", firstDayOfWeek: "firstDayOfWeek", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", gestureNavigation: "gestureNavigation", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightToday: "highlightToday", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", overflowText: "overflowText", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", showOverflow: "showOverflow", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", tbar: "tbar", timezoneOffset: "timezoneOffset", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", view: "view", viewModel: "viewModel", visibleDays: "visibleDays", visibleWeeks: "visibleWeeks", weekendDays: "weekendDays", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeeventadd: "beforeeventadd", beforeeventdragstart: "beforeeventdragstart", beforeeventedit: "beforeeventedit", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", eventadd: "eventadd", eventdrop: "eventdrop", eventedit: "eventedit", eventtap: "eventtap", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", validateeventadd: "validateeventadd", validateeventdrop: "validateeventdrop", validateeventedit: "validateeventedit", valuechange: "valuechange", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_weeksComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_weeksComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_weeksComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_weeks',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'addForm', 'addOnSelect', 'alignSelf', 'allowFocusingDisabledChildren', 'allowSelection', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'control', 'controller', 'controlStoreRange', 'data', 'dayFormat', 'dayHeader', 'dayHeaderFormat', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'droppable', 'editForm', 'undefined', 'eventDefaults', 'undefined', 'eventRelayers', 'undefined', 'firstDayOfWeek', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightToday', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'overflowText', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showOverflow', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tbar', 'timezoneOffset', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'view', 'viewModel', 'visibleDays', 'visibleWeeks', 'weekendDays', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventtap', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'valuechange', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_weeksComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_weeksComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_weeks()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_dayviewComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_dayviewComponent, _super);
    function ExtCalendar_dayviewComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'addForm', 'alignSelf', 'allowSelection', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'controller', 'controlStoreRange', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'displayOverlap', 'docked', 'draggable', 'droppable', 'editForm', 'endTime', 'undefined', 'eventDefaults', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'resizeEvents', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showNowMarker', 'startTime', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'timeFormat', 'timeRenderer', 'timezoneOffset', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'visibleDays', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_dayview()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeeventresizestart', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventresize', 'eventtap', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'validateeventresize', 'valuechange', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-dayview';
        return _this;
    }
    ExtCalendar_dayviewComponent_1 = ExtCalendar_dayviewComponent;
    ExtCalendar_dayviewComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_dayviewComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_dayviewComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_dayviewComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_dayviewComponent_1;
    ExtCalendar_dayviewComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_dayviewComponent = ExtCalendar_dayviewComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_dayviewComponent);
ExtCalendar_dayviewComponent.ɵfac = function ExtCalendar_dayviewComponent_Factory(t) { return new (t || ExtCalendar_dayviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_dayviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_dayviewComponent, selectors: [["ExtCalendar_dayview"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", addForm: "addForm", alignSelf: "alignSelf", allowSelection: "allowSelection", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", compact: "compact", compactOptions: "compactOptions", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", controlStoreRange: "controlStoreRange", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", displayOverlap: "displayOverlap", docked: "docked", draggable: "draggable", droppable: "droppable", editForm: "editForm", endTime: "endTime", undefined: "undefined", eventDefaults: "eventDefaults", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", gestureNavigation: "gestureNavigation", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", resizeEvents: "resizeEvents", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", showNowMarker: "showNowMarker", startTime: "startTime", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", timeFormat: "timeFormat", timeRenderer: "timeRenderer", timezoneOffset: "timezoneOffset", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", visibleDays: "visibleDays", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeeventadd: "beforeeventadd", beforeeventdragstart: "beforeeventdragstart", beforeeventedit: "beforeeventedit", beforeeventresizestart: "beforeeventresizestart", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", eventadd: "eventadd", eventdrop: "eventdrop", eventedit: "eventedit", eventresize: "eventresize", eventtap: "eventtap", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", validateeventadd: "validateeventadd", validateeventdrop: "validateeventdrop", validateeventedit: "validateeventedit", validateeventresize: "validateeventresize", valuechange: "valuechange", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_dayviewComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_dayviewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_dayviewComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_dayview',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'addForm', 'alignSelf', 'allowSelection', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'controller', 'controlStoreRange', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'displayOverlap', 'docked', 'draggable', 'droppable', 'editForm', 'endTime', 'undefined', 'eventDefaults', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'resizeEvents', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showNowMarker', 'startTime', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'timeFormat', 'timeRenderer', 'timezoneOffset', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'visibleDays', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeeventresizestart', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventresize', 'eventtap', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'validateeventresize', 'valuechange', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_dayviewComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_dayviewComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_dayview()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_daysviewComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_daysviewComponent, _super);
    function ExtCalendar_daysviewComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'addForm', 'alignSelf', 'allowSelection', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'controller', 'controlStoreRange', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'displayOverlap', 'docked', 'draggable', 'droppable', 'editForm', 'endTime', 'undefined', 'eventDefaults', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'resizeEvents', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showNowMarker', 'startTime', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'timeFormat', 'timeRenderer', 'timezoneOffset', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'visibleDays', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_daysview()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeeventresizestart', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventresize', 'eventtap', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'validateeventresize', 'valuechange', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-daysview';
        return _this;
    }
    ExtCalendar_daysviewComponent_1 = ExtCalendar_daysviewComponent;
    ExtCalendar_daysviewComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_daysviewComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_daysviewComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_daysviewComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_daysviewComponent_1;
    ExtCalendar_daysviewComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_daysviewComponent = ExtCalendar_daysviewComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_daysviewComponent);
ExtCalendar_daysviewComponent.ɵfac = function ExtCalendar_daysviewComponent_Factory(t) { return new (t || ExtCalendar_daysviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_daysviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_daysviewComponent, selectors: [["ExtCalendar_daysview"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", addForm: "addForm", alignSelf: "alignSelf", allowSelection: "allowSelection", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", compact: "compact", compactOptions: "compactOptions", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", controlStoreRange: "controlStoreRange", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", displayOverlap: "displayOverlap", docked: "docked", draggable: "draggable", droppable: "droppable", editForm: "editForm", endTime: "endTime", undefined: "undefined", eventDefaults: "eventDefaults", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", gestureNavigation: "gestureNavigation", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", resizeEvents: "resizeEvents", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", showNowMarker: "showNowMarker", startTime: "startTime", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", timeFormat: "timeFormat", timeRenderer: "timeRenderer", timezoneOffset: "timezoneOffset", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", visibleDays: "visibleDays", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeeventadd: "beforeeventadd", beforeeventdragstart: "beforeeventdragstart", beforeeventedit: "beforeeventedit", beforeeventresizestart: "beforeeventresizestart", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", eventadd: "eventadd", eventdrop: "eventdrop", eventedit: "eventedit", eventresize: "eventresize", eventtap: "eventtap", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", validateeventadd: "validateeventadd", validateeventdrop: "validateeventdrop", validateeventedit: "validateeventedit", validateeventresize: "validateeventresize", valuechange: "valuechange", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_daysviewComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_daysviewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_daysviewComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_daysview',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'addForm', 'alignSelf', 'allowSelection', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'controller', 'controlStoreRange', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'displayOverlap', 'docked', 'draggable', 'droppable', 'editForm', 'endTime', 'undefined', 'eventDefaults', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'resizeEvents', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showNowMarker', 'startTime', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'timeFormat', 'timeRenderer', 'timezoneOffset', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'visibleDays', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeeventresizestart', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventresize', 'eventtap', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'validateeventresize', 'valuechange', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_daysviewComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_daysviewComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_daysview()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_monthviewComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_monthviewComponent, _super);
    function ExtCalendar_monthviewComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'addForm', 'addOnSelect', 'alignSelf', 'allowSelection', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'controller', 'controlStoreRange', 'data', 'dayFormat', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'droppable', 'editForm', 'undefined', 'eventDefaults', 'undefined', 'undefined', 'firstDayOfWeek', 'flex', 'floated', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'overflowText', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showOverflow', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'timezoneOffset', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'visibleDays', 'visibleWeeks', 'weekendDays', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_monthview()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventtap', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'select', 'selectrange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'valuechange', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-monthview';
        return _this;
    }
    ExtCalendar_monthviewComponent_1 = ExtCalendar_monthviewComponent;
    ExtCalendar_monthviewComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_monthviewComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_monthviewComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_monthviewComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_monthviewComponent_1;
    ExtCalendar_monthviewComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_monthviewComponent = ExtCalendar_monthviewComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_monthviewComponent);
ExtCalendar_monthviewComponent.ɵfac = function ExtCalendar_monthviewComponent_Factory(t) { return new (t || ExtCalendar_monthviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_monthviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_monthviewComponent, selectors: [["ExtCalendar_monthview"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", addForm: "addForm", addOnSelect: "addOnSelect", alignSelf: "alignSelf", allowSelection: "allowSelection", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", compact: "compact", compactOptions: "compactOptions", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", controlStoreRange: "controlStoreRange", data: "data", dayFormat: "dayFormat", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", droppable: "droppable", editForm: "editForm", undefined: "undefined", eventDefaults: "eventDefaults", firstDayOfWeek: "firstDayOfWeek", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", gestureNavigation: "gestureNavigation", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", overflowText: "overflowText", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", showOverflow: "showOverflow", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", timezoneOffset: "timezoneOffset", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", visibleDays: "visibleDays", visibleWeeks: "visibleWeeks", weekendDays: "weekendDays", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeeventadd: "beforeeventadd", beforeeventdragstart: "beforeeventdragstart", beforeeventedit: "beforeeventedit", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", eventadd: "eventadd", eventdrop: "eventdrop", eventedit: "eventedit", eventtap: "eventtap", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", select: "select", selectrange: "selectrange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", validateeventadd: "validateeventadd", validateeventdrop: "validateeventdrop", validateeventedit: "validateeventedit", valuechange: "valuechange", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_monthviewComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_monthviewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_monthviewComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_monthview',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'addForm', 'addOnSelect', 'alignSelf', 'allowSelection', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'controller', 'controlStoreRange', 'data', 'dayFormat', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'droppable', 'editForm', 'undefined', 'eventDefaults', 'undefined', 'undefined', 'firstDayOfWeek', 'flex', 'floated', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'overflowText', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showOverflow', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'timezoneOffset', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'visibleDays', 'visibleWeeks', 'weekendDays', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventtap', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'select', 'selectrange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'valuechange', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_monthviewComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_monthviewComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_monthview()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_multiviewComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_multiviewComponent, _super);
    function ExtCalendar_multiviewComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'compact', 'compactOptions', 'defaultView', 'layout', 'store', 'timezoneOffset', 'value', 'views',], (new EWCCalendar_multiview()).events, ['ready',], vc) || this;
        _this.xtype = 'calendar-multiview';
        return _this;
    }
    ExtCalendar_multiviewComponent_1 = ExtCalendar_multiviewComponent;
    ExtCalendar_multiviewComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_multiviewComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_multiviewComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_multiviewComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_multiviewComponent_1;
    ExtCalendar_multiviewComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_multiviewComponent = ExtCalendar_multiviewComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_multiviewComponent);
ExtCalendar_multiviewComponent.ɵfac = function ExtCalendar_multiviewComponent_Factory(t) { return new (t || ExtCalendar_multiviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_multiviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_multiviewComponent, selectors: [["ExtCalendar_multiview"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", compact: "compact", compactOptions: "compactOptions", defaultView: "defaultView", layout: "layout", store: "store", timezoneOffset: "timezoneOffset", value: "value", views: "views" }, outputs: { ready: "ready" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_multiviewComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_multiviewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_multiviewComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_multiview',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'compact', 'compactOptions', 'defaultView', 'layout', 'store', 'timezoneOffset', 'value', 'views',],
                outputs: ['ready',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_multiviewComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_multiviewComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_multiview()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_weekviewComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_weekviewComponent, _super);
    function ExtCalendar_weekviewComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'addForm', 'alignSelf', 'allowSelection', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'controller', 'controlStoreRange', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'displayOverlap', 'docked', 'draggable', 'droppable', 'editForm', 'endTime', 'undefined', 'eventDefaults', 'undefined', 'undefined', 'firstDayOfWeek', 'flex', 'floated', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'resizeEvents', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showNowMarker', 'startTime', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'timeFormat', 'timeRenderer', 'timezoneOffset', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'visibleDays', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_weekview()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeeventresizestart', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventresize', 'eventtap', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'validateeventresize', 'valuechange', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-weekview';
        return _this;
    }
    ExtCalendar_weekviewComponent_1 = ExtCalendar_weekviewComponent;
    ExtCalendar_weekviewComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_weekviewComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_weekviewComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_weekviewComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_weekviewComponent_1;
    ExtCalendar_weekviewComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_weekviewComponent = ExtCalendar_weekviewComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_weekviewComponent);
ExtCalendar_weekviewComponent.ɵfac = function ExtCalendar_weekviewComponent_Factory(t) { return new (t || ExtCalendar_weekviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_weekviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_weekviewComponent, selectors: [["ExtCalendar_weekview"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", addForm: "addForm", alignSelf: "alignSelf", allowSelection: "allowSelection", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", compact: "compact", compactOptions: "compactOptions", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", controlStoreRange: "controlStoreRange", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", displayOverlap: "displayOverlap", docked: "docked", draggable: "draggable", droppable: "droppable", editForm: "editForm", endTime: "endTime", undefined: "undefined", eventDefaults: "eventDefaults", firstDayOfWeek: "firstDayOfWeek", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", gestureNavigation: "gestureNavigation", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", resizeEvents: "resizeEvents", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", showNowMarker: "showNowMarker", startTime: "startTime", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", timeFormat: "timeFormat", timeRenderer: "timeRenderer", timezoneOffset: "timezoneOffset", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", visibleDays: "visibleDays", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeeventadd: "beforeeventadd", beforeeventdragstart: "beforeeventdragstart", beforeeventedit: "beforeeventedit", beforeeventresizestart: "beforeeventresizestart", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", eventadd: "eventadd", eventdrop: "eventdrop", eventedit: "eventedit", eventresize: "eventresize", eventtap: "eventtap", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", validateeventadd: "validateeventadd", validateeventdrop: "validateeventdrop", validateeventedit: "validateeventedit", validateeventresize: "validateeventresize", valuechange: "valuechange", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_weekviewComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_weekviewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_weekviewComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_weekview',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'addForm', 'alignSelf', 'allowSelection', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'controller', 'controlStoreRange', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'displayOverlap', 'docked', 'draggable', 'droppable', 'editForm', 'endTime', 'undefined', 'eventDefaults', 'undefined', 'undefined', 'firstDayOfWeek', 'flex', 'floated', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'resizeEvents', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showNowMarker', 'startTime', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'timeFormat', 'timeRenderer', 'timezoneOffset', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'visibleDays', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeeventresizestart', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventresize', 'eventtap', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'validateeventresize', 'valuechange', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_weekviewComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_weekviewComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_weekview()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCalendar_weeksviewComponent = /** @class */ (function (_super) {
    __extends(ExtCalendar_weeksviewComponent, _super);
    function ExtCalendar_weeksviewComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'addForm', 'addOnSelect', 'alignSelf', 'allowSelection', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'controller', 'controlStoreRange', 'data', 'dayFormat', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'droppable', 'editForm', 'undefined', 'eventDefaults', 'undefined', 'undefined', 'firstDayOfWeek', 'flex', 'floated', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'overflowText', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showOverflow', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'timezoneOffset', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'visibleDays', 'visibleWeeks', 'weekendDays', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCalendar_weeksview()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventtap', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'select', 'selectrange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'valuechange', 'widthchange',], vc) || this;
        _this.xtype = 'calendar-weeksview';
        return _this;
    }
    ExtCalendar_weeksviewComponent_1 = ExtCalendar_weeksviewComponent;
    ExtCalendar_weeksviewComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCalendar_weeksviewComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCalendar_weeksviewComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCalendar_weeksviewComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCalendar_weeksviewComponent_1;
    ExtCalendar_weeksviewComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCalendar_weeksviewComponent = ExtCalendar_weeksviewComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCalendar_weeksviewComponent);
ExtCalendar_weeksviewComponent.ɵfac = function ExtCalendar_weeksviewComponent_Factory(t) { return new (t || ExtCalendar_weeksviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCalendar_weeksviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCalendar_weeksviewComponent, selectors: [["ExtCalendar_weeksview"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", addForm: "addForm", addOnSelect: "addOnSelect", alignSelf: "alignSelf", allowSelection: "allowSelection", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", compact: "compact", compactOptions: "compactOptions", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", controlStoreRange: "controlStoreRange", data: "data", dayFormat: "dayFormat", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", droppable: "droppable", editForm: "editForm", undefined: "undefined", eventDefaults: "eventDefaults", firstDayOfWeek: "firstDayOfWeek", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", gestureNavigation: "gestureNavigation", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", overflowText: "overflowText", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", showOverflow: "showOverflow", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", timezoneOffset: "timezoneOffset", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", visibleDays: "visibleDays", visibleWeeks: "visibleWeeks", weekendDays: "weekendDays", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeeventadd: "beforeeventadd", beforeeventdragstart: "beforeeventdragstart", beforeeventedit: "beforeeventedit", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", eventadd: "eventadd", eventdrop: "eventdrop", eventedit: "eventedit", eventtap: "eventtap", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", select: "select", selectrange: "selectrange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", validateeventadd: "validateeventadd", validateeventdrop: "validateeventdrop", validateeventedit: "validateeventedit", valuechange: "valuechange", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_weeksviewComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCalendar_weeksviewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCalendar_weeksviewComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCalendar_weeksview',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'addForm', 'addOnSelect', 'alignSelf', 'allowSelection', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'compact', 'compactOptions', 'constrainAlign', 'contentEl', 'controller', 'controlStoreRange', 'data', 'dayFormat', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'droppable', 'editForm', 'undefined', 'eventDefaults', 'undefined', 'undefined', 'firstDayOfWeek', 'flex', 'floated', 'focusCls', 'fullscreen', 'gestureNavigation', 'header', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'overflowText', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showOverflow', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'timezoneOffset', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'visibleDays', 'visibleWeeks', 'weekendDays', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeeventadd', 'beforeeventdragstart', 'beforeeventedit', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'eventadd', 'eventdrop', 'eventedit', 'eventtap', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'select', 'selectrange', 'show', 'tofront', 'topchange', 'updatedata', 'validateeventadd', 'validateeventdrop', 'validateeventedit', 'valuechange', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCalendar_weeksviewComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCalendar_weeksviewComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCalendar_weeksview()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCarouselComponent = /** @class */ (function (_super) {
    __extends(ExtCarouselComponent, _super);
    function ExtCarouselComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'direction', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'indicator', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCarousel()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'carousel';
        return _this;
    }
    ExtCarouselComponent_1 = ExtCarouselComponent;
    ExtCarouselComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCarouselComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCarouselComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCarouselComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCarouselComponent_1;
    ExtCarouselComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCarouselComponent = ExtCarouselComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCarouselComponent);
ExtCarouselComponent.ɵfac = function ExtCarouselComponent_Factory(t) { return new (t || ExtCarouselComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCarouselComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCarouselComponent, selectors: [["ExtCarousel"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", direction: "direction", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", indicator: "indicator", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCarouselComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCarouselComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCarouselComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCarousel',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'direction', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'indicator', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCarouselComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCarouselComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCarousel()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCartesianComponent = /** @class */ (function (_super) {
    __extends(ExtCartesianComponent, _super);
    function ExtCartesianComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axes', 'axisLock', 'background', 'bind', 'bodyCls', 'border', 'bottom', 'captions', 'cardSwitchAnimation', 'centered', 'cls', 'colors', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'downloadServerUrl', 'draggable', 'engine', 'undefined', 'undefined', 'undefined', 'flex', 'flipXY', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gradients', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightItem', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'innerPadding', 'insetPadding', 'instanceCls', 'interactions', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'legend', 'listeners', 'mainRect', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizeHandler', 'right', 'ripple', 'scrollable', 'series', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sprites', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'surfaceZIndexes', 'tabIndex', 'theme', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCartesian()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerefresh', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bodyresize', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemclick', 'itemdblclick', 'itemhighlight', 'itemhighlightchange', 'itemmousedown', 'itemmousemove', 'itemmouseout', 'itemmouseover', 'itemmouseup', 'itemtap', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'redraw', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'spriteclick', 'spritedblclick', 'spritemousedown', 'spritemousemove', 'spritemouseout', 'spritemouseover', 'spritemouseup', 'spritetap', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'cartesian';
        return _this;
    }
    ExtCartesianComponent_1 = ExtCartesianComponent;
    ExtCartesianComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCartesianComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCartesianComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCartesianComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCartesianComponent_1;
    ExtCartesianComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCartesianComponent = ExtCartesianComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCartesianComponent);
ExtCartesianComponent.ɵfac = function ExtCartesianComponent_Factory(t) { return new (t || ExtCartesianComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCartesianComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCartesianComponent, selectors: [["ExtCartesian"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", animation: "animation", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axes: "axes", axisLock: "axisLock", background: "background", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", captions: "captions", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", colors: "colors", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", downloadServerUrl: "downloadServerUrl", draggable: "draggable", engine: "engine", undefined: "undefined", flex: "flex", flipXY: "flipXY", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", gradients: "gradients", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightItem: "highlightItem", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", innerPadding: "innerPadding", insetPadding: "insetPadding", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", legend: "legend", listeners: "listeners", mainRect: "mainRect", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizeHandler: "resizeHandler", right: "right", ripple: "ripple", scrollable: "scrollable", series: "series", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sprites: "sprites", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", surfaceZIndexes: "surfaceZIndexes", tabIndex: "tabIndex", theme: "theme", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerefresh: "beforerefresh", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bodyresize: "bodyresize", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemclick: "itemclick", itemdblclick: "itemdblclick", itemhighlight: "itemhighlight", itemhighlightchange: "itemhighlightchange", itemmousedown: "itemmousedown", itemmousemove: "itemmousemove", itemmouseout: "itemmouseout", itemmouseover: "itemmouseover", itemmouseup: "itemmouseup", itemtap: "itemtap", layout: "layout", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", redraw: "redraw", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", spriteclick: "spriteclick", spritedblclick: "spritedblclick", spritemousedown: "spritemousedown", spritemousemove: "spritemousemove", spritemouseout: "spritemouseout", spritemouseover: "spritemouseover", spritemouseup: "spritemouseup", spritetap: "spritetap", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCartesianComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCartesianComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCartesianComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCartesian',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axes', 'axisLock', 'background', 'bind', 'bodyCls', 'border', 'bottom', 'captions', 'cardSwitchAnimation', 'centered', 'cls', 'colors', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'downloadServerUrl', 'draggable', 'engine', 'undefined', 'undefined', 'undefined', 'flex', 'flipXY', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gradients', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightItem', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'innerPadding', 'insetPadding', 'instanceCls', 'interactions', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'legend', 'listeners', 'mainRect', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizeHandler', 'right', 'ripple', 'scrollable', 'series', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sprites', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'surfaceZIndexes', 'tabIndex', 'theme', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerefresh', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bodyresize', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemclick', 'itemdblclick', 'itemhighlight', 'itemhighlightchange', 'itemmousedown', 'itemmousemove', 'itemmouseout', 'itemmouseover', 'itemmouseup', 'itemtap', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'redraw', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'spriteclick', 'spritedblclick', 'spritemousedown', 'spritemousemove', 'spritemouseout', 'spritemouseover', 'spritemouseup', 'spritetap', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCartesianComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCartesianComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCartesian()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtChartComponent = /** @class */ (function (_super) {
    __extends(ExtChartComponent, _super);
    function ExtChartComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axes', 'axisLock', 'background', 'bind', 'bodyCls', 'border', 'bottom', 'captions', 'cardSwitchAnimation', 'centered', 'cls', 'colors', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'downloadServerUrl', 'draggable', 'engine', 'undefined', 'undefined', 'undefined', 'flex', 'flipXY', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gradients', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightItem', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'innerPadding', 'insetPadding', 'instanceCls', 'interactions', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'legend', 'listeners', 'mainRect', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizeHandler', 'right', 'ripple', 'scrollable', 'series', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sprites', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'surfaceZIndexes', 'tabIndex', 'theme', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCChart()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerefresh', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bodyresize', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemclick', 'itemdblclick', 'itemhighlight', 'itemhighlightchange', 'itemmousedown', 'itemmousemove', 'itemmouseout', 'itemmouseover', 'itemmouseup', 'itemtap', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'redraw', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'spriteclick', 'spritedblclick', 'spritemousedown', 'spritemousemove', 'spritemouseout', 'spritemouseover', 'spritemouseup', 'spritetap', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'chart';
        return _this;
    }
    ExtChartComponent_1 = ExtChartComponent;
    ExtChartComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtChartComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtChartComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtChartComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtChartComponent_1;
    ExtChartComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtChartComponent = ExtChartComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtChartComponent);
ExtChartComponent.ɵfac = function ExtChartComponent_Factory(t) { return new (t || ExtChartComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtChartComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtChartComponent, selectors: [["ExtChart"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", animation: "animation", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axes: "axes", axisLock: "axisLock", background: "background", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", captions: "captions", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", colors: "colors", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", downloadServerUrl: "downloadServerUrl", draggable: "draggable", engine: "engine", undefined: "undefined", flex: "flex", flipXY: "flipXY", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", gradients: "gradients", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightItem: "highlightItem", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", innerPadding: "innerPadding", insetPadding: "insetPadding", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", legend: "legend", listeners: "listeners", mainRect: "mainRect", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizeHandler: "resizeHandler", right: "right", ripple: "ripple", scrollable: "scrollable", series: "series", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sprites: "sprites", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", surfaceZIndexes: "surfaceZIndexes", tabIndex: "tabIndex", theme: "theme", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerefresh: "beforerefresh", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bodyresize: "bodyresize", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemclick: "itemclick", itemdblclick: "itemdblclick", itemhighlight: "itemhighlight", itemhighlightchange: "itemhighlightchange", itemmousedown: "itemmousedown", itemmousemove: "itemmousemove", itemmouseout: "itemmouseout", itemmouseover: "itemmouseover", itemmouseup: "itemmouseup", itemtap: "itemtap", layout: "layout", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", redraw: "redraw", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", spriteclick: "spriteclick", spritedblclick: "spritedblclick", spritemousedown: "spritemousedown", spritemousemove: "spritemousemove", spritemouseout: "spritemouseout", spritemouseover: "spritemouseover", spritemouseup: "spritemouseup", spritetap: "spritetap", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtChartComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtChartComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtChartComponent, [{
        type: Component,
        args: [{
                selector: 'ExtChart',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axes', 'axisLock', 'background', 'bind', 'bodyCls', 'border', 'bottom', 'captions', 'cardSwitchAnimation', 'centered', 'cls', 'colors', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'downloadServerUrl', 'draggable', 'engine', 'undefined', 'undefined', 'undefined', 'flex', 'flipXY', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gradients', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightItem', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'innerPadding', 'insetPadding', 'instanceCls', 'interactions', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'legend', 'listeners', 'mainRect', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizeHandler', 'right', 'ripple', 'scrollable', 'series', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sprites', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'surfaceZIndexes', 'tabIndex', 'theme', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerefresh', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bodyresize', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemclick', 'itemdblclick', 'itemhighlight', 'itemhighlightchange', 'itemmousedown', 'itemmousemove', 'itemmouseout', 'itemmouseover', 'itemmouseup', 'itemtap', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'redraw', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'spriteclick', 'spritedblclick', 'spritemousedown', 'spritemousemove', 'spritemouseout', 'spritemouseover', 'spritemouseup', 'spritetap', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtChartComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtChartComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCChart()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtLegendComponent = /** @class */ (function (_super) {
    __extends(ExtLegendComponent, _super);
    function ExtLegendComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'inline', 'innerCls', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemId', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastSelected', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'pressedDelay', 'publishes', 'record', 'rect', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selected', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'toggleable', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCLegend()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'rowselection', 'scrollablechange', 'select', 'selectionchange', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'legend';
        return _this;
    }
    ExtLegendComponent_1 = ExtLegendComponent;
    ExtLegendComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtLegendComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtLegendComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtLegendComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtLegendComponent_1;
    ExtLegendComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtLegendComponent = ExtLegendComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtLegendComponent);
ExtLegendComponent.ɵfac = function ExtLegendComponent_Factory(t) { return new (t || ExtLegendComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtLegendComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtLegendComponent, selectors: [["ExtLegend"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", associatedData: "associatedData", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", deferEmptyText: "deferEmptyText", deselectOnContainerClick: "deselectOnContainerClick", disabled: "disabled", disableSelection: "disableSelection", displayed: "displayed", docked: "docked", draggable: "draggable", emptyItemText: "emptyItemText", emptyState: "emptyState", emptyText: "emptyText", emptyTextDefaults: "emptyTextDefaults", emptyTextProperty: "emptyTextProperty", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", inline: "inline", innerCls: "innerCls", instanceCls: "instanceCls", itemButtonMode: "itemButtonMode", itemCls: "itemCls", itemId: "itemId", itemRipple: "itemRipple", items: "items", itemsFocusable: "itemsFocusable", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", lastSelected: "lastSelected", layout: "layout", left: "left", listeners: "listeners", loadingHeight: "loadingHeight", loadingText: "loadingText", manageBorders: "manageBorders", margin: "margin", markDirty: "markDirty", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", pressedDelay: "pressedDelay", publishes: "publishes", record: "record", rect: "rect", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", scrollDock: "scrollDock", scrollToTopOnRefresh: "scrollToTopOnRefresh", selectable: "selectable", selected: "selected", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", toggleable: "toggleable", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggerCtEvent: "triggerCtEvent", triggerEvent: "triggerEvent", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforestorechange: "beforestorechange", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", childdoubletap: "childdoubletap", childlongpress: "childlongpress", childmouseenter: "childmouseenter", childmouseleave: "childmouseleave", childsingletap: "childsingletap", childtap: "childtap", childtaphold: "childtaphold", childtouchcancel: "childtouchcancel", childtouchend: "childtouchend", childtouchmove: "childtouchmove", childtouchstart: "childtouchstart", deactivate: "deactivate", deselect: "deselect", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemdoubletap: "itemdoubletap", itemlongpress: "itemlongpress", itemmouseenter: "itemmouseenter", itemmouseleave: "itemmouseleave", itemsingletap: "itemsingletap", itemswipe: "itemswipe", itemtap: "itemtap", itemtaphold: "itemtaphold", itemtouchcancel: "itemtouchcancel", itemtouchend: "itemtouchend", itemtouchmove: "itemtouchmove", itemtouchstart: "itemtouchstart", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", navigate: "navigate", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", rowselection: "rowselection", scrollablechange: "scrollablechange", select: "select", selectionchange: "selectionchange", show: "show", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtLegendComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtLegendComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtLegendComponent, [{
        type: Component,
        args: [{
                selector: 'ExtLegend',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'inline', 'innerCls', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemId', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastSelected', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'pressedDelay', 'publishes', 'record', 'rect', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selected', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'toggleable', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'rowselection', 'scrollablechange', 'select', 'selectionchange', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtLegendComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtLegendComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCLegend()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtChartnavigatorComponent = /** @class */ (function (_super) {
    __extends(ExtChartnavigatorComponent, _super);
    function ExtChartnavigatorComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'chart', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'navigator', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCChartnavigator()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'chartnavigator';
        return _this;
    }
    ExtChartnavigatorComponent_1 = ExtChartnavigatorComponent;
    ExtChartnavigatorComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtChartnavigatorComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtChartnavigatorComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtChartnavigatorComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtChartnavigatorComponent_1;
    ExtChartnavigatorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtChartnavigatorComponent = ExtChartnavigatorComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtChartnavigatorComponent);
ExtChartnavigatorComponent.ɵfac = function ExtChartnavigatorComponent_Factory(t) { return new (t || ExtChartnavigatorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtChartnavigatorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtChartnavigatorComponent, selectors: [["ExtChartnavigator"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", chart: "chart", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", navigator: "navigator", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtChartnavigatorComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtChartnavigatorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtChartnavigatorComponent, [{
        type: Component,
        args: [{
                selector: 'ExtChartnavigator',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'chart', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'navigator', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtChartnavigatorComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtChartnavigatorComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCChartnavigator()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPolarComponent = /** @class */ (function (_super) {
    __extends(ExtPolarComponent, _super);
    function ExtPolarComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axes', 'axisLock', 'background', 'bind', 'bodyCls', 'border', 'bottom', 'captions', 'cardSwitchAnimation', 'center', 'centered', 'cls', 'colors', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'downloadServerUrl', 'draggable', 'engine', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gradients', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightItem', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'innerPadding', 'insetPadding', 'instanceCls', 'interactions', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'legend', 'listeners', 'mainRect', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'radius', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizeHandler', 'right', 'ripple', 'scrollable', 'series', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sprites', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'surfaceZIndexes', 'tabIndex', 'theme', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPolar()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerefresh', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bodyresize', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemclick', 'itemdblclick', 'itemhighlight', 'itemhighlightchange', 'itemmousedown', 'itemmousemove', 'itemmouseout', 'itemmouseover', 'itemmouseup', 'itemtap', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'redraw', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'spriteclick', 'spritedblclick', 'spritemousedown', 'spritemousemove', 'spritemouseout', 'spritemouseover', 'spritemouseup', 'spritetap', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'polar';
        return _this;
    }
    ExtPolarComponent_1 = ExtPolarComponent;
    ExtPolarComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPolarComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPolarComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPolarComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPolarComponent_1;
    ExtPolarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPolarComponent = ExtPolarComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPolarComponent);
ExtPolarComponent.ɵfac = function ExtPolarComponent_Factory(t) { return new (t || ExtPolarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPolarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPolarComponent, selectors: [["ExtPolar"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", animation: "animation", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axes: "axes", axisLock: "axisLock", background: "background", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", captions: "captions", cardSwitchAnimation: "cardSwitchAnimation", center: "center", centered: "centered", cls: "cls", colors: "colors", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", downloadServerUrl: "downloadServerUrl", draggable: "draggable", engine: "engine", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", gradients: "gradients", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightItem: "highlightItem", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", innerPadding: "innerPadding", insetPadding: "insetPadding", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", legend: "legend", listeners: "listeners", mainRect: "mainRect", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", radius: "radius", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizeHandler: "resizeHandler", right: "right", ripple: "ripple", scrollable: "scrollable", series: "series", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sprites: "sprites", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", surfaceZIndexes: "surfaceZIndexes", tabIndex: "tabIndex", theme: "theme", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerefresh: "beforerefresh", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bodyresize: "bodyresize", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemclick: "itemclick", itemdblclick: "itemdblclick", itemhighlight: "itemhighlight", itemhighlightchange: "itemhighlightchange", itemmousedown: "itemmousedown", itemmousemove: "itemmousemove", itemmouseout: "itemmouseout", itemmouseover: "itemmouseover", itemmouseup: "itemmouseup", itemtap: "itemtap", layout: "layout", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", redraw: "redraw", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", spriteclick: "spriteclick", spritedblclick: "spritedblclick", spritemousedown: "spritemousedown", spritemousemove: "spritemousemove", spritemouseout: "spritemouseout", spritemouseover: "spritemouseover", spritemouseup: "spritemouseup", spritetap: "spritetap", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPolarComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPolarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPolarComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPolar',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axes', 'axisLock', 'background', 'bind', 'bodyCls', 'border', 'bottom', 'captions', 'cardSwitchAnimation', 'center', 'centered', 'cls', 'colors', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'downloadServerUrl', 'draggable', 'engine', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gradients', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightItem', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'innerPadding', 'insetPadding', 'instanceCls', 'interactions', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'legend', 'listeners', 'mainRect', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'radius', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizeHandler', 'right', 'ripple', 'scrollable', 'series', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sprites', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'surfaceZIndexes', 'tabIndex', 'theme', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerefresh', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bodyresize', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemclick', 'itemdblclick', 'itemhighlight', 'itemhighlightchange', 'itemmousedown', 'itemmousemove', 'itemmouseout', 'itemmouseover', 'itemmouseup', 'itemtap', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'redraw', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'spriteclick', 'spritedblclick', 'spritemousedown', 'spritemousemove', 'spritemouseout', 'spritemouseover', 'spritemouseup', 'spritetap', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPolarComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPolarComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPolar()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSpacefillingComponent = /** @class */ (function (_super) {
    __extends(ExtSpacefillingComponent, _super);
    function ExtSpacefillingComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axes', 'axisLock', 'background', 'bind', 'bodyCls', 'border', 'bottom', 'captions', 'cardSwitchAnimation', 'centered', 'cls', 'colors', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'downloadServerUrl', 'draggable', 'engine', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gradients', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightItem', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'insetPadding', 'instanceCls', 'interactions', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'legend', 'listeners', 'mainRect', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizeHandler', 'right', 'ripple', 'scrollable', 'series', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sprites', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'surfaceZIndexes', 'tabIndex', 'theme', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSpacefilling()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerefresh', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bodyresize', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemclick', 'itemdblclick', 'itemhighlight', 'itemhighlightchange', 'itemmousedown', 'itemmousemove', 'itemmouseout', 'itemmouseover', 'itemmouseup', 'itemtap', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'redraw', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'spriteclick', 'spritedblclick', 'spritemousedown', 'spritemousemove', 'spritemouseout', 'spritemouseover', 'spritemouseup', 'spritetap', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'spacefilling';
        return _this;
    }
    ExtSpacefillingComponent_1 = ExtSpacefillingComponent;
    ExtSpacefillingComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSpacefillingComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSpacefillingComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSpacefillingComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSpacefillingComponent_1;
    ExtSpacefillingComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSpacefillingComponent = ExtSpacefillingComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSpacefillingComponent);
ExtSpacefillingComponent.ɵfac = function ExtSpacefillingComponent_Factory(t) { return new (t || ExtSpacefillingComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSpacefillingComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSpacefillingComponent, selectors: [["ExtSpacefilling"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", animation: "animation", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axes: "axes", axisLock: "axisLock", background: "background", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", captions: "captions", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", colors: "colors", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", downloadServerUrl: "downloadServerUrl", draggable: "draggable", engine: "engine", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", gradients: "gradients", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightItem: "highlightItem", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", insetPadding: "insetPadding", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", legend: "legend", listeners: "listeners", mainRect: "mainRect", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizeHandler: "resizeHandler", right: "right", ripple: "ripple", scrollable: "scrollable", series: "series", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sprites: "sprites", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", surfaceZIndexes: "surfaceZIndexes", tabIndex: "tabIndex", theme: "theme", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerefresh: "beforerefresh", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bodyresize: "bodyresize", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemclick: "itemclick", itemdblclick: "itemdblclick", itemhighlight: "itemhighlight", itemhighlightchange: "itemhighlightchange", itemmousedown: "itemmousedown", itemmousemove: "itemmousemove", itemmouseout: "itemmouseout", itemmouseover: "itemmouseover", itemmouseup: "itemmouseup", itemtap: "itemtap", layout: "layout", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", redraw: "redraw", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", spriteclick: "spriteclick", spritedblclick: "spritedblclick", spritemousedown: "spritemousedown", spritemousemove: "spritemousemove", spritemouseout: "spritemouseout", spritemouseover: "spritemouseover", spritemouseup: "spritemouseup", spritetap: "spritetap", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSpacefillingComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSpacefillingComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSpacefillingComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSpacefilling',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axes', 'axisLock', 'background', 'bind', 'bodyCls', 'border', 'bottom', 'captions', 'cardSwitchAnimation', 'centered', 'cls', 'colors', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'downloadServerUrl', 'draggable', 'engine', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gradients', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightItem', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'insetPadding', 'instanceCls', 'interactions', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'legend', 'listeners', 'mainRect', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizeHandler', 'right', 'ripple', 'scrollable', 'series', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sprites', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'surfaceZIndexes', 'tabIndex', 'theme', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerefresh', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bodyresize', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemclick', 'itemdblclick', 'itemhighlight', 'itemhighlightchange', 'itemmousedown', 'itemmousemove', 'itemmouseout', 'itemmouseover', 'itemmouseup', 'itemtap', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'redraw', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'spriteclick', 'spritedblclick', 'spritemousedown', 'spritemousemove', 'spritemouseout', 'spritemouseover', 'spritemouseup', 'spritetap', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSpacefillingComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSpacefillingComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSpacefilling()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtChipComponent = /** @class */ (function (_super) {
    __extends(ExtChipComponent, _super);
    function ExtChipComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'closable', 'closeHandler', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCChip()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'chip';
        return _this;
    }
    ExtChipComponent_1 = ExtChipComponent;
    ExtChipComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtChipComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtChipComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtChipComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtChipComponent_1;
    ExtChipComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtChipComponent = ExtChipComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtChipComponent);
ExtChipComponent.ɵfac = function ExtChipComponent_Factory(t) { return new (t || ExtChipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtChipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtChipComponent, selectors: [["ExtChip"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", closable: "closable", closeHandler: "closeHandler", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", text: "text", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtChipComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtChipComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtChipComponent, [{
        type: Component,
        args: [{
                selector: 'ExtChip',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'closable', 'closeHandler', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtChipComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtChipComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCChip()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtComponentComponent = /** @class */ (function (_super) {
    __extends(ExtComponentComponent, _super);
    function ExtComponentComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCComponent()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'component';
        return _this;
    }
    ExtComponentComponent_1 = ExtComponentComponent;
    ExtComponentComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtComponentComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtComponentComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtComponentComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtComponentComponent_1;
    ExtComponentComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtComponentComponent = ExtComponentComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtComponentComponent);
ExtComponentComponent.ɵfac = function ExtComponentComponent_Factory(t) { return new (t || ExtComponentComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtComponentComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtComponentComponent, selectors: [["ExtComponent"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtComponentComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtComponentComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtComponentComponent, [{
        type: Component,
        args: [{
                selector: 'ExtComponent',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtComponentComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtComponentComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCComponent()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtContainerComponent = /** @class */ (function (_super) {
    __extends(ExtContainerComponent, _super);
    function ExtContainerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCContainer()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'container';
        return _this;
    }
    ExtContainerComponent_1 = ExtContainerComponent;
    ExtContainerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtContainerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtContainerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtContainerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtContainerComponent_1;
    ExtContainerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtContainerComponent = ExtContainerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtContainerComponent);
ExtContainerComponent.ɵfac = function ExtContainerComponent_Factory(t) { return new (t || ExtContainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtContainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtContainerComponent, selectors: [["ExtContainer"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtContainerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtContainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtContainerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtContainer',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtContainerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtContainerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCContainer()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtD3_canvasComponent = /** @class */ (function (_super) {
    __extends(ExtD3_canvasComponent, _super);
    function ExtD3_canvasComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'hdpi', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCD3_canvas()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'd3-canvas';
        return _this;
    }
    ExtD3_canvasComponent_1 = ExtD3_canvasComponent;
    ExtD3_canvasComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtD3_canvasComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtD3_canvasComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtD3_canvasComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtD3_canvasComponent_1;
    ExtD3_canvasComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtD3_canvasComponent = ExtD3_canvasComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtD3_canvasComponent);
ExtD3_canvasComponent.ɵfac = function ExtD3_canvasComponent_Factory(t) { return new (t || ExtD3_canvasComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtD3_canvasComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtD3_canvasComponent, selectors: [["ExtD3_canvas"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", componentCls: "componentCls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", hdpi: "hdpi", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", size: "size", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", transitions: "transitions", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", sceneresize: "sceneresize", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_canvasComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtD3_canvasComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtD3_canvasComponent, [{
        type: Component,
        args: [{
                selector: 'ExtD3_canvas',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'hdpi', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_canvasComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtD3_canvasComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCD3_canvas()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtD3_heatmapComponent = /** @class */ (function (_super) {
    __extends(ExtD3_heatmapComponent, _super);
    function ExtD3_heatmapComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'labels', 'left', 'legend', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tiles', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xAxis', 'xtype', 'y', 'yAxis', 'zIndex',], (new EWCD3_heatmap()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'd3-heatmap';
        return _this;
    }
    ExtD3_heatmapComponent_1 = ExtD3_heatmapComponent;
    ExtD3_heatmapComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtD3_heatmapComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtD3_heatmapComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtD3_heatmapComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtD3_heatmapComponent_1;
    ExtD3_heatmapComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtD3_heatmapComponent = ExtD3_heatmapComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtD3_heatmapComponent);
ExtD3_heatmapComponent.ɵfac = function ExtD3_heatmapComponent_Factory(t) { return new (t || ExtD3_heatmapComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtD3_heatmapComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtD3_heatmapComponent, selectors: [["ExtD3_heatmap"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", clipScene: "clipScene", cls: "cls", colorAxis: "colorAxis", componentCls: "componentCls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labels: "labels", left: "left", legend: "legend", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", size: "size", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", tiles: "tiles", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", transitions: "transitions", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xAxis: "xAxis", xtype: "xtype", y: "y", yAxis: "yAxis", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", sceneresize: "sceneresize", scenesetup: "scenesetup", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_heatmapComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtD3_heatmapComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtD3_heatmapComponent, [{
        type: Component,
        args: [{
                selector: 'ExtD3_heatmap',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'labels', 'left', 'legend', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tiles', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xAxis', 'xtype', 'y', 'yAxis', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_heatmapComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtD3_heatmapComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCD3_heatmap()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtD3_packComponent = /** @class */ (function (_super) {
    __extends(ExtD3_packComponent, _super);
    function ExtD3_packComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'clipText', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandEventName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hierarchyCls', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'linkKey', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nodeChildren', 'nodeClass', 'nodeKey', 'nodeText', 'nodeTransform', 'nodeValue', 'noParentValue', 'noSizeLayout', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderLinks', 'renderTo', 'right', 'ripple', 'rootVisible', 'scrollable', 'selectEventName', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'textPadding', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCD3_pack()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'd3-pack';
        return _this;
    }
    ExtD3_packComponent_1 = ExtD3_packComponent;
    ExtD3_packComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtD3_packComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtD3_packComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtD3_packComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtD3_packComponent_1;
    ExtD3_packComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtD3_packComponent = ExtD3_packComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtD3_packComponent);
ExtD3_packComponent.ɵfac = function ExtD3_packComponent_Factory(t) { return new (t || ExtD3_packComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtD3_packComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtD3_packComponent, selectors: [["ExtD3_pack"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", clipScene: "clipScene", clipText: "clipText", cls: "cls", colorAxis: "colorAxis", componentCls: "componentCls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", expandEventName: "expandEventName", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hierarchyCls: "hierarchyCls", html: "html", id: "id", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", linkKey: "linkKey", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nodeChildren: "nodeChildren", nodeClass: "nodeClass", nodeKey: "nodeKey", nodeText: "nodeText", nodeTransform: "nodeTransform", nodeValue: "nodeValue", noParentValue: "noParentValue", noSizeLayout: "noSizeLayout", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderLinks: "renderLinks", renderTo: "renderTo", right: "right", ripple: "ripple", rootVisible: "rootVisible", scrollable: "scrollable", selectEventName: "selectEventName", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", size: "size", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", textPadding: "textPadding", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", transitions: "transitions", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", layout: "layout", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", sceneresize: "sceneresize", scenesetup: "scenesetup", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_packComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtD3_packComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtD3_packComponent, [{
        type: Component,
        args: [{
                selector: 'ExtD3_pack',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'clipText', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandEventName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hierarchyCls', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'linkKey', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nodeChildren', 'nodeClass', 'nodeKey', 'nodeText', 'nodeTransform', 'nodeValue', 'noParentValue', 'noSizeLayout', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderLinks', 'renderTo', 'right', 'ripple', 'rootVisible', 'scrollable', 'selectEventName', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'textPadding', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_packComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtD3_packComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCD3_pack()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtD3_partitionComponent = /** @class */ (function (_super) {
    __extends(ExtD3_partitionComponent, _super);
    function ExtD3_partitionComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandEventName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hierarchyCls', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'linkKey', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nodeChildren', 'nodeClass', 'nodeKey', 'nodeText', 'nodeTransform', 'nodeValue', 'noParentValue', 'noSizeLayout', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderLinks', 'renderTo', 'right', 'ripple', 'rootVisible', 'scrollable', 'selectEventName', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCD3_partition()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'd3-partition';
        return _this;
    }
    ExtD3_partitionComponent_1 = ExtD3_partitionComponent;
    ExtD3_partitionComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtD3_partitionComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtD3_partitionComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtD3_partitionComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtD3_partitionComponent_1;
    ExtD3_partitionComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtD3_partitionComponent = ExtD3_partitionComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtD3_partitionComponent);
ExtD3_partitionComponent.ɵfac = function ExtD3_partitionComponent_Factory(t) { return new (t || ExtD3_partitionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtD3_partitionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtD3_partitionComponent, selectors: [["ExtD3_partition"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", clipScene: "clipScene", cls: "cls", colorAxis: "colorAxis", componentCls: "componentCls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", expandEventName: "expandEventName", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hierarchyCls: "hierarchyCls", html: "html", id: "id", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", linkKey: "linkKey", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nodeChildren: "nodeChildren", nodeClass: "nodeClass", nodeKey: "nodeKey", nodeText: "nodeText", nodeTransform: "nodeTransform", nodeValue: "nodeValue", noParentValue: "noParentValue", noSizeLayout: "noSizeLayout", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderLinks: "renderLinks", renderTo: "renderTo", right: "right", ripple: "ripple", rootVisible: "rootVisible", scrollable: "scrollable", selectEventName: "selectEventName", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", size: "size", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", transitions: "transitions", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", layout: "layout", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", sceneresize: "sceneresize", scenesetup: "scenesetup", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_partitionComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtD3_partitionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtD3_partitionComponent, [{
        type: Component,
        args: [{
                selector: 'ExtD3_partition',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandEventName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hierarchyCls', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'linkKey', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nodeChildren', 'nodeClass', 'nodeKey', 'nodeText', 'nodeTransform', 'nodeValue', 'noParentValue', 'noSizeLayout', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderLinks', 'renderTo', 'right', 'ripple', 'rootVisible', 'scrollable', 'selectEventName', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_partitionComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtD3_partitionComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCD3_partition()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtD3_sunburstComponent = /** @class */ (function (_super) {
    __extends(ExtD3_sunburstComponent, _super);
    function ExtD3_sunburstComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandEventName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hierarchyCls', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'linkKey', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nodeChildren', 'nodeClass', 'nodeKey', 'nodeText', 'nodeTransform', 'nodeValue', 'noParentValue', 'noSizeLayout', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderLinks', 'renderTo', 'right', 'ripple', 'rootVisible', 'scrollable', 'selectEventName', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'textPadding', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex', 'zoomParentDotRadius',], (new EWCD3_sunburst()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'd3-sunburst';
        return _this;
    }
    ExtD3_sunburstComponent_1 = ExtD3_sunburstComponent;
    ExtD3_sunburstComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtD3_sunburstComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtD3_sunburstComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtD3_sunburstComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtD3_sunburstComponent_1;
    ExtD3_sunburstComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtD3_sunburstComponent = ExtD3_sunburstComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtD3_sunburstComponent);
ExtD3_sunburstComponent.ɵfac = function ExtD3_sunburstComponent_Factory(t) { return new (t || ExtD3_sunburstComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtD3_sunburstComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtD3_sunburstComponent, selectors: [["ExtD3_sunburst"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", clipScene: "clipScene", cls: "cls", colorAxis: "colorAxis", componentCls: "componentCls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", expandEventName: "expandEventName", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hierarchyCls: "hierarchyCls", html: "html", id: "id", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", linkKey: "linkKey", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nodeChildren: "nodeChildren", nodeClass: "nodeClass", nodeKey: "nodeKey", nodeText: "nodeText", nodeTransform: "nodeTransform", nodeValue: "nodeValue", noParentValue: "noParentValue", noSizeLayout: "noSizeLayout", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderLinks: "renderLinks", renderTo: "renderTo", right: "right", ripple: "ripple", rootVisible: "rootVisible", scrollable: "scrollable", selectEventName: "selectEventName", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", size: "size", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", textPadding: "textPadding", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", transitions: "transitions", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex", zoomParentDotRadius: "zoomParentDotRadius" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", layout: "layout", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", sceneresize: "sceneresize", scenesetup: "scenesetup", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_sunburstComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtD3_sunburstComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtD3_sunburstComponent, [{
        type: Component,
        args: [{
                selector: 'ExtD3_sunburst',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandEventName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hierarchyCls', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'linkKey', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nodeChildren', 'nodeClass', 'nodeKey', 'nodeText', 'nodeTransform', 'nodeValue', 'noParentValue', 'noSizeLayout', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderLinks', 'renderTo', 'right', 'ripple', 'rootVisible', 'scrollable', 'selectEventName', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'textPadding', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex', 'zoomParentDotRadius',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_sunburstComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtD3_sunburstComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCD3_sunburst()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtD3_treeComponent = /** @class */ (function (_super) {
    __extends(ExtD3_treeComponent, _super);
    function ExtD3_treeComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'depth', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandEventName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hierarchyCls', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'linkKey', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nodeChildren', 'nodeClass', 'nodeKey', 'nodeRadius', 'nodeSize', 'nodeText', 'nodeTransform', 'nodeValue', 'noParentValue', 'noSizeLayout', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderLinks', 'renderTo', 'right', 'ripple', 'rootVisible', 'scrollable', 'selectEventName', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCD3_tree()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'd3-tree';
        return _this;
    }
    ExtD3_treeComponent_1 = ExtD3_treeComponent;
    ExtD3_treeComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtD3_treeComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtD3_treeComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtD3_treeComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtD3_treeComponent_1;
    ExtD3_treeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtD3_treeComponent = ExtD3_treeComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtD3_treeComponent);
ExtD3_treeComponent.ɵfac = function ExtD3_treeComponent_Factory(t) { return new (t || ExtD3_treeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtD3_treeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtD3_treeComponent, selectors: [["ExtD3_tree"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", clipScene: "clipScene", cls: "cls", colorAxis: "colorAxis", componentCls: "componentCls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", depth: "depth", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", expandEventName: "expandEventName", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hierarchyCls: "hierarchyCls", html: "html", id: "id", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", linkKey: "linkKey", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nodeChildren: "nodeChildren", nodeClass: "nodeClass", nodeKey: "nodeKey", nodeRadius: "nodeRadius", nodeSize: "nodeSize", nodeText: "nodeText", nodeTransform: "nodeTransform", nodeValue: "nodeValue", noParentValue: "noParentValue", noSizeLayout: "noSizeLayout", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderLinks: "renderLinks", renderTo: "renderTo", right: "right", ripple: "ripple", rootVisible: "rootVisible", scrollable: "scrollable", selectEventName: "selectEventName", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", size: "size", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", transitions: "transitions", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", layout: "layout", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", sceneresize: "sceneresize", scenesetup: "scenesetup", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_treeComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtD3_treeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtD3_treeComponent, [{
        type: Component,
        args: [{
                selector: 'ExtD3_tree',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'depth', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandEventName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hierarchyCls', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'linkKey', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nodeChildren', 'nodeClass', 'nodeKey', 'nodeRadius', 'nodeSize', 'nodeText', 'nodeTransform', 'nodeValue', 'noParentValue', 'noSizeLayout', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderLinks', 'renderTo', 'right', 'ripple', 'rootVisible', 'scrollable', 'selectEventName', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_treeComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtD3_treeComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCD3_tree()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtD3_horizontal_treeComponent = /** @class */ (function (_super) {
    __extends(ExtD3_horizontal_treeComponent, _super);
    function ExtD3_horizontal_treeComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'depth', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandEventName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hierarchyCls', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'linkKey', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nodeChildren', 'nodeClass', 'nodeKey', 'nodeRadius', 'nodeSize', 'nodeText', 'nodeTransform', 'nodeValue', 'noParentValue', 'noSizeLayout', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderLinks', 'renderTo', 'right', 'ripple', 'rootVisible', 'scrollable', 'selectEventName', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCD3_horizontal_tree()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'd3-horizontal-tree';
        return _this;
    }
    ExtD3_horizontal_treeComponent_1 = ExtD3_horizontal_treeComponent;
    ExtD3_horizontal_treeComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtD3_horizontal_treeComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtD3_horizontal_treeComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtD3_horizontal_treeComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtD3_horizontal_treeComponent_1;
    ExtD3_horizontal_treeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtD3_horizontal_treeComponent = ExtD3_horizontal_treeComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtD3_horizontal_treeComponent);
ExtD3_horizontal_treeComponent.ɵfac = function ExtD3_horizontal_treeComponent_Factory(t) { return new (t || ExtD3_horizontal_treeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtD3_horizontal_treeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtD3_horizontal_treeComponent, selectors: [["ExtD3_horizontal_tree"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", clipScene: "clipScene", cls: "cls", colorAxis: "colorAxis", componentCls: "componentCls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", depth: "depth", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", expandEventName: "expandEventName", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hierarchyCls: "hierarchyCls", html: "html", id: "id", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", linkKey: "linkKey", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nodeChildren: "nodeChildren", nodeClass: "nodeClass", nodeKey: "nodeKey", nodeRadius: "nodeRadius", nodeSize: "nodeSize", nodeText: "nodeText", nodeTransform: "nodeTransform", nodeValue: "nodeValue", noParentValue: "noParentValue", noSizeLayout: "noSizeLayout", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderLinks: "renderLinks", renderTo: "renderTo", right: "right", ripple: "ripple", rootVisible: "rootVisible", scrollable: "scrollable", selectEventName: "selectEventName", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", size: "size", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", transitions: "transitions", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", layout: "layout", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", sceneresize: "sceneresize", scenesetup: "scenesetup", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_horizontal_treeComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtD3_horizontal_treeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtD3_horizontal_treeComponent, [{
        type: Component,
        args: [{
                selector: 'ExtD3_horizontal_tree',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'depth', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandEventName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hierarchyCls', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'linkKey', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nodeChildren', 'nodeClass', 'nodeKey', 'nodeRadius', 'nodeSize', 'nodeText', 'nodeTransform', 'nodeValue', 'noParentValue', 'noSizeLayout', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderLinks', 'renderTo', 'right', 'ripple', 'rootVisible', 'scrollable', 'selectEventName', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_horizontal_treeComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtD3_horizontal_treeComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCD3_horizontal_tree()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtD3_treemapComponent = /** @class */ (function (_super) {
    __extends(ExtD3_treemapComponent, _super);
    function ExtD3_treemapComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'busyLayoutText', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandEventName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hierarchyCls', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'leafTile', 'left', 'linkKey', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nodeChildren', 'nodeClass', 'nodeKey', 'nodeText', 'nodeTransform', 'nodeValue', 'noParentValue', 'noSizeLayout', 'padding', 'parentTile', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderLinks', 'renderTo', 'right', 'ripple', 'rootVisible', 'scaleLabels', 'scrollable', 'selectEventName', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tiling', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCD3_treemap()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'd3-treemap';
        return _this;
    }
    ExtD3_treemapComponent_1 = ExtD3_treemapComponent;
    ExtD3_treemapComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtD3_treemapComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtD3_treemapComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtD3_treemapComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtD3_treemapComponent_1;
    ExtD3_treemapComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtD3_treemapComponent = ExtD3_treemapComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtD3_treemapComponent);
ExtD3_treemapComponent.ɵfac = function ExtD3_treemapComponent_Factory(t) { return new (t || ExtD3_treemapComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtD3_treemapComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtD3_treemapComponent, selectors: [["ExtD3_treemap"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", busyLayoutText: "busyLayoutText", centered: "centered", clipScene: "clipScene", cls: "cls", colorAxis: "colorAxis", componentCls: "componentCls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", expandEventName: "expandEventName", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hierarchyCls: "hierarchyCls", html: "html", id: "id", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", leafTile: "leafTile", left: "left", linkKey: "linkKey", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nodeChildren: "nodeChildren", nodeClass: "nodeClass", nodeKey: "nodeKey", nodeText: "nodeText", nodeTransform: "nodeTransform", nodeValue: "nodeValue", noParentValue: "noParentValue", noSizeLayout: "noSizeLayout", padding: "padding", parentTile: "parentTile", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderLinks: "renderLinks", renderTo: "renderTo", right: "right", ripple: "ripple", rootVisible: "rootVisible", scaleLabels: "scaleLabels", scrollable: "scrollable", selectEventName: "selectEventName", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", size: "size", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", tiling: "tiling", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", transitions: "transitions", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", layout: "layout", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", sceneresize: "sceneresize", scenesetup: "scenesetup", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_treemapComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtD3_treemapComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtD3_treemapComponent, [{
        type: Component,
        args: [{
                selector: 'ExtD3_treemap',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'busyLayoutText', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandEventName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hierarchyCls', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'leafTile', 'left', 'linkKey', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nodeChildren', 'nodeClass', 'nodeKey', 'nodeText', 'nodeTransform', 'nodeValue', 'noParentValue', 'noSizeLayout', 'padding', 'parentTile', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderLinks', 'renderTo', 'right', 'ripple', 'rootVisible', 'scaleLabels', 'scrollable', 'selectEventName', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tiling', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_treemapComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtD3_treemapComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCD3_treemap()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtD3_svgComponent = /** @class */ (function (_super) {
    __extends(ExtD3_svgComponent, _super);
    function ExtD3_svgComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCD3_svg()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'd3-svg';
        return _this;
    }
    ExtD3_svgComponent_1 = ExtD3_svgComponent;
    ExtD3_svgComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtD3_svgComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtD3_svgComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtD3_svgComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtD3_svgComponent_1;
    ExtD3_svgComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtD3_svgComponent = ExtD3_svgComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtD3_svgComponent);
ExtD3_svgComponent.ɵfac = function ExtD3_svgComponent_Factory(t) { return new (t || ExtD3_svgComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtD3_svgComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtD3_svgComponent, selectors: [["ExtD3_svg"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", clipScene: "clipScene", cls: "cls", componentCls: "componentCls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", size: "size", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", transitions: "transitions", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", sceneresize: "sceneresize", scenesetup: "scenesetup", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_svgComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtD3_svgComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtD3_svgComponent, [{
        type: Component,
        args: [{
                selector: 'ExtD3_svg',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3_svgComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtD3_svgComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCD3_svg()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtD3Component = /** @class */ (function (_super) {
    __extends(ExtD3Component, _super);
    function ExtD3Component(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCD3()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'd3';
        return _this;
    }
    ExtD3Component_1 = ExtD3Component;
    ExtD3Component.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtD3Component.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtD3Component.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtD3Component.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtD3Component_1;
    ExtD3Component.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtD3Component = ExtD3Component_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtD3Component);
ExtD3Component.ɵfac = function ExtD3Component_Factory(t) { return new (t || ExtD3Component)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtD3Component.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtD3Component, selectors: [["ExtD3"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", clipScene: "clipScene", cls: "cls", componentCls: "componentCls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", size: "size", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", transitions: "transitions", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", sceneresize: "sceneresize", scenesetup: "scenesetup", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3Component_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtD3Component_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtD3Component, [{
        type: Component,
        args: [{
                selector: 'ExtD3',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtD3Component_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtD3Component;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCD3()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtBoundlistComponent = /** @class */ (function (_super) {
    __extends(ExtBoundlistComponent, _super);
    function ExtBoundlistComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'bufferSize', 'cardSwitchAnimation', 'centered', 'cls', 'collapseDefaults', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'disclosureProperty', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'grouped', 'groupFooter', 'groupHeader', 'grouping', 'groupPlaceholder', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'horizontalOverflow', 'html', 'id', 'inactiveChildTabIndex', 'indexBar', 'infinite', 'inline', 'innerCls', 'innerCtHeight', 'innerWidth', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemConfig', 'itemContentCls', 'itemDataMap', 'itemId', 'itemInnerCls', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'maintainChildNodes', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxItemCache', 'maxWidth', 'minHeight', 'minimumBufferDistance', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'onItemDisclosure', 'padding', 'pinFooters', 'pinHeaders', 'pinnedFooter', 'pinnedFooterHeight', 'pinnedHeader', 'pinnedHeaderHeight', 'plugins', 'pressedDelay', 'preventSelectionOnDisclose', 'preventSelectionOnTool', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'rowLines', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'striped', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'topRenderedIndex', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'undefined', 'variableHeights', 'verticalOverflow', 'viewModel', 'visibleHeight', 'visibleLeft', 'visibleTop', 'visibleWidth', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCBoundlist()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforegroupcollapse', 'beforegroupexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'disclose', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'groupcollapse', 'groupexpand', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemaction', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'boundlist';
        return _this;
    }
    ExtBoundlistComponent_1 = ExtBoundlistComponent;
    ExtBoundlistComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtBoundlistComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtBoundlistComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtBoundlistComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtBoundlistComponent_1;
    ExtBoundlistComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtBoundlistComponent = ExtBoundlistComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtBoundlistComponent);
ExtBoundlistComponent.ɵfac = function ExtBoundlistComponent_Factory(t) { return new (t || ExtBoundlistComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtBoundlistComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtBoundlistComponent, selectors: [["ExtBoundlist"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", associatedData: "associatedData", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", bufferSize: "bufferSize", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", collapseDefaults: "collapseDefaults", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", deferEmptyText: "deferEmptyText", deselectOnContainerClick: "deselectOnContainerClick", disabled: "disabled", disableSelection: "disableSelection", disclosureProperty: "disclosureProperty", displayed: "displayed", docked: "docked", draggable: "draggable", emptyItemText: "emptyItemText", emptyState: "emptyState", emptyText: "emptyText", emptyTextDefaults: "emptyTextDefaults", emptyTextProperty: "emptyTextProperty", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", grouped: "grouped", groupFooter: "groupFooter", groupHeader: "groupHeader", grouping: "grouping", groupPlaceholder: "groupPlaceholder", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", horizontalOverflow: "horizontalOverflow", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", indexBar: "indexBar", infinite: "infinite", inline: "inline", innerCls: "innerCls", innerCtHeight: "innerCtHeight", innerWidth: "innerWidth", instanceCls: "instanceCls", itemButtonMode: "itemButtonMode", itemCls: "itemCls", itemConfig: "itemConfig", itemContentCls: "itemContentCls", itemDataMap: "itemDataMap", itemId: "itemId", itemInnerCls: "itemInnerCls", itemRipple: "itemRipple", items: "items", itemsFocusable: "itemsFocusable", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", loadingHeight: "loadingHeight", loadingText: "loadingText", maintainChildNodes: "maintainChildNodes", manageBorders: "manageBorders", margin: "margin", markDirty: "markDirty", masked: "masked", maxHeight: "maxHeight", maxItemCache: "maxItemCache", maxWidth: "maxWidth", minHeight: "minHeight", minimumBufferDistance: "minimumBufferDistance", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", onItemDisclosure: "onItemDisclosure", padding: "padding", pinFooters: "pinFooters", pinHeaders: "pinHeaders", pinnedFooter: "pinnedFooter", pinnedFooterHeight: "pinnedFooterHeight", pinnedHeader: "pinnedHeader", pinnedHeaderHeight: "pinnedHeaderHeight", pressedDelay: "pressedDelay", preventSelectionOnDisclose: "preventSelectionOnDisclose", preventSelectionOnTool: "preventSelectionOnTool", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", rowLines: "rowLines", scrollable: "scrollable", scrollDock: "scrollDock", scrollToTopOnRefresh: "scrollToTopOnRefresh", selectable: "selectable", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", striped: "striped", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", topRenderedIndex: "topRenderedIndex", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggerCtEvent: "triggerCtEvent", triggerEvent: "triggerEvent", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", variableHeights: "variableHeights", verticalOverflow: "verticalOverflow", viewModel: "viewModel", visibleHeight: "visibleHeight", visibleLeft: "visibleLeft", visibleTop: "visibleTop", visibleWidth: "visibleWidth", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforegroupcollapse: "beforegroupcollapse", beforegroupexpand: "beforegroupexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforestorechange: "beforestorechange", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", childdoubletap: "childdoubletap", childlongpress: "childlongpress", childmouseenter: "childmouseenter", childmouseleave: "childmouseleave", childsingletap: "childsingletap", childtap: "childtap", childtaphold: "childtaphold", childtouchcancel: "childtouchcancel", childtouchend: "childtouchend", childtouchmove: "childtouchmove", childtouchstart: "childtouchstart", deactivate: "deactivate", deselect: "deselect", destroy: "destroy", disabledchange: "disabledchange", disclose: "disclose", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", groupcollapse: "groupcollapse", groupexpand: "groupexpand", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemaction: "itemaction", itemdoubletap: "itemdoubletap", itemlongpress: "itemlongpress", itemmouseenter: "itemmouseenter", itemmouseleave: "itemmouseleave", itemsingletap: "itemsingletap", itemswipe: "itemswipe", itemtap: "itemtap", itemtaphold: "itemtaphold", itemtouchcancel: "itemtouchcancel", itemtouchend: "itemtouchend", itemtouchmove: "itemtouchmove", itemtouchstart: "itemtouchstart", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", navigate: "navigate", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", select: "select", show: "show", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtBoundlistComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtBoundlistComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtBoundlistComponent, [{
        type: Component,
        args: [{
                selector: 'ExtBoundlist',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'bufferSize', 'cardSwitchAnimation', 'centered', 'cls', 'collapseDefaults', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'disclosureProperty', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'grouped', 'groupFooter', 'groupHeader', 'grouping', 'groupPlaceholder', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'horizontalOverflow', 'html', 'id', 'inactiveChildTabIndex', 'indexBar', 'infinite', 'inline', 'innerCls', 'innerCtHeight', 'innerWidth', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemConfig', 'itemContentCls', 'itemDataMap', 'itemId', 'itemInnerCls', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'maintainChildNodes', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxItemCache', 'maxWidth', 'minHeight', 'minimumBufferDistance', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'onItemDisclosure', 'padding', 'pinFooters', 'pinHeaders', 'pinnedFooter', 'pinnedFooterHeight', 'pinnedHeader', 'pinnedHeaderHeight', 'plugins', 'pressedDelay', 'preventSelectionOnDisclose', 'preventSelectionOnTool', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'rowLines', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'striped', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'topRenderedIndex', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'undefined', 'variableHeights', 'verticalOverflow', 'viewModel', 'visibleHeight', 'visibleLeft', 'visibleTop', 'visibleWidth', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforegroupcollapse', 'beforegroupexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'disclose', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'groupcollapse', 'groupexpand', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemaction', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtBoundlistComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtBoundlistComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCBoundlist()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtChipviewComponent = /** @class */ (function (_super) {
    __extends(ExtChipviewComponent, _super);
    function ExtChipviewComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'closable', 'closableField', 'closeHandler', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'displayed', 'displayField', 'displayTpl', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'iconClsField', 'iconField', 'id', 'inactiveChildTabIndex', 'inline', 'innerCls', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemId', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastSelected', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'pressedDelay', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scope', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selected', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCChipview()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'rowselection', 'scrollablechange', 'select', 'selectionchange', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'chipview';
        return _this;
    }
    ExtChipviewComponent_1 = ExtChipviewComponent;
    ExtChipviewComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtChipviewComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtChipviewComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtChipviewComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtChipviewComponent_1;
    ExtChipviewComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtChipviewComponent = ExtChipviewComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtChipviewComponent);
ExtChipviewComponent.ɵfac = function ExtChipviewComponent_Factory(t) { return new (t || ExtChipviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtChipviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtChipviewComponent, selectors: [["ExtChipview"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", associatedData: "associatedData", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closableField: "closableField", closeHandler: "closeHandler", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", deferEmptyText: "deferEmptyText", deselectOnContainerClick: "deselectOnContainerClick", disabled: "disabled", disableSelection: "disableSelection", displayed: "displayed", displayField: "displayField", displayTpl: "displayTpl", docked: "docked", draggable: "draggable", emptyItemText: "emptyItemText", emptyState: "emptyState", emptyText: "emptyText", emptyTextDefaults: "emptyTextDefaults", emptyTextProperty: "emptyTextProperty", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", iconClsField: "iconClsField", iconField: "iconField", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", inline: "inline", innerCls: "innerCls", instanceCls: "instanceCls", itemButtonMode: "itemButtonMode", itemCls: "itemCls", itemId: "itemId", itemRipple: "itemRipple", items: "items", itemsFocusable: "itemsFocusable", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", lastSelected: "lastSelected", layout: "layout", left: "left", listeners: "listeners", loadingHeight: "loadingHeight", loadingText: "loadingText", manageBorders: "manageBorders", margin: "margin", markDirty: "markDirty", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", pressedDelay: "pressedDelay", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", scrollDock: "scrollDock", scrollToTopOnRefresh: "scrollToTopOnRefresh", selectable: "selectable", selected: "selected", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggerCtEvent: "triggerCtEvent", triggerEvent: "triggerEvent", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforestorechange: "beforestorechange", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", childdoubletap: "childdoubletap", childlongpress: "childlongpress", childmouseenter: "childmouseenter", childmouseleave: "childmouseleave", childsingletap: "childsingletap", childtap: "childtap", childtaphold: "childtaphold", childtouchcancel: "childtouchcancel", childtouchend: "childtouchend", childtouchmove: "childtouchmove", childtouchstart: "childtouchstart", deactivate: "deactivate", deselect: "deselect", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemdoubletap: "itemdoubletap", itemlongpress: "itemlongpress", itemmouseenter: "itemmouseenter", itemmouseleave: "itemmouseleave", itemsingletap: "itemsingletap", itemswipe: "itemswipe", itemtap: "itemtap", itemtaphold: "itemtaphold", itemtouchcancel: "itemtouchcancel", itemtouchend: "itemtouchend", itemtouchmove: "itemtouchmove", itemtouchstart: "itemtouchstart", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", navigate: "navigate", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", rowselection: "rowselection", scrollablechange: "scrollablechange", select: "select", selectionchange: "selectionchange", show: "show", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtChipviewComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtChipviewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtChipviewComponent, [{
        type: Component,
        args: [{
                selector: 'ExtChipview',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'closable', 'closableField', 'closeHandler', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'displayed', 'displayField', 'displayTpl', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'iconClsField', 'iconField', 'id', 'inactiveChildTabIndex', 'inline', 'innerCls', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemId', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastSelected', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'pressedDelay', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scope', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selected', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'rowselection', 'scrollablechange', 'select', 'selectionchange', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtChipviewComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtChipviewComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCChipview()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtComponentdataviewComponent = /** @class */ (function (_super) {
    __extends(ExtComponentdataviewComponent, _super);
    function ExtComponentdataviewComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'inline', 'innerCls', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemConfig', 'itemContentCls', 'itemDataMap', 'itemId', 'itemInnerCls', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxItemCache', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'pressedDelay', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'striped', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCComponentdataview()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'componentdataview';
        return _this;
    }
    ExtComponentdataviewComponent_1 = ExtComponentdataviewComponent;
    ExtComponentdataviewComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtComponentdataviewComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtComponentdataviewComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtComponentdataviewComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtComponentdataviewComponent_1;
    ExtComponentdataviewComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtComponentdataviewComponent = ExtComponentdataviewComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtComponentdataviewComponent);
ExtComponentdataviewComponent.ɵfac = function ExtComponentdataviewComponent_Factory(t) { return new (t || ExtComponentdataviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtComponentdataviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtComponentdataviewComponent, selectors: [["ExtComponentdataview"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", associatedData: "associatedData", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", deferEmptyText: "deferEmptyText", deselectOnContainerClick: "deselectOnContainerClick", disabled: "disabled", disableSelection: "disableSelection", displayed: "displayed", docked: "docked", draggable: "draggable", emptyItemText: "emptyItemText", emptyState: "emptyState", emptyText: "emptyText", emptyTextDefaults: "emptyTextDefaults", emptyTextProperty: "emptyTextProperty", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", inline: "inline", innerCls: "innerCls", instanceCls: "instanceCls", itemButtonMode: "itemButtonMode", itemCls: "itemCls", itemConfig: "itemConfig", itemContentCls: "itemContentCls", itemDataMap: "itemDataMap", itemId: "itemId", itemInnerCls: "itemInnerCls", itemRipple: "itemRipple", items: "items", itemsFocusable: "itemsFocusable", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", loadingHeight: "loadingHeight", loadingText: "loadingText", manageBorders: "manageBorders", margin: "margin", markDirty: "markDirty", masked: "masked", maxHeight: "maxHeight", maxItemCache: "maxItemCache", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", pressedDelay: "pressedDelay", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", scrollDock: "scrollDock", scrollToTopOnRefresh: "scrollToTopOnRefresh", selectable: "selectable", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", striped: "striped", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggerCtEvent: "triggerCtEvent", triggerEvent: "triggerEvent", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforestorechange: "beforestorechange", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", childdoubletap: "childdoubletap", childlongpress: "childlongpress", childmouseenter: "childmouseenter", childmouseleave: "childmouseleave", childsingletap: "childsingletap", childtap: "childtap", childtaphold: "childtaphold", childtouchcancel: "childtouchcancel", childtouchend: "childtouchend", childtouchmove: "childtouchmove", childtouchstart: "childtouchstart", deactivate: "deactivate", deselect: "deselect", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemdoubletap: "itemdoubletap", itemlongpress: "itemlongpress", itemmouseenter: "itemmouseenter", itemmouseleave: "itemmouseleave", itemsingletap: "itemsingletap", itemswipe: "itemswipe", itemtap: "itemtap", itemtaphold: "itemtaphold", itemtouchcancel: "itemtouchcancel", itemtouchend: "itemtouchend", itemtouchmove: "itemtouchmove", itemtouchstart: "itemtouchstart", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", navigate: "navigate", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", select: "select", show: "show", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtComponentdataviewComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtComponentdataviewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtComponentdataviewComponent, [{
        type: Component,
        args: [{
                selector: 'ExtComponentdataview',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'inline', 'innerCls', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemConfig', 'itemContentCls', 'itemDataMap', 'itemId', 'itemInnerCls', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxItemCache', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'pressedDelay', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'striped', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtComponentdataviewComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtComponentdataviewComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCComponentdataview()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtDataitemComponent = /** @class */ (function (_super) {
    __extends(ExtDataitemComponent, _super);
    function ExtDataitemComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataMap', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCDataitem()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'dataitem';
        return _this;
    }
    ExtDataitemComponent_1 = ExtDataitemComponent;
    ExtDataitemComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtDataitemComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtDataitemComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtDataitemComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtDataitemComponent_1;
    ExtDataitemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtDataitemComponent = ExtDataitemComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtDataitemComponent);
ExtDataitemComponent.ɵfac = function ExtDataitemComponent_Factory(t) { return new (t || ExtDataitemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtDataitemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtDataitemComponent, selectors: [["ExtDataitem"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataMap: "dataMap", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemCls: "itemCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", recordIndex: "recordIndex", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtDataitemComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtDataitemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtDataitemComponent, [{
        type: Component,
        args: [{
                selector: 'ExtDataitem',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataMap', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtDataitemComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtDataitemComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCDataitem()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtDataviewComponent = /** @class */ (function (_super) {
    __extends(ExtDataviewComponent, _super);
    function ExtDataviewComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'inline', 'innerCls', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemId', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastSelected', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'pressedDelay', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selected', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCDataview()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'rowselection', 'scrollablechange', 'select', 'selectionchange', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'dataview';
        return _this;
    }
    ExtDataviewComponent_1 = ExtDataviewComponent;
    ExtDataviewComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtDataviewComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtDataviewComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtDataviewComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtDataviewComponent_1;
    ExtDataviewComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtDataviewComponent = ExtDataviewComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtDataviewComponent);
ExtDataviewComponent.ɵfac = function ExtDataviewComponent_Factory(t) { return new (t || ExtDataviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtDataviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtDataviewComponent, selectors: [["ExtDataview"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", associatedData: "associatedData", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", deferEmptyText: "deferEmptyText", deselectOnContainerClick: "deselectOnContainerClick", disabled: "disabled", disableSelection: "disableSelection", displayed: "displayed", docked: "docked", draggable: "draggable", emptyItemText: "emptyItemText", emptyState: "emptyState", emptyText: "emptyText", emptyTextDefaults: "emptyTextDefaults", emptyTextProperty: "emptyTextProperty", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", inline: "inline", innerCls: "innerCls", instanceCls: "instanceCls", itemButtonMode: "itemButtonMode", itemCls: "itemCls", itemId: "itemId", itemRipple: "itemRipple", items: "items", itemsFocusable: "itemsFocusable", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", lastSelected: "lastSelected", layout: "layout", left: "left", listeners: "listeners", loadingHeight: "loadingHeight", loadingText: "loadingText", manageBorders: "manageBorders", margin: "margin", markDirty: "markDirty", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", pressedDelay: "pressedDelay", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", scrollDock: "scrollDock", scrollToTopOnRefresh: "scrollToTopOnRefresh", selectable: "selectable", selected: "selected", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggerCtEvent: "triggerCtEvent", triggerEvent: "triggerEvent", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforestorechange: "beforestorechange", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", childdoubletap: "childdoubletap", childlongpress: "childlongpress", childmouseenter: "childmouseenter", childmouseleave: "childmouseleave", childsingletap: "childsingletap", childtap: "childtap", childtaphold: "childtaphold", childtouchcancel: "childtouchcancel", childtouchend: "childtouchend", childtouchmove: "childtouchmove", childtouchstart: "childtouchstart", deactivate: "deactivate", deselect: "deselect", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemdoubletap: "itemdoubletap", itemlongpress: "itemlongpress", itemmouseenter: "itemmouseenter", itemmouseleave: "itemmouseleave", itemsingletap: "itemsingletap", itemswipe: "itemswipe", itemtap: "itemtap", itemtaphold: "itemtaphold", itemtouchcancel: "itemtouchcancel", itemtouchend: "itemtouchend", itemtouchmove: "itemtouchmove", itemtouchstart: "itemtouchstart", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", navigate: "navigate", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", rowselection: "rowselection", scrollablechange: "scrollablechange", select: "select", selectionchange: "selectionchange", show: "show", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtDataviewComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtDataviewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtDataviewComponent, [{
        type: Component,
        args: [{
                selector: 'ExtDataview',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'inline', 'innerCls', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemId', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastSelected', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'pressedDelay', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selected', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'rowselection', 'scrollablechange', 'select', 'selectionchange', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtDataviewComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtDataviewComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCDataview()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtEmptytextComponent = /** @class */ (function (_super) {
    __extends(ExtEmptytextComponent, _super);
    function ExtEmptytextComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCEmptytext()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'emptytext';
        return _this;
    }
    ExtEmptytextComponent_1 = ExtEmptytextComponent;
    ExtEmptytextComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtEmptytextComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtEmptytextComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtEmptytextComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtEmptytextComponent_1;
    ExtEmptytextComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtEmptytextComponent = ExtEmptytextComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtEmptytextComponent);
ExtEmptytextComponent.ɵfac = function ExtEmptytextComponent_Factory(t) { return new (t || ExtEmptytextComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtEmptytextComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtEmptytextComponent, selectors: [["ExtEmptytext"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtEmptytextComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtEmptytextComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtEmptytextComponent, [{
        type: Component,
        args: [{
                selector: 'ExtEmptytext',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtEmptytextComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtEmptytextComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCEmptytext()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtIndexbarComponent = /** @class */ (function (_super) {
    __extends(ExtIndexbarComponent, _super);
    function ExtIndexbarComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoHide', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'direction', 'disabled', 'displayed', 'docked', 'draggable', 'dynamic', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'indicator', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'letters', 'listeners', 'listPrefix', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCIndexbar()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedirectionchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'directionchange', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'index', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'indexbar';
        return _this;
    }
    ExtIndexbarComponent_1 = ExtIndexbarComponent;
    ExtIndexbarComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtIndexbarComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtIndexbarComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtIndexbarComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtIndexbarComponent_1;
    ExtIndexbarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtIndexbarComponent = ExtIndexbarComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtIndexbarComponent);
ExtIndexbarComponent.ɵfac = function ExtIndexbarComponent_Factory(t) { return new (t || ExtIndexbarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtIndexbarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtIndexbarComponent, selectors: [["ExtIndexbar"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", animation: "animation", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoHide: "autoHide", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", direction: "direction", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", dynamic: "dynamic", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", indicator: "indicator", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", letters: "letters", listeners: "listeners", listPrefix: "listPrefix", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedirectionchange: "beforedirectionchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", directionchange: "directionchange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", index: "index", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtIndexbarComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtIndexbarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtIndexbarComponent, [{
        type: Component,
        args: [{
                selector: 'ExtIndexbar',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoHide', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'direction', 'disabled', 'displayed', 'docked', 'draggable', 'dynamic', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'indicator', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'letters', 'listeners', 'listPrefix', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedirectionchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'directionchange', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'index', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtIndexbarComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtIndexbarComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCIndexbar()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtItemheaderComponent = /** @class */ (function (_super) {
    __extends(ExtItemheaderComponent, _super);
    function ExtItemheaderComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'group', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCItemheader()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'itemheader';
        return _this;
    }
    ExtItemheaderComponent_1 = ExtItemheaderComponent;
    ExtItemheaderComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtItemheaderComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtItemheaderComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtItemheaderComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtItemheaderComponent_1;
    ExtItemheaderComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtItemheaderComponent = ExtItemheaderComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtItemheaderComponent);
ExtItemheaderComponent.ɵfac = function ExtItemheaderComponent_Factory(t) { return new (t || ExtItemheaderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtItemheaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtItemheaderComponent, selectors: [["ExtItemheader"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", group: "group", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", pinned: "pinned", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtItemheaderComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtItemheaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtItemheaderComponent, [{
        type: Component,
        args: [{
                selector: 'ExtItemheader',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'group', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtItemheaderComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtItemheaderComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCItemheader()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtListComponent = /** @class */ (function (_super) {
    __extends(ExtListComponent, _super);
    function ExtListComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'bufferSize', 'cardSwitchAnimation', 'centered', 'cls', 'collapseDefaults', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'disclosureProperty', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'grouped', 'groupFooter', 'groupHeader', 'grouping', 'groupPlaceholder', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'horizontalOverflow', 'html', 'id', 'inactiveChildTabIndex', 'indexBar', 'infinite', 'inline', 'innerCls', 'innerCtHeight', 'innerWidth', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemConfig', 'itemContentCls', 'itemDataMap', 'itemId', 'itemInnerCls', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'maintainChildNodes', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxItemCache', 'maxWidth', 'minHeight', 'minimumBufferDistance', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'onItemDisclosure', 'padding', 'pinFooters', 'pinHeaders', 'pinnedFooter', 'pinnedFooterHeight', 'pinnedHeader', 'pinnedHeaderHeight', 'plugins', 'pressedDelay', 'preventSelectionOnDisclose', 'preventSelectionOnTool', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'rowLines', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'striped', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'topRenderedIndex', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'undefined', 'variableHeights', 'verticalOverflow', 'viewModel', 'visibleHeight', 'visibleLeft', 'visibleTop', 'visibleWidth', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCList()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforegroupcollapse', 'beforegroupexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'disclose', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'groupcollapse', 'groupexpand', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemaction', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'list';
        return _this;
    }
    ExtListComponent_1 = ExtListComponent;
    ExtListComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtListComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtListComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtListComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtListComponent_1;
    ExtListComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtListComponent = ExtListComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtListComponent);
ExtListComponent.ɵfac = function ExtListComponent_Factory(t) { return new (t || ExtListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtListComponent, selectors: [["ExtList"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", associatedData: "associatedData", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", bufferSize: "bufferSize", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", collapseDefaults: "collapseDefaults", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", deferEmptyText: "deferEmptyText", deselectOnContainerClick: "deselectOnContainerClick", disabled: "disabled", disableSelection: "disableSelection", disclosureProperty: "disclosureProperty", displayed: "displayed", docked: "docked", draggable: "draggable", emptyItemText: "emptyItemText", emptyState: "emptyState", emptyText: "emptyText", emptyTextDefaults: "emptyTextDefaults", emptyTextProperty: "emptyTextProperty", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", grouped: "grouped", groupFooter: "groupFooter", groupHeader: "groupHeader", grouping: "grouping", groupPlaceholder: "groupPlaceholder", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", horizontalOverflow: "horizontalOverflow", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", indexBar: "indexBar", infinite: "infinite", inline: "inline", innerCls: "innerCls", innerCtHeight: "innerCtHeight", innerWidth: "innerWidth", instanceCls: "instanceCls", itemButtonMode: "itemButtonMode", itemCls: "itemCls", itemConfig: "itemConfig", itemContentCls: "itemContentCls", itemDataMap: "itemDataMap", itemId: "itemId", itemInnerCls: "itemInnerCls", itemRipple: "itemRipple", items: "items", itemsFocusable: "itemsFocusable", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", loadingHeight: "loadingHeight", loadingText: "loadingText", maintainChildNodes: "maintainChildNodes", manageBorders: "manageBorders", margin: "margin", markDirty: "markDirty", masked: "masked", maxHeight: "maxHeight", maxItemCache: "maxItemCache", maxWidth: "maxWidth", minHeight: "minHeight", minimumBufferDistance: "minimumBufferDistance", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", onItemDisclosure: "onItemDisclosure", padding: "padding", pinFooters: "pinFooters", pinHeaders: "pinHeaders", pinnedFooter: "pinnedFooter", pinnedFooterHeight: "pinnedFooterHeight", pinnedHeader: "pinnedHeader", pinnedHeaderHeight: "pinnedHeaderHeight", pressedDelay: "pressedDelay", preventSelectionOnDisclose: "preventSelectionOnDisclose", preventSelectionOnTool: "preventSelectionOnTool", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", rowLines: "rowLines", scrollable: "scrollable", scrollDock: "scrollDock", scrollToTopOnRefresh: "scrollToTopOnRefresh", selectable: "selectable", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", striped: "striped", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", topRenderedIndex: "topRenderedIndex", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggerCtEvent: "triggerCtEvent", triggerEvent: "triggerEvent", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", variableHeights: "variableHeights", verticalOverflow: "verticalOverflow", viewModel: "viewModel", visibleHeight: "visibleHeight", visibleLeft: "visibleLeft", visibleTop: "visibleTop", visibleWidth: "visibleWidth", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforegroupcollapse: "beforegroupcollapse", beforegroupexpand: "beforegroupexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforestorechange: "beforestorechange", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", childdoubletap: "childdoubletap", childlongpress: "childlongpress", childmouseenter: "childmouseenter", childmouseleave: "childmouseleave", childsingletap: "childsingletap", childtap: "childtap", childtaphold: "childtaphold", childtouchcancel: "childtouchcancel", childtouchend: "childtouchend", childtouchmove: "childtouchmove", childtouchstart: "childtouchstart", deactivate: "deactivate", deselect: "deselect", destroy: "destroy", disabledchange: "disabledchange", disclose: "disclose", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", groupcollapse: "groupcollapse", groupexpand: "groupexpand", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemaction: "itemaction", itemdoubletap: "itemdoubletap", itemlongpress: "itemlongpress", itemmouseenter: "itemmouseenter", itemmouseleave: "itemmouseleave", itemsingletap: "itemsingletap", itemswipe: "itemswipe", itemtap: "itemtap", itemtaphold: "itemtaphold", itemtouchcancel: "itemtouchcancel", itemtouchend: "itemtouchend", itemtouchmove: "itemtouchmove", itemtouchstart: "itemtouchstart", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", navigate: "navigate", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", select: "select", show: "show", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtListComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtListComponent, [{
        type: Component,
        args: [{
                selector: 'ExtList',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'bufferSize', 'cardSwitchAnimation', 'centered', 'cls', 'collapseDefaults', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'disclosureProperty', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'grouped', 'groupFooter', 'groupHeader', 'grouping', 'groupPlaceholder', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'horizontalOverflow', 'html', 'id', 'inactiveChildTabIndex', 'indexBar', 'infinite', 'inline', 'innerCls', 'innerCtHeight', 'innerWidth', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemConfig', 'itemContentCls', 'itemDataMap', 'itemId', 'itemInnerCls', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'maintainChildNodes', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxItemCache', 'maxWidth', 'minHeight', 'minimumBufferDistance', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'onItemDisclosure', 'padding', 'pinFooters', 'pinHeaders', 'pinnedFooter', 'pinnedFooterHeight', 'pinnedHeader', 'pinnedHeaderHeight', 'plugins', 'pressedDelay', 'preventSelectionOnDisclose', 'preventSelectionOnTool', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'rowLines', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'striped', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'topRenderedIndex', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'undefined', 'variableHeights', 'verticalOverflow', 'viewModel', 'visibleHeight', 'visibleLeft', 'visibleTop', 'visibleWidth', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforegroupcollapse', 'beforegroupexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'disclose', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'groupcollapse', 'groupexpand', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemaction', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtListComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtListComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCList()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtListitemComponent = /** @class */ (function (_super) {
    __extends(ExtListitemComponent, _super);
    function ExtListitemComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataMap', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCListitem()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'listitem';
        return _this;
    }
    ExtListitemComponent_1 = ExtListitemComponent;
    ExtListitemComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtListitemComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtListitemComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtListitemComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtListitemComponent_1;
    ExtListitemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtListitemComponent = ExtListitemComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtListitemComponent);
ExtListitemComponent.ɵfac = function ExtListitemComponent_Factory(t) { return new (t || ExtListitemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtListitemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtListitemComponent, selectors: [["ExtListitem"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataMap: "dataMap", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemCls: "itemCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", pinned: "pinned", publishes: "publishes", record: "record", recordIndex: "recordIndex", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtListitemComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtListitemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtListitemComponent, [{
        type: Component,
        args: [{
                selector: 'ExtListitem',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataMap', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtListitemComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtListitemComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCListitem()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtListitemplaceholderComponent = /** @class */ (function (_super) {
    __extends(ExtListitemplaceholderComponent, _super);
    function ExtListitemplaceholderComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCListitemplaceholder()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'listitemplaceholder';
        return _this;
    }
    ExtListitemplaceholderComponent_1 = ExtListitemplaceholderComponent;
    ExtListitemplaceholderComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtListitemplaceholderComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtListitemplaceholderComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtListitemplaceholderComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtListitemplaceholderComponent_1;
    ExtListitemplaceholderComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtListitemplaceholderComponent = ExtListitemplaceholderComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtListitemplaceholderComponent);
ExtListitemplaceholderComponent.ɵfac = function ExtListitemplaceholderComponent_Factory(t) { return new (t || ExtListitemplaceholderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtListitemplaceholderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtListitemplaceholderComponent, selectors: [["ExtListitemplaceholder"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", pinned: "pinned", publishes: "publishes", record: "record", recordIndex: "recordIndex", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtListitemplaceholderComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtListitemplaceholderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtListitemplaceholderComponent, [{
        type: Component,
        args: [{
                selector: 'ExtListitemplaceholder',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtListitemplaceholderComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtListitemplaceholderComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCListitemplaceholder()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtListswiperitemComponent = /** @class */ (function (_super) {
    __extends(ExtListswiperitemComponent, _super);
    function ExtListswiperitemComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'action', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'state', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'translationTarget', 'twoWayBindable', 'ui', 'undo', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCListswiperitem()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'listswiperitem';
        return _this;
    }
    ExtListswiperitemComponent_1 = ExtListswiperitemComponent;
    ExtListswiperitemComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtListswiperitemComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtListswiperitemComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtListswiperitemComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtListswiperitemComponent_1;
    ExtListswiperitemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtListswiperitemComponent = ExtListswiperitemComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtListswiperitemComponent);
ExtListswiperitemComponent.ɵfac = function ExtListswiperitemComponent_Factory(t) { return new (t || ExtListswiperitemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtListswiperitemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtListswiperitemComponent, selectors: [["ExtListswiperitem"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", action: "action", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", state: "state", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", translationTarget: "translationTarget", twoWayBindable: "twoWayBindable", ui: "ui", undo: "undo", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtListswiperitemComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtListswiperitemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtListswiperitemComponent, [{
        type: Component,
        args: [{
                selector: 'ExtListswiperitem',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'action', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'state', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'translationTarget', 'twoWayBindable', 'ui', 'undo', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtListswiperitemComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtListswiperitemComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCListswiperitem()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtListswiperstepperComponent = /** @class */ (function (_super) {
    __extends(ExtListswiperstepperComponent, _super);
    function ExtListswiperstepperComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'action', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'side', 'state', 'stateful', 'statefulDefaults', 'stateId', 'step', 'style', 'tabIndex', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'translationTarget', 'twoWayBindable', 'ui', 'undo', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCListswiperstepper()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'listswiperstepper';
        return _this;
    }
    ExtListswiperstepperComponent_1 = ExtListswiperstepperComponent;
    ExtListswiperstepperComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtListswiperstepperComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtListswiperstepperComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtListswiperstepperComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtListswiperstepperComponent_1;
    ExtListswiperstepperComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtListswiperstepperComponent = ExtListswiperstepperComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtListswiperstepperComponent);
ExtListswiperstepperComponent.ɵfac = function ExtListswiperstepperComponent_Factory(t) { return new (t || ExtListswiperstepperComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtListswiperstepperComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtListswiperstepperComponent, selectors: [["ExtListswiperstepper"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", action: "action", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", animation: "animation", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", side: "side", state: "state", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", step: "step", style: "style", tabIndex: "tabIndex", text: "text", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", translationTarget: "translationTarget", twoWayBindable: "twoWayBindable", ui: "ui", undo: "undo", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtListswiperstepperComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtListswiperstepperComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtListswiperstepperComponent, [{
        type: Component,
        args: [{
                selector: 'ExtListswiperstepper',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'action', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'side', 'state', 'stateful', 'statefulDefaults', 'stateId', 'step', 'style', 'tabIndex', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'translationTarget', 'twoWayBindable', 'ui', 'undo', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtListswiperstepperComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtListswiperstepperComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCListswiperstepper()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtNestedlistComponent = /** @class */ (function (_super) {
    __extends(ExtNestedlistComponent, _super);
    function ExtNestedlistComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowDeselect', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'backButton', 'backText', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'detailCard', 'detailContainer', 'disabled', 'displayed', 'displayField', 'docked', 'draggable', 'emptyText', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastActiveList', 'lastNode', 'layout', 'left', 'listConfig', 'listeners', 'loadingText', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'onItemDisclosure', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'title', 'toFrontOnShow', 'toolbar', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'updateTitleText', 'userCls', 'userSelectable', 'useTitleAsBackText', 'undefined', 'variableHeights', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCNestedlist()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'back', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforeload', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeselectionchange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'containertap', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemdoubletap', 'itemtap', 'leafitemtap', 'leftchange', 'listchange', 'load', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'selectionchange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'nestedlist';
        return _this;
    }
    ExtNestedlistComponent_1 = ExtNestedlistComponent;
    ExtNestedlistComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtNestedlistComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtNestedlistComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtNestedlistComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtNestedlistComponent_1;
    ExtNestedlistComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtNestedlistComponent = ExtNestedlistComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtNestedlistComponent);
ExtNestedlistComponent.ɵfac = function ExtNestedlistComponent_Factory(t) { return new (t || ExtNestedlistComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtNestedlistComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtNestedlistComponent, selectors: [["ExtNestedlist"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowDeselect: "allowDeselect", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", backButton: "backButton", backText: "backText", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", detailCard: "detailCard", detailContainer: "detailContainer", disabled: "disabled", displayed: "displayed", displayField: "displayField", docked: "docked", draggable: "draggable", emptyText: "emptyText", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", lastActiveList: "lastActiveList", lastNode: "lastNode", layout: "layout", left: "left", listConfig: "listConfig", listeners: "listeners", loadingText: "loadingText", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", onItemDisclosure: "onItemDisclosure", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", title: "title", toFrontOnShow: "toFrontOnShow", toolbar: "toolbar", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", updateTitleText: "updateTitleText", userCls: "userCls", userSelectable: "userSelectable", useTitleAsBackText: "useTitleAsBackText", variableHeights: "variableHeights", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", back: "back", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforeload: "beforeload", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeselectionchange: "beforeselectionchange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", containertap: "containertap", deactivate: "deactivate", deselect: "deselect", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemdoubletap: "itemdoubletap", itemtap: "itemtap", leafitemtap: "leafitemtap", leftchange: "leftchange", listchange: "listchange", load: "load", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", select: "select", selectionchange: "selectionchange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtNestedlistComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtNestedlistComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtNestedlistComponent, [{
        type: Component,
        args: [{
                selector: 'ExtNestedlist',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowDeselect', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'backButton', 'backText', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'detailCard', 'detailContainer', 'disabled', 'displayed', 'displayField', 'docked', 'draggable', 'emptyText', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastActiveList', 'lastNode', 'layout', 'left', 'listConfig', 'listeners', 'loadingText', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'onItemDisclosure', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'title', 'toFrontOnShow', 'toolbar', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'updateTitleText', 'userCls', 'userSelectable', 'useTitleAsBackText', 'undefined', 'variableHeights', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'back', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforeload', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeselectionchange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'containertap', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemdoubletap', 'itemtap', 'leafitemtap', 'leftchange', 'listchange', 'load', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'selectionchange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtNestedlistComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtNestedlistComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCNestedlist()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPullrefreshbarComponent = /** @class */ (function (_super) {
    __extends(ExtPullrefreshbarComponent, _super);
    function ExtPullrefreshbarComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastUpdated', 'lastUpdatedDateFormat', 'lastUpdatedText', 'left', 'listeners', 'loadedText', 'loadingText', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'mode', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'pull', 'pullText', 'record', 'reference', 'relative', 'releaseText', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'state', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPullrefreshbar()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'pullrefreshbar';
        return _this;
    }
    ExtPullrefreshbarComponent_1 = ExtPullrefreshbarComponent;
    ExtPullrefreshbarComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPullrefreshbarComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPullrefreshbarComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPullrefreshbarComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPullrefreshbarComponent_1;
    ExtPullrefreshbarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPullrefreshbarComponent = ExtPullrefreshbarComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPullrefreshbarComponent);
ExtPullrefreshbarComponent.ɵfac = function ExtPullrefreshbarComponent_Factory(t) { return new (t || ExtPullrefreshbarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPullrefreshbarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPullrefreshbarComponent, selectors: [["ExtPullrefreshbar"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", lastUpdated: "lastUpdated", lastUpdatedDateFormat: "lastUpdatedDateFormat", lastUpdatedText: "lastUpdatedText", left: "left", listeners: "listeners", loadedText: "loadedText", loadingText: "loadingText", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", mode: "mode", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", pull: "pull", pullText: "pullText", record: "record", reference: "reference", relative: "relative", releaseText: "releaseText", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", state: "state", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPullrefreshbarComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPullrefreshbarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPullrefreshbarComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPullrefreshbar',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastUpdated', 'lastUpdatedDateFormat', 'lastUpdatedText', 'left', 'listeners', 'loadedText', 'loadingText', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'mode', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'pull', 'pullText', 'record', 'reference', 'relative', 'releaseText', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'state', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPullrefreshbarComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPullrefreshbarComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPullrefreshbar()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPullrefreshspinnerComponent = /** @class */ (function (_super) {
    __extends(ExtPullrefreshspinnerComponent, _super);
    function ExtPullrefreshspinnerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastUpdated', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'pull', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'state', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPullrefreshspinner()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'pullrefreshspinner';
        return _this;
    }
    ExtPullrefreshspinnerComponent_1 = ExtPullrefreshspinnerComponent;
    ExtPullrefreshspinnerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPullrefreshspinnerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPullrefreshspinnerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPullrefreshspinnerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPullrefreshspinnerComponent_1;
    ExtPullrefreshspinnerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPullrefreshspinnerComponent = ExtPullrefreshspinnerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPullrefreshspinnerComponent);
ExtPullrefreshspinnerComponent.ɵfac = function ExtPullrefreshspinnerComponent_Factory(t) { return new (t || ExtPullrefreshspinnerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPullrefreshspinnerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPullrefreshspinnerComponent, selectors: [["ExtPullrefreshspinner"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", lastUpdated: "lastUpdated", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", pull: "pull", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", state: "state", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPullrefreshspinnerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPullrefreshspinnerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPullrefreshspinnerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPullrefreshspinner',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastUpdated', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'pull', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'state', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPullrefreshspinnerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPullrefreshspinnerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPullrefreshspinner()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSimplelistitemComponent = /** @class */ (function (_super) {
    __extends(ExtSimplelistitemComponent, _super);
    function ExtSimplelistitemComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSimplelistitem()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'simplelistitem';
        return _this;
    }
    ExtSimplelistitemComponent_1 = ExtSimplelistitemComponent;
    ExtSimplelistitemComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSimplelistitemComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSimplelistitemComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSimplelistitemComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSimplelistitemComponent_1;
    ExtSimplelistitemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSimplelistitemComponent = ExtSimplelistitemComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSimplelistitemComponent);
ExtSimplelistitemComponent.ɵfac = function ExtSimplelistitemComponent_Factory(t) { return new (t || ExtSimplelistitemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSimplelistitemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSimplelistitemComponent, selectors: [["ExtSimplelistitem"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", pinned: "pinned", publishes: "publishes", record: "record", recordIndex: "recordIndex", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSimplelistitemComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSimplelistitemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSimplelistitemComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSimplelistitem',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSimplelistitemComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSimplelistitemComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSimplelistitem()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtDialogComponent = /** @class */ (function (_super) {
    __extends(ExtDialogComponent, _super);
    function ExtDialogComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'constrainDrag', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'dismissAction', 'dismissHandler', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maskTapHandler', 'maxHeight', 'maximizable', 'maximizeAnimation', 'maximized', 'maximizeProxy', 'maximizeTool', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'restorable', 'restoreAnimation', 'restoreTool', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCDialog()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaximize', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerestore', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maximize', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'restore', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'dialog';
        return _this;
    }
    ExtDialogComponent_1 = ExtDialogComponent;
    ExtDialogComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtDialogComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtDialogComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtDialogComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtDialogComponent_1;
    ExtDialogComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtDialogComponent = ExtDialogComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtDialogComponent);
ExtDialogComponent.ɵfac = function ExtDialogComponent_Factory(t) { return new (t || ExtDialogComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtDialogComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtDialogComponent, selectors: [["ExtDialog"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", constrainDrag: "constrainDrag", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", dismissAction: "dismissAction", dismissHandler: "dismissHandler", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maskTapHandler: "maskTapHandler", maxHeight: "maxHeight", maximizable: "maximizable", maximizeAnimation: "maximizeAnimation", maximized: "maximized", maximizeProxy: "maximizeProxy", maximizeTool: "maximizeTool", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", restorable: "restorable", restoreAnimation: "restoreAnimation", restoreTool: "restoreTool", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaximize: "beforemaximize", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerestore: "beforerestore", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maximize: "maximize", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", restore: "restore", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtDialogComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtDialogComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtDialogComponent, [{
        type: Component,
        args: [{
                selector: 'ExtDialog',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'constrainDrag', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'dismissAction', 'dismissHandler', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maskTapHandler', 'maxHeight', 'maximizable', 'maximizeAnimation', 'maximized', 'maximizeProxy', 'maximizeTool', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'restorable', 'restoreAnimation', 'restoreTool', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaximize', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerestore', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maximize', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'restore', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtDialogComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtDialogComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCDialog()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtWindowComponent = /** @class */ (function (_super) {
    __extends(ExtWindowComponent, _super);
    function ExtWindowComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'constrainDrag', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'dismissAction', 'dismissHandler', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maskTapHandler', 'maxHeight', 'maximizable', 'maximizeAnimation', 'maximized', 'maximizeProxy', 'maximizeTool', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'restorable', 'restoreAnimation', 'restoreTool', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCWindow()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaximize', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerestore', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maximize', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'restore', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'window';
        return _this;
    }
    ExtWindowComponent_1 = ExtWindowComponent;
    ExtWindowComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtWindowComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtWindowComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtWindowComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtWindowComponent_1;
    ExtWindowComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtWindowComponent = ExtWindowComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtWindowComponent);
ExtWindowComponent.ɵfac = function ExtWindowComponent_Factory(t) { return new (t || ExtWindowComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtWindowComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtWindowComponent, selectors: [["ExtWindow"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", constrainDrag: "constrainDrag", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", dismissAction: "dismissAction", dismissHandler: "dismissHandler", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maskTapHandler: "maskTapHandler", maxHeight: "maxHeight", maximizable: "maximizable", maximizeAnimation: "maximizeAnimation", maximized: "maximized", maximizeProxy: "maximizeProxy", maximizeTool: "maximizeTool", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", restorable: "restorable", restoreAnimation: "restoreAnimation", restoreTool: "restoreTool", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaximize: "beforemaximize", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerestore: "beforerestore", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maximize: "maximize", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", restore: "restore", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtWindowComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtWindowComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtWindowComponent, [{
        type: Component,
        args: [{
                selector: 'ExtWindow',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'constrainDrag', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'dismissAction', 'dismissHandler', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maskTapHandler', 'maxHeight', 'maximizable', 'maximizeAnimation', 'maximized', 'maximizeProxy', 'maximizeTool', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'restorable', 'restoreAnimation', 'restoreTool', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaximize', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerestore', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maximize', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'restore', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtWindowComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtWindowComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCWindow()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtDrawComponent = /** @class */ (function (_super) {
    __extends(ExtDrawComponent, _super);
    function ExtDrawComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'downloadServerUrl', 'draggable', 'engine', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gradients', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizeHandler', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sprites', 'stateful', 'statefulDefaults', 'stateId', 'style', 'surfaceZIndexes', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCDraw()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bodyresize', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'spriteclick', 'spritedblclick', 'spritemousedown', 'spritemousemove', 'spritemouseout', 'spritemouseover', 'spritemouseup', 'spritetap', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'draw';
        return _this;
    }
    ExtDrawComponent_1 = ExtDrawComponent;
    ExtDrawComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtDrawComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtDrawComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtDrawComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtDrawComponent_1;
    ExtDrawComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtDrawComponent = ExtDrawComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtDrawComponent);
ExtDrawComponent.ɵfac = function ExtDrawComponent_Factory(t) { return new (t || ExtDrawComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtDrawComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtDrawComponent, selectors: [["ExtDraw"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", downloadServerUrl: "downloadServerUrl", draggable: "draggable", engine: "engine", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", gradients: "gradients", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizeHandler: "resizeHandler", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sprites: "sprites", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", surfaceZIndexes: "surfaceZIndexes", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bodyresize: "bodyresize", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", spriteclick: "spriteclick", spritedblclick: "spritedblclick", spritemousedown: "spritemousedown", spritemousemove: "spritemousemove", spritemouseout: "spritemouseout", spritemouseover: "spritemouseover", spritemouseup: "spritemouseup", spritetap: "spritetap", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtDrawComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtDrawComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtDrawComponent, [{
        type: Component,
        args: [{
                selector: 'ExtDraw',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'downloadServerUrl', 'draggable', 'engine', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gradients', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizeHandler', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sprites', 'stateful', 'statefulDefaults', 'stateId', 'style', 'surfaceZIndexes', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bodyresize', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'spriteclick', 'spritedblclick', 'spritemousedown', 'spritemousemove', 'spritemouseout', 'spritemouseover', 'spritemouseup', 'spritetap', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtDrawComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtDrawComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCDraw()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSurfaceComponent = /** @class */ (function (_super) {
    __extends(ExtSurfaceComponent, _super);
    function ExtSurfaceComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'background', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'dirty', 'disabled', 'undefined', 'flex', 'flipRtlText', 'floated', 'focusCls', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rect', 'reference', 'relative', 'renderTo', 'ripple', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',], (new EWCSurface()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'surface';
        return _this;
    }
    ExtSurfaceComponent_1 = ExtSurfaceComponent;
    ExtSurfaceComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSurfaceComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSurfaceComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSurfaceComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSurfaceComponent_1;
    ExtSurfaceComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSurfaceComponent = ExtSurfaceComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSurfaceComponent);
ExtSurfaceComponent.ɵfac = function ExtSurfaceComponent_Factory(t) { return new (t || ExtSurfaceComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSurfaceComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSurfaceComponent, selectors: [["ExtSurface"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", background: "background", bind: "bind", border: "border", cls: "cls", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", undefined: "undefined", flex: "flex", flipRtlText: "flipRtlText", floated: "floated", focusCls: "focusCls", height: "height", hidden: "hidden", hideMode: "hideMode", id: "id", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", rect: "rect", reference: "reference", relative: "relative", renderTo: "renderTo", ripple: "ripple", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", style: "style", toFrontOnShow: "toFrontOnShow", touchAction: "touchAction", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", viewModel: "viewModel", width: "width", x: "x", y: "y" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSurfaceComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSurfaceComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSurfaceComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSurface',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'background', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'dirty', 'disabled', 'undefined', 'flex', 'flipRtlText', 'floated', 'focusCls', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rect', 'reference', 'relative', 'renderTo', 'ripple', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSurfaceComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSurfaceComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSurface()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtEditorComponent = /** @class */ (function (_super) {
    __extends(ExtEditorComponent, _super);
    function ExtEditorComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignment', 'alignSelf', 'allowBlur', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cancelOnClear', 'cancelOnEsc', 'cardSwitchAnimation', 'centered', 'cls', 'completeOnEnter', 'constrain', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'field', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideEl', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'ignoreNoChange', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'matchFont', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'offset', 'padding', 'parentEl', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'revertInvalid', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'swallowKeys', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'updateEl', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCEditor()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecomplete', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestartedit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'canceledit', 'centeredchange', 'complete', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'specialkey', 'startedit', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'editor';
        return _this;
    }
    ExtEditorComponent_1 = ExtEditorComponent;
    ExtEditorComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtEditorComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtEditorComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtEditorComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtEditorComponent_1;
    ExtEditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtEditorComponent = ExtEditorComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtEditorComponent);
ExtEditorComponent.ɵfac = function ExtEditorComponent_Factory(t) { return new (t || ExtEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtEditorComponent, selectors: [["ExtEditor"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignment: "alignment", alignSelf: "alignSelf", allowBlur: "allowBlur", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cancelOnClear: "cancelOnClear", cancelOnEsc: "cancelOnEsc", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", completeOnEnter: "completeOnEnter", constrain: "constrain", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", field: "field", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideEl: "hideEl", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", ignoreNoChange: "ignoreNoChange", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", matchFont: "matchFont", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", offset: "offset", padding: "padding", parentEl: "parentEl", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", revertInvalid: "revertInvalid", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", swallowKeys: "swallowKeys", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", updateEl: "updateEl", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecomplete: "beforecomplete", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforestartedit: "beforestartedit", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", canceledit: "canceledit", centeredchange: "centeredchange", complete: "complete", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", specialkey: "specialkey", startedit: "startedit", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtEditorComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtEditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtEditorComponent, [{
        type: Component,
        args: [{
                selector: 'ExtEditor',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignment', 'alignSelf', 'allowBlur', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cancelOnClear', 'cancelOnEsc', 'cardSwitchAnimation', 'centered', 'cls', 'completeOnEnter', 'constrain', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'field', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideEl', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'ignoreNoChange', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'matchFont', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'offset', 'padding', 'parentEl', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'revertInvalid', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'swallowKeys', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'updateEl', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecomplete', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestartedit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'canceledit', 'centeredchange', 'complete', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'specialkey', 'startedit', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtEditorComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtEditorComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCEditor()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCheckboxComponent = /** @class */ (function (_super) {
    __extends(ExtCheckboxComponent, _super);
    function ExtCheckboxComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'boxLabel', 'boxLabelAlign', 'bubbleDirty', 'centered', 'checked', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMaskTap', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCheckbox()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'check', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'uncheck', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'checkbox';
        return _this;
    }
    ExtCheckboxComponent_1 = ExtCheckboxComponent;
    ExtCheckboxComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCheckboxComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCheckboxComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCheckboxComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCheckboxComponent_1;
    ExtCheckboxComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCheckboxComponent = ExtCheckboxComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCheckboxComponent);
ExtCheckboxComponent.ɵfac = function ExtCheckboxComponent_Factory(t) { return new (t || ExtCheckboxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCheckboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCheckboxComponent, selectors: [["ExtCheckbox"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", boxLabel: "boxLabel", boxLabelAlign: "boxLabelAlign", bubbleDirty: "bubbleDirty", centered: "centered", checked: "checked", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMaskTap: "labelMaskTap", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", check: "check", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", uncheck: "uncheck", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCheckboxComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCheckboxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCheckboxComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCheckbox',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'boxLabel', 'boxLabelAlign', 'bubbleDirty', 'centered', 'checked', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMaskTap', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'check', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'uncheck', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCheckboxComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCheckboxComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCheckbox()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCheckboxfieldComponent = /** @class */ (function (_super) {
    __extends(ExtCheckboxfieldComponent, _super);
    function ExtCheckboxfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'boxLabel', 'boxLabelAlign', 'bubbleDirty', 'centered', 'checked', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMaskTap', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCheckboxfield()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'check', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'uncheck', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'checkboxfield';
        return _this;
    }
    ExtCheckboxfieldComponent_1 = ExtCheckboxfieldComponent;
    ExtCheckboxfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCheckboxfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCheckboxfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCheckboxfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCheckboxfieldComponent_1;
    ExtCheckboxfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCheckboxfieldComponent = ExtCheckboxfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCheckboxfieldComponent);
ExtCheckboxfieldComponent.ɵfac = function ExtCheckboxfieldComponent_Factory(t) { return new (t || ExtCheckboxfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCheckboxfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCheckboxfieldComponent, selectors: [["ExtCheckboxfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", boxLabel: "boxLabel", boxLabelAlign: "boxLabelAlign", bubbleDirty: "bubbleDirty", centered: "centered", checked: "checked", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMaskTap: "labelMaskTap", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", check: "check", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", uncheck: "uncheck", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCheckboxfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCheckboxfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCheckboxfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCheckboxfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'boxLabel', 'boxLabelAlign', 'bubbleDirty', 'centered', 'checked', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMaskTap', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'check', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'uncheck', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCheckboxfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCheckboxfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCheckboxfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCheckboxgroupComponent = /** @class */ (function (_super) {
    __extends(ExtCheckboxgroupComponent, _super);
    function ExtCheckboxgroupComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'autoSize', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'container', 'contentEl', 'controller', 'data', 'dataType', 'defaultFieldValue', 'defaultListenerScope', 'defaults', 'defaultType', 'delegate', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'fieldDefaults', 'fieldsName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'layout', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'vertical', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCheckboxgroup()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'checkboxgroup';
        return _this;
    }
    ExtCheckboxgroupComponent_1 = ExtCheckboxgroupComponent;
    ExtCheckboxgroupComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCheckboxgroupComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCheckboxgroupComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCheckboxgroupComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCheckboxgroupComponent_1;
    ExtCheckboxgroupComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCheckboxgroupComponent = ExtCheckboxgroupComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCheckboxgroupComponent);
ExtCheckboxgroupComponent.ɵfac = function ExtCheckboxgroupComponent_Factory(t) { return new (t || ExtCheckboxgroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCheckboxgroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCheckboxgroupComponent, selectors: [["ExtCheckboxgroup"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", container: "container", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultFieldValue: "defaultFieldValue", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", delegate: "delegate", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", fieldDefaults: "fieldDefaults", fieldsName: "fieldsName", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", layout: "layout", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", vertical: "vertical", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCheckboxgroupComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCheckboxgroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCheckboxgroupComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCheckboxgroup',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'autoSize', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'container', 'contentEl', 'controller', 'data', 'dataType', 'defaultFieldValue', 'defaultListenerScope', 'defaults', 'defaultType', 'delegate', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'fieldDefaults', 'fieldsName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'layout', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'vertical', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCheckboxgroupComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCheckboxgroupComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCheckboxgroup()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtComboboxComponent = /** @class */ (function (_super) {
    __extends(ExtComboboxComponent, _super);
    function ExtComboboxComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'allQuery', 'alwaysOnTop', 'animateUnderline', 'anyMatch', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoFocus', 'autoFocusLast', 'autoHideInputMask', 'autoLoadOnValue', 'autoSelect', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'caseSensitive', 'centered', 'chipView', 'clearable', 'cls', 'collapseOnSelect', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'delimiter', 'dirty', 'disabled', 'displayed', 'displayField', 'displayTpl', 'docked', 'draggable', 'edgePicker', 'editable', 'enableRegEx', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'forceSelection', 'fullscreen', 'height', 'hidden', 'hiddenName', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemCls', 'itemId', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minChars', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multiSelect', 'name', 'nameable', 'options', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'primaryFilter', 'publishes', 'queryCaching', 'queryDelay', 'queryMode', 'queryParam', 'readOnly', 'record', 'recordCreator', 'recordCreatorScope', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'selection', 'selectOnTab', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'store', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerAction', 'triggers', 'twoWayBindable', 'typeAhead', 'typeAheadDelay', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'valueCollection', 'valueField', 'valueNotFoundText', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCombobox()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforepickercreate', 'beforequery', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'pickercreate', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'combobox';
        return _this;
    }
    ExtComboboxComponent_1 = ExtComboboxComponent;
    ExtComboboxComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtComboboxComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtComboboxComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtComboboxComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtComboboxComponent_1;
    ExtComboboxComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtComboboxComponent = ExtComboboxComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtComboboxComponent);
ExtComboboxComponent.ɵfac = function ExtComboboxComponent_Factory(t) { return new (t || ExtComboboxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtComboboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtComboboxComponent, selectors: [["ExtCombobox"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alignTarget: "alignTarget", allQuery: "allQuery", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", anyMatch: "anyMatch", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoFocus: "autoFocus", autoFocusLast: "autoFocusLast", autoHideInputMask: "autoHideInputMask", autoLoadOnValue: "autoLoadOnValue", autoSelect: "autoSelect", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", caseSensitive: "caseSensitive", centered: "centered", chipView: "chipView", clearable: "clearable", cls: "cls", collapseOnSelect: "collapseOnSelect", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", delimiter: "delimiter", dirty: "dirty", disabled: "disabled", displayed: "displayed", displayField: "displayField", displayTpl: "displayTpl", docked: "docked", draggable: "draggable", edgePicker: "edgePicker", editable: "editable", enableRegEx: "enableRegEx", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", floatedPicker: "floatedPicker", floatedPickerAlign: "floatedPickerAlign", focusCls: "focusCls", focusTrap: "focusTrap", forceSelection: "forceSelection", fullscreen: "fullscreen", height: "height", hidden: "hidden", hiddenName: "hiddenName", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideTrigger: "hideTrigger", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemCls: "itemCls", itemId: "itemId", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", matchFieldWidth: "matchFieldWidth", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minChars: "minChars", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multiSelect: "multiSelect", name: "name", nameable: "nameable", options: "options", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", picker: "picker", pickerSlotAlign: "pickerSlotAlign", placeholder: "placeholder", primaryFilter: "primaryFilter", publishes: "publishes", queryCaching: "queryCaching", queryDelay: "queryDelay", queryMode: "queryMode", queryParam: "queryParam", readOnly: "readOnly", record: "record", recordCreator: "recordCreator", recordCreatorScope: "recordCreatorScope", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", selection: "selection", selectOnTab: "selectOnTab", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggerAction: "triggerAction", triggers: "triggers", twoWayBindable: "twoWayBindable", typeAhead: "typeAhead", typeAheadDelay: "typeAheadDelay", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", valueCollection: "valueCollection", valueField: "valueField", valueNotFoundText: "valueNotFoundText", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforepickercreate: "beforepickercreate", beforequery: "beforequery", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", collapse: "collapse", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", pickercreate: "pickercreate", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", select: "select", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtComboboxComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtComboboxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtComboboxComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCombobox',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'allQuery', 'alwaysOnTop', 'animateUnderline', 'anyMatch', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoFocus', 'autoFocusLast', 'autoHideInputMask', 'autoLoadOnValue', 'autoSelect', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'caseSensitive', 'centered', 'chipView', 'clearable', 'cls', 'collapseOnSelect', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'delimiter', 'dirty', 'disabled', 'displayed', 'displayField', 'displayTpl', 'docked', 'draggable', 'edgePicker', 'editable', 'enableRegEx', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'forceSelection', 'fullscreen', 'height', 'hidden', 'hiddenName', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemCls', 'itemId', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minChars', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multiSelect', 'name', 'nameable', 'options', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'primaryFilter', 'publishes', 'queryCaching', 'queryDelay', 'queryMode', 'queryParam', 'readOnly', 'record', 'recordCreator', 'recordCreatorScope', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'selection', 'selectOnTab', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'store', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerAction', 'triggers', 'twoWayBindable', 'typeAhead', 'typeAheadDelay', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'valueCollection', 'valueField', 'valueNotFoundText', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforepickercreate', 'beforequery', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'pickercreate', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtComboboxComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtComboboxComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCombobox()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtComboboxfieldComponent = /** @class */ (function (_super) {
    __extends(ExtComboboxfieldComponent, _super);
    function ExtComboboxfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'allQuery', 'alwaysOnTop', 'animateUnderline', 'anyMatch', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoFocus', 'autoFocusLast', 'autoHideInputMask', 'autoLoadOnValue', 'autoSelect', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'caseSensitive', 'centered', 'chipView', 'clearable', 'cls', 'collapseOnSelect', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'delimiter', 'dirty', 'disabled', 'displayed', 'displayField', 'displayTpl', 'docked', 'draggable', 'edgePicker', 'editable', 'enableRegEx', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'forceSelection', 'fullscreen', 'height', 'hidden', 'hiddenName', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemCls', 'itemId', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minChars', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multiSelect', 'name', 'nameable', 'options', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'primaryFilter', 'publishes', 'queryCaching', 'queryDelay', 'queryMode', 'queryParam', 'readOnly', 'record', 'recordCreator', 'recordCreatorScope', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'selection', 'selectOnTab', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'store', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerAction', 'triggers', 'twoWayBindable', 'typeAhead', 'typeAheadDelay', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'valueCollection', 'valueField', 'valueNotFoundText', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCComboboxfield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforepickercreate', 'beforequery', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'pickercreate', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'comboboxfield';
        return _this;
    }
    ExtComboboxfieldComponent_1 = ExtComboboxfieldComponent;
    ExtComboboxfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtComboboxfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtComboboxfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtComboboxfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtComboboxfieldComponent_1;
    ExtComboboxfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtComboboxfieldComponent = ExtComboboxfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtComboboxfieldComponent);
ExtComboboxfieldComponent.ɵfac = function ExtComboboxfieldComponent_Factory(t) { return new (t || ExtComboboxfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtComboboxfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtComboboxfieldComponent, selectors: [["ExtComboboxfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alignTarget: "alignTarget", allQuery: "allQuery", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", anyMatch: "anyMatch", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoFocus: "autoFocus", autoFocusLast: "autoFocusLast", autoHideInputMask: "autoHideInputMask", autoLoadOnValue: "autoLoadOnValue", autoSelect: "autoSelect", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", caseSensitive: "caseSensitive", centered: "centered", chipView: "chipView", clearable: "clearable", cls: "cls", collapseOnSelect: "collapseOnSelect", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", delimiter: "delimiter", dirty: "dirty", disabled: "disabled", displayed: "displayed", displayField: "displayField", displayTpl: "displayTpl", docked: "docked", draggable: "draggable", edgePicker: "edgePicker", editable: "editable", enableRegEx: "enableRegEx", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", floatedPicker: "floatedPicker", floatedPickerAlign: "floatedPickerAlign", focusCls: "focusCls", focusTrap: "focusTrap", forceSelection: "forceSelection", fullscreen: "fullscreen", height: "height", hidden: "hidden", hiddenName: "hiddenName", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideTrigger: "hideTrigger", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemCls: "itemCls", itemId: "itemId", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", matchFieldWidth: "matchFieldWidth", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minChars: "minChars", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multiSelect: "multiSelect", name: "name", nameable: "nameable", options: "options", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", picker: "picker", pickerSlotAlign: "pickerSlotAlign", placeholder: "placeholder", primaryFilter: "primaryFilter", publishes: "publishes", queryCaching: "queryCaching", queryDelay: "queryDelay", queryMode: "queryMode", queryParam: "queryParam", readOnly: "readOnly", record: "record", recordCreator: "recordCreator", recordCreatorScope: "recordCreatorScope", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", selection: "selection", selectOnTab: "selectOnTab", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggerAction: "triggerAction", triggers: "triggers", twoWayBindable: "twoWayBindable", typeAhead: "typeAhead", typeAheadDelay: "typeAheadDelay", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", valueCollection: "valueCollection", valueField: "valueField", valueNotFoundText: "valueNotFoundText", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforepickercreate: "beforepickercreate", beforequery: "beforequery", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", collapse: "collapse", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", pickercreate: "pickercreate", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", select: "select", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtComboboxfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtComboboxfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtComboboxfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtComboboxfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'allQuery', 'alwaysOnTop', 'animateUnderline', 'anyMatch', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoFocus', 'autoFocusLast', 'autoHideInputMask', 'autoLoadOnValue', 'autoSelect', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'caseSensitive', 'centered', 'chipView', 'clearable', 'cls', 'collapseOnSelect', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'delimiter', 'dirty', 'disabled', 'displayed', 'displayField', 'displayTpl', 'docked', 'draggable', 'edgePicker', 'editable', 'enableRegEx', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'forceSelection', 'fullscreen', 'height', 'hidden', 'hiddenName', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemCls', 'itemId', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minChars', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multiSelect', 'name', 'nameable', 'options', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'primaryFilter', 'publishes', 'queryCaching', 'queryDelay', 'queryMode', 'queryParam', 'readOnly', 'record', 'recordCreator', 'recordCreatorScope', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'selection', 'selectOnTab', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'store', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerAction', 'triggers', 'twoWayBindable', 'typeAhead', 'typeAheadDelay', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'valueCollection', 'valueField', 'valueNotFoundText', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforepickercreate', 'beforequery', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'pickercreate', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtComboboxfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtComboboxfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCComboboxfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtContainerfieldComponent = /** @class */ (function (_super) {
    __extends(ExtContainerfieldComponent, _super);
    function ExtContainerfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'autoSize', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'container', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'defaults', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'fieldDefaults', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'layout', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCContainerfield()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'containerfield';
        return _this;
    }
    ExtContainerfieldComponent_1 = ExtContainerfieldComponent;
    ExtContainerfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtContainerfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtContainerfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtContainerfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtContainerfieldComponent_1;
    ExtContainerfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtContainerfieldComponent = ExtContainerfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtContainerfieldComponent);
ExtContainerfieldComponent.ɵfac = function ExtContainerfieldComponent_Factory(t) { return new (t || ExtContainerfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtContainerfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtContainerfieldComponent, selectors: [["ExtContainerfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", container: "container", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", fieldDefaults: "fieldDefaults", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", layout: "layout", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtContainerfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtContainerfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtContainerfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtContainerfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'autoSize', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'container', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'defaults', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'fieldDefaults', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'layout', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtContainerfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtContainerfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCContainerfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtFieldcontainerComponent = /** @class */ (function (_super) {
    __extends(ExtFieldcontainerComponent, _super);
    function ExtFieldcontainerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'autoSize', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'container', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'defaults', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'fieldDefaults', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'layout', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCFieldcontainer()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'fieldcontainer';
        return _this;
    }
    ExtFieldcontainerComponent_1 = ExtFieldcontainerComponent;
    ExtFieldcontainerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtFieldcontainerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtFieldcontainerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtFieldcontainerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtFieldcontainerComponent_1;
    ExtFieldcontainerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtFieldcontainerComponent = ExtFieldcontainerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtFieldcontainerComponent);
ExtFieldcontainerComponent.ɵfac = function ExtFieldcontainerComponent_Factory(t) { return new (t || ExtFieldcontainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtFieldcontainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtFieldcontainerComponent, selectors: [["ExtFieldcontainer"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", container: "container", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", fieldDefaults: "fieldDefaults", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", layout: "layout", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtFieldcontainerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtFieldcontainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtFieldcontainerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtFieldcontainer',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'autoSize', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'container', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'defaults', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'fieldDefaults', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'layout', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtFieldcontainerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtFieldcontainerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCFieldcontainer()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtDatefieldComponent = /** @class */ (function (_super) {
    __extends(ExtDatefieldComponent, _super);
    function ExtDatefieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'altFormats', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'dateFormat', 'defaultListenerScope', 'destroyPickerOnHide', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxDate', 'maxHeight', 'maxLength', 'maxWidth', 'minDate', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCDatefield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'datefield';
        return _this;
    }
    ExtDatefieldComponent_1 = ExtDatefieldComponent;
    ExtDatefieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtDatefieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtDatefieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtDatefieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtDatefieldComponent_1;
    ExtDatefieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtDatefieldComponent = ExtDatefieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtDatefieldComponent);
ExtDatefieldComponent.ɵfac = function ExtDatefieldComponent_Factory(t) { return new (t || ExtDatefieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtDatefieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtDatefieldComponent, selectors: [["ExtDatefield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alignTarget: "alignTarget", altFormats: "altFormats", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoHideInputMask: "autoHideInputMask", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", clearable: "clearable", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", dateFormat: "dateFormat", defaultListenerScope: "defaultListenerScope", destroyPickerOnHide: "destroyPickerOnHide", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", edgePicker: "edgePicker", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", floatedPicker: "floatedPicker", floatedPickerAlign: "floatedPickerAlign", focusCls: "focusCls", focusTrap: "focusTrap", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideTrigger: "hideTrigger", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", matchFieldWidth: "matchFieldWidth", maxDate: "maxDate", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minDate: "minDate", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", picker: "picker", pickerSlotAlign: "pickerSlotAlign", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", collapse: "collapse", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatefieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtDatefieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtDatefieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtDatefield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'altFormats', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'dateFormat', 'defaultListenerScope', 'destroyPickerOnHide', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxDate', 'maxHeight', 'maxLength', 'maxWidth', 'minDate', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatefieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtDatefieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCDatefield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtDatepickerfieldComponent = /** @class */ (function (_super) {
    __extends(ExtDatepickerfieldComponent, _super);
    function ExtDatepickerfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'altFormats', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'dateFormat', 'defaultListenerScope', 'destroyPickerOnHide', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxDate', 'maxHeight', 'maxLength', 'maxWidth', 'minDate', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCDatepickerfield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'datepickerfield';
        return _this;
    }
    ExtDatepickerfieldComponent_1 = ExtDatepickerfieldComponent;
    ExtDatepickerfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtDatepickerfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtDatepickerfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtDatepickerfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtDatepickerfieldComponent_1;
    ExtDatepickerfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtDatepickerfieldComponent = ExtDatepickerfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtDatepickerfieldComponent);
ExtDatepickerfieldComponent.ɵfac = function ExtDatepickerfieldComponent_Factory(t) { return new (t || ExtDatepickerfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtDatepickerfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtDatepickerfieldComponent, selectors: [["ExtDatepickerfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alignTarget: "alignTarget", altFormats: "altFormats", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoHideInputMask: "autoHideInputMask", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", clearable: "clearable", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", dateFormat: "dateFormat", defaultListenerScope: "defaultListenerScope", destroyPickerOnHide: "destroyPickerOnHide", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", edgePicker: "edgePicker", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", floatedPicker: "floatedPicker", floatedPickerAlign: "floatedPickerAlign", focusCls: "focusCls", focusTrap: "focusTrap", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideTrigger: "hideTrigger", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", matchFieldWidth: "matchFieldWidth", maxDate: "maxDate", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minDate: "minDate", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", picker: "picker", pickerSlotAlign: "pickerSlotAlign", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", collapse: "collapse", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatepickerfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtDatepickerfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtDatepickerfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtDatepickerfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'altFormats', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'dateFormat', 'defaultListenerScope', 'destroyPickerOnHide', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxDate', 'maxHeight', 'maxLength', 'maxWidth', 'minDate', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatepickerfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtDatepickerfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCDatepickerfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtDatepickernativefieldComponent = /** @class */ (function (_super) {
    __extends(ExtDatepickernativefieldComponent, _super);
    function ExtDatepickernativefieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'altFormats', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'dateFormat', 'defaultListenerScope', 'destroyPickerOnHide', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxDate', 'maxHeight', 'maxLength', 'maxWidth', 'minDate', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCDatepickernativefield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'datepickernativefield';
        return _this;
    }
    ExtDatepickernativefieldComponent_1 = ExtDatepickernativefieldComponent;
    ExtDatepickernativefieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtDatepickernativefieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtDatepickernativefieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtDatepickernativefieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtDatepickernativefieldComponent_1;
    ExtDatepickernativefieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtDatepickernativefieldComponent = ExtDatepickernativefieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtDatepickernativefieldComponent);
ExtDatepickernativefieldComponent.ɵfac = function ExtDatepickernativefieldComponent_Factory(t) { return new (t || ExtDatepickernativefieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtDatepickernativefieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtDatepickernativefieldComponent, selectors: [["ExtDatepickernativefield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alignTarget: "alignTarget", altFormats: "altFormats", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoHideInputMask: "autoHideInputMask", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", clearable: "clearable", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", dateFormat: "dateFormat", defaultListenerScope: "defaultListenerScope", destroyPickerOnHide: "destroyPickerOnHide", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", edgePicker: "edgePicker", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", floatedPicker: "floatedPicker", floatedPickerAlign: "floatedPickerAlign", focusCls: "focusCls", focusTrap: "focusTrap", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideTrigger: "hideTrigger", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", matchFieldWidth: "matchFieldWidth", maxDate: "maxDate", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minDate: "minDate", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", picker: "picker", pickerSlotAlign: "pickerSlotAlign", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", collapse: "collapse", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatepickernativefieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtDatepickernativefieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtDatepickernativefieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtDatepickernativefield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'altFormats', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'dateFormat', 'defaultListenerScope', 'destroyPickerOnHide', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxDate', 'maxHeight', 'maxLength', 'maxWidth', 'minDate', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatepickernativefieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtDatepickernativefieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCDatepickernativefield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtDisplayfieldComponent = /** @class */ (function (_super) {
    __extends(ExtDisplayfieldComponent, _super);
    function ExtDisplayfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'encodeHtml', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusable', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderer', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCDisplayfield()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'displayfield';
        return _this;
    }
    ExtDisplayfieldComponent_1 = ExtDisplayfieldComponent;
    ExtDisplayfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtDisplayfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtDisplayfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtDisplayfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtDisplayfieldComponent_1;
    ExtDisplayfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtDisplayfieldComponent = ExtDisplayfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtDisplayfieldComponent);
ExtDisplayfieldComponent.ɵfac = function ExtDisplayfieldComponent_Factory(t) { return new (t || ExtDisplayfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtDisplayfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtDisplayfieldComponent, selectors: [["ExtDisplayfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", encodeHtml: "encodeHtml", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusable: "focusable", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtDisplayfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtDisplayfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtDisplayfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtDisplayfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'encodeHtml', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusable', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderer', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtDisplayfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtDisplayfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCDisplayfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtEmailfieldComponent = /** @class */ (function (_super) {
    __extends(ExtEmailfieldComponent, _super);
    function ExtEmailfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCEmailfield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'emailfield';
        return _this;
    }
    ExtEmailfieldComponent_1 = ExtEmailfieldComponent;
    ExtEmailfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtEmailfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtEmailfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtEmailfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtEmailfieldComponent_1;
    ExtEmailfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtEmailfieldComponent = ExtEmailfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtEmailfieldComponent);
ExtEmailfieldComponent.ɵfac = function ExtEmailfieldComponent_Factory(t) { return new (t || ExtEmailfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtEmailfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtEmailfieldComponent, selectors: [["ExtEmailfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoHideInputMask: "autoHideInputMask", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", clearable: "clearable", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtEmailfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtEmailfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtEmailfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtEmailfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtEmailfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtEmailfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCEmailfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtFieldComponent = /** @class */ (function (_super) {
    __extends(ExtFieldComponent, _super);
    function ExtFieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCField()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'field';
        return _this;
    }
    ExtFieldComponent_1 = ExtFieldComponent;
    ExtFieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtFieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtFieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtFieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtFieldComponent_1;
    ExtFieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtFieldComponent = ExtFieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtFieldComponent);
ExtFieldComponent.ɵfac = function ExtFieldComponent_Factory(t) { return new (t || ExtFieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtFieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtFieldComponent, selectors: [["ExtField"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtFieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtFieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtFieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtField',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtFieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtFieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCField()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtGroupcontainerComponent = /** @class */ (function (_super) {
    __extends(ExtGroupcontainerComponent, _super);
    function ExtGroupcontainerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'autoSize', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'container', 'contentEl', 'controller', 'data', 'dataType', 'defaultFieldValue', 'defaultListenerScope', 'defaults', 'defaultType', 'delegate', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'fieldDefaults', 'fieldsName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'layout', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'vertical', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCGroupcontainer()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'groupcontainer';
        return _this;
    }
    ExtGroupcontainerComponent_1 = ExtGroupcontainerComponent;
    ExtGroupcontainerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtGroupcontainerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtGroupcontainerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtGroupcontainerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtGroupcontainerComponent_1;
    ExtGroupcontainerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtGroupcontainerComponent = ExtGroupcontainerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtGroupcontainerComponent);
ExtGroupcontainerComponent.ɵfac = function ExtGroupcontainerComponent_Factory(t) { return new (t || ExtGroupcontainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtGroupcontainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtGroupcontainerComponent, selectors: [["ExtGroupcontainer"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", container: "container", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultFieldValue: "defaultFieldValue", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", delegate: "delegate", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", fieldDefaults: "fieldDefaults", fieldsName: "fieldsName", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", layout: "layout", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", vertical: "vertical", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtGroupcontainerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtGroupcontainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtGroupcontainerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtGroupcontainer',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'autoSize', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'container', 'contentEl', 'controller', 'data', 'dataType', 'defaultFieldValue', 'defaultListenerScope', 'defaults', 'defaultType', 'delegate', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'fieldDefaults', 'fieldsName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'layout', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'vertical', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtGroupcontainerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtGroupcontainerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCGroupcontainer()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtFilefieldComponent = /** @class */ (function (_super) {
    __extends(ExtFilefieldComponent, _super);
    function ExtFilefieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'accept', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'capture', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multiple', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCFilefield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'filefield';
        return _this;
    }
    ExtFilefieldComponent_1 = ExtFilefieldComponent;
    ExtFilefieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtFilefieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtFilefieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtFilefieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtFilefieldComponent_1;
    ExtFilefieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtFilefieldComponent = ExtFilefieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtFilefieldComponent);
ExtFilefieldComponent.ɵfac = function ExtFilefieldComponent_Factory(t) { return new (t || ExtFilefieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtFilefieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtFilefieldComponent, selectors: [["ExtFilefield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", accept: "accept", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoHideInputMask: "autoHideInputMask", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", capture: "capture", centered: "centered", clearable: "clearable", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multiple: "multiple", name: "name", nameable: "nameable", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtFilefieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtFilefieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtFilefieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtFilefield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'accept', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'capture', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multiple', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtFilefieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtFilefieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCFilefield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtFilebuttonComponent = /** @class */ (function (_super) {
    __extends(ExtFilebuttonComponent, _super);
    function ExtFilebuttonComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'accept', 'alignSelf', 'allowDepress', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'arrow', 'arrowAlign', 'autoEvent', 'axisLock', 'badgeText', 'bind', 'border', 'bottom', 'buttonType', 'capture', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'enableToggle', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multiple', 'name', 'nameable', 'padding', 'plugins', 'pressed', 'pressedDelay', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stretchMenu', 'style', 'tabIndex', 'text', 'textAlign', 'toFrontOnShow', 'toggleHandler', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCFilebutton()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforepressedchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'pressedchange', 'release', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'filebutton';
        return _this;
    }
    ExtFilebuttonComponent_1 = ExtFilebuttonComponent;
    ExtFilebuttonComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtFilebuttonComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtFilebuttonComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtFilebuttonComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtFilebuttonComponent_1;
    ExtFilebuttonComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtFilebuttonComponent = ExtFilebuttonComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtFilebuttonComponent);
ExtFilebuttonComponent.ɵfac = function ExtFilebuttonComponent_Factory(t) { return new (t || ExtFilebuttonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtFilebuttonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtFilebuttonComponent, selectors: [["ExtFilebutton"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", accept: "accept", alignSelf: "alignSelf", allowDepress: "allowDepress", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", arrow: "arrow", arrowAlign: "arrowAlign", autoEvent: "autoEvent", axisLock: "axisLock", badgeText: "badgeText", bind: "bind", border: "border", bottom: "bottom", buttonType: "buttonType", capture: "capture", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", destroyMenu: "destroyMenu", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", enableToggle: "enableToggle", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", handler: "handler", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuAlign: "menuAlign", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multiple: "multiple", name: "name", nameable: "nameable", padding: "padding", pressed: "pressed", pressedDelay: "pressedDelay", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stretchMenu: "stretchMenu", style: "style", tabIndex: "tabIndex", text: "text", textAlign: "textAlign", toFrontOnShow: "toFrontOnShow", toggleHandler: "toggleHandler", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforepressedchange: "beforepressedchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", pressedchange: "pressedchange", release: "release", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tap: "tap", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtFilebuttonComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtFilebuttonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtFilebuttonComponent, [{
        type: Component,
        args: [{
                selector: 'ExtFilebutton',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'accept', 'alignSelf', 'allowDepress', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'arrow', 'arrowAlign', 'autoEvent', 'axisLock', 'badgeText', 'bind', 'border', 'bottom', 'buttonType', 'capture', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'enableToggle', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multiple', 'name', 'nameable', 'padding', 'plugins', 'pressed', 'pressedDelay', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stretchMenu', 'style', 'tabIndex', 'text', 'textAlign', 'toFrontOnShow', 'toggleHandler', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforepressedchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'pressedchange', 'release', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtFilebuttonComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtFilebuttonComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCFilebutton()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtHiddenfieldComponent = /** @class */ (function (_super) {
    __extends(ExtHiddenfieldComponent, _super);
    function ExtHiddenfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCHiddenfield()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'hiddenfield';
        return _this;
    }
    ExtHiddenfieldComponent_1 = ExtHiddenfieldComponent;
    ExtHiddenfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtHiddenfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtHiddenfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtHiddenfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtHiddenfieldComponent_1;
    ExtHiddenfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtHiddenfieldComponent = ExtHiddenfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtHiddenfieldComponent);
ExtHiddenfieldComponent.ɵfac = function ExtHiddenfieldComponent_Factory(t) { return new (t || ExtHiddenfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtHiddenfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtHiddenfieldComponent, selectors: [["ExtHiddenfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtHiddenfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtHiddenfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtHiddenfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtHiddenfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtHiddenfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtHiddenfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCHiddenfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtInputfieldComponent = /** @class */ (function (_super) {
    __extends(ExtInputfieldComponent, _super);
    function ExtInputfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCInputfield()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'inputfield';
        return _this;
    }
    ExtInputfieldComponent_1 = ExtInputfieldComponent;
    ExtInputfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtInputfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtInputfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtInputfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtInputfieldComponent_1;
    ExtInputfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtInputfieldComponent = ExtInputfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtInputfieldComponent);
ExtInputfieldComponent.ɵfac = function ExtInputfieldComponent_Factory(t) { return new (t || ExtInputfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtInputfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtInputfieldComponent, selectors: [["ExtInputfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtInputfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtInputfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtInputfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtInputfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtInputfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtInputfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCInputfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtNumberfieldComponent = /** @class */ (function (_super) {
    __extends(ExtNumberfieldComponent, _super);
    function ExtNumberfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'decimals', 'decimalSeparator', 'decimalsText', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxValue', 'maxValueText', 'maxWidth', 'minHeight', 'minValue', 'minValueText', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'trim', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCNumberfield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'numberfield';
        return _this;
    }
    ExtNumberfieldComponent_1 = ExtNumberfieldComponent;
    ExtNumberfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtNumberfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtNumberfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtNumberfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtNumberfieldComponent_1;
    ExtNumberfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtNumberfieldComponent = ExtNumberfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtNumberfieldComponent);
ExtNumberfieldComponent.ɵfac = function ExtNumberfieldComponent_Factory(t) { return new (t || ExtNumberfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtNumberfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtNumberfieldComponent, selectors: [["ExtNumberfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoHideInputMask: "autoHideInputMask", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", clearable: "clearable", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", decimals: "decimals", decimalSeparator: "decimalSeparator", decimalsText: "decimalsText", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxLength: "maxLength", maxValue: "maxValue", maxValueText: "maxValueText", maxWidth: "maxWidth", minHeight: "minHeight", minValue: "minValue", minValueText: "minValueText", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", trim: "trim", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtNumberfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtNumberfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtNumberfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtNumberfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'decimals', 'decimalSeparator', 'decimalsText', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxValue', 'maxValueText', 'maxWidth', 'minHeight', 'minValue', 'minValueText', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'trim', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtNumberfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtNumberfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCNumberfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtFieldpanelComponent = /** @class */ (function (_super) {
    __extends(ExtFieldpanelComponent, _super);
    function ExtFieldpanelComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'api', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'baseParams', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'bubbleDirty', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'paramOrder', 'paramsAsHash', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'timeout', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCFieldpanel()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'exception', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'fieldpanel';
        return _this;
    }
    ExtFieldpanelComponent_1 = ExtFieldpanelComponent;
    ExtFieldpanelComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtFieldpanelComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtFieldpanelComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtFieldpanelComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtFieldpanelComponent_1;
    ExtFieldpanelComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtFieldpanelComponent = ExtFieldpanelComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtFieldpanelComponent);
ExtFieldpanelComponent.ɵfac = function ExtFieldpanelComponent_Factory(t) { return new (t || ExtFieldpanelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtFieldpanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtFieldpanelComponent, selectors: [["ExtFieldpanel"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", api: "api", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", baseParams: "baseParams", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", fieldSeparators: "fieldSeparators", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", inputBorders: "inputBorders", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", paramOrder: "paramOrder", paramsAsHash: "paramsAsHash", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tbar: "tbar", timeout: "timeout", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", url: "url", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", exception: "exception", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtFieldpanelComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtFieldpanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtFieldpanelComponent, [{
        type: Component,
        args: [{
                selector: 'ExtFieldpanel',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'api', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'baseParams', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'bubbleDirty', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'paramOrder', 'paramsAsHash', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'timeout', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'exception', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtFieldpanelComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtFieldpanelComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCFieldpanel()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPasswordfieldComponent = /** @class */ (function (_super) {
    __extends(ExtPasswordfieldComponent, _super);
    function ExtPasswordfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'revealable', 'revealed', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPasswordfield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'passwordfield';
        return _this;
    }
    ExtPasswordfieldComponent_1 = ExtPasswordfieldComponent;
    ExtPasswordfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPasswordfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPasswordfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPasswordfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPasswordfieldComponent_1;
    ExtPasswordfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPasswordfieldComponent = ExtPasswordfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPasswordfieldComponent);
ExtPasswordfieldComponent.ɵfac = function ExtPasswordfieldComponent_Factory(t) { return new (t || ExtPasswordfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPasswordfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPasswordfieldComponent, selectors: [["ExtPasswordfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoHideInputMask: "autoHideInputMask", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", clearable: "clearable", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", revealable: "revealable", revealed: "revealed", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPasswordfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPasswordfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPasswordfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPasswordfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'revealable', 'revealed', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPasswordfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPasswordfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPasswordfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPickerfieldComponent = /** @class */ (function (_super) {
    __extends(ExtPickerfieldComponent, _super);
    function ExtPickerfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPickerfield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'pickerfield';
        return _this;
    }
    ExtPickerfieldComponent_1 = ExtPickerfieldComponent;
    ExtPickerfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPickerfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPickerfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPickerfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPickerfieldComponent_1;
    ExtPickerfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPickerfieldComponent = ExtPickerfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPickerfieldComponent);
ExtPickerfieldComponent.ɵfac = function ExtPickerfieldComponent_Factory(t) { return new (t || ExtPickerfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPickerfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPickerfieldComponent, selectors: [["ExtPickerfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alignTarget: "alignTarget", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoHideInputMask: "autoHideInputMask", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", clearable: "clearable", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", edgePicker: "edgePicker", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", floatedPicker: "floatedPicker", floatedPickerAlign: "floatedPickerAlign", focusCls: "focusCls", focusTrap: "focusTrap", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideTrigger: "hideTrigger", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", matchFieldWidth: "matchFieldWidth", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", picker: "picker", pickerSlotAlign: "pickerSlotAlign", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", collapse: "collapse", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPickerfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPickerfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPickerfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPickerfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPickerfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPickerfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPickerfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtRadioComponent = /** @class */ (function (_super) {
    __extends(ExtRadioComponent, _super);
    function ExtRadioComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'boxLabel', 'boxLabelAlign', 'bubbleDirty', 'centered', 'checked', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMaskTap', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCRadio()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'check', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'uncheck', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'radio';
        return _this;
    }
    ExtRadioComponent_1 = ExtRadioComponent;
    ExtRadioComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtRadioComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtRadioComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtRadioComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtRadioComponent_1;
    ExtRadioComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtRadioComponent = ExtRadioComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtRadioComponent);
ExtRadioComponent.ɵfac = function ExtRadioComponent_Factory(t) { return new (t || ExtRadioComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtRadioComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtRadioComponent, selectors: [["ExtRadio"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", boxLabel: "boxLabel", boxLabelAlign: "boxLabelAlign", bubbleDirty: "bubbleDirty", centered: "centered", checked: "checked", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMaskTap: "labelMaskTap", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", check: "check", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", uncheck: "uncheck", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtRadioComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtRadioComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtRadioComponent, [{
        type: Component,
        args: [{
                selector: 'ExtRadio',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'boxLabel', 'boxLabelAlign', 'bubbleDirty', 'centered', 'checked', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMaskTap', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'check', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'uncheck', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtRadioComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtRadioComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCRadio()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtRadiofieldComponent = /** @class */ (function (_super) {
    __extends(ExtRadiofieldComponent, _super);
    function ExtRadiofieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'boxLabel', 'boxLabelAlign', 'bubbleDirty', 'centered', 'checked', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMaskTap', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCRadiofield()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'check', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'uncheck', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'radiofield';
        return _this;
    }
    ExtRadiofieldComponent_1 = ExtRadiofieldComponent;
    ExtRadiofieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtRadiofieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtRadiofieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtRadiofieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtRadiofieldComponent_1;
    ExtRadiofieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtRadiofieldComponent = ExtRadiofieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtRadiofieldComponent);
ExtRadiofieldComponent.ɵfac = function ExtRadiofieldComponent_Factory(t) { return new (t || ExtRadiofieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtRadiofieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtRadiofieldComponent, selectors: [["ExtRadiofield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", boxLabel: "boxLabel", boxLabelAlign: "boxLabelAlign", bubbleDirty: "bubbleDirty", centered: "centered", checked: "checked", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMaskTap: "labelMaskTap", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", check: "check", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", uncheck: "uncheck", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtRadiofieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtRadiofieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtRadiofieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtRadiofield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'boxLabel', 'boxLabelAlign', 'bubbleDirty', 'centered', 'checked', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMaskTap', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'check', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'uncheck', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtRadiofieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtRadiofieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCRadiofield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtRadiogroupComponent = /** @class */ (function (_super) {
    __extends(ExtRadiogroupComponent, _super);
    function ExtRadiogroupComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'autoSize', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'container', 'contentEl', 'controller', 'data', 'dataType', 'defaultFieldValue', 'defaultListenerScope', 'defaults', 'defaultType', 'delegate', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'fieldDefaults', 'fieldsName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'layout', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'simpleValue', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'vertical', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCRadiogroup()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'radiogroup';
        return _this;
    }
    ExtRadiogroupComponent_1 = ExtRadiogroupComponent;
    ExtRadiogroupComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtRadiogroupComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtRadiogroupComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtRadiogroupComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtRadiogroupComponent_1;
    ExtRadiogroupComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtRadiogroupComponent = ExtRadiogroupComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtRadiogroupComponent);
ExtRadiogroupComponent.ɵfac = function ExtRadiogroupComponent_Factory(t) { return new (t || ExtRadiogroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtRadiogroupComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtRadiogroupComponent, selectors: [["ExtRadiogroup"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", container: "container", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultFieldValue: "defaultFieldValue", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", delegate: "delegate", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", fieldDefaults: "fieldDefaults", fieldsName: "fieldsName", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", layout: "layout", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", simpleValue: "simpleValue", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", vertical: "vertical", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtRadiogroupComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtRadiogroupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtRadiogroupComponent, [{
        type: Component,
        args: [{
                selector: 'ExtRadiogroup',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'autoSize', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'container', 'contentEl', 'controller', 'data', 'dataType', 'defaultFieldValue', 'defaultListenerScope', 'defaults', 'defaultType', 'delegate', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'fieldDefaults', 'fieldsName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'layout', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'simpleValue', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'vertical', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtRadiogroupComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtRadiogroupComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCRadiogroup()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSearchfieldComponent = /** @class */ (function (_super) {
    __extends(ExtSearchfieldComponent, _super);
    function ExtSearchfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSearchfield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'searchfield';
        return _this;
    }
    ExtSearchfieldComponent_1 = ExtSearchfieldComponent;
    ExtSearchfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSearchfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSearchfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSearchfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSearchfieldComponent_1;
    ExtSearchfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSearchfieldComponent = ExtSearchfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSearchfieldComponent);
ExtSearchfieldComponent.ɵfac = function ExtSearchfieldComponent_Factory(t) { return new (t || ExtSearchfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSearchfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSearchfieldComponent, selectors: [["ExtSearchfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoHideInputMask: "autoHideInputMask", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", clearable: "clearable", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSearchfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSearchfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSearchfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSearchfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSearchfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSearchfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSearchfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSelectfieldComponent = /** @class */ (function (_super) {
    __extends(ExtSelectfieldComponent, _super);
    function ExtSelectfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoFocus', 'autoFocusLast', 'autoHideInputMask', 'autoLoadOnValue', 'autoSelect', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'chipView', 'clearable', 'cls', 'collapseOnSelect', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'delimiter', 'dirty', 'disabled', 'displayed', 'displayField', 'displayTpl', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'forceSelection', 'fullscreen', 'height', 'hidden', 'hiddenName', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemCls', 'itemId', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multiSelect', 'name', 'nameable', 'options', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'recordCreator', 'recordCreatorScope', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'selection', 'selectOnTab', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'store', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'valueCollection', 'valueField', 'valueNotFoundText', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSelectfield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'selectfield';
        return _this;
    }
    ExtSelectfieldComponent_1 = ExtSelectfieldComponent;
    ExtSelectfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSelectfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSelectfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSelectfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSelectfieldComponent_1;
    ExtSelectfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSelectfieldComponent = ExtSelectfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSelectfieldComponent);
ExtSelectfieldComponent.ɵfac = function ExtSelectfieldComponent_Factory(t) { return new (t || ExtSelectfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSelectfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSelectfieldComponent, selectors: [["ExtSelectfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alignTarget: "alignTarget", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoFocus: "autoFocus", autoFocusLast: "autoFocusLast", autoHideInputMask: "autoHideInputMask", autoLoadOnValue: "autoLoadOnValue", autoSelect: "autoSelect", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", chipView: "chipView", clearable: "clearable", cls: "cls", collapseOnSelect: "collapseOnSelect", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", delimiter: "delimiter", dirty: "dirty", disabled: "disabled", displayed: "displayed", displayField: "displayField", displayTpl: "displayTpl", docked: "docked", draggable: "draggable", edgePicker: "edgePicker", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", floatedPicker: "floatedPicker", floatedPickerAlign: "floatedPickerAlign", focusCls: "focusCls", focusTrap: "focusTrap", forceSelection: "forceSelection", fullscreen: "fullscreen", height: "height", hidden: "hidden", hiddenName: "hiddenName", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideTrigger: "hideTrigger", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemCls: "itemCls", itemId: "itemId", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", matchFieldWidth: "matchFieldWidth", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multiSelect: "multiSelect", name: "name", nameable: "nameable", options: "options", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", picker: "picker", pickerSlotAlign: "pickerSlotAlign", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", recordCreator: "recordCreator", recordCreatorScope: "recordCreatorScope", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", selection: "selection", selectOnTab: "selectOnTab", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", valueCollection: "valueCollection", valueField: "valueField", valueNotFoundText: "valueNotFoundText", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", collapse: "collapse", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", select: "select", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSelectfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSelectfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSelectfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSelectfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoFocus', 'autoFocusLast', 'autoHideInputMask', 'autoLoadOnValue', 'autoSelect', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'chipView', 'clearable', 'cls', 'collapseOnSelect', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'delimiter', 'dirty', 'disabled', 'displayed', 'displayField', 'displayTpl', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'forceSelection', 'fullscreen', 'height', 'hidden', 'hiddenName', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemCls', 'itemId', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multiSelect', 'name', 'nameable', 'options', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'recordCreator', 'recordCreatorScope', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'selection', 'selectOnTab', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'store', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'valueCollection', 'valueField', 'valueNotFoundText', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSelectfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSelectfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSelectfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSinglesliderfieldComponent = /** @class */ (function (_super) {
    __extends(ExtSinglesliderfieldComponent, _super);
    function ExtSinglesliderfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'boxLabel', 'boxLabelAlign', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'increment', 'inline', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'liveUpdate', 'margin', 'maxHeight', 'maxValue', 'maxWidth', 'minHeight', 'minValue', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'slider', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSinglesliderfield()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drag', 'dragchange', 'dragend', 'dragstart', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'singlesliderfield';
        return _this;
    }
    ExtSinglesliderfieldComponent_1 = ExtSinglesliderfieldComponent;
    ExtSinglesliderfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSinglesliderfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSinglesliderfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSinglesliderfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSinglesliderfieldComponent_1;
    ExtSinglesliderfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSinglesliderfieldComponent = ExtSinglesliderfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSinglesliderfieldComponent);
ExtSinglesliderfieldComponent.ɵfac = function ExtSinglesliderfieldComponent_Factory(t) { return new (t || ExtSinglesliderfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSinglesliderfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSinglesliderfieldComponent, selectors: [["ExtSinglesliderfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", boxLabel: "boxLabel", boxLabelAlign: "boxLabelAlign", bubbleDirty: "bubbleDirty", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", increment: "increment", inline: "inline", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", liveUpdate: "liveUpdate", margin: "margin", maxHeight: "maxHeight", maxValue: "maxValue", maxWidth: "maxWidth", minHeight: "minHeight", minValue: "minValue", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", slider: "slider", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", values: "values", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", drag: "drag", dragchange: "dragchange", dragend: "dragend", dragstart: "dragstart", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSinglesliderfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSinglesliderfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSinglesliderfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSinglesliderfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'boxLabel', 'boxLabelAlign', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'increment', 'inline', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'liveUpdate', 'margin', 'maxHeight', 'maxValue', 'maxWidth', 'minHeight', 'minValue', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'slider', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drag', 'dragchange', 'dragend', 'dragstart', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSinglesliderfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSinglesliderfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSinglesliderfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSliderfieldComponent = /** @class */ (function (_super) {
    __extends(ExtSliderfieldComponent, _super);
    function ExtSliderfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'boxLabel', 'boxLabelAlign', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'increment', 'inline', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'liveUpdate', 'margin', 'maxHeight', 'maxValue', 'maxWidth', 'minHeight', 'minValue', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'slider', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSliderfield()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drag', 'dragchange', 'dragend', 'dragstart', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'sliderfield';
        return _this;
    }
    ExtSliderfieldComponent_1 = ExtSliderfieldComponent;
    ExtSliderfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSliderfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSliderfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSliderfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSliderfieldComponent_1;
    ExtSliderfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSliderfieldComponent = ExtSliderfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSliderfieldComponent);
ExtSliderfieldComponent.ɵfac = function ExtSliderfieldComponent_Factory(t) { return new (t || ExtSliderfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSliderfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSliderfieldComponent, selectors: [["ExtSliderfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", boxLabel: "boxLabel", boxLabelAlign: "boxLabelAlign", bubbleDirty: "bubbleDirty", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", increment: "increment", inline: "inline", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", liveUpdate: "liveUpdate", margin: "margin", maxHeight: "maxHeight", maxValue: "maxValue", maxWidth: "maxWidth", minHeight: "minHeight", minValue: "minValue", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", slider: "slider", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", values: "values", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", drag: "drag", dragchange: "dragchange", dragend: "dragend", dragstart: "dragstart", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSliderfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSliderfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSliderfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSliderfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'boxLabel', 'boxLabelAlign', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'increment', 'inline', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'liveUpdate', 'margin', 'maxHeight', 'maxValue', 'maxWidth', 'minHeight', 'minValue', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'slider', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drag', 'dragchange', 'dragend', 'dragstart', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSliderfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSliderfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSliderfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSpinnerfieldComponent = /** @class */ (function (_super) {
    __extends(ExtSpinnerfieldComponent, _super);
    function ExtSpinnerfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'accelerateOnTapHold', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'cycle', 'data', 'dataType', 'decimals', 'decimalSeparator', 'decimalsText', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'undefined', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxValue', 'maxValueText', 'maxWidth', 'minHeight', 'minValue', 'minValueText', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stepValue', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'trim', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSpinnerfield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'spin', 'spindown', 'spinup', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'spinnerfield';
        return _this;
    }
    ExtSpinnerfieldComponent_1 = ExtSpinnerfieldComponent;
    ExtSpinnerfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSpinnerfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSpinnerfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSpinnerfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSpinnerfieldComponent_1;
    ExtSpinnerfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSpinnerfieldComponent = ExtSpinnerfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSpinnerfieldComponent);
ExtSpinnerfieldComponent.ɵfac = function ExtSpinnerfieldComponent_Factory(t) { return new (t || ExtSpinnerfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSpinnerfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSpinnerfieldComponent, selectors: [["ExtSpinnerfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", accelerateOnTapHold: "accelerateOnTapHold", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoHideInputMask: "autoHideInputMask", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", clearable: "clearable", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", cycle: "cycle", data: "data", dataType: "dataType", decimals: "decimals", decimalSeparator: "decimalSeparator", decimalsText: "decimalsText", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxLength: "maxLength", maxValue: "maxValue", maxValueText: "maxValueText", maxWidth: "maxWidth", minHeight: "minHeight", minValue: "minValue", minValueText: "minValueText", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stepValue: "stepValue", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", trim: "trim", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", spin: "spin", spindown: "spindown", spinup: "spinup", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSpinnerfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSpinnerfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSpinnerfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSpinnerfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'accelerateOnTapHold', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'cycle', 'data', 'dataType', 'decimals', 'decimalSeparator', 'decimalsText', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'undefined', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxValue', 'maxValueText', 'maxWidth', 'minHeight', 'minValue', 'minValueText', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stepValue', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'trim', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'spin', 'spindown', 'spinup', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSpinnerfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSpinnerfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSpinnerfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTextfieldComponent = /** @class */ (function (_super) {
    __extends(ExtTextfieldComponent, _super);
    function ExtTextfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTextfield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'textfield';
        return _this;
    }
    ExtTextfieldComponent_1 = ExtTextfieldComponent;
    ExtTextfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTextfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTextfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTextfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTextfieldComponent_1;
    ExtTextfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTextfieldComponent = ExtTextfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTextfieldComponent);
ExtTextfieldComponent.ɵfac = function ExtTextfieldComponent_Factory(t) { return new (t || ExtTextfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTextfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTextfieldComponent, selectors: [["ExtTextfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoHideInputMask: "autoHideInputMask", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", clearable: "clearable", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTextfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTextfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTextfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTextfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTextfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTextfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTextfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTextareafieldComponent = /** @class */ (function (_super) {
    __extends(ExtTextareafieldComponent, _super);
    function ExtTextareafieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxRows', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTextareafield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'textareafield';
        return _this;
    }
    ExtTextareafieldComponent_1 = ExtTextareafieldComponent;
    ExtTextareafieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTextareafieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTextareafieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTextareafieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTextareafieldComponent_1;
    ExtTextareafieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTextareafieldComponent = ExtTextareafieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTextareafieldComponent);
ExtTextareafieldComponent.ɵfac = function ExtTextareafieldComponent_Factory(t) { return new (t || ExtTextareafieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTextareafieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTextareafieldComponent, selectors: [["ExtTextareafield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoHideInputMask: "autoHideInputMask", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", clearable: "clearable", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxLength: "maxLength", maxRows: "maxRows", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTextareafieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTextareafieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTextareafieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTextareafield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxRows', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTextareafieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTextareafieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTextareafield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTimefieldComponent = /** @class */ (function (_super) {
    __extends(ExtTimefieldComponent, _super);
    function ExtTimefieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'altFormats', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'format', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTimefield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'timefield';
        return _this;
    }
    ExtTimefieldComponent_1 = ExtTimefieldComponent;
    ExtTimefieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTimefieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTimefieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTimefieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTimefieldComponent_1;
    ExtTimefieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTimefieldComponent = ExtTimefieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTimefieldComponent);
ExtTimefieldComponent.ɵfac = function ExtTimefieldComponent_Factory(t) { return new (t || ExtTimefieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTimefieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTimefieldComponent, selectors: [["ExtTimefield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alignTarget: "alignTarget", altFormats: "altFormats", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoHideInputMask: "autoHideInputMask", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", clearable: "clearable", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", edgePicker: "edgePicker", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", floatedPicker: "floatedPicker", floatedPickerAlign: "floatedPickerAlign", focusCls: "focusCls", focusTrap: "focusTrap", format: "format", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideTrigger: "hideTrigger", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", matchFieldWidth: "matchFieldWidth", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", picker: "picker", pickerSlotAlign: "pickerSlotAlign", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", collapse: "collapse", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTimefieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTimefieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTimefieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTimefield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'altFormats', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'format', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTimefieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTimefieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTimefield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTogglefieldComponent = /** @class */ (function (_super) {
    __extends(ExtTogglefieldComponent, _super);
    function ExtTogglefieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeLabel', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'boxLabel', 'boxLabelAlign', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveLabel', 'increment', 'inline', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'liveUpdate', 'margin', 'maxHeight', 'maxValue', 'maxWidth', 'minHeight', 'minValue', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'slider', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTogglefield()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drag', 'dragchange', 'dragend', 'dragstart', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'togglefield';
        return _this;
    }
    ExtTogglefieldComponent_1 = ExtTogglefieldComponent;
    ExtTogglefieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTogglefieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTogglefieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTogglefieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTogglefieldComponent_1;
    ExtTogglefieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTogglefieldComponent = ExtTogglefieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTogglefieldComponent);
ExtTogglefieldComponent.ɵfac = function ExtTogglefieldComponent_Factory(t) { return new (t || ExtTogglefieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTogglefieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTogglefieldComponent, selectors: [["ExtTogglefield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeLabel: "activeLabel", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", boxLabel: "boxLabel", boxLabelAlign: "boxLabelAlign", bubbleDirty: "bubbleDirty", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveLabel: "inactiveLabel", increment: "increment", inline: "inline", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", liveUpdate: "liveUpdate", margin: "margin", maxHeight: "maxHeight", maxValue: "maxValue", maxWidth: "maxWidth", minHeight: "minHeight", minValue: "minValue", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", slider: "slider", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", values: "values", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", drag: "drag", dragchange: "dragchange", dragend: "dragend", dragstart: "dragstart", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTogglefieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTogglefieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTogglefieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTogglefield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeLabel', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'boxLabel', 'boxLabelAlign', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveLabel', 'increment', 'inline', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'liveUpdate', 'margin', 'maxHeight', 'maxValue', 'maxWidth', 'minHeight', 'minValue', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'slider', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drag', 'dragchange', 'dragend', 'dragstart', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTogglefieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTogglefieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTogglefield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCleartriggerComponent = /** @class */ (function (_super) {
    __extends(ExtCleartriggerComponent, _super);
    function ExtCleartriggerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',], (new EWCCleartrigger()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'cleartrigger';
        return _this;
    }
    ExtCleartriggerComponent_1 = ExtCleartriggerComponent;
    ExtCleartriggerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCleartriggerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCleartriggerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCleartriggerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCleartriggerComponent_1;
    ExtCleartriggerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCleartriggerComponent = ExtCleartriggerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCleartriggerComponent);
ExtCleartriggerComponent.ɵfac = function ExtCleartriggerComponent_Factory(t) { return new (t || ExtCleartriggerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCleartriggerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCleartriggerComponent, selectors: [["ExtCleartrigger"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", border: "border", cls: "cls", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", disabled: "disabled", undefined: "undefined", field: "field", flex: "flex", floated: "floated", focusCls: "focusCls", focusOnTap: "focusOnTap", group: "group", handler: "handler", height: "height", hidden: "hidden", hideMode: "hideMode", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", reference: "reference", relative: "relative", renderTo: "renderTo", repeat: "repeat", ripple: "ripple", scope: "scope", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", side: "side", style: "style", toFrontOnShow: "toFrontOnShow", touchAction: "touchAction", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", viewModel: "viewModel", width: "width", x: "x", y: "y" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCleartriggerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCleartriggerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCleartriggerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCleartrigger',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCleartriggerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCleartriggerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCleartrigger()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtDatetriggerComponent = /** @class */ (function (_super) {
    __extends(ExtDatetriggerComponent, _super);
    function ExtDatetriggerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',], (new EWCDatetrigger()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'datetrigger';
        return _this;
    }
    ExtDatetriggerComponent_1 = ExtDatetriggerComponent;
    ExtDatetriggerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtDatetriggerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtDatetriggerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtDatetriggerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtDatetriggerComponent_1;
    ExtDatetriggerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtDatetriggerComponent = ExtDatetriggerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtDatetriggerComponent);
ExtDatetriggerComponent.ɵfac = function ExtDatetriggerComponent_Factory(t) { return new (t || ExtDatetriggerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtDatetriggerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtDatetriggerComponent, selectors: [["ExtDatetrigger"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", border: "border", cls: "cls", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", disabled: "disabled", undefined: "undefined", field: "field", flex: "flex", floated: "floated", focusCls: "focusCls", focusOnTap: "focusOnTap", group: "group", handler: "handler", height: "height", hidden: "hidden", hideMode: "hideMode", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", reference: "reference", relative: "relative", renderTo: "renderTo", repeat: "repeat", ripple: "ripple", scope: "scope", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", side: "side", style: "style", toFrontOnShow: "toFrontOnShow", touchAction: "touchAction", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", viewModel: "viewModel", width: "width", x: "x", y: "y" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatetriggerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtDatetriggerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtDatetriggerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtDatetrigger',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatetriggerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtDatetriggerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCDatetrigger()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtExpandtriggerComponent = /** @class */ (function (_super) {
    __extends(ExtExpandtriggerComponent, _super);
    function ExtExpandtriggerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',], (new EWCExpandtrigger()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'expandtrigger';
        return _this;
    }
    ExtExpandtriggerComponent_1 = ExtExpandtriggerComponent;
    ExtExpandtriggerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtExpandtriggerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtExpandtriggerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtExpandtriggerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtExpandtriggerComponent_1;
    ExtExpandtriggerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtExpandtriggerComponent = ExtExpandtriggerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtExpandtriggerComponent);
ExtExpandtriggerComponent.ɵfac = function ExtExpandtriggerComponent_Factory(t) { return new (t || ExtExpandtriggerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtExpandtriggerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtExpandtriggerComponent, selectors: [["ExtExpandtrigger"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", border: "border", cls: "cls", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", disabled: "disabled", undefined: "undefined", field: "field", flex: "flex", floated: "floated", focusCls: "focusCls", focusOnTap: "focusOnTap", group: "group", handler: "handler", height: "height", hidden: "hidden", hideMode: "hideMode", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", reference: "reference", relative: "relative", renderTo: "renderTo", repeat: "repeat", ripple: "ripple", scope: "scope", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", side: "side", style: "style", toFrontOnShow: "toFrontOnShow", touchAction: "touchAction", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", viewModel: "viewModel", width: "width", x: "x", y: "y" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtExpandtriggerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtExpandtriggerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtExpandtriggerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtExpandtrigger',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtExpandtriggerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtExpandtriggerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCExpandtrigger()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtMenutriggerComponent = /** @class */ (function (_super) {
    __extends(ExtMenutriggerComponent, _super);
    function ExtMenutriggerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'destroyMenu', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'menu', 'menuAlign', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',], (new EWCMenutrigger()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'menutrigger';
        return _this;
    }
    ExtMenutriggerComponent_1 = ExtMenutriggerComponent;
    ExtMenutriggerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtMenutriggerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtMenutriggerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtMenutriggerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtMenutriggerComponent_1;
    ExtMenutriggerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtMenutriggerComponent = ExtMenutriggerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtMenutriggerComponent);
ExtMenutriggerComponent.ɵfac = function ExtMenutriggerComponent_Factory(t) { return new (t || ExtMenutriggerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtMenutriggerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtMenutriggerComponent, selectors: [["ExtMenutrigger"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", border: "border", cls: "cls", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", destroyMenu: "destroyMenu", disabled: "disabled", undefined: "undefined", field: "field", flex: "flex", floated: "floated", focusCls: "focusCls", focusOnTap: "focusOnTap", group: "group", handler: "handler", height: "height", hidden: "hidden", hideMode: "hideMode", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", menu: "menu", menuAlign: "menuAlign", name: "name", nameable: "nameable", publishes: "publishes", reference: "reference", relative: "relative", renderTo: "renderTo", repeat: "repeat", ripple: "ripple", scope: "scope", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", side: "side", style: "style", toFrontOnShow: "toFrontOnShow", touchAction: "touchAction", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", viewModel: "viewModel", width: "width", x: "x", y: "y" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtMenutriggerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtMenutriggerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtMenutriggerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtMenutrigger',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'destroyMenu', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'menu', 'menuAlign', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtMenutriggerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtMenutriggerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCMenutrigger()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtRevealtriggerComponent = /** @class */ (function (_super) {
    __extends(ExtRevealtriggerComponent, _super);
    function ExtRevealtriggerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',], (new EWCRevealtrigger()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'revealtrigger';
        return _this;
    }
    ExtRevealtriggerComponent_1 = ExtRevealtriggerComponent;
    ExtRevealtriggerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtRevealtriggerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtRevealtriggerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtRevealtriggerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtRevealtriggerComponent_1;
    ExtRevealtriggerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtRevealtriggerComponent = ExtRevealtriggerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtRevealtriggerComponent);
ExtRevealtriggerComponent.ɵfac = function ExtRevealtriggerComponent_Factory(t) { return new (t || ExtRevealtriggerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtRevealtriggerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtRevealtriggerComponent, selectors: [["ExtRevealtrigger"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", border: "border", cls: "cls", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", disabled: "disabled", undefined: "undefined", field: "field", flex: "flex", floated: "floated", focusCls: "focusCls", focusOnTap: "focusOnTap", group: "group", handler: "handler", height: "height", hidden: "hidden", hideMode: "hideMode", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", reference: "reference", relative: "relative", renderTo: "renderTo", repeat: "repeat", ripple: "ripple", scope: "scope", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", side: "side", style: "style", toFrontOnShow: "toFrontOnShow", touchAction: "touchAction", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", viewModel: "viewModel", width: "width", x: "x", y: "y" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtRevealtriggerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtRevealtriggerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtRevealtriggerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtRevealtrigger',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtRevealtriggerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtRevealtriggerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCRevealtrigger()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSpindowntriggerComponent = /** @class */ (function (_super) {
    __extends(ExtSpindowntriggerComponent, _super);
    function ExtSpindowntriggerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',], (new EWCSpindowntrigger()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'spindowntrigger';
        return _this;
    }
    ExtSpindowntriggerComponent_1 = ExtSpindowntriggerComponent;
    ExtSpindowntriggerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSpindowntriggerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSpindowntriggerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSpindowntriggerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSpindowntriggerComponent_1;
    ExtSpindowntriggerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSpindowntriggerComponent = ExtSpindowntriggerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSpindowntriggerComponent);
ExtSpindowntriggerComponent.ɵfac = function ExtSpindowntriggerComponent_Factory(t) { return new (t || ExtSpindowntriggerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSpindowntriggerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSpindowntriggerComponent, selectors: [["ExtSpindowntrigger"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", border: "border", cls: "cls", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", disabled: "disabled", undefined: "undefined", field: "field", flex: "flex", floated: "floated", focusCls: "focusCls", focusOnTap: "focusOnTap", group: "group", handler: "handler", height: "height", hidden: "hidden", hideMode: "hideMode", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", reference: "reference", relative: "relative", renderTo: "renderTo", repeat: "repeat", ripple: "ripple", scope: "scope", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", side: "side", style: "style", toFrontOnShow: "toFrontOnShow", touchAction: "touchAction", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", viewModel: "viewModel", width: "width", x: "x", y: "y" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSpindowntriggerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSpindowntriggerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSpindowntriggerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSpindowntrigger',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSpindowntriggerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSpindowntriggerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSpindowntrigger()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSpinuptriggerComponent = /** @class */ (function (_super) {
    __extends(ExtSpinuptriggerComponent, _super);
    function ExtSpinuptriggerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',], (new EWCSpinuptrigger()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'spinuptrigger';
        return _this;
    }
    ExtSpinuptriggerComponent_1 = ExtSpinuptriggerComponent;
    ExtSpinuptriggerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSpinuptriggerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSpinuptriggerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSpinuptriggerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSpinuptriggerComponent_1;
    ExtSpinuptriggerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSpinuptriggerComponent = ExtSpinuptriggerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSpinuptriggerComponent);
ExtSpinuptriggerComponent.ɵfac = function ExtSpinuptriggerComponent_Factory(t) { return new (t || ExtSpinuptriggerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSpinuptriggerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSpinuptriggerComponent, selectors: [["ExtSpinuptrigger"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", border: "border", cls: "cls", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", disabled: "disabled", undefined: "undefined", field: "field", flex: "flex", floated: "floated", focusCls: "focusCls", focusOnTap: "focusOnTap", group: "group", handler: "handler", height: "height", hidden: "hidden", hideMode: "hideMode", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", reference: "reference", relative: "relative", renderTo: "renderTo", repeat: "repeat", ripple: "ripple", scope: "scope", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", side: "side", style: "style", toFrontOnShow: "toFrontOnShow", touchAction: "touchAction", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", viewModel: "viewModel", width: "width", x: "x", y: "y" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSpinuptriggerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSpinuptriggerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSpinuptriggerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSpinuptrigger',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSpinuptriggerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSpinuptriggerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSpinuptrigger()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTimetriggerComponent = /** @class */ (function (_super) {
    __extends(ExtTimetriggerComponent, _super);
    function ExtTimetriggerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',], (new EWCTimetrigger()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'timetrigger';
        return _this;
    }
    ExtTimetriggerComponent_1 = ExtTimetriggerComponent;
    ExtTimetriggerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTimetriggerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTimetriggerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTimetriggerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTimetriggerComponent_1;
    ExtTimetriggerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTimetriggerComponent = ExtTimetriggerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTimetriggerComponent);
ExtTimetriggerComponent.ɵfac = function ExtTimetriggerComponent_Factory(t) { return new (t || ExtTimetriggerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTimetriggerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTimetriggerComponent, selectors: [["ExtTimetrigger"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", border: "border", cls: "cls", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", disabled: "disabled", undefined: "undefined", field: "field", flex: "flex", floated: "floated", focusCls: "focusCls", focusOnTap: "focusOnTap", group: "group", handler: "handler", height: "height", hidden: "hidden", hideMode: "hideMode", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", reference: "reference", relative: "relative", renderTo: "renderTo", repeat: "repeat", ripple: "ripple", scope: "scope", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", side: "side", style: "style", toFrontOnShow: "toFrontOnShow", touchAction: "touchAction", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", viewModel: "viewModel", width: "width", x: "x", y: "y" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTimetriggerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTimetriggerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTimetriggerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTimetrigger',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTimetriggerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTimetriggerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTimetrigger()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTriggerComponent = /** @class */ (function (_super) {
    __extends(ExtTriggerComponent, _super);
    function ExtTriggerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',], (new EWCTrigger()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'trigger';
        return _this;
    }
    ExtTriggerComponent_1 = ExtTriggerComponent;
    ExtTriggerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTriggerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTriggerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTriggerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTriggerComponent_1;
    ExtTriggerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTriggerComponent = ExtTriggerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTriggerComponent);
ExtTriggerComponent.ɵfac = function ExtTriggerComponent_Factory(t) { return new (t || ExtTriggerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTriggerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTriggerComponent, selectors: [["ExtTrigger"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", border: "border", cls: "cls", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", disabled: "disabled", undefined: "undefined", field: "field", flex: "flex", floated: "floated", focusCls: "focusCls", focusOnTap: "focusOnTap", group: "group", handler: "handler", height: "height", hidden: "hidden", hideMode: "hideMode", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", reference: "reference", relative: "relative", renderTo: "renderTo", repeat: "repeat", ripple: "ripple", scope: "scope", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", side: "side", style: "style", toFrontOnShow: "toFrontOnShow", touchAction: "touchAction", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", viewModel: "viewModel", width: "width", x: "x", y: "y" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTriggerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTriggerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTriggerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTrigger',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'field', 'flex', 'floated', 'focusCls', 'focusOnTap', 'group', 'handler', 'height', 'hidden', 'hideMode', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'repeat', 'ripple', 'scope', 'session', 'shadow', 'shareableName', 'shim', 'side', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTriggerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTriggerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTrigger()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtUrlfieldComponent = /** @class */ (function (_super) {
    __extends(ExtUrlfieldComponent, _super);
    function ExtUrlfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCUrlfield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'urlfield';
        return _this;
    }
    ExtUrlfieldComponent_1 = ExtUrlfieldComponent;
    ExtUrlfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtUrlfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtUrlfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtUrlfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtUrlfieldComponent_1;
    ExtUrlfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtUrlfieldComponent = ExtUrlfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtUrlfieldComponent);
ExtUrlfieldComponent.ɵfac = function ExtUrlfieldComponent_Factory(t) { return new (t || ExtUrlfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtUrlfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtUrlfieldComponent, selectors: [["ExtUrlfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoHideInputMask: "autoHideInputMask", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", clearable: "clearable", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", placeholder: "placeholder", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtUrlfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtUrlfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtUrlfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtUrlfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'placeholder', 'undefined', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtUrlfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtUrlfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCUrlfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtFieldsetComponent = /** @class */ (function (_super) {
    __extends(ExtFieldsetComponent, _super);
    function ExtFieldsetComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'fieldDefaults', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'instructions', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCFieldset()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'fieldset';
        return _this;
    }
    ExtFieldsetComponent_1 = ExtFieldsetComponent;
    ExtFieldsetComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtFieldsetComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtFieldsetComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtFieldsetComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtFieldsetComponent_1;
    ExtFieldsetComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtFieldsetComponent = ExtFieldsetComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtFieldsetComponent);
ExtFieldsetComponent.ɵfac = function ExtFieldsetComponent_Factory(t) { return new (t || ExtFieldsetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtFieldsetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtFieldsetComponent, selectors: [["ExtFieldset"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", fieldDefaults: "fieldDefaults", fieldSeparators: "fieldSeparators", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", inputBorders: "inputBorders", instanceCls: "instanceCls", instructions: "instructions", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", title: "title", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtFieldsetComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtFieldsetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtFieldsetComponent, [{
        type: Component,
        args: [{
                selector: 'ExtFieldset',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'fieldDefaults', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'instructions', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtFieldsetComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtFieldsetComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCFieldset()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtFormpanelComponent = /** @class */ (function (_super) {
    __extends(ExtFormpanelComponent, _super);
    function ExtFormpanelComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'api', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'baseParams', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'bubbleDirty', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'enableSubmissionForm', 'enctype', 'undefined', 'undefined', 'undefined', 'fieldDefaults', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'itemId', 'items', 'jsonSubmit', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'method', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multipartDetection', 'name', 'nameable', 'nameHolder', 'padding', 'paramOrder', 'paramsAsHash', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'standardSubmit', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submitOnAction', 'tabIndex', 'tbar', 'timeout', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackResetOnLoad', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCFormpanel()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforesubmit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'exception', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'submit', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'formpanel';
        return _this;
    }
    ExtFormpanelComponent_1 = ExtFormpanelComponent;
    ExtFormpanelComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtFormpanelComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtFormpanelComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtFormpanelComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtFormpanelComponent_1;
    ExtFormpanelComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtFormpanelComponent = ExtFormpanelComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtFormpanelComponent);
ExtFormpanelComponent.ɵfac = function ExtFormpanelComponent_Factory(t) { return new (t || ExtFormpanelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtFormpanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtFormpanelComponent, selectors: [["ExtFormpanel"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", api: "api", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", baseParams: "baseParams", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", enableSubmissionForm: "enableSubmissionForm", enctype: "enctype", undefined: "undefined", fieldDefaults: "fieldDefaults", fieldSeparators: "fieldSeparators", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", inputBorders: "inputBorders", instanceCls: "instanceCls", itemId: "itemId", items: "items", jsonSubmit: "jsonSubmit", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", method: "method", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multipartDetection: "multipartDetection", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", paramOrder: "paramOrder", paramsAsHash: "paramsAsHash", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", standardSubmit: "standardSubmit", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", submitOnAction: "submitOnAction", tabIndex: "tabIndex", tbar: "tbar", timeout: "timeout", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", trackResetOnLoad: "trackResetOnLoad", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", url: "url", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforesubmit: "beforesubmit", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", exception: "exception", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", submit: "submit", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtFormpanelComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtFormpanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtFormpanelComponent, [{
        type: Component,
        args: [{
                selector: 'ExtFormpanel',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'api', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'baseParams', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'bubbleDirty', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'enableSubmissionForm', 'enctype', 'undefined', 'undefined', 'undefined', 'fieldDefaults', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'itemId', 'items', 'jsonSubmit', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'method', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multipartDetection', 'name', 'nameable', 'nameHolder', 'padding', 'paramOrder', 'paramsAsHash', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'standardSubmit', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submitOnAction', 'tabIndex', 'tbar', 'timeout', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackResetOnLoad', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforesubmit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'exception', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'submit', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtFormpanelComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtFormpanelComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCFormpanel()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtFroalaeditorComponent = /** @class */ (function (_super) {
    __extends(ExtFroalaeditorComponent, _super);
    function ExtFroalaeditorComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activationKey', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultEditor', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'editor', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCFroalaeditor()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'ready', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'froalaeditor';
        return _this;
    }
    ExtFroalaeditorComponent_1 = ExtFroalaeditorComponent;
    ExtFroalaeditorComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtFroalaeditorComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtFroalaeditorComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtFroalaeditorComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtFroalaeditorComponent_1;
    ExtFroalaeditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtFroalaeditorComponent = ExtFroalaeditorComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtFroalaeditorComponent);
ExtFroalaeditorComponent.ɵfac = function ExtFroalaeditorComponent_Factory(t) { return new (t || ExtFroalaeditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtFroalaeditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtFroalaeditorComponent, selectors: [["ExtFroalaeditor"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activationKey: "activationKey", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultEditor: "defaultEditor", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editor: "editor", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtFroalaeditorComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtFroalaeditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtFroalaeditorComponent, [{
        type: Component,
        args: [{
                selector: 'ExtFroalaeditor',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activationKey', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultEditor', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'editor', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'ready', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtFroalaeditorComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtFroalaeditorComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCFroalaeditor()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtFroalaeditorfieldComponent = /** @class */ (function (_super) {
    __extends(ExtFroalaeditorfieldComponent, _super);
    function ExtFroalaeditorfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activationKey', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'autoSize', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'container', 'contentEl', 'controller', 'data', 'dataType', 'defaultEditor', 'defaultListenerScope', 'defaults', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editor', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'fieldDefaults', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'layout', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCFroalaeditorfield()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'ready', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'froalaeditorfield';
        return _this;
    }
    ExtFroalaeditorfieldComponent_1 = ExtFroalaeditorfieldComponent;
    ExtFroalaeditorfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtFroalaeditorfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtFroalaeditorfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtFroalaeditorfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtFroalaeditorfieldComponent_1;
    ExtFroalaeditorfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtFroalaeditorfieldComponent = ExtFroalaeditorfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtFroalaeditorfieldComponent);
ExtFroalaeditorfieldComponent.ɵfac = function ExtFroalaeditorfieldComponent_Factory(t) { return new (t || ExtFroalaeditorfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtFroalaeditorfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtFroalaeditorfieldComponent, selectors: [["ExtFroalaeditorfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activationKey: "activationKey", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoFitErrors: "autoFitErrors", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", container: "container", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultEditor: "defaultEditor", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editor: "editor", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", fieldDefaults: "fieldDefaults", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inline: "inline", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", layout: "layout", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", click: "click", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtFroalaeditorfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtFroalaeditorfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtFroalaeditorfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtFroalaeditorfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activationKey', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoFitErrors', 'autoSize', 'axisLock', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'cls', 'constrainAlign', 'container', 'contentEl', 'controller', 'data', 'dataType', 'defaultEditor', 'defaultListenerScope', 'defaults', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'editor', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'fieldDefaults', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inline', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'layout', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'click', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'ready', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtFroalaeditorfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtFroalaeditorfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCFroalaeditorfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtGridcellbaseComponent = /** @class */ (function (_super) {
    __extends(ExtGridcellbaseComponent, _super);
    function ExtGridcellbaseComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'undefined', 'flex', 'floated', 'focusCls', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y',], (new EWCGridcellbase()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'gridcellbase';
        return _this;
    }
    ExtGridcellbaseComponent_1 = ExtGridcellbaseComponent;
    ExtGridcellbaseComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtGridcellbaseComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtGridcellbaseComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtGridcellbaseComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtGridcellbaseComponent_1;
    ExtGridcellbaseComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtGridcellbaseComponent = ExtGridcellbaseComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtGridcellbaseComponent);
ExtGridcellbaseComponent.ɵfac = function ExtGridcellbaseComponent_Factory(t) { return new (t || ExtGridcellbaseComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtGridcellbaseComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtGridcellbaseComponent, selectors: [["ExtGridcellbase"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", bodyCls: "bodyCls", bodyStyle: "bodyStyle", border: "border", cellCls: "cellCls", cls: "cls", column: "column", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", height: "height", hidden: "hidden", hideMode: "hideMode", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", ripple: "ripple", selectable: "selectable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", style: "style", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", touchAction: "touchAction", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", value: "value", viewModel: "viewModel", width: "width", x: "x", y: "y" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridcellbaseComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtGridcellbaseComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtGridcellbaseComponent, [{
        type: Component,
        args: [{
                selector: 'ExtGridcellbase',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'undefined', 'flex', 'floated', 'focusCls', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridcellbaseComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtGridcellbaseComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCGridcellbase()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtBooleancellComponent = /** @class */ (function (_super) {
    __extends(ExtBooleancellComponent, _super);
    function ExtBooleancellComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'falseText', 'flex', 'floated', 'focusCls', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'trueText', 'twoWayBindable', 'ui', 'undefinedText', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',], (new EWCBooleancell()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'booleancell';
        return _this;
    }
    ExtBooleancellComponent_1 = ExtBooleancellComponent;
    ExtBooleancellComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtBooleancellComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtBooleancellComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtBooleancellComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtBooleancellComponent_1;
    ExtBooleancellComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtBooleancellComponent = ExtBooleancellComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtBooleancellComponent);
ExtBooleancellComponent.ɵfac = function ExtBooleancellComponent_Factory(t) { return new (t || ExtBooleancellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtBooleancellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtBooleancellComponent, selectors: [["ExtBooleancell"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", bodyCls: "bodyCls", bodyStyle: "bodyStyle", border: "border", cellCls: "cellCls", cls: "cls", column: "column", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", encodeHtml: "encodeHtml", undefined: "undefined", falseText: "falseText", flex: "flex", floated: "floated", focusCls: "focusCls", height: "height", hidden: "hidden", hideMode: "hideMode", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", rawValue: "rawValue", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", ripple: "ripple", selectable: "selectable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", style: "style", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", touchAction: "touchAction", translatable: "translatable", trueText: "trueText", twoWayBindable: "twoWayBindable", ui: "ui", undefinedText: "undefinedText", userCls: "userCls", value: "value", viewModel: "viewModel", width: "width", x: "x", y: "y", zeroValue: "zeroValue" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtBooleancellComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtBooleancellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtBooleancellComponent, [{
        type: Component,
        args: [{
                selector: 'ExtBooleancell',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'falseText', 'flex', 'floated', 'focusCls', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'trueText', 'twoWayBindable', 'ui', 'undefinedText', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtBooleancellComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtBooleancellComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCBooleancell()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtGridcellComponent = /** @class */ (function (_super) {
    __extends(ExtGridcellComponent, _super);
    function ExtGridcellComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'formatter', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderer', 'renderTo', 'ripple', 'scope', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'tpl', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',], (new EWCGridcell()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'gridcell';
        return _this;
    }
    ExtGridcellComponent_1 = ExtGridcellComponent;
    ExtGridcellComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtGridcellComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtGridcellComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtGridcellComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtGridcellComponent_1;
    ExtGridcellComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtGridcellComponent = ExtGridcellComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtGridcellComponent);
ExtGridcellComponent.ɵfac = function ExtGridcellComponent_Factory(t) { return new (t || ExtGridcellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtGridcellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtGridcellComponent, selectors: [["ExtGridcell"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", bodyCls: "bodyCls", bodyStyle: "bodyStyle", border: "border", cellCls: "cellCls", cls: "cls", column: "column", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", encodeHtml: "encodeHtml", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", formatter: "formatter", height: "height", hidden: "hidden", hideMode: "hideMode", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", rawValue: "rawValue", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", ripple: "ripple", scope: "scope", selectable: "selectable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", style: "style", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", touchAction: "touchAction", tpl: "tpl", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", value: "value", viewModel: "viewModel", width: "width", x: "x", y: "y", zeroValue: "zeroValue" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridcellComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtGridcellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtGridcellComponent, [{
        type: Component,
        args: [{
                selector: 'ExtGridcell',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'formatter', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderer', 'renderTo', 'ripple', 'scope', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'tpl', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridcellComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtGridcellComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCGridcell()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCheckcellComponent = /** @class */ (function (_super) {
    __extends(ExtCheckcellComponent, _super);
    function ExtCheckcellComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'undefined', 'flex', 'floated', 'focusCls', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y',], (new EWCCheckcell()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'checkcell';
        return _this;
    }
    ExtCheckcellComponent_1 = ExtCheckcellComponent;
    ExtCheckcellComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCheckcellComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCheckcellComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCheckcellComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCheckcellComponent_1;
    ExtCheckcellComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCheckcellComponent = ExtCheckcellComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCheckcellComponent);
ExtCheckcellComponent.ɵfac = function ExtCheckcellComponent_Factory(t) { return new (t || ExtCheckcellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCheckcellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCheckcellComponent, selectors: [["ExtCheckcell"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", bodyCls: "bodyCls", bodyStyle: "bodyStyle", border: "border", cellCls: "cellCls", cls: "cls", column: "column", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", height: "height", hidden: "hidden", hideMode: "hideMode", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", ripple: "ripple", selectable: "selectable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", style: "style", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", touchAction: "touchAction", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", value: "value", viewModel: "viewModel", width: "width", x: "x", y: "y" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCheckcellComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCheckcellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCheckcellComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCheckcell',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'undefined', 'flex', 'floated', 'focusCls', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCheckcellComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCheckcellComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCheckcell()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtDatecellComponent = /** @class */ (function (_super) {
    __extends(ExtDatecellComponent, _super);
    function ExtDatecellComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'format', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',], (new EWCDatecell()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'datecell';
        return _this;
    }
    ExtDatecellComponent_1 = ExtDatecellComponent;
    ExtDatecellComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtDatecellComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtDatecellComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtDatecellComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtDatecellComponent_1;
    ExtDatecellComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtDatecellComponent = ExtDatecellComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtDatecellComponent);
ExtDatecellComponent.ɵfac = function ExtDatecellComponent_Factory(t) { return new (t || ExtDatecellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtDatecellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtDatecellComponent, selectors: [["ExtDatecell"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", bodyCls: "bodyCls", bodyStyle: "bodyStyle", border: "border", cellCls: "cellCls", cls: "cls", column: "column", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", encodeHtml: "encodeHtml", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", format: "format", height: "height", hidden: "hidden", hideMode: "hideMode", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", rawValue: "rawValue", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", ripple: "ripple", selectable: "selectable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", style: "style", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", touchAction: "touchAction", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", value: "value", viewModel: "viewModel", width: "width", x: "x", y: "y", zeroValue: "zeroValue" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatecellComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtDatecellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtDatecellComponent, [{
        type: Component,
        args: [{
                selector: 'ExtDatecell',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'format', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatecellComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtDatecellComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCDatecell()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtNumbercellComponent = /** @class */ (function (_super) {
    __extends(ExtNumbercellComponent, _super);
    function ExtNumbercellComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'format', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',], (new EWCNumbercell()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'numbercell';
        return _this;
    }
    ExtNumbercellComponent_1 = ExtNumbercellComponent;
    ExtNumbercellComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtNumbercellComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtNumbercellComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtNumbercellComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtNumbercellComponent_1;
    ExtNumbercellComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtNumbercellComponent = ExtNumbercellComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtNumbercellComponent);
ExtNumbercellComponent.ɵfac = function ExtNumbercellComponent_Factory(t) { return new (t || ExtNumbercellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtNumbercellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtNumbercellComponent, selectors: [["ExtNumbercell"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", bodyCls: "bodyCls", bodyStyle: "bodyStyle", border: "border", cellCls: "cellCls", cls: "cls", column: "column", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", encodeHtml: "encodeHtml", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", format: "format", height: "height", hidden: "hidden", hideMode: "hideMode", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", rawValue: "rawValue", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", ripple: "ripple", selectable: "selectable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", style: "style", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", touchAction: "touchAction", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", value: "value", viewModel: "viewModel", width: "width", x: "x", y: "y", zeroValue: "zeroValue" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtNumbercellComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtNumbercellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtNumbercellComponent, [{
        type: Component,
        args: [{
                selector: 'ExtNumbercell',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'format', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtNumbercellComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtNumbercellComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCNumbercell()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtRownumberercellComponent = /** @class */ (function (_super) {
    __extends(ExtRownumberercellComponent, _super);
    function ExtRownumberercellComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'format', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',], (new EWCRownumberercell()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'rownumberercell';
        return _this;
    }
    ExtRownumberercellComponent_1 = ExtRownumberercellComponent;
    ExtRownumberercellComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtRownumberercellComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtRownumberercellComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtRownumberercellComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtRownumberercellComponent_1;
    ExtRownumberercellComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtRownumberercellComponent = ExtRownumberercellComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtRownumberercellComponent);
ExtRownumberercellComponent.ɵfac = function ExtRownumberercellComponent_Factory(t) { return new (t || ExtRownumberercellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtRownumberercellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtRownumberercellComponent, selectors: [["ExtRownumberercell"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", bodyCls: "bodyCls", bodyStyle: "bodyStyle", border: "border", cellCls: "cellCls", cls: "cls", column: "column", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", encodeHtml: "encodeHtml", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", format: "format", height: "height", hidden: "hidden", hideMode: "hideMode", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", rawValue: "rawValue", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", ripple: "ripple", selectable: "selectable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", style: "style", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", touchAction: "touchAction", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", value: "value", viewModel: "viewModel", width: "width", x: "x", y: "y", zeroValue: "zeroValue" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtRownumberercellComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtRownumberercellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtRownumberercellComponent, [{
        type: Component,
        args: [{
                selector: 'ExtRownumberercell',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'format', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtRownumberercellComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtRownumberercellComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCRownumberercell()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTextcellComponent = /** @class */ (function (_super) {
    __extends(ExtTextcellComponent, _super);
    function ExtTextcellComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',], (new EWCTextcell()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'textcell';
        return _this;
    }
    ExtTextcellComponent_1 = ExtTextcellComponent;
    ExtTextcellComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTextcellComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTextcellComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTextcellComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTextcellComponent_1;
    ExtTextcellComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTextcellComponent = ExtTextcellComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTextcellComponent);
ExtTextcellComponent.ɵfac = function ExtTextcellComponent_Factory(t) { return new (t || ExtTextcellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTextcellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTextcellComponent, selectors: [["ExtTextcell"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", bodyCls: "bodyCls", bodyStyle: "bodyStyle", border: "border", cellCls: "cellCls", cls: "cls", column: "column", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", encodeHtml: "encodeHtml", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", height: "height", hidden: "hidden", hideMode: "hideMode", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", rawValue: "rawValue", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", ripple: "ripple", selectable: "selectable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", style: "style", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", touchAction: "touchAction", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", value: "value", viewModel: "viewModel", width: "width", x: "x", y: "y", zeroValue: "zeroValue" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTextcellComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTextcellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTextcellComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTextcell',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTextcellComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTextcellComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTextcell()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTreecellComponent = /** @class */ (function (_super) {
    __extends(ExtTreecellComponent, _super);
    function ExtTreecellComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCheckChildren', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'checkable', 'checkableField', 'checkedField', 'checkOnTriTap', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'enableTri', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'formatter', 'height', 'hidden', 'hideMode', 'iconCls', 'iconClsProperty', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderer', 'renderTo', 'ripple', 'scope', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'tpl', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',], (new EWCTreecell()).events, ['ready', 'beforecheckchange', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'checkchange', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'treecell';
        return _this;
    }
    ExtTreecellComponent_1 = ExtTreecellComponent;
    ExtTreecellComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTreecellComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTreecellComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTreecellComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTreecellComponent_1;
    ExtTreecellComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTreecellComponent = ExtTreecellComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTreecellComponent);
ExtTreecellComponent.ɵfac = function ExtTreecellComponent_Factory(t) { return new (t || ExtTreecellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTreecellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTreecellComponent, selectors: [["ExtTreecell"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCheckChildren: "autoCheckChildren", bind: "bind", bodyCls: "bodyCls", bodyStyle: "bodyStyle", border: "border", cellCls: "cellCls", checkable: "checkable", checkableField: "checkableField", checkedField: "checkedField", checkOnTriTap: "checkOnTriTap", cls: "cls", column: "column", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", enableTri: "enableTri", encodeHtml: "encodeHtml", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", formatter: "formatter", height: "height", hidden: "hidden", hideMode: "hideMode", iconCls: "iconCls", iconClsProperty: "iconClsProperty", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", rawValue: "rawValue", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", ripple: "ripple", scope: "scope", selectable: "selectable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", style: "style", text: "text", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", touchAction: "touchAction", tpl: "tpl", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", value: "value", viewModel: "viewModel", width: "width", x: "x", y: "y", zeroValue: "zeroValue" }, outputs: { ready: "ready", beforecheckchange: "beforecheckchange", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", checkchange: "checkchange", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTreecellComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTreecellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTreecellComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTreecell',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCheckChildren', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'checkable', 'checkableField', 'checkedField', 'checkOnTriTap', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'enableTri', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'formatter', 'height', 'hidden', 'hideMode', 'iconCls', 'iconClsProperty', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderer', 'renderTo', 'ripple', 'scope', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'tpl', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',],
                outputs: ['ready', 'beforecheckchange', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'checkchange', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTreecellComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTreecellComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTreecell()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtWidgetcellComponent = /** @class */ (function (_super) {
    __extends(ExtWidgetcellComponent, _super);
    function ExtWidgetcellComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'undefined', 'flex', 'floated', 'focusCls', 'forceWidth', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'widget', 'width', 'x', 'y',], (new EWCWidgetcell()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'widgetcell';
        return _this;
    }
    ExtWidgetcellComponent_1 = ExtWidgetcellComponent;
    ExtWidgetcellComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtWidgetcellComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtWidgetcellComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtWidgetcellComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtWidgetcellComponent_1;
    ExtWidgetcellComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtWidgetcellComponent = ExtWidgetcellComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtWidgetcellComponent);
ExtWidgetcellComponent.ɵfac = function ExtWidgetcellComponent_Factory(t) { return new (t || ExtWidgetcellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtWidgetcellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtWidgetcellComponent, selectors: [["ExtWidgetcell"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", bodyCls: "bodyCls", bodyStyle: "bodyStyle", border: "border", cellCls: "cellCls", cls: "cls", column: "column", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", forceWidth: "forceWidth", height: "height", hidden: "hidden", hideMode: "hideMode", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", ripple: "ripple", selectable: "selectable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", style: "style", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", touchAction: "touchAction", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", value: "value", viewModel: "viewModel", widget: "widget", width: "width", x: "x", y: "y" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtWidgetcellComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtWidgetcellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtWidgetcellComponent, [{
        type: Component,
        args: [{
                selector: 'ExtWidgetcell',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'undefined', 'flex', 'floated', 'focusCls', 'forceWidth', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'ripple', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'widget', 'width', 'x', 'y',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtWidgetcellComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtWidgetcellComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCWidgetcell()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCelleditorComponent = /** @class */ (function (_super) {
    __extends(ExtCelleditorComponent, _super);
    function ExtCelleditorComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignment', 'alignSelf', 'allowBlur', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoPin', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cancelOnClear', 'cancelOnEsc', 'cardSwitchAnimation', 'centered', 'cls', 'completeOnEnter', 'constrain', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'field', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideEl', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'ignoreNoChange', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'matchFont', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'offset', 'padding', 'parentEl', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'revertInvalid', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'swallowKeys', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'updateEl', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCelleditor()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecomplete', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestartedit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'canceledit', 'centeredchange', 'complete', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'specialkey', 'startedit', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'celleditor';
        return _this;
    }
    ExtCelleditorComponent_1 = ExtCelleditorComponent;
    ExtCelleditorComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCelleditorComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCelleditorComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCelleditorComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCelleditorComponent_1;
    ExtCelleditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCelleditorComponent = ExtCelleditorComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCelleditorComponent);
ExtCelleditorComponent.ɵfac = function ExtCelleditorComponent_Factory(t) { return new (t || ExtCelleditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCelleditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCelleditorComponent, selectors: [["ExtCelleditor"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignment: "alignment", alignSelf: "alignSelf", allowBlur: "allowBlur", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoPin: "autoPin", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cancelOnClear: "cancelOnClear", cancelOnEsc: "cancelOnEsc", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", completeOnEnter: "completeOnEnter", constrain: "constrain", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", field: "field", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideEl: "hideEl", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", ignoreNoChange: "ignoreNoChange", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", matchFont: "matchFont", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", offset: "offset", padding: "padding", parentEl: "parentEl", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", revertInvalid: "revertInvalid", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", swallowKeys: "swallowKeys", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", updateEl: "updateEl", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecomplete: "beforecomplete", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforestartedit: "beforestartedit", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", canceledit: "canceledit", centeredchange: "centeredchange", complete: "complete", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", specialkey: "specialkey", startedit: "startedit", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCelleditorComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCelleditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCelleditorComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCelleditor',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignment', 'alignSelf', 'allowBlur', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoPin', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cancelOnClear', 'cancelOnEsc', 'cardSwitchAnimation', 'centered', 'cls', 'completeOnEnter', 'constrain', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'field', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideEl', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'ignoreNoChange', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'matchFont', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'offset', 'padding', 'parentEl', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'revertInvalid', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'swallowKeys', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'updateEl', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecomplete', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestartedit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'canceledit', 'centeredchange', 'complete', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'specialkey', 'startedit', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCelleditorComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCelleditorComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCelleditor()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtBooleancolumnComponent = /** @class */ (function (_super) {
    __extends(ExtBooleancolumnComponent, _super);
    function ExtBooleancolumnComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'falseText', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'trueText', 'twoWayBindable', 'ui', 'undefinedText', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCBooleancolumn()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'booleancolumn';
        return _this;
    }
    ExtBooleancolumnComponent_1 = ExtBooleancolumnComponent;
    ExtBooleancolumnComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtBooleancolumnComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtBooleancolumnComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtBooleancolumnComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtBooleancolumnComponent_1;
    ExtBooleancolumnComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtBooleancolumnComponent = ExtBooleancolumnComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtBooleancolumnComponent);
ExtBooleancolumnComponent.ɵfac = function ExtBooleancolumnComponent_Factory(t) { return new (t || ExtBooleancolumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtBooleancolumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtBooleancolumnComponent, selectors: [["ExtBooleancolumn"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", cell: "cell", centered: "centered", cls: "cls", columns: "columns", computedWidth: "computedWidth", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataIndex: "dataIndex", defaultColumnUI: "defaultColumnUI", defaultEditor: "defaultEditor", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", defaultWidth: "defaultWidth", depends: "depends", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", editor: "editor", editorDefaults: "editorDefaults", undefined: "undefined", exportRenderer: "exportRenderer", exportStyle: "exportStyle", exportSummaryRenderer: "exportSummaryRenderer", falseText: "falseText", filter: "filter", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", formatter: "formatter", fullscreen: "fullscreen", groupable: "groupable", grouper: "grouper", groupHeaderTpl: "groupHeaderTpl", height: "height", hidden: "hidden", hideable: "hideable", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideShowMenuItem: "hideShowMenuItem", html: "html", id: "id", ignore: "ignore", ignoreExport: "ignoreExport", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", locked: "locked", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuDisabled: "menuDisabled", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scope: "scope", scratchCell: "scratchCell", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sortable: "sortable", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", summary: "summary", summaryCell: "summaryCell", summaryDataIndex: "summaryDataIndex", summaryFormatter: "summaryFormatter", summaryRenderer: "summaryRenderer", tabIndex: "tabIndex", text: "text", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", trueText: "trueText", twoWayBindable: "twoWayBindable", ui: "ui", undefinedText: "undefinedText", userCls: "userCls", userSelectable: "userSelectable", verticalOverflow: "verticalOverflow", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtBooleancolumnComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtBooleancolumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtBooleancolumnComponent, [{
        type: Component,
        args: [{
                selector: 'ExtBooleancolumn',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'falseText', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'trueText', 'twoWayBindable', 'ui', 'undefinedText', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtBooleancolumnComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtBooleancolumnComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCBooleancolumn()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtCheckcolumnComponent = /** @class */ (function (_super) {
    __extends(ExtCheckcolumnComponent, _super);
    function ExtCheckcolumnComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'headerCheckbox', 'headerCheckboxAlign', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'stopSelection', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCCheckcolumn()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'checkchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'checkcolumn';
        return _this;
    }
    ExtCheckcolumnComponent_1 = ExtCheckcolumnComponent;
    ExtCheckcolumnComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtCheckcolumnComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtCheckcolumnComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtCheckcolumnComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtCheckcolumnComponent_1;
    ExtCheckcolumnComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtCheckcolumnComponent = ExtCheckcolumnComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtCheckcolumnComponent);
ExtCheckcolumnComponent.ɵfac = function ExtCheckcolumnComponent_Factory(t) { return new (t || ExtCheckcolumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtCheckcolumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtCheckcolumnComponent, selectors: [["ExtCheckcolumn"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", cell: "cell", centered: "centered", cls: "cls", columns: "columns", computedWidth: "computedWidth", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataIndex: "dataIndex", defaultColumnUI: "defaultColumnUI", defaultEditor: "defaultEditor", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", defaultWidth: "defaultWidth", depends: "depends", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", editor: "editor", editorDefaults: "editorDefaults", undefined: "undefined", exportRenderer: "exportRenderer", exportStyle: "exportStyle", exportSummaryRenderer: "exportSummaryRenderer", filter: "filter", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", formatter: "formatter", fullscreen: "fullscreen", groupable: "groupable", grouper: "grouper", groupHeaderTpl: "groupHeaderTpl", headerCheckbox: "headerCheckbox", headerCheckboxAlign: "headerCheckboxAlign", height: "height", hidden: "hidden", hideable: "hideable", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideShowMenuItem: "hideShowMenuItem", html: "html", id: "id", ignore: "ignore", ignoreExport: "ignoreExport", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", locked: "locked", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuDisabled: "menuDisabled", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scope: "scope", scratchCell: "scratchCell", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sortable: "sortable", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stopSelection: "stopSelection", style: "style", summary: "summary", summaryCell: "summaryCell", summaryDataIndex: "summaryDataIndex", summaryFormatter: "summaryFormatter", summaryRenderer: "summaryRenderer", tabIndex: "tabIndex", text: "text", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", verticalOverflow: "verticalOverflow", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecheckchange: "beforecheckchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", checkchange: "checkchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtCheckcolumnComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtCheckcolumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtCheckcolumnComponent, [{
        type: Component,
        args: [{
                selector: 'ExtCheckcolumn',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'headerCheckbox', 'headerCheckboxAlign', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'stopSelection', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'checkchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtCheckcolumnComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtCheckcolumnComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCCheckcolumn()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtGridcolumnComponent = /** @class */ (function (_super) {
    __extends(ExtGridcolumnComponent, _super);
    function ExtGridcolumnComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCGridcolumn()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'gridcolumn';
        return _this;
    }
    ExtGridcolumnComponent_1 = ExtGridcolumnComponent;
    ExtGridcolumnComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtGridcolumnComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtGridcolumnComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtGridcolumnComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtGridcolumnComponent_1;
    ExtGridcolumnComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtGridcolumnComponent = ExtGridcolumnComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtGridcolumnComponent);
ExtGridcolumnComponent.ɵfac = function ExtGridcolumnComponent_Factory(t) { return new (t || ExtGridcolumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtGridcolumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtGridcolumnComponent, selectors: [["ExtGridcolumn"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", cell: "cell", centered: "centered", cls: "cls", columns: "columns", computedWidth: "computedWidth", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataIndex: "dataIndex", defaultColumnUI: "defaultColumnUI", defaultEditor: "defaultEditor", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", defaultWidth: "defaultWidth", depends: "depends", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", editor: "editor", editorDefaults: "editorDefaults", undefined: "undefined", exportRenderer: "exportRenderer", exportStyle: "exportStyle", exportSummaryRenderer: "exportSummaryRenderer", filter: "filter", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", formatter: "formatter", fullscreen: "fullscreen", groupable: "groupable", grouper: "grouper", groupHeaderTpl: "groupHeaderTpl", height: "height", hidden: "hidden", hideable: "hideable", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideShowMenuItem: "hideShowMenuItem", html: "html", id: "id", ignore: "ignore", ignoreExport: "ignoreExport", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", locked: "locked", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuDisabled: "menuDisabled", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scope: "scope", scratchCell: "scratchCell", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sortable: "sortable", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", summary: "summary", summaryCell: "summaryCell", summaryDataIndex: "summaryDataIndex", summaryFormatter: "summaryFormatter", summaryRenderer: "summaryRenderer", tabIndex: "tabIndex", text: "text", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", verticalOverflow: "verticalOverflow", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridcolumnComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtGridcolumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtGridcolumnComponent, [{
        type: Component,
        args: [{
                selector: 'ExtGridcolumn',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridcolumnComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtGridcolumnComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCGridcolumn()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtColumnComponent = /** @class */ (function (_super) {
    __extends(ExtColumnComponent, _super);
    function ExtColumnComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCColumn()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'column';
        return _this;
    }
    ExtColumnComponent_1 = ExtColumnComponent;
    ExtColumnComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtColumnComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtColumnComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtColumnComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtColumnComponent_1;
    ExtColumnComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtColumnComponent = ExtColumnComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtColumnComponent);
ExtColumnComponent.ɵfac = function ExtColumnComponent_Factory(t) { return new (t || ExtColumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtColumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtColumnComponent, selectors: [["ExtColumn"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", cell: "cell", centered: "centered", cls: "cls", columns: "columns", computedWidth: "computedWidth", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataIndex: "dataIndex", defaultColumnUI: "defaultColumnUI", defaultEditor: "defaultEditor", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", defaultWidth: "defaultWidth", depends: "depends", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", editor: "editor", editorDefaults: "editorDefaults", undefined: "undefined", exportRenderer: "exportRenderer", exportStyle: "exportStyle", exportSummaryRenderer: "exportSummaryRenderer", filter: "filter", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", formatter: "formatter", fullscreen: "fullscreen", groupable: "groupable", grouper: "grouper", groupHeaderTpl: "groupHeaderTpl", height: "height", hidden: "hidden", hideable: "hideable", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideShowMenuItem: "hideShowMenuItem", html: "html", id: "id", ignore: "ignore", ignoreExport: "ignoreExport", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", locked: "locked", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuDisabled: "menuDisabled", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scope: "scope", scratchCell: "scratchCell", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sortable: "sortable", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", summary: "summary", summaryCell: "summaryCell", summaryDataIndex: "summaryDataIndex", summaryFormatter: "summaryFormatter", summaryRenderer: "summaryRenderer", tabIndex: "tabIndex", text: "text", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", verticalOverflow: "verticalOverflow", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtColumnComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtColumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtColumnComponent, [{
        type: Component,
        args: [{
                selector: 'ExtColumn',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtColumnComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtColumnComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCColumn()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTemplatecolumnComponent = /** @class */ (function (_super) {
    __extends(ExtTemplatecolumnComponent, _super);
    function ExtTemplatecolumnComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTemplatecolumn()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'templatecolumn';
        return _this;
    }
    ExtTemplatecolumnComponent_1 = ExtTemplatecolumnComponent;
    ExtTemplatecolumnComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTemplatecolumnComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTemplatecolumnComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTemplatecolumnComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTemplatecolumnComponent_1;
    ExtTemplatecolumnComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTemplatecolumnComponent = ExtTemplatecolumnComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTemplatecolumnComponent);
ExtTemplatecolumnComponent.ɵfac = function ExtTemplatecolumnComponent_Factory(t) { return new (t || ExtTemplatecolumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTemplatecolumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTemplatecolumnComponent, selectors: [["ExtTemplatecolumn"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", cell: "cell", centered: "centered", cls: "cls", columns: "columns", computedWidth: "computedWidth", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataIndex: "dataIndex", defaultColumnUI: "defaultColumnUI", defaultEditor: "defaultEditor", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", defaultWidth: "defaultWidth", depends: "depends", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", editor: "editor", editorDefaults: "editorDefaults", undefined: "undefined", exportRenderer: "exportRenderer", exportStyle: "exportStyle", exportSummaryRenderer: "exportSummaryRenderer", filter: "filter", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", formatter: "formatter", fullscreen: "fullscreen", groupable: "groupable", grouper: "grouper", groupHeaderTpl: "groupHeaderTpl", height: "height", hidden: "hidden", hideable: "hideable", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideShowMenuItem: "hideShowMenuItem", html: "html", id: "id", ignore: "ignore", ignoreExport: "ignoreExport", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", locked: "locked", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuDisabled: "menuDisabled", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scope: "scope", scratchCell: "scratchCell", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sortable: "sortable", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", summary: "summary", summaryCell: "summaryCell", summaryDataIndex: "summaryDataIndex", summaryFormatter: "summaryFormatter", summaryRenderer: "summaryRenderer", tabIndex: "tabIndex", text: "text", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", verticalOverflow: "verticalOverflow", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTemplatecolumnComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTemplatecolumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTemplatecolumnComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTemplatecolumn',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTemplatecolumnComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTemplatecolumnComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTemplatecolumn()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtDatecolumnComponent = /** @class */ (function (_super) {
    __extends(ExtDatecolumnComponent, _super);
    function ExtDatecolumnComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'format', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCDatecolumn()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'datecolumn';
        return _this;
    }
    ExtDatecolumnComponent_1 = ExtDatecolumnComponent;
    ExtDatecolumnComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtDatecolumnComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtDatecolumnComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtDatecolumnComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtDatecolumnComponent_1;
    ExtDatecolumnComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtDatecolumnComponent = ExtDatecolumnComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtDatecolumnComponent);
ExtDatecolumnComponent.ɵfac = function ExtDatecolumnComponent_Factory(t) { return new (t || ExtDatecolumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtDatecolumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtDatecolumnComponent, selectors: [["ExtDatecolumn"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", cell: "cell", centered: "centered", cls: "cls", columns: "columns", computedWidth: "computedWidth", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataIndex: "dataIndex", defaultColumnUI: "defaultColumnUI", defaultEditor: "defaultEditor", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", defaultWidth: "defaultWidth", depends: "depends", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", editor: "editor", editorDefaults: "editorDefaults", undefined: "undefined", exportRenderer: "exportRenderer", exportStyle: "exportStyle", exportSummaryRenderer: "exportSummaryRenderer", filter: "filter", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", format: "format", formatter: "formatter", fullscreen: "fullscreen", groupable: "groupable", grouper: "grouper", groupHeaderTpl: "groupHeaderTpl", height: "height", hidden: "hidden", hideable: "hideable", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideShowMenuItem: "hideShowMenuItem", html: "html", id: "id", ignore: "ignore", ignoreExport: "ignoreExport", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", locked: "locked", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuDisabled: "menuDisabled", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scope: "scope", scratchCell: "scratchCell", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sortable: "sortable", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", summary: "summary", summaryCell: "summaryCell", summaryDataIndex: "summaryDataIndex", summaryFormatter: "summaryFormatter", summaryRenderer: "summaryRenderer", tabIndex: "tabIndex", text: "text", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", verticalOverflow: "verticalOverflow", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatecolumnComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtDatecolumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtDatecolumnComponent, [{
        type: Component,
        args: [{
                selector: 'ExtDatecolumn',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'format', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatecolumnComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtDatecolumnComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCDatecolumn()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtDragcolumnComponent = /** @class */ (function (_super) {
    __extends(ExtDragcolumnComponent, _super);
    function ExtDragcolumnComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCDragcolumn()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'dragcolumn';
        return _this;
    }
    ExtDragcolumnComponent_1 = ExtDragcolumnComponent;
    ExtDragcolumnComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtDragcolumnComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtDragcolumnComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtDragcolumnComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtDragcolumnComponent_1;
    ExtDragcolumnComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtDragcolumnComponent = ExtDragcolumnComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtDragcolumnComponent);
ExtDragcolumnComponent.ɵfac = function ExtDragcolumnComponent_Factory(t) { return new (t || ExtDragcolumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtDragcolumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtDragcolumnComponent, selectors: [["ExtDragcolumn"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", cell: "cell", centered: "centered", cls: "cls", columns: "columns", computedWidth: "computedWidth", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataIndex: "dataIndex", defaultColumnUI: "defaultColumnUI", defaultEditor: "defaultEditor", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", defaultWidth: "defaultWidth", depends: "depends", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", editor: "editor", editorDefaults: "editorDefaults", undefined: "undefined", exportRenderer: "exportRenderer", exportStyle: "exportStyle", exportSummaryRenderer: "exportSummaryRenderer", filter: "filter", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", formatter: "formatter", fullscreen: "fullscreen", groupable: "groupable", grouper: "grouper", groupHeaderTpl: "groupHeaderTpl", height: "height", hidden: "hidden", hideable: "hideable", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideShowMenuItem: "hideShowMenuItem", html: "html", id: "id", ignore: "ignore", ignoreExport: "ignoreExport", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", locked: "locked", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuDisabled: "menuDisabled", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scope: "scope", scratchCell: "scratchCell", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sortable: "sortable", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", summary: "summary", summaryCell: "summaryCell", summaryDataIndex: "summaryDataIndex", summaryFormatter: "summaryFormatter", summaryRenderer: "summaryRenderer", tabIndex: "tabIndex", text: "text", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", verticalOverflow: "verticalOverflow", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtDragcolumnComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtDragcolumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtDragcolumnComponent, [{
        type: Component,
        args: [{
                selector: 'ExtDragcolumn',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtDragcolumnComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtDragcolumnComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCDragcolumn()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtNumbercolumnComponent = /** @class */ (function (_super) {
    __extends(ExtNumbercolumnComponent, _super);
    function ExtNumbercolumnComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'format', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCNumbercolumn()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'numbercolumn';
        return _this;
    }
    ExtNumbercolumnComponent_1 = ExtNumbercolumnComponent;
    ExtNumbercolumnComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtNumbercolumnComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtNumbercolumnComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtNumbercolumnComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtNumbercolumnComponent_1;
    ExtNumbercolumnComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtNumbercolumnComponent = ExtNumbercolumnComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtNumbercolumnComponent);
ExtNumbercolumnComponent.ɵfac = function ExtNumbercolumnComponent_Factory(t) { return new (t || ExtNumbercolumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtNumbercolumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtNumbercolumnComponent, selectors: [["ExtNumbercolumn"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", cell: "cell", centered: "centered", cls: "cls", columns: "columns", computedWidth: "computedWidth", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataIndex: "dataIndex", defaultColumnUI: "defaultColumnUI", defaultEditor: "defaultEditor", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", defaultWidth: "defaultWidth", depends: "depends", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", editor: "editor", editorDefaults: "editorDefaults", undefined: "undefined", exportRenderer: "exportRenderer", exportStyle: "exportStyle", exportSummaryRenderer: "exportSummaryRenderer", filter: "filter", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", format: "format", formatter: "formatter", fullscreen: "fullscreen", groupable: "groupable", grouper: "grouper", groupHeaderTpl: "groupHeaderTpl", height: "height", hidden: "hidden", hideable: "hideable", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideShowMenuItem: "hideShowMenuItem", html: "html", id: "id", ignore: "ignore", ignoreExport: "ignoreExport", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", locked: "locked", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuDisabled: "menuDisabled", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scope: "scope", scratchCell: "scratchCell", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sortable: "sortable", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", summary: "summary", summaryCell: "summaryCell", summaryDataIndex: "summaryDataIndex", summaryFormatter: "summaryFormatter", summaryRenderer: "summaryRenderer", tabIndex: "tabIndex", text: "text", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", verticalOverflow: "verticalOverflow", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtNumbercolumnComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtNumbercolumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtNumbercolumnComponent, [{
        type: Component,
        args: [{
                selector: 'ExtNumbercolumn',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'format', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtNumbercolumnComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtNumbercolumnComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCNumbercolumn()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtRownumbererComponent = /** @class */ (function (_super) {
    __extends(ExtRownumbererComponent, _super);
    function ExtRownumbererComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'format', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCRownumberer()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'rownumberer';
        return _this;
    }
    ExtRownumbererComponent_1 = ExtRownumbererComponent;
    ExtRownumbererComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtRownumbererComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtRownumbererComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtRownumbererComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtRownumbererComponent_1;
    ExtRownumbererComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtRownumbererComponent = ExtRownumbererComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtRownumbererComponent);
ExtRownumbererComponent.ɵfac = function ExtRownumbererComponent_Factory(t) { return new (t || ExtRownumbererComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtRownumbererComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtRownumbererComponent, selectors: [["ExtRownumberer"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", cell: "cell", centered: "centered", cls: "cls", columns: "columns", computedWidth: "computedWidth", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataIndex: "dataIndex", defaultColumnUI: "defaultColumnUI", defaultEditor: "defaultEditor", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", defaultWidth: "defaultWidth", depends: "depends", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", editor: "editor", editorDefaults: "editorDefaults", undefined: "undefined", exportRenderer: "exportRenderer", exportStyle: "exportStyle", exportSummaryRenderer: "exportSummaryRenderer", filter: "filter", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", format: "format", formatter: "formatter", fullscreen: "fullscreen", groupable: "groupable", grouper: "grouper", groupHeaderTpl: "groupHeaderTpl", height: "height", hidden: "hidden", hideable: "hideable", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideShowMenuItem: "hideShowMenuItem", html: "html", id: "id", ignore: "ignore", ignoreExport: "ignoreExport", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", locked: "locked", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuDisabled: "menuDisabled", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scope: "scope", scratchCell: "scratchCell", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sortable: "sortable", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", summary: "summary", summaryCell: "summaryCell", summaryDataIndex: "summaryDataIndex", summaryFormatter: "summaryFormatter", summaryRenderer: "summaryRenderer", tabIndex: "tabIndex", text: "text", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", verticalOverflow: "verticalOverflow", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtRownumbererComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtRownumbererComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtRownumbererComponent, [{
        type: Component,
        args: [{
                selector: 'ExtRownumberer',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'format', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtRownumbererComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtRownumbererComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCRownumberer()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSelectioncolumnComponent = /** @class */ (function (_super) {
    __extends(ExtSelectioncolumnComponent, _super);
    function ExtSelectioncolumnComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'headerCheckbox', 'headerCheckboxAlign', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'stopSelection', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSelectioncolumn()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'checkchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'selectioncolumn';
        return _this;
    }
    ExtSelectioncolumnComponent_1 = ExtSelectioncolumnComponent;
    ExtSelectioncolumnComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSelectioncolumnComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSelectioncolumnComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSelectioncolumnComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSelectioncolumnComponent_1;
    ExtSelectioncolumnComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSelectioncolumnComponent = ExtSelectioncolumnComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSelectioncolumnComponent);
ExtSelectioncolumnComponent.ɵfac = function ExtSelectioncolumnComponent_Factory(t) { return new (t || ExtSelectioncolumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSelectioncolumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSelectioncolumnComponent, selectors: [["ExtSelectioncolumn"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", cell: "cell", centered: "centered", cls: "cls", columns: "columns", computedWidth: "computedWidth", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataIndex: "dataIndex", defaultColumnUI: "defaultColumnUI", defaultEditor: "defaultEditor", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", defaultWidth: "defaultWidth", depends: "depends", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", editor: "editor", editorDefaults: "editorDefaults", undefined: "undefined", exportRenderer: "exportRenderer", exportStyle: "exportStyle", exportSummaryRenderer: "exportSummaryRenderer", filter: "filter", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", formatter: "formatter", fullscreen: "fullscreen", groupable: "groupable", grouper: "grouper", groupHeaderTpl: "groupHeaderTpl", headerCheckbox: "headerCheckbox", headerCheckboxAlign: "headerCheckboxAlign", height: "height", hidden: "hidden", hideable: "hideable", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideShowMenuItem: "hideShowMenuItem", html: "html", id: "id", ignore: "ignore", ignoreExport: "ignoreExport", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", locked: "locked", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuDisabled: "menuDisabled", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scope: "scope", scratchCell: "scratchCell", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sortable: "sortable", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stopSelection: "stopSelection", style: "style", summary: "summary", summaryCell: "summaryCell", summaryDataIndex: "summaryDataIndex", summaryFormatter: "summaryFormatter", summaryRenderer: "summaryRenderer", tabIndex: "tabIndex", text: "text", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", verticalOverflow: "verticalOverflow", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecheckchange: "beforecheckchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", checkchange: "checkchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSelectioncolumnComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSelectioncolumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSelectioncolumnComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSelectioncolumn',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'headerCheckbox', 'headerCheckboxAlign', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'stopSelection', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'checkchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSelectioncolumnComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSelectioncolumnComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSelectioncolumn()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTextcolumnComponent = /** @class */ (function (_super) {
    __extends(ExtTextcolumnComponent, _super);
    function ExtTextcolumnComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTextcolumn()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'textcolumn';
        return _this;
    }
    ExtTextcolumnComponent_1 = ExtTextcolumnComponent;
    ExtTextcolumnComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTextcolumnComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTextcolumnComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTextcolumnComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTextcolumnComponent_1;
    ExtTextcolumnComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTextcolumnComponent = ExtTextcolumnComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTextcolumnComponent);
ExtTextcolumnComponent.ɵfac = function ExtTextcolumnComponent_Factory(t) { return new (t || ExtTextcolumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTextcolumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTextcolumnComponent, selectors: [["ExtTextcolumn"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", cell: "cell", centered: "centered", cls: "cls", columns: "columns", computedWidth: "computedWidth", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataIndex: "dataIndex", defaultColumnUI: "defaultColumnUI", defaultEditor: "defaultEditor", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", defaultWidth: "defaultWidth", depends: "depends", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", editor: "editor", editorDefaults: "editorDefaults", undefined: "undefined", exportRenderer: "exportRenderer", exportStyle: "exportStyle", exportSummaryRenderer: "exportSummaryRenderer", filter: "filter", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", formatter: "formatter", fullscreen: "fullscreen", groupable: "groupable", grouper: "grouper", groupHeaderTpl: "groupHeaderTpl", height: "height", hidden: "hidden", hideable: "hideable", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideShowMenuItem: "hideShowMenuItem", html: "html", id: "id", ignore: "ignore", ignoreExport: "ignoreExport", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", locked: "locked", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuDisabled: "menuDisabled", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scope: "scope", scratchCell: "scratchCell", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sortable: "sortable", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", summary: "summary", summaryCell: "summaryCell", summaryDataIndex: "summaryDataIndex", summaryFormatter: "summaryFormatter", summaryRenderer: "summaryRenderer", tabIndex: "tabIndex", text: "text", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", verticalOverflow: "verticalOverflow", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTextcolumnComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTextcolumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTextcolumnComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTextcolumn',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTextcolumnComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTextcolumnComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTextcolumn()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTreecolumnComponent = /** @class */ (function (_super) {
    __extends(ExtTreecolumnComponent, _super);
    function ExtTreecolumnComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTreecolumn()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'treecolumn';
        return _this;
    }
    ExtTreecolumnComponent_1 = ExtTreecolumnComponent;
    ExtTreecolumnComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTreecolumnComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTreecolumnComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTreecolumnComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTreecolumnComponent_1;
    ExtTreecolumnComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTreecolumnComponent = ExtTreecolumnComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTreecolumnComponent);
ExtTreecolumnComponent.ɵfac = function ExtTreecolumnComponent_Factory(t) { return new (t || ExtTreecolumnComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTreecolumnComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTreecolumnComponent, selectors: [["ExtTreecolumn"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", cell: "cell", centered: "centered", cls: "cls", columns: "columns", computedWidth: "computedWidth", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataIndex: "dataIndex", defaultColumnUI: "defaultColumnUI", defaultEditor: "defaultEditor", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", defaultWidth: "defaultWidth", depends: "depends", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", editable: "editable", editor: "editor", editorDefaults: "editorDefaults", undefined: "undefined", exportRenderer: "exportRenderer", exportStyle: "exportStyle", exportSummaryRenderer: "exportSummaryRenderer", filter: "filter", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", formatter: "formatter", fullscreen: "fullscreen", groupable: "groupable", grouper: "grouper", groupHeaderTpl: "groupHeaderTpl", height: "height", hidden: "hidden", hideable: "hideable", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideShowMenuItem: "hideShowMenuItem", html: "html", id: "id", ignore: "ignore", ignoreExport: "ignoreExport", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", locked: "locked", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuDisabled: "menuDisabled", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scope: "scope", scratchCell: "scratchCell", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sortable: "sortable", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", summary: "summary", summaryCell: "summaryCell", summaryDataIndex: "summaryDataIndex", summaryFormatter: "summaryFormatter", summaryRenderer: "summaryRenderer", tabIndex: "tabIndex", text: "text", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", verticalOverflow: "verticalOverflow", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTreecolumnComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTreecolumnComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTreecolumnComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTreecolumn',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'cell', 'centered', 'cls', 'columns', 'computedWidth', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataIndex', 'defaultColumnUI', 'defaultEditor', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'defaultWidth', 'depends', 'disabled', 'displayed', 'docked', 'draggable', 'editable', 'editor', 'editorDefaults', 'undefined', 'undefined', 'undefined', 'exportRenderer', 'exportStyle', 'exportSummaryRenderer', 'filter', 'flex', 'floated', 'focusableContainer', 'focusCls', 'formatter', 'fullscreen', 'groupable', 'grouper', 'groupHeaderTpl', 'height', 'hidden', 'hideable', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideShowMenuItem', 'html', 'id', 'ignore', 'ignoreExport', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menu', 'menuDisabled', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderer', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scratchCell', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summary', 'summaryCell', 'summaryDataIndex', 'summaryFormatter', 'summaryRenderer', 'undefined', 'tabIndex', 'text', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTreecolumnComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTreecolumnComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTreecolumn()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtGridComponent = /** @class */ (function (_super) {
    __extends(ExtGridComponent, _super);
    function ExtGridComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'bufferSize', 'cardSwitchAnimation', 'centered', 'cls', 'collapseDefaults', 'collapsible', 'columnLines', 'columnMenu', 'columnResize', 'columns', 'columnsMenuItem', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'disclosureProperty', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'enableColumnMove', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'grouped', 'groupFooter', 'groupHeader', 'grouping', 'groupPlaceholder', 'height', 'hidden', 'hideAnimation', 'hideHeaders', 'hideMode', 'hideOnMaskTap', 'hideScrollbar', 'horizontalOverflow', 'html', 'id', 'inactiveChildTabIndex', 'indexBar', 'infinite', 'inline', 'innerCls', 'innerCtHeight', 'innerWidth', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemConfig', 'itemContentCls', 'itemDataMap', 'itemId', 'itemInnerCls', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'maintainChildNodes', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxItemCache', 'maxWidth', 'minHeight', 'minimumBufferDistance', 'minWidth', 'modal', 'modelValidation', 'multiColumnSort', 'name', 'nameable', 'nameHolder', 'onItemDisclosure', 'padding', 'pinFooters', 'pinHeaders', 'pinnedFooter', 'pinnedFooterHeight', 'pinnedHeader', 'pinnedHeaderHeight', 'plugins', 'pressedDelay', 'preventSelectionOnDisclose', 'preventSelectionOnTool', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'right', 'ripple', 'rowLines', 'rowNumbers', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'stateful', 'statefulDefaults', 'stateId', 'store', 'striped', 'style', 'tabIndex', 'title', 'titleBar', 'toFrontOnShow', 'tooltip', 'top', 'topRenderedIndex', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'undefined', 'variableHeights', 'verticalOverflow', 'viewModel', 'visibleHeight', 'visibleLeft', 'visibleTop', 'visibleWidth', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCGrid()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecomplete', 'beforedisabledchange', 'beforedockedchange', 'beforeedit', 'beforegroupcollapse', 'beforegroupexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeselectionextend', 'beforeshow', 'beforestartedit', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'canceledit', 'canceledit', 'cellselection', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'columnadd', 'columnhide', 'columnmenucreated', 'columnmove', 'columnremove', 'columnresize', 'columnselection', 'columnshow', 'columnsort', 'complete', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'disclose', 'dockedchange', 'edit', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'groupcollapse', 'groupexpand', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemaction', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'selectionextenderdrag', 'show', 'specialkey', 'startedit', 'storechange', 'tofront', 'topchange', 'updatedata', 'validateedit', 'widthchange',], vc) || this;
        _this.xtype = 'grid';
        return _this;
    }
    ExtGridComponent_1 = ExtGridComponent;
    ExtGridComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtGridComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtGridComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtGridComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtGridComponent_1;
    ExtGridComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtGridComponent = ExtGridComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtGridComponent);
ExtGridComponent.ɵfac = function ExtGridComponent_Factory(t) { return new (t || ExtGridComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtGridComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtGridComponent, selectors: [["ExtGrid"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", associatedData: "associatedData", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", bufferSize: "bufferSize", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", collapseDefaults: "collapseDefaults", collapsible: "collapsible", columnLines: "columnLines", columnMenu: "columnMenu", columnResize: "columnResize", columns: "columns", columnsMenuItem: "columnsMenuItem", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", deferEmptyText: "deferEmptyText", deselectOnContainerClick: "deselectOnContainerClick", disabled: "disabled", disableSelection: "disableSelection", disclosureProperty: "disclosureProperty", displayed: "displayed", docked: "docked", draggable: "draggable", emptyItemText: "emptyItemText", emptyState: "emptyState", emptyText: "emptyText", emptyTextDefaults: "emptyTextDefaults", emptyTextProperty: "emptyTextProperty", enableColumnMove: "enableColumnMove", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", grouped: "grouped", groupFooter: "groupFooter", groupHeader: "groupHeader", grouping: "grouping", groupPlaceholder: "groupPlaceholder", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideHeaders: "hideHeaders", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideScrollbar: "hideScrollbar", horizontalOverflow: "horizontalOverflow", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", indexBar: "indexBar", infinite: "infinite", inline: "inline", innerCls: "innerCls", innerCtHeight: "innerCtHeight", innerWidth: "innerWidth", instanceCls: "instanceCls", itemButtonMode: "itemButtonMode", itemCls: "itemCls", itemConfig: "itemConfig", itemContentCls: "itemContentCls", itemDataMap: "itemDataMap", itemId: "itemId", itemInnerCls: "itemInnerCls", itemRipple: "itemRipple", items: "items", itemsFocusable: "itemsFocusable", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", loadingHeight: "loadingHeight", loadingText: "loadingText", maintainChildNodes: "maintainChildNodes", manageBorders: "manageBorders", margin: "margin", markDirty: "markDirty", masked: "masked", maxHeight: "maxHeight", maxItemCache: "maxItemCache", maxWidth: "maxWidth", minHeight: "minHeight", minimumBufferDistance: "minimumBufferDistance", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multiColumnSort: "multiColumnSort", name: "name", nameable: "nameable", nameHolder: "nameHolder", onItemDisclosure: "onItemDisclosure", padding: "padding", pinFooters: "pinFooters", pinHeaders: "pinHeaders", pinnedFooter: "pinnedFooter", pinnedFooterHeight: "pinnedFooterHeight", pinnedHeader: "pinnedHeader", pinnedHeaderHeight: "pinnedHeaderHeight", pressedDelay: "pressedDelay", preventSelectionOnDisclose: "preventSelectionOnDisclose", preventSelectionOnTool: "preventSelectionOnTool", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", rowLines: "rowLines", rowNumbers: "rowNumbers", scrollable: "scrollable", scrollDock: "scrollDock", scrollToTopOnRefresh: "scrollToTopOnRefresh", selectable: "selectable", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sortable: "sortable", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", striped: "striped", style: "style", tabIndex: "tabIndex", title: "title", titleBar: "titleBar", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", topRenderedIndex: "topRenderedIndex", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggerCtEvent: "triggerCtEvent", triggerEvent: "triggerEvent", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", variableHeights: "variableHeights", verticalOverflow: "verticalOverflow", viewModel: "viewModel", visibleHeight: "visibleHeight", visibleLeft: "visibleLeft", visibleTop: "visibleTop", visibleWidth: "visibleWidth", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecomplete: "beforecomplete", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeedit: "beforeedit", beforegroupcollapse: "beforegroupcollapse", beforegroupexpand: "beforegroupexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeselectionextend: "beforeselectionextend", beforeshow: "beforeshow", beforestartedit: "beforestartedit", beforestorechange: "beforestorechange", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", canceledit: "canceledit", cellselection: "cellselection", centeredchange: "centeredchange", childdoubletap: "childdoubletap", childlongpress: "childlongpress", childmouseenter: "childmouseenter", childmouseleave: "childmouseleave", childsingletap: "childsingletap", childtap: "childtap", childtaphold: "childtaphold", childtouchcancel: "childtouchcancel", childtouchend: "childtouchend", childtouchmove: "childtouchmove", childtouchstart: "childtouchstart", columnadd: "columnadd", columnhide: "columnhide", columnmenucreated: "columnmenucreated", columnmove: "columnmove", columnremove: "columnremove", columnresize: "columnresize", columnselection: "columnselection", columnshow: "columnshow", columnsort: "columnsort", complete: "complete", deactivate: "deactivate", deselect: "deselect", destroy: "destroy", disabledchange: "disabledchange", disclose: "disclose", dockedchange: "dockedchange", edit: "edit", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", groupcollapse: "groupcollapse", groupexpand: "groupexpand", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemaction: "itemaction", itemdoubletap: "itemdoubletap", itemlongpress: "itemlongpress", itemmouseenter: "itemmouseenter", itemmouseleave: "itemmouseleave", itemsingletap: "itemsingletap", itemswipe: "itemswipe", itemtap: "itemtap", itemtaphold: "itemtaphold", itemtouchcancel: "itemtouchcancel", itemtouchend: "itemtouchend", itemtouchmove: "itemtouchmove", itemtouchstart: "itemtouchstart", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", navigate: "navigate", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", select: "select", selectionextenderdrag: "selectionextenderdrag", show: "show", specialkey: "specialkey", startedit: "startedit", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", validateedit: "validateedit", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtGridComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtGridComponent, [{
        type: Component,
        args: [{
                selector: 'ExtGrid',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'bufferSize', 'cardSwitchAnimation', 'centered', 'cls', 'collapseDefaults', 'collapsible', 'columnLines', 'columnMenu', 'columnResize', 'columns', 'columnsMenuItem', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'disclosureProperty', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'enableColumnMove', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'grouped', 'groupFooter', 'groupHeader', 'grouping', 'groupPlaceholder', 'height', 'hidden', 'hideAnimation', 'hideHeaders', 'hideMode', 'hideOnMaskTap', 'hideScrollbar', 'horizontalOverflow', 'html', 'id', 'inactiveChildTabIndex', 'indexBar', 'infinite', 'inline', 'innerCls', 'innerCtHeight', 'innerWidth', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemConfig', 'itemContentCls', 'itemDataMap', 'itemId', 'itemInnerCls', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'maintainChildNodes', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxItemCache', 'maxWidth', 'minHeight', 'minimumBufferDistance', 'minWidth', 'modal', 'modelValidation', 'multiColumnSort', 'name', 'nameable', 'nameHolder', 'onItemDisclosure', 'padding', 'pinFooters', 'pinHeaders', 'pinnedFooter', 'pinnedFooterHeight', 'pinnedHeader', 'pinnedHeaderHeight', 'plugins', 'pressedDelay', 'preventSelectionOnDisclose', 'preventSelectionOnTool', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'right', 'ripple', 'rowLines', 'rowNumbers', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'stateful', 'statefulDefaults', 'stateId', 'store', 'striped', 'style', 'tabIndex', 'title', 'titleBar', 'toFrontOnShow', 'tooltip', 'top', 'topRenderedIndex', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'undefined', 'variableHeights', 'verticalOverflow', 'viewModel', 'visibleHeight', 'visibleLeft', 'visibleTop', 'visibleWidth', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecomplete', 'beforedisabledchange', 'beforedockedchange', 'beforeedit', 'beforegroupcollapse', 'beforegroupexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeselectionextend', 'beforeshow', 'beforestartedit', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'canceledit', 'canceledit', 'cellselection', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'columnadd', 'columnhide', 'columnmenucreated', 'columnmove', 'columnremove', 'columnresize', 'columnselection', 'columnshow', 'columnsort', 'complete', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'disclose', 'dockedchange', 'edit', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'groupcollapse', 'groupexpand', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemaction', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'selectionextenderdrag', 'show', 'specialkey', 'startedit', 'storechange', 'tofront', 'topchange', 'updatedata', 'validateedit', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtGridComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCGrid()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtHeadercontainerComponent = /** @class */ (function (_super) {
    __extends(ExtHeadercontainerComponent, _super);
    function ExtHeadercontainerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'columns', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultColumnUI', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCHeadercontainer()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'headercontainer';
        return _this;
    }
    ExtHeadercontainerComponent_1 = ExtHeadercontainerComponent;
    ExtHeadercontainerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtHeadercontainerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtHeadercontainerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtHeadercontainerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtHeadercontainerComponent_1;
    ExtHeadercontainerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtHeadercontainerComponent = ExtHeadercontainerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtHeadercontainerComponent);
ExtHeadercontainerComponent.ɵfac = function ExtHeadercontainerComponent_Factory(t) { return new (t || ExtHeadercontainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtHeadercontainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtHeadercontainerComponent, selectors: [["ExtHeadercontainer"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", columns: "columns", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultColumnUI: "defaultColumnUI", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sortable: "sortable", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", verticalOverflow: "verticalOverflow", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtHeadercontainerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtHeadercontainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtHeadercontainerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtHeadercontainer',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'columns', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultColumnUI', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'verticalOverflow', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtHeadercontainerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtHeadercontainerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCHeadercontainer()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtLockedgridComponent = /** @class */ (function (_super) {
    __extends(ExtLockedgridComponent, _super);
    function ExtLockedgridComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'columnMenu', 'columns', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaultLockedRegion', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'enableColumnMove', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gridDefaults', 'grouped', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideHeaders', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemConfig', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'leftGridDefaults', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'regions', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'rightGridDefaults', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'variableHeights', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCLockedgrid()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'lockedgrid';
        return _this;
    }
    ExtLockedgridComponent_1 = ExtLockedgridComponent;
    ExtLockedgridComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtLockedgridComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtLockedgridComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtLockedgridComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtLockedgridComponent_1;
    ExtLockedgridComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtLockedgridComponent = ExtLockedgridComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtLockedgridComponent);
ExtLockedgridComponent.ɵfac = function ExtLockedgridComponent_Factory(t) { return new (t || ExtLockedgridComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtLockedgridComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtLockedgridComponent, selectors: [["ExtLockedgrid"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", columnMenu: "columnMenu", columns: "columns", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaultLockedRegion: "defaultLockedRegion", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", enableColumnMove: "enableColumnMove", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", gridDefaults: "gridDefaults", grouped: "grouped", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideHeaders: "hideHeaders", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemConfig: "itemConfig", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", leftGridDefaults: "leftGridDefaults", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", regions: "regions", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", rightGridDefaults: "rightGridDefaults", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", variableHeights: "variableHeights", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtLockedgridComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtLockedgridComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtLockedgridComponent, [{
        type: Component,
        args: [{
                selector: 'ExtLockedgrid',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'columnMenu', 'columns', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaultLockedRegion', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'enableColumnMove', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'gridDefaults', 'grouped', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideHeaders', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemConfig', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'leftGridDefaults', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'regions', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'rightGridDefaults', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'variableHeights', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtLockedgridComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtLockedgridComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCLockedgrid()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtLockedgridregionComponent = /** @class */ (function (_super) {
    __extends(ExtLockedgridregionComponent, _super);
    function ExtLockedgridregionComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'grid', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menuItem', 'undefined', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'regionKey', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCLockedgridregion()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'lockedgridregion';
        return _this;
    }
    ExtLockedgridregionComponent_1 = ExtLockedgridregionComponent;
    ExtLockedgridregionComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtLockedgridregionComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtLockedgridregionComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtLockedgridregionComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtLockedgridregionComponent_1;
    ExtLockedgridregionComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtLockedgridregionComponent = ExtLockedgridregionComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtLockedgridregionComponent);
ExtLockedgridregionComponent.ɵfac = function ExtLockedgridregionComponent_Factory(t) { return new (t || ExtLockedgridregionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtLockedgridregionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtLockedgridregionComponent, selectors: [["ExtLockedgridregion"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", grid: "grid", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", locked: "locked", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menuItem: "menuItem", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", regionKey: "regionKey", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtLockedgridregionComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtLockedgridregionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtLockedgridregionComponent, [{
        type: Component,
        args: [{
                selector: 'ExtLockedgridregion',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'grid', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'locked', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menuItem', 'undefined', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'regionKey', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtLockedgridregionComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtLockedgridregionComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCLockedgridregion()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtGridcolumnsmenuComponent = /** @class */ (function (_super) {
    __extends(ExtGridcolumnsmenuComponent, _super);
    function ExtGridcolumnsmenuComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCGridcolumnsmenu()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'gridcolumnsmenu';
        return _this;
    }
    ExtGridcolumnsmenuComponent_1 = ExtGridcolumnsmenuComponent;
    ExtGridcolumnsmenuComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtGridcolumnsmenuComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtGridcolumnsmenuComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtGridcolumnsmenuComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtGridcolumnsmenuComponent_1;
    ExtGridcolumnsmenuComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtGridcolumnsmenuComponent = ExtGridcolumnsmenuComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtGridcolumnsmenuComponent);
ExtGridcolumnsmenuComponent.ɵfac = function ExtGridcolumnsmenuComponent_Factory(t) { return new (t || ExtGridcolumnsmenuComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtGridcolumnsmenuComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtGridcolumnsmenuComponent, selectors: [["ExtGridcolumnsmenu"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", clickHideDelay: "clickHideDelay", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", destroyMenu: "destroyMenu", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", handler: "handler", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnClick: "hideOnClick", hideOnMaskTap: "hideOnMaskTap", href: "href", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", indented: "indented", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuAlign: "menuAlign", menuExpandDelay: "menuExpandDelay", menuHideDelay: "menuHideDelay", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", separator: "separator", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", target: "target", text: "text", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridcolumnsmenuComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtGridcolumnsmenuComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtGridcolumnsmenuComponent, [{
        type: Component,
        args: [{
                selector: 'ExtGridcolumnsmenu',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridcolumnsmenuComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtGridcolumnsmenuComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCGridcolumnsmenu()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtGridgroupbythismenuitemComponent = /** @class */ (function (_super) {
    __extends(ExtGridgroupbythismenuitemComponent, _super);
    function ExtGridgroupbythismenuitemComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCGridgroupbythismenuitem()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'gridgroupbythismenuitem';
        return _this;
    }
    ExtGridgroupbythismenuitemComponent_1 = ExtGridgroupbythismenuitemComponent;
    ExtGridgroupbythismenuitemComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtGridgroupbythismenuitemComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtGridgroupbythismenuitemComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtGridgroupbythismenuitemComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtGridgroupbythismenuitemComponent_1;
    ExtGridgroupbythismenuitemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtGridgroupbythismenuitemComponent = ExtGridgroupbythismenuitemComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtGridgroupbythismenuitemComponent);
ExtGridgroupbythismenuitemComponent.ɵfac = function ExtGridgroupbythismenuitemComponent_Factory(t) { return new (t || ExtGridgroupbythismenuitemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtGridgroupbythismenuitemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtGridgroupbythismenuitemComponent, selectors: [["ExtGridgroupbythismenuitem"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", clickHideDelay: "clickHideDelay", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", destroyMenu: "destroyMenu", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", handler: "handler", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnClick: "hideOnClick", hideOnMaskTap: "hideOnMaskTap", href: "href", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", indented: "indented", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuAlign: "menuAlign", menuExpandDelay: "menuExpandDelay", menuHideDelay: "menuHideDelay", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", separator: "separator", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", target: "target", text: "text", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridgroupbythismenuitemComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtGridgroupbythismenuitemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtGridgroupbythismenuitemComponent, [{
        type: Component,
        args: [{
                selector: 'ExtGridgroupbythismenuitem',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridgroupbythismenuitemComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtGridgroupbythismenuitemComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCGridgroupbythismenuitem()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtGridshowingroupsmenuitemComponent = /** @class */ (function (_super) {
    __extends(ExtGridshowingroupsmenuitemComponent, _super);
    function ExtGridshowingroupsmenuitemComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'checkChangeDisabled', 'checked', 'checkHandler', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submenuText', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCGridshowingroupsmenuitem()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'checkchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'gridshowingroupsmenuitem';
        return _this;
    }
    ExtGridshowingroupsmenuitemComponent_1 = ExtGridshowingroupsmenuitemComponent;
    ExtGridshowingroupsmenuitemComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtGridshowingroupsmenuitemComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtGridshowingroupsmenuitemComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtGridshowingroupsmenuitemComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtGridshowingroupsmenuitemComponent_1;
    ExtGridshowingroupsmenuitemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtGridshowingroupsmenuitemComponent = ExtGridshowingroupsmenuitemComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtGridshowingroupsmenuitemComponent);
ExtGridshowingroupsmenuitemComponent.ɵfac = function ExtGridshowingroupsmenuitemComponent_Factory(t) { return new (t || ExtGridshowingroupsmenuitemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtGridshowingroupsmenuitemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtGridshowingroupsmenuitemComponent, selectors: [["ExtGridshowingroupsmenuitem"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", checkChangeDisabled: "checkChangeDisabled", checked: "checked", checkHandler: "checkHandler", clickHideDelay: "clickHideDelay", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", destroyMenu: "destroyMenu", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", handler: "handler", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnClick: "hideOnClick", hideOnMaskTap: "hideOnMaskTap", href: "href", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", indented: "indented", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuAlign: "menuAlign", menuExpandDelay: "menuExpandDelay", menuHideDelay: "menuHideDelay", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", separator: "separator", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", submenuText: "submenuText", tabIndex: "tabIndex", target: "target", text: "text", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecheckchange: "beforecheckchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", checkchange: "checkchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridshowingroupsmenuitemComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtGridshowingroupsmenuitemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtGridshowingroupsmenuitemComponent, [{
        type: Component,
        args: [{
                selector: 'ExtGridshowingroupsmenuitem',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'checkChangeDisabled', 'checked', 'checkHandler', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submenuText', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'checkchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridshowingroupsmenuitemComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtGridshowingroupsmenuitemComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCGridshowingroupsmenuitem()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtGridsortascmenuitemComponent = /** @class */ (function (_super) {
    __extends(ExtGridsortascmenuitemComponent, _super);
    function ExtGridsortascmenuitemComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'allowUncheck', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'checkChangeDisabled', 'checked', 'checkHandler', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'group', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submenuText', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCGridsortascmenuitem()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'checkchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'gridsortascmenuitem';
        return _this;
    }
    ExtGridsortascmenuitemComponent_1 = ExtGridsortascmenuitemComponent;
    ExtGridsortascmenuitemComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtGridsortascmenuitemComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtGridsortascmenuitemComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtGridsortascmenuitemComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtGridsortascmenuitemComponent_1;
    ExtGridsortascmenuitemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtGridsortascmenuitemComponent = ExtGridsortascmenuitemComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtGridsortascmenuitemComponent);
ExtGridsortascmenuitemComponent.ɵfac = function ExtGridsortascmenuitemComponent_Factory(t) { return new (t || ExtGridsortascmenuitemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtGridsortascmenuitemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtGridsortascmenuitemComponent, selectors: [["ExtGridsortascmenuitem"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", allowUncheck: "allowUncheck", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", checkChangeDisabled: "checkChangeDisabled", checked: "checked", checkHandler: "checkHandler", clickHideDelay: "clickHideDelay", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", destroyMenu: "destroyMenu", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", group: "group", handler: "handler", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnClick: "hideOnClick", hideOnMaskTap: "hideOnMaskTap", href: "href", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", indented: "indented", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuAlign: "menuAlign", menuExpandDelay: "menuExpandDelay", menuHideDelay: "menuHideDelay", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", separator: "separator", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", submenuText: "submenuText", tabIndex: "tabIndex", target: "target", text: "text", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecheckchange: "beforecheckchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", checkchange: "checkchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridsortascmenuitemComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtGridsortascmenuitemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtGridsortascmenuitemComponent, [{
        type: Component,
        args: [{
                selector: 'ExtGridsortascmenuitem',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'allowUncheck', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'checkChangeDisabled', 'checked', 'checkHandler', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'group', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submenuText', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'checkchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridsortascmenuitemComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtGridsortascmenuitemComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCGridsortascmenuitem()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtGridsortdescmenuitemComponent = /** @class */ (function (_super) {
    __extends(ExtGridsortdescmenuitemComponent, _super);
    function ExtGridsortdescmenuitemComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'allowUncheck', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'checkChangeDisabled', 'checked', 'checkHandler', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'group', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submenuText', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCGridsortdescmenuitem()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'checkchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'gridsortdescmenuitem';
        return _this;
    }
    ExtGridsortdescmenuitemComponent_1 = ExtGridsortdescmenuitemComponent;
    ExtGridsortdescmenuitemComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtGridsortdescmenuitemComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtGridsortdescmenuitemComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtGridsortdescmenuitemComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtGridsortdescmenuitemComponent_1;
    ExtGridsortdescmenuitemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtGridsortdescmenuitemComponent = ExtGridsortdescmenuitemComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtGridsortdescmenuitemComponent);
ExtGridsortdescmenuitemComponent.ɵfac = function ExtGridsortdescmenuitemComponent_Factory(t) { return new (t || ExtGridsortdescmenuitemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtGridsortdescmenuitemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtGridsortdescmenuitemComponent, selectors: [["ExtGridsortdescmenuitem"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", allowUncheck: "allowUncheck", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", checkChangeDisabled: "checkChangeDisabled", checked: "checked", checkHandler: "checkHandler", clickHideDelay: "clickHideDelay", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", destroyMenu: "destroyMenu", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", group: "group", handler: "handler", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnClick: "hideOnClick", hideOnMaskTap: "hideOnMaskTap", href: "href", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", indented: "indented", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuAlign: "menuAlign", menuExpandDelay: "menuExpandDelay", menuHideDelay: "menuHideDelay", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", separator: "separator", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", submenuText: "submenuText", tabIndex: "tabIndex", target: "target", text: "text", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecheckchange: "beforecheckchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", checkchange: "checkchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridsortdescmenuitemComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtGridsortdescmenuitemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtGridsortdescmenuitemComponent, [{
        type: Component,
        args: [{
                selector: 'ExtGridsortdescmenuitem',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'allowUncheck', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'checkChangeDisabled', 'checked', 'checkHandler', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'group', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submenuText', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'checkchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridsortdescmenuitemComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtGridsortdescmenuitemComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCGridsortdescmenuitem()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPagingtoolbarComponent = /** @class */ (function (_super) {
    __extends(ExtPagingtoolbarComponent, _super);
    function ExtPagingtoolbarComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultButtonUI', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'nextButton', 'padding', 'plugins', 'prevButton', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sliderField', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summaryComponent', 'tabIndex', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPagingtoolbar()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'pagingtoolbar';
        return _this;
    }
    ExtPagingtoolbarComponent_1 = ExtPagingtoolbarComponent;
    ExtPagingtoolbarComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPagingtoolbarComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPagingtoolbarComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPagingtoolbarComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPagingtoolbarComponent_1;
    ExtPagingtoolbarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPagingtoolbarComponent = ExtPagingtoolbarComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPagingtoolbarComponent);
ExtPagingtoolbarComponent.ɵfac = function ExtPagingtoolbarComponent_Factory(t) { return new (t || ExtPagingtoolbarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPagingtoolbarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPagingtoolbarComponent, selectors: [["ExtPagingtoolbar"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultButtonUI: "defaultButtonUI", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", nextButton: "nextButton", padding: "padding", prevButton: "prevButton", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sliderField: "sliderField", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", summaryComponent: "summaryComponent", tabIndex: "tabIndex", title: "title", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPagingtoolbarComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPagingtoolbarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPagingtoolbarComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPagingtoolbar',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultButtonUI', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'nextButton', 'padding', 'plugins', 'prevButton', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sliderField', 'stateful', 'statefulDefaults', 'stateId', 'style', 'summaryComponent', 'tabIndex', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPagingtoolbarComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPagingtoolbarComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPagingtoolbar()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtGridrowComponent = /** @class */ (function (_super) {
    __extends(ExtGridrowComponent, _super);
    function ExtGridrowComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'body', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultCellUI', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandedField', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stickyVisibility', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCGridrow()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'gridrow';
        return _this;
    }
    ExtGridrowComponent_1 = ExtGridrowComponent;
    ExtGridrowComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtGridrowComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtGridrowComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtGridrowComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtGridrowComponent_1;
    ExtGridrowComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtGridrowComponent = ExtGridrowComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtGridrowComponent);
ExtGridrowComponent.ɵfac = function ExtGridrowComponent_Factory(t) { return new (t || ExtGridrowComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtGridrowComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtGridrowComponent, selectors: [["ExtGridrow"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", body: "body", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultCellUI: "defaultCellUI", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", expandedField: "expandedField", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", pinned: "pinned", publishes: "publishes", record: "record", recordIndex: "recordIndex", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stickyVisibility: "stickyVisibility", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridrowComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtGridrowComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtGridrowComponent, [{
        type: Component,
        args: [{
                selector: 'ExtGridrow',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'body', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultCellUI', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandedField', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stickyVisibility', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridrowComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtGridrowComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCGridrow()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtRowbodyComponent = /** @class */ (function (_super) {
    __extends(ExtRowbodyComponent, _super);
    function ExtRowbodyComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCRowbody()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'rowbody';
        return _this;
    }
    ExtRowbodyComponent_1 = ExtRowbodyComponent;
    ExtRowbodyComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtRowbodyComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtRowbodyComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtRowbodyComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtRowbodyComponent_1;
    ExtRowbodyComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtRowbodyComponent = ExtRowbodyComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtRowbodyComponent);
ExtRowbodyComponent.ɵfac = function ExtRowbodyComponent_Factory(t) { return new (t || ExtRowbodyComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtRowbodyComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtRowbodyComponent, selectors: [["ExtRowbody"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtRowbodyComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtRowbodyComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtRowbodyComponent, [{
        type: Component,
        args: [{
                selector: 'ExtRowbody',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtRowbodyComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtRowbodyComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCRowbody()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtRoweditorbarComponent = /** @class */ (function (_super) {
    __extends(ExtRoweditorbarComponent, _super);
    function ExtRoweditorbarComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCRoweditorbar()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'roweditorbar';
        return _this;
    }
    ExtRoweditorbarComponent_1 = ExtRoweditorbarComponent;
    ExtRoweditorbarComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtRoweditorbarComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtRoweditorbarComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtRoweditorbarComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtRoweditorbarComponent_1;
    ExtRoweditorbarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtRoweditorbarComponent = ExtRoweditorbarComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtRoweditorbarComponent);
ExtRoweditorbarComponent.ɵfac = function ExtRoweditorbarComponent_Factory(t) { return new (t || ExtRoweditorbarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtRoweditorbarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtRoweditorbarComponent, selectors: [["ExtRoweditorbar"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtRoweditorbarComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtRoweditorbarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtRoweditorbarComponent, [{
        type: Component,
        args: [{
                selector: 'ExtRoweditorbar',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtRoweditorbarComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtRoweditorbarComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCRoweditorbar()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtRoweditorcellComponent = /** @class */ (function (_super) {
    __extends(ExtRoweditorcellComponent, _super);
    function ExtRoweditorcellComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCRoweditorcell()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'roweditorcell';
        return _this;
    }
    ExtRoweditorcellComponent_1 = ExtRoweditorcellComponent;
    ExtRoweditorcellComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtRoweditorcellComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtRoweditorcellComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtRoweditorcellComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtRoweditorcellComponent_1;
    ExtRoweditorcellComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtRoweditorcellComponent = ExtRoweditorcellComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtRoweditorcellComponent);
ExtRoweditorcellComponent.ɵfac = function ExtRoweditorcellComponent_Factory(t) { return new (t || ExtRoweditorcellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtRoweditorcellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtRoweditorcellComponent, selectors: [["ExtRoweditorcell"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtRoweditorcellComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtRoweditorcellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtRoweditorcellComponent, [{
        type: Component,
        args: [{
                selector: 'ExtRoweditorcell',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtRoweditorcellComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtRoweditorcellComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCRoweditorcell()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtRoweditorComponent = /** @class */ (function (_super) {
    __extends(ExtRoweditorComponent, _super);
    function ExtRoweditorComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'buttonAlign', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataMap', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'owner', 'ownerListeners', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sourceListeners', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'storeListeners', 'style', 'tabIndex', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCRoweditor()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'roweditor';
        return _this;
    }
    ExtRoweditorComponent_1 = ExtRoweditorComponent;
    ExtRoweditorComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtRoweditorComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtRoweditorComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtRoweditorComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtRoweditorComponent_1;
    ExtRoweditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtRoweditorComponent = ExtRoweditorComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtRoweditorComponent);
ExtRoweditorComponent.ɵfac = function ExtRoweditorComponent_Factory(t) { return new (t || ExtRoweditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtRoweditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtRoweditorComponent, selectors: [["ExtRoweditor"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataMap: "dataMap", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemCls: "itemCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", owner: "owner", ownerListeners: "ownerListeners", padding: "padding", pinned: "pinned", publishes: "publishes", record: "record", recordIndex: "recordIndex", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sourceListeners: "sourceListeners", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", storeListeners: "storeListeners", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtRoweditorComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtRoweditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtRoweditorComponent, [{
        type: Component,
        args: [{
                selector: 'ExtRoweditor',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'buttonAlign', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataMap', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'owner', 'ownerListeners', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sourceListeners', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'storeListeners', 'style', 'tabIndex', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtRoweditorComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtRoweditorComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCRoweditor()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtRoweditorgapComponent = /** @class */ (function (_super) {
    __extends(ExtRoweditorgapComponent, _super);
    function ExtRoweditorgapComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCRoweditorgap()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'roweditorgap';
        return _this;
    }
    ExtRoweditorgapComponent_1 = ExtRoweditorgapComponent;
    ExtRoweditorgapComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtRoweditorgapComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtRoweditorgapComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtRoweditorgapComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtRoweditorgapComponent_1;
    ExtRoweditorgapComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtRoweditorgapComponent = ExtRoweditorgapComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtRoweditorgapComponent);
ExtRoweditorgapComponent.ɵfac = function ExtRoweditorgapComponent_Factory(t) { return new (t || ExtRoweditorgapComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtRoweditorgapComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtRoweditorgapComponent, selectors: [["ExtRoweditorgap"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtRoweditorgapComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtRoweditorgapComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtRoweditorgapComponent, [{
        type: Component,
        args: [{
                selector: 'ExtRoweditorgap',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtRoweditorgapComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtRoweditorgapComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCRoweditorgap()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtRowheaderComponent = /** @class */ (function (_super) {
    __extends(ExtRowheaderComponent, _super);
    function ExtRowheaderComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'group', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCRowheader()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'rowheader';
        return _this;
    }
    ExtRowheaderComponent_1 = ExtRowheaderComponent;
    ExtRowheaderComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtRowheaderComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtRowheaderComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtRowheaderComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtRowheaderComponent_1;
    ExtRowheaderComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtRowheaderComponent = ExtRowheaderComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtRowheaderComponent);
ExtRowheaderComponent.ɵfac = function ExtRowheaderComponent_Factory(t) { return new (t || ExtRowheaderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtRowheaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtRowheaderComponent, selectors: [["ExtRowheader"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", group: "group", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", pinned: "pinned", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtRowheaderComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtRowheaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtRowheaderComponent, [{
        type: Component,
        args: [{
                selector: 'ExtRowheader',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'group', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtRowheaderComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtRowheaderComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCRowheader()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtGridsummaryrowComponent = /** @class */ (function (_super) {
    __extends(ExtGridsummaryrowComponent, _super);
    function ExtGridsummaryrowComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'body', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultCellUI', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandedField', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stickyVisibility', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCGridsummaryrow()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'gridsummaryrow';
        return _this;
    }
    ExtGridsummaryrowComponent_1 = ExtGridsummaryrowComponent;
    ExtGridsummaryrowComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtGridsummaryrowComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtGridsummaryrowComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtGridsummaryrowComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtGridsummaryrowComponent_1;
    ExtGridsummaryrowComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtGridsummaryrowComponent = ExtGridsummaryrowComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtGridsummaryrowComponent);
ExtGridsummaryrowComponent.ɵfac = function ExtGridsummaryrowComponent_Factory(t) { return new (t || ExtGridsummaryrowComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtGridsummaryrowComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtGridsummaryrowComponent, selectors: [["ExtGridsummaryrow"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", body: "body", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultCellUI: "defaultCellUI", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", expandedField: "expandedField", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", pinned: "pinned", publishes: "publishes", record: "record", recordIndex: "recordIndex", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stickyVisibility: "stickyVisibility", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridsummaryrowComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtGridsummaryrowComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtGridsummaryrowComponent, [{
        type: Component,
        args: [{
                selector: 'ExtGridsummaryrow',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'body', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultCellUI', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandedField', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stickyVisibility', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtGridsummaryrowComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtGridsummaryrowComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCGridsummaryrow()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTreeComponent = /** @class */ (function (_super) {
    __extends(ExtTreeComponent, _super);
    function ExtTreeComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'bufferSize', 'cardSwitchAnimation', 'centered', 'cls', 'collapseDefaults', 'collapsible', 'columnLines', 'columnMenu', 'columnResize', 'columns', 'columnsMenuItem', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'disclosureProperty', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'enableColumnMove', 'undefined', 'undefined', 'undefined', 'undefined', 'expanderFirst', 'expanderOnly', 'flex', 'floated', 'focusableContainer', 'focusCls', 'folderSort', 'fullscreen', 'grouped', 'groupFooter', 'groupHeader', 'grouping', 'groupPlaceholder', 'height', 'hidden', 'hideAnimation', 'hideHeaders', 'hideMode', 'hideOnMaskTap', 'hideScrollbar', 'horizontalOverflow', 'html', 'id', 'inactiveChildTabIndex', 'indexBar', 'infinite', 'inline', 'innerCls', 'innerCtHeight', 'innerWidth', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemConfig', 'itemContentCls', 'itemDataMap', 'itemId', 'itemInnerCls', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'maintainChildNodes', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxItemCache', 'maxWidth', 'minHeight', 'minimumBufferDistance', 'minWidth', 'modal', 'modelValidation', 'multiColumnSort', 'name', 'nameable', 'nameHolder', 'onItemDisclosure', 'padding', 'pinFooters', 'pinHeaders', 'pinnedFooter', 'pinnedFooterHeight', 'pinnedHeader', 'pinnedHeaderHeight', 'plugins', 'pressedDelay', 'preventSelectionOnDisclose', 'preventSelectionOnTool', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'right', 'ripple', 'rowLines', 'rowNumbers', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selection', 'selectOnExpander', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'singleExpand', 'sortable', 'stateful', 'statefulDefaults', 'stateId', 'store', 'striped', 'style', 'tabIndex', 'title', 'titleBar', 'toFrontOnShow', 'tooltip', 'top', 'topRenderedIndex', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'undefined', 'variableHeights', 'verticalOverflow', 'viewModel', 'visibleHeight', 'visibleLeft', 'visibleTop', 'visibleWidth', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTree()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforecomplete', 'beforedisabledchange', 'beforedockedchange', 'beforeedit', 'beforegroupcollapse', 'beforegroupexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforeload', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforenodecollapse', 'beforenodeexpand', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeselectionextend', 'beforeshow', 'beforestartedit', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'canceledit', 'cellselection', 'centeredchange', 'checkchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'columnadd', 'columnhide', 'columnmenucreated', 'columnmove', 'columnremove', 'columnresize', 'columnselection', 'columnshow', 'columnsort', 'complete', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'disclose', 'dockedchange', 'edit', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'groupcollapse', 'groupexpand', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemaction', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'load', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'nodecollapse', 'nodeexpand', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'selectionextenderdrag', 'show', 'specialkey', 'startedit', 'storechange', 'tofront', 'topchange', 'updatedata', 'validateedit', 'widthchange',], vc) || this;
        _this.xtype = 'tree';
        return _this;
    }
    ExtTreeComponent_1 = ExtTreeComponent;
    ExtTreeComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTreeComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTreeComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTreeComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTreeComponent_1;
    ExtTreeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTreeComponent = ExtTreeComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTreeComponent);
ExtTreeComponent.ɵfac = function ExtTreeComponent_Factory(t) { return new (t || ExtTreeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTreeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTreeComponent, selectors: [["ExtTree"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", associatedData: "associatedData", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", bufferSize: "bufferSize", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", collapseDefaults: "collapseDefaults", collapsible: "collapsible", columnLines: "columnLines", columnMenu: "columnMenu", columnResize: "columnResize", columns: "columns", columnsMenuItem: "columnsMenuItem", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", deferEmptyText: "deferEmptyText", deselectOnContainerClick: "deselectOnContainerClick", disabled: "disabled", disableSelection: "disableSelection", disclosureProperty: "disclosureProperty", displayed: "displayed", docked: "docked", draggable: "draggable", emptyItemText: "emptyItemText", emptyState: "emptyState", emptyText: "emptyText", emptyTextDefaults: "emptyTextDefaults", emptyTextProperty: "emptyTextProperty", enableColumnMove: "enableColumnMove", undefined: "undefined", expanderFirst: "expanderFirst", expanderOnly: "expanderOnly", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", folderSort: "folderSort", fullscreen: "fullscreen", grouped: "grouped", groupFooter: "groupFooter", groupHeader: "groupHeader", grouping: "grouping", groupPlaceholder: "groupPlaceholder", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideHeaders: "hideHeaders", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideScrollbar: "hideScrollbar", horizontalOverflow: "horizontalOverflow", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", indexBar: "indexBar", infinite: "infinite", inline: "inline", innerCls: "innerCls", innerCtHeight: "innerCtHeight", innerWidth: "innerWidth", instanceCls: "instanceCls", itemButtonMode: "itemButtonMode", itemCls: "itemCls", itemConfig: "itemConfig", itemContentCls: "itemContentCls", itemDataMap: "itemDataMap", itemId: "itemId", itemInnerCls: "itemInnerCls", itemRipple: "itemRipple", items: "items", itemsFocusable: "itemsFocusable", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", loadingHeight: "loadingHeight", loadingText: "loadingText", maintainChildNodes: "maintainChildNodes", manageBorders: "manageBorders", margin: "margin", markDirty: "markDirty", masked: "masked", maxHeight: "maxHeight", maxItemCache: "maxItemCache", maxWidth: "maxWidth", minHeight: "minHeight", minimumBufferDistance: "minimumBufferDistance", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multiColumnSort: "multiColumnSort", name: "name", nameable: "nameable", nameHolder: "nameHolder", onItemDisclosure: "onItemDisclosure", padding: "padding", pinFooters: "pinFooters", pinHeaders: "pinHeaders", pinnedFooter: "pinnedFooter", pinnedFooterHeight: "pinnedFooterHeight", pinnedHeader: "pinnedHeader", pinnedHeaderHeight: "pinnedHeaderHeight", pressedDelay: "pressedDelay", preventSelectionOnDisclose: "preventSelectionOnDisclose", preventSelectionOnTool: "preventSelectionOnTool", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", rowLines: "rowLines", rowNumbers: "rowNumbers", scrollable: "scrollable", scrollDock: "scrollDock", scrollToTopOnRefresh: "scrollToTopOnRefresh", selectable: "selectable", selection: "selection", selectOnExpander: "selectOnExpander", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", singleExpand: "singleExpand", sortable: "sortable", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", striped: "striped", style: "style", tabIndex: "tabIndex", title: "title", titleBar: "titleBar", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", topRenderedIndex: "topRenderedIndex", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggerCtEvent: "triggerCtEvent", triggerEvent: "triggerEvent", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", variableHeights: "variableHeights", verticalOverflow: "verticalOverflow", viewModel: "viewModel", visibleHeight: "visibleHeight", visibleLeft: "visibleLeft", visibleTop: "visibleTop", visibleWidth: "visibleWidth", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecheckchange: "beforecheckchange", beforecomplete: "beforecomplete", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeedit: "beforeedit", beforegroupcollapse: "beforegroupcollapse", beforegroupexpand: "beforegroupexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforeload: "beforeload", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforenodecollapse: "beforenodecollapse", beforenodeexpand: "beforenodeexpand", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeselectionextend: "beforeselectionextend", beforeshow: "beforeshow", beforestartedit: "beforestartedit", beforestorechange: "beforestorechange", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", canceledit: "canceledit", cellselection: "cellselection", centeredchange: "centeredchange", checkchange: "checkchange", childdoubletap: "childdoubletap", childlongpress: "childlongpress", childmouseenter: "childmouseenter", childmouseleave: "childmouseleave", childsingletap: "childsingletap", childtap: "childtap", childtaphold: "childtaphold", childtouchcancel: "childtouchcancel", childtouchend: "childtouchend", childtouchmove: "childtouchmove", childtouchstart: "childtouchstart", columnadd: "columnadd", columnhide: "columnhide", columnmenucreated: "columnmenucreated", columnmove: "columnmove", columnremove: "columnremove", columnresize: "columnresize", columnselection: "columnselection", columnshow: "columnshow", columnsort: "columnsort", complete: "complete", deactivate: "deactivate", deselect: "deselect", destroy: "destroy", disabledchange: "disabledchange", disclose: "disclose", dockedchange: "dockedchange", edit: "edit", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", groupcollapse: "groupcollapse", groupexpand: "groupexpand", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemaction: "itemaction", itemdoubletap: "itemdoubletap", itemlongpress: "itemlongpress", itemmouseenter: "itemmouseenter", itemmouseleave: "itemmouseleave", itemsingletap: "itemsingletap", itemswipe: "itemswipe", itemtap: "itemtap", itemtaphold: "itemtaphold", itemtouchcancel: "itemtouchcancel", itemtouchend: "itemtouchend", itemtouchmove: "itemtouchmove", itemtouchstart: "itemtouchstart", leftchange: "leftchange", load: "load", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", navigate: "navigate", nodecollapse: "nodecollapse", nodeexpand: "nodeexpand", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", select: "select", selectionextenderdrag: "selectionextenderdrag", show: "show", specialkey: "specialkey", startedit: "startedit", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", validateedit: "validateedit", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTreeComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTreeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTreeComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTree',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'bufferSize', 'cardSwitchAnimation', 'centered', 'cls', 'collapseDefaults', 'collapsible', 'columnLines', 'columnMenu', 'columnResize', 'columns', 'columnsMenuItem', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'disclosureProperty', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'enableColumnMove', 'undefined', 'undefined', 'undefined', 'undefined', 'expanderFirst', 'expanderOnly', 'flex', 'floated', 'focusableContainer', 'focusCls', 'folderSort', 'fullscreen', 'grouped', 'groupFooter', 'groupHeader', 'grouping', 'groupPlaceholder', 'height', 'hidden', 'hideAnimation', 'hideHeaders', 'hideMode', 'hideOnMaskTap', 'hideScrollbar', 'horizontalOverflow', 'html', 'id', 'inactiveChildTabIndex', 'indexBar', 'infinite', 'inline', 'innerCls', 'innerCtHeight', 'innerWidth', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemConfig', 'itemContentCls', 'itemDataMap', 'itemId', 'itemInnerCls', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'maintainChildNodes', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxItemCache', 'maxWidth', 'minHeight', 'minimumBufferDistance', 'minWidth', 'modal', 'modelValidation', 'multiColumnSort', 'name', 'nameable', 'nameHolder', 'onItemDisclosure', 'padding', 'pinFooters', 'pinHeaders', 'pinnedFooter', 'pinnedFooterHeight', 'pinnedHeader', 'pinnedHeaderHeight', 'plugins', 'pressedDelay', 'preventSelectionOnDisclose', 'preventSelectionOnTool', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'right', 'ripple', 'rowLines', 'rowNumbers', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selection', 'selectOnExpander', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'singleExpand', 'sortable', 'stateful', 'statefulDefaults', 'stateId', 'store', 'striped', 'style', 'tabIndex', 'title', 'titleBar', 'toFrontOnShow', 'tooltip', 'top', 'topRenderedIndex', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'undefined', 'variableHeights', 'verticalOverflow', 'viewModel', 'visibleHeight', 'visibleLeft', 'visibleTop', 'visibleWidth', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforecomplete', 'beforedisabledchange', 'beforedockedchange', 'beforeedit', 'beforegroupcollapse', 'beforegroupexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforeload', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforenodecollapse', 'beforenodeexpand', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeselectionextend', 'beforeshow', 'beforestartedit', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'canceledit', 'cellselection', 'centeredchange', 'checkchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'columnadd', 'columnhide', 'columnmenucreated', 'columnmove', 'columnremove', 'columnresize', 'columnselection', 'columnshow', 'columnsort', 'complete', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'disclose', 'dockedchange', 'edit', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'groupcollapse', 'groupexpand', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemaction', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'load', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'nodecollapse', 'nodeexpand', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'selectionextenderdrag', 'show', 'specialkey', 'startedit', 'storechange', 'tofront', 'topchange', 'updatedata', 'validateedit', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTreeComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTreeComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTree()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtImageComponent = /** @class */ (function (_super) {
    __extends(ExtImageComponent, _super);
    function ExtImageComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'backgroundCls', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'imageCls', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'mode', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'src', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCImage()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'error', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'load', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'image';
        return _this;
    }
    ExtImageComponent_1 = ExtImageComponent;
    ExtImageComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtImageComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtImageComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtImageComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtImageComponent_1;
    ExtImageComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtImageComponent = ExtImageComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtImageComponent);
ExtImageComponent.ɵfac = function ExtImageComponent_Factory(t) { return new (t || ExtImageComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtImageComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtImageComponent, selectors: [["ExtImage"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", backgroundCls: "backgroundCls", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", imageCls: "imageCls", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", mode: "mode", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", src: "src", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", error: "error", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", load: "load", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tap: "tap", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtImageComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtImageComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtImageComponent, [{
        type: Component,
        args: [{
                selector: 'ExtImage',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'backgroundCls', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'imageCls', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'mode', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'src', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'error', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'load', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtImageComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtImageComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCImage()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtImgComponent = /** @class */ (function (_super) {
    __extends(ExtImgComponent, _super);
    function ExtImgComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'backgroundCls', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'imageCls', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'mode', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'src', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCImg()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'error', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'load', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'img';
        return _this;
    }
    ExtImgComponent_1 = ExtImgComponent;
    ExtImgComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtImgComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtImgComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtImgComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtImgComponent_1;
    ExtImgComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtImgComponent = ExtImgComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtImgComponent);
ExtImgComponent.ɵfac = function ExtImgComponent_Factory(t) { return new (t || ExtImgComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtImgComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtImgComponent, selectors: [["ExtImg"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", backgroundCls: "backgroundCls", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", imageCls: "imageCls", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", mode: "mode", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", src: "src", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", error: "error", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", load: "load", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tap: "tap", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtImgComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtImgComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtImgComponent, [{
        type: Component,
        args: [{
                selector: 'ExtImg',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'backgroundCls', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'imageCls', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'mode', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'src', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'error', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'load', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtImgComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtImgComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCImg()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtIndicatorComponent = /** @class */ (function (_super) {
    __extends(ExtIndicatorComponent, _super);
    function ExtIndicatorComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeIndex', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'count', 'data', 'defaultListenerScope', 'direction', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tapMode', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCIndicator()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'indicatortap', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'next', 'orientationchange', 'painted', 'positionedchange', 'previous', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'indicator';
        return _this;
    }
    ExtIndicatorComponent_1 = ExtIndicatorComponent;
    ExtIndicatorComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtIndicatorComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtIndicatorComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtIndicatorComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtIndicatorComponent_1;
    ExtIndicatorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtIndicatorComponent = ExtIndicatorComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtIndicatorComponent);
ExtIndicatorComponent.ɵfac = function ExtIndicatorComponent_Factory(t) { return new (t || ExtIndicatorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtIndicatorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtIndicatorComponent, selectors: [["ExtIndicator"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeIndex: "activeIndex", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", count: "count", data: "data", defaultListenerScope: "defaultListenerScope", direction: "direction", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tapMode: "tapMode", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", indicatortap: "indicatortap", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", next: "next", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", previous: "previous", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtIndicatorComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtIndicatorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtIndicatorComponent, [{
        type: Component,
        args: [{
                selector: 'ExtIndicator',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeIndex', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'count', 'data', 'defaultListenerScope', 'direction', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tapMode', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'indicatortap', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'next', 'orientationchange', 'painted', 'positionedchange', 'previous', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtIndicatorComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtIndicatorComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCIndicator()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtLabelComponent = /** @class */ (function (_super) {
    __extends(ExtLabelComponent, _super);
    function ExtLabelComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCLabel()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'label';
        return _this;
    }
    ExtLabelComponent_1 = ExtLabelComponent;
    ExtLabelComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtLabelComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtLabelComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtLabelComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtLabelComponent_1;
    ExtLabelComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtLabelComponent = ExtLabelComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtLabelComponent);
ExtLabelComponent.ɵfac = function ExtLabelComponent_Factory(t) { return new (t || ExtLabelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtLabelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtLabelComponent, selectors: [["ExtLabel"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtLabelComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtLabelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtLabelComponent, [{
        type: Component,
        args: [{
                selector: 'ExtLabel',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtLabelComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtLabelComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCLabel()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTreelistComponent = /** @class */ (function (_super) {
    __extends(ExtTreelistComponent, _super);
    function ExtTreelistComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'defaults', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expanderFirst', 'expanderOnly', 'flex', 'floated', 'floatLeafItems', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightPath', 'html', 'id', 'indent', 'instanceCls', 'itemId', 'itemRipple', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'micro', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'selection', 'selectOnExpander', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'singleExpand', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTreelist()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemclick', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'selectionchange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'treelist';
        return _this;
    }
    ExtTreelistComponent_1 = ExtTreelistComponent;
    ExtTreelistComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTreelistComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTreelistComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTreelistComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTreelistComponent_1;
    ExtTreelistComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTreelistComponent = ExtTreelistComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTreelistComponent);
ExtTreelistComponent.ɵfac = function ExtTreelistComponent_Factory(t) { return new (t || ExtTreelistComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTreelistComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTreelistComponent, selectors: [["ExtTreelist"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", defaults: "defaults", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", expanderFirst: "expanderFirst", expanderOnly: "expanderOnly", flex: "flex", floated: "floated", floatLeafItems: "floatLeafItems", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightPath: "highlightPath", html: "html", id: "id", indent: "indent", instanceCls: "instanceCls", itemId: "itemId", itemRipple: "itemRipple", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", micro: "micro", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", selection: "selection", selectOnExpander: "selectOnExpander", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", singleExpand: "singleExpand", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemclick: "itemclick", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", selectionchange: "selectionchange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTreelistComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTreelistComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTreelistComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTreelist',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'defaults', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expanderFirst', 'expanderOnly', 'flex', 'floated', 'floatLeafItems', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightPath', 'html', 'id', 'indent', 'instanceCls', 'itemId', 'itemRipple', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'micro', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'selection', 'selectOnExpander', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'singleExpand', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemclick', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'selectionchange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTreelistComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTreelistComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTreelist()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTreelistitemComponent = /** @class */ (function (_super) {
    __extends(ExtTreelistitemComponent, _super);
    function ExtTreelistitemComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'expandable', 'expanded', 'flex', 'floated', 'focusCls', 'height', 'hidden', 'hideMode', 'iconCls', 'iconClsProperty', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'leaf', 'listeners', 'loading', 'margin', 'name', 'nameable', 'node', 'over', 'owner', 'parentItem', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'ripple', 'rowCls', 'rowClsProperty', 'selected', 'selectedParent', 'session', 'shadow', 'shareableName', 'shim', 'style', 'text', 'textProperty', 'toFrontOnShow', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',], (new EWCTreelistitem()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'treelistitem';
        return _this;
    }
    ExtTreelistitemComponent_1 = ExtTreelistitemComponent;
    ExtTreelistitemComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTreelistitemComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTreelistitemComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTreelistitemComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTreelistitemComponent_1;
    ExtTreelistitemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTreelistitemComponent = ExtTreelistitemComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTreelistitemComponent);
ExtTreelistitemComponent.ɵfac = function ExtTreelistitemComponent_Factory(t) { return new (t || ExtTreelistitemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTreelistitemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTreelistitemComponent, selectors: [["ExtTreelistitem"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", border: "border", cls: "cls", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", disabled: "disabled", undefined: "undefined", expandable: "expandable", expanded: "expanded", flex: "flex", floated: "floated", focusCls: "focusCls", height: "height", hidden: "hidden", hideMode: "hideMode", iconCls: "iconCls", iconClsProperty: "iconClsProperty", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", leaf: "leaf", listeners: "listeners", loading: "loading", margin: "margin", name: "name", nameable: "nameable", node: "node", over: "over", owner: "owner", parentItem: "parentItem", publishes: "publishes", reference: "reference", relative: "relative", renderTo: "renderTo", ripple: "ripple", rowCls: "rowCls", rowClsProperty: "rowClsProperty", selected: "selected", selectedParent: "selectedParent", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", style: "style", text: "text", textProperty: "textProperty", toFrontOnShow: "toFrontOnShow", touchAction: "touchAction", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", viewModel: "viewModel", width: "width", x: "x", y: "y" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTreelistitemComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTreelistitemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTreelistitemComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTreelistitem',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'expandable', 'expanded', 'flex', 'floated', 'focusCls', 'height', 'hidden', 'hideMode', 'iconCls', 'iconClsProperty', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'leaf', 'listeners', 'loading', 'margin', 'name', 'nameable', 'node', 'over', 'owner', 'parentItem', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'ripple', 'rowCls', 'rowClsProperty', 'selected', 'selectedParent', 'session', 'shadow', 'shareableName', 'shim', 'style', 'text', 'textProperty', 'toFrontOnShow', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTreelistitemComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTreelistitemComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTreelistitem()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtLoadmaskComponent = /** @class */ (function (_super) {
    __extends(ExtLoadmaskComponent, _super);
    function ExtLoadmaskComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'indicator', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'message', 'messageCls', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'transparent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCLoadmask()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'loadmask';
        return _this;
    }
    ExtLoadmaskComponent_1 = ExtLoadmaskComponent;
    ExtLoadmaskComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtLoadmaskComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtLoadmaskComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtLoadmaskComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtLoadmaskComponent_1;
    ExtLoadmaskComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtLoadmaskComponent = ExtLoadmaskComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtLoadmaskComponent);
ExtLoadmaskComponent.ɵfac = function ExtLoadmaskComponent_Factory(t) { return new (t || ExtLoadmaskComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtLoadmaskComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtLoadmaskComponent, selectors: [["ExtLoadmask"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", indicator: "indicator", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", message: "message", messageCls: "messageCls", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", transparent: "transparent", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tap: "tap", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtLoadmaskComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtLoadmaskComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtLoadmaskComponent, [{
        type: Component,
        args: [{
                selector: 'ExtLoadmask',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'indicator', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'message', 'messageCls', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'transparent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtLoadmaskComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtLoadmaskComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCLoadmask()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtMaskComponent = /** @class */ (function (_super) {
    __extends(ExtMaskComponent, _super);
    function ExtMaskComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'transparent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCMask()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'mask';
        return _this;
    }
    ExtMaskComponent_1 = ExtMaskComponent;
    ExtMaskComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtMaskComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtMaskComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtMaskComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtMaskComponent_1;
    ExtMaskComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtMaskComponent = ExtMaskComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtMaskComponent);
ExtMaskComponent.ɵfac = function ExtMaskComponent_Factory(t) { return new (t || ExtMaskComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtMaskComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtMaskComponent, selectors: [["ExtMask"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", transparent: "transparent", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tap: "tap", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtMaskComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtMaskComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtMaskComponent, [{
        type: Component,
        args: [{
                selector: 'ExtMask',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'transparent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtMaskComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtMaskComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCMask()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtMediaComponent = /** @class */ (function (_super) {
    __extends(ExtMediaComponent, _super);
    function ExtMediaComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoPause', 'autoResume', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'controls', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'loop', 'margin', 'maxHeight', 'maxWidth', 'media', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'muted', 'name', 'nameable', 'padding', 'plugins', 'preload', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'volume', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCMedia()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'ended', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'mutedchange', 'orientationchange', 'painted', 'pause', 'play', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'stop', 'timeupdate', 'tofront', 'topchange', 'updatedata', 'volumechange', 'widthchange',], vc) || this;
        _this.xtype = 'media';
        return _this;
    }
    ExtMediaComponent_1 = ExtMediaComponent;
    ExtMediaComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtMediaComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtMediaComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtMediaComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtMediaComponent_1;
    ExtMediaComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtMediaComponent = ExtMediaComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtMediaComponent);
ExtMediaComponent.ɵfac = function ExtMediaComponent_Factory(t) { return new (t || ExtMediaComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtMediaComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtMediaComponent, selectors: [["ExtMedia"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoPause: "autoPause", autoResume: "autoResume", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", controls: "controls", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", loop: "loop", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", media: "media", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", muted: "muted", name: "name", nameable: "nameable", padding: "padding", preload: "preload", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", url: "url", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", volume: "volume", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", ended: "ended", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", mutedchange: "mutedchange", orientationchange: "orientationchange", painted: "painted", pause: "pause", play: "play", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", stop: "stop", timeupdate: "timeupdate", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", volumechange: "volumechange", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtMediaComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtMediaComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtMediaComponent, [{
        type: Component,
        args: [{
                selector: 'ExtMedia',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoPause', 'autoResume', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'controls', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'loop', 'margin', 'maxHeight', 'maxWidth', 'media', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'muted', 'name', 'nameable', 'padding', 'plugins', 'preload', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'volume', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'ended', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'mutedchange', 'orientationchange', 'painted', 'pause', 'play', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'stop', 'timeupdate', 'tofront', 'topchange', 'updatedata', 'volumechange', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtMediaComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtMediaComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCMedia()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtMenucheckitemComponent = /** @class */ (function (_super) {
    __extends(ExtMenucheckitemComponent, _super);
    function ExtMenucheckitemComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'checkChangeDisabled', 'checked', 'checkHandler', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submenuText', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCMenucheckitem()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'checkchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'menucheckitem';
        return _this;
    }
    ExtMenucheckitemComponent_1 = ExtMenucheckitemComponent;
    ExtMenucheckitemComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtMenucheckitemComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtMenucheckitemComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtMenucheckitemComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtMenucheckitemComponent_1;
    ExtMenucheckitemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtMenucheckitemComponent = ExtMenucheckitemComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtMenucheckitemComponent);
ExtMenucheckitemComponent.ɵfac = function ExtMenucheckitemComponent_Factory(t) { return new (t || ExtMenucheckitemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtMenucheckitemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtMenucheckitemComponent, selectors: [["ExtMenucheckitem"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", checkChangeDisabled: "checkChangeDisabled", checked: "checked", checkHandler: "checkHandler", clickHideDelay: "clickHideDelay", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", destroyMenu: "destroyMenu", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", handler: "handler", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnClick: "hideOnClick", hideOnMaskTap: "hideOnMaskTap", href: "href", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", indented: "indented", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuAlign: "menuAlign", menuExpandDelay: "menuExpandDelay", menuHideDelay: "menuHideDelay", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", separator: "separator", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", submenuText: "submenuText", tabIndex: "tabIndex", target: "target", text: "text", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecheckchange: "beforecheckchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", checkchange: "checkchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtMenucheckitemComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtMenucheckitemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtMenucheckitemComponent, [{
        type: Component,
        args: [{
                selector: 'ExtMenucheckitem',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'checkChangeDisabled', 'checked', 'checkHandler', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submenuText', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'checkchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtMenucheckitemComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtMenucheckitemComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCMenucheckitem()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtMenuitemComponent = /** @class */ (function (_super) {
    __extends(ExtMenuitemComponent, _super);
    function ExtMenuitemComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCMenuitem()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'menuitem';
        return _this;
    }
    ExtMenuitemComponent_1 = ExtMenuitemComponent;
    ExtMenuitemComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtMenuitemComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtMenuitemComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtMenuitemComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtMenuitemComponent_1;
    ExtMenuitemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtMenuitemComponent = ExtMenuitemComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtMenuitemComponent);
ExtMenuitemComponent.ɵfac = function ExtMenuitemComponent_Factory(t) { return new (t || ExtMenuitemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtMenuitemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtMenuitemComponent, selectors: [["ExtMenuitem"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", clickHideDelay: "clickHideDelay", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", destroyMenu: "destroyMenu", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", handler: "handler", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnClick: "hideOnClick", hideOnMaskTap: "hideOnMaskTap", href: "href", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", indented: "indented", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuAlign: "menuAlign", menuExpandDelay: "menuExpandDelay", menuHideDelay: "menuHideDelay", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", separator: "separator", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", target: "target", text: "text", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtMenuitemComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtMenuitemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtMenuitemComponent, [{
        type: Component,
        args: [{
                selector: 'ExtMenuitem',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtMenuitemComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtMenuitemComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCMenuitem()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtMenuComponent = /** @class */ (function (_super) {
    __extends(ExtMenuComponent, _super);
    function ExtMenuComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'allowOtherMenus', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoHide', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'groups', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'ignoreParentClicks', 'inactiveChildTabIndex', 'indented', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'mouseLeaveDelay', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCMenu()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'groupchange', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'menu';
        return _this;
    }
    ExtMenuComponent_1 = ExtMenuComponent;
    ExtMenuComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtMenuComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtMenuComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtMenuComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtMenuComponent_1;
    ExtMenuComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtMenuComponent = ExtMenuComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtMenuComponent);
ExtMenuComponent.ɵfac = function ExtMenuComponent_Factory(t) { return new (t || ExtMenuComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtMenuComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtMenuComponent, selectors: [["ExtMenu"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", allowOtherMenus: "allowOtherMenus", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoHide: "autoHide", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", groups: "groups", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", ignoreParentClicks: "ignoreParentClicks", inactiveChildTabIndex: "inactiveChildTabIndex", indented: "indented", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", mouseLeaveDelay: "mouseLeaveDelay", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", separator: "separator", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", groupchange: "groupchange", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtMenuComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtMenuComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtMenuComponent, [{
        type: Component,
        args: [{
                selector: 'ExtMenu',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'allowOtherMenus', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoHide', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'groups', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'ignoreParentClicks', 'inactiveChildTabIndex', 'indented', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'mouseLeaveDelay', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'groupchange', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtMenuComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtMenuComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCMenu()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtMenuradioitemComponent = /** @class */ (function (_super) {
    __extends(ExtMenuradioitemComponent, _super);
    function ExtMenuradioitemComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'allowUncheck', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'checkChangeDisabled', 'checked', 'checkHandler', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'group', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submenuText', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCMenuradioitem()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'checkchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'menuradioitem';
        return _this;
    }
    ExtMenuradioitemComponent_1 = ExtMenuradioitemComponent;
    ExtMenuradioitemComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtMenuradioitemComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtMenuradioitemComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtMenuradioitemComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtMenuradioitemComponent_1;
    ExtMenuradioitemComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtMenuradioitemComponent = ExtMenuradioitemComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtMenuradioitemComponent);
ExtMenuradioitemComponent.ɵfac = function ExtMenuradioitemComponent_Factory(t) { return new (t || ExtMenuradioitemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtMenuradioitemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtMenuradioitemComponent, selectors: [["ExtMenuradioitem"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", allowUncheck: "allowUncheck", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", checkChangeDisabled: "checkChangeDisabled", checked: "checked", checkHandler: "checkHandler", clickHideDelay: "clickHideDelay", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", destroyMenu: "destroyMenu", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", group: "group", handler: "handler", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnClick: "hideOnClick", hideOnMaskTap: "hideOnMaskTap", href: "href", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", indented: "indented", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuAlign: "menuAlign", menuExpandDelay: "menuExpandDelay", menuHideDelay: "menuHideDelay", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", separator: "separator", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", submenuText: "submenuText", tabIndex: "tabIndex", target: "target", text: "text", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecheckchange: "beforecheckchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", checkchange: "checkchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtMenuradioitemComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtMenuradioitemComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtMenuradioitemComponent, [{
        type: Component,
        args: [{
                selector: 'ExtMenuradioitem',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'allowUncheck', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'checkChangeDisabled', 'checked', 'checkHandler', 'clickHideDelay', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'group', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnClick', 'hideOnMaskTap', 'href', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'indented', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'menuExpandDelay', 'menuHideDelay', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'separator', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submenuText', 'tabIndex', 'target', 'text', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforecheckchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'checkchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtMenuradioitemComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtMenuradioitemComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCMenuradioitem()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtMenuseparatorComponent = /** @class */ (function (_super) {
    __extends(ExtMenuseparatorComponent, _super);
    function ExtMenuseparatorComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCMenuseparator()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'menuseparator';
        return _this;
    }
    ExtMenuseparatorComponent_1 = ExtMenuseparatorComponent;
    ExtMenuseparatorComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtMenuseparatorComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtMenuseparatorComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtMenuseparatorComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtMenuseparatorComponent_1;
    ExtMenuseparatorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtMenuseparatorComponent = ExtMenuseparatorComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtMenuseparatorComponent);
ExtMenuseparatorComponent.ɵfac = function ExtMenuseparatorComponent_Factory(t) { return new (t || ExtMenuseparatorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtMenuseparatorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtMenuseparatorComponent, selectors: [["ExtMenuseparator"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtMenuseparatorComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtMenuseparatorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtMenuseparatorComponent, [{
        type: Component,
        args: [{
                selector: 'ExtMenuseparator',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtMenuseparatorComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtMenuseparatorComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCMenuseparator()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtMessageboxComponent = /** @class */ (function (_super) {
    __extends(ExtMessageboxComponent, _super);
    function ExtMessageboxComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'constrainDrag', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultTextHeight', 'defaultToolWeights', 'defaultType', 'disabled', 'dismissAction', 'dismissHandler', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maskTapHandler', 'maxHeight', 'maximizable', 'maximizeAnimation', 'maximized', 'maximizeProxy', 'maximizeTool', 'maxWidth', 'message', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'msg', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'prompt', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'restorable', 'restoreAnimation', 'restoreTool', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCMessagebox()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaximize', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerestore', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maximize', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'restore', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'messagebox';
        return _this;
    }
    ExtMessageboxComponent_1 = ExtMessageboxComponent;
    ExtMessageboxComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtMessageboxComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtMessageboxComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtMessageboxComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtMessageboxComponent_1;
    ExtMessageboxComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtMessageboxComponent = ExtMessageboxComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtMessageboxComponent);
ExtMessageboxComponent.ɵfac = function ExtMessageboxComponent_Factory(t) { return new (t || ExtMessageboxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtMessageboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtMessageboxComponent, selectors: [["ExtMessagebox"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", constrainDrag: "constrainDrag", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultTextHeight: "defaultTextHeight", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", dismissAction: "dismissAction", dismissHandler: "dismissHandler", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maskTapHandler: "maskTapHandler", maxHeight: "maxHeight", maximizable: "maximizable", maximizeAnimation: "maximizeAnimation", maximized: "maximized", maximizeProxy: "maximizeProxy", maximizeTool: "maximizeTool", maxWidth: "maxWidth", message: "message", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", msg: "msg", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", prompt: "prompt", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", restorable: "restorable", restoreAnimation: "restoreAnimation", restoreTool: "restoreTool", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaximize: "beforemaximize", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerestore: "beforerestore", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maximize: "maximize", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", restore: "restore", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtMessageboxComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtMessageboxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtMessageboxComponent, [{
        type: Component,
        args: [{
                selector: 'ExtMessagebox',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'constrainDrag', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultTextHeight', 'defaultToolWeights', 'defaultType', 'disabled', 'dismissAction', 'dismissHandler', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maskTapHandler', 'maxHeight', 'maximizable', 'maximizeAnimation', 'maximized', 'maximizeProxy', 'maximizeTool', 'maxWidth', 'message', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'msg', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'prompt', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'restorable', 'restoreAnimation', 'restoreTool', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaximize', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerestore', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maximize', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'restore', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtMessageboxComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtMessageboxComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCMessagebox()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtNavigationviewComponent = /** @class */ (function (_super) {
    __extends(ExtNavigationviewComponent, _super);
    function ExtNavigationviewComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultBackButtonText', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'navigationBar', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'useTitleForBackButtonText', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCNavigationview()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'back', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'pop', 'positionedchange', 'push', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'navigationview';
        return _this;
    }
    ExtNavigationviewComponent_1 = ExtNavigationviewComponent;
    ExtNavigationviewComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtNavigationviewComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtNavigationviewComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtNavigationviewComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtNavigationviewComponent_1;
    ExtNavigationviewComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtNavigationviewComponent = ExtNavigationviewComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtNavigationviewComponent);
ExtNavigationviewComponent.ɵfac = function ExtNavigationviewComponent_Factory(t) { return new (t || ExtNavigationviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtNavigationviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtNavigationviewComponent, selectors: [["ExtNavigationview"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultBackButtonText: "defaultBackButtonText", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", navigationBar: "navigationBar", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", useTitleForBackButtonText: "useTitleForBackButtonText", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", back: "back", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", pop: "pop", positionedchange: "positionedchange", push: "push", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtNavigationviewComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtNavigationviewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtNavigationviewComponent, [{
        type: Component,
        args: [{
                selector: 'ExtNavigationview',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultBackButtonText', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'navigationBar', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'useTitleForBackButtonText', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'back', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'pop', 'positionedchange', 'push', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtNavigationviewComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtNavigationviewComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCNavigationview()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPanelComponent = /** @class */ (function (_super) {
    __extends(ExtPanelComponent, _super);
    function ExtPanelComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPanel()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'panel';
        return _this;
    }
    ExtPanelComponent_1 = ExtPanelComponent;
    ExtPanelComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPanelComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPanelComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPanelComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPanelComponent_1;
    ExtPanelComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPanelComponent = ExtPanelComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPanelComponent);
ExtPanelComponent.ɵfac = function ExtPanelComponent_Factory(t) { return new (t || ExtPanelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPanelComponent, selectors: [["ExtPanel"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPanelComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPanelComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPanel',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPanelComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPanelComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPanel()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtAccordionComponent = /** @class */ (function (_super) {
    __extends(ExtAccordionComponent, _super);
    function ExtAccordionComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaultPanelUI', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandedFirst', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'openable', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCAccordion()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'accordion';
        return _this;
    }
    ExtAccordionComponent_1 = ExtAccordionComponent;
    ExtAccordionComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtAccordionComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtAccordionComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtAccordionComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtAccordionComponent_1;
    ExtAccordionComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtAccordionComponent = ExtAccordionComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtAccordionComponent);
ExtAccordionComponent.ɵfac = function ExtAccordionComponent_Factory(t) { return new (t || ExtAccordionComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtAccordionComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtAccordionComponent, selectors: [["ExtAccordion"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaultPanelUI: "defaultPanelUI", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", expandedFirst: "expandedFirst", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", openable: "openable", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtAccordionComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtAccordionComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtAccordionComponent, [{
        type: Component,
        args: [{
                selector: 'ExtAccordion',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaultPanelUI', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandedFirst', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'openable', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtAccordionComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtAccordionComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCAccordion()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtDatepanelComponent = /** @class */ (function (_super) {
    __extends(ExtDatepanelComponent, _super);
    function ExtDatepanelComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoConfirm', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'captionFormat', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dateCellFormat', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'disabledDates', 'disabledDays', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusableDate', 'focusCls', 'format', 'fullscreen', 'handler', 'header', 'headerFormat', 'headerLength', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideCaptions', 'hideMode', 'hideOnMaskTap', 'hideOutside', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxDate', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minDate', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'navigationPosition', 'nextText', 'padding', 'panes', 'plugins', 'prevText', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scrollable', 'selectOnNavigate', 'session', 'shadow', 'shareableName', 'shim', 'showAfterMaxDate', 'showAnimation', 'showBeforeMinDate', 'showFooter', 'showTodayButton', 'specialDates', 'specialDays', 'splitTitle', 'standardButtons', 'startDay', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleAnimation', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transformCellCls', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weekendDays', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'yearPicker', 'yearPickerDefaults', 'zIndex',], (new EWCDatepanel()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'datepanel';
        return _this;
    }
    ExtDatepanelComponent_1 = ExtDatepanelComponent;
    ExtDatepanelComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtDatepanelComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtDatepanelComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtDatepanelComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtDatepanelComponent_1;
    ExtDatepanelComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtDatepanelComponent = ExtDatepanelComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtDatepanelComponent);
ExtDatepanelComponent.ɵfac = function ExtDatepanelComponent_Factory(t) { return new (t || ExtDatepanelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtDatepanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtDatepanelComponent, selectors: [["ExtDatepanel"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", animation: "animation", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoConfirm: "autoConfirm", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", captionFormat: "captionFormat", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dateCellFormat: "dateCellFormat", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", disabledDates: "disabledDates", disabledDays: "disabledDays", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusableDate: "focusableDate", focusCls: "focusCls", format: "format", fullscreen: "fullscreen", handler: "handler", headerFormat: "headerFormat", headerLength: "headerLength", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideCaptions: "hideCaptions", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideOutside: "hideOutside", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxDate: "maxDate", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minDate: "minDate", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", navigationPosition: "navigationPosition", nextText: "nextText", padding: "padding", panes: "panes", prevText: "prevText", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", selectOnNavigate: "selectOnNavigate", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAfterMaxDate: "showAfterMaxDate", showAnimation: "showAnimation", showBeforeMinDate: "showBeforeMinDate", showFooter: "showFooter", showTodayButton: "showTodayButton", specialDates: "specialDates", specialDays: "specialDays", splitTitle: "splitTitle", standardButtons: "standardButtons", startDay: "startDay", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleAnimation: "titleAnimation", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", transformCellCls: "transformCellCls", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weekendDays: "weekendDays", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", yearPicker: "yearPicker", yearPickerDefaults: "yearPickerDefaults", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatepanelComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtDatepanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtDatepanelComponent, [{
        type: Component,
        args: [{
                selector: 'ExtDatepanel',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoConfirm', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'captionFormat', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dateCellFormat', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'disabledDates', 'disabledDays', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusableDate', 'focusCls', 'format', 'fullscreen', 'handler', 'header', 'headerFormat', 'headerLength', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideCaptions', 'hideMode', 'hideOnMaskTap', 'hideOutside', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxDate', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minDate', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'navigationPosition', 'nextText', 'padding', 'panes', 'plugins', 'prevText', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scrollable', 'selectOnNavigate', 'session', 'shadow', 'shareableName', 'shim', 'showAfterMaxDate', 'showAnimation', 'showBeforeMinDate', 'showFooter', 'showTodayButton', 'specialDates', 'specialDays', 'splitTitle', 'standardButtons', 'startDay', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleAnimation', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transformCellCls', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weekendDays', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'yearPicker', 'yearPickerDefaults', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatepanelComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtDatepanelComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCDatepanel()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtDatetitleComponent = /** @class */ (function (_super) {
    __extends(ExtDatetitleComponent, _super);
    function ExtDatetitleComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'glyph', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'rotateIcon', 'rotation', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'text', 'textAlign', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCDatetitle()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'datetitle';
        return _this;
    }
    ExtDatetitleComponent_1 = ExtDatetitleComponent;
    ExtDatetitleComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtDatetitleComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtDatetitleComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtDatetitleComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtDatetitleComponent_1;
    ExtDatetitleComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtDatetitleComponent = ExtDatetitleComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtDatetitleComponent);
ExtDatetitleComponent.ɵfac = function ExtDatetitleComponent_Factory(t) { return new (t || ExtDatetitleComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtDatetitleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtDatetitleComponent, selectors: [["ExtDatetitle"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", glyph: "glyph", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", rotateIcon: "rotateIcon", rotation: "rotation", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", text: "text", textAlign: "textAlign", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatetitleComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtDatetitleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtDatetitleComponent, [{
        type: Component,
        args: [{
                selector: 'ExtDatetitle',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'glyph', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'rotateIcon', 'rotation', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'text', 'textAlign', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatetitleComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtDatetitleComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCDatetitle()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPanelheaderComponent = /** @class */ (function (_super) {
    __extends(ExtPanelheaderComponent, _super);
    function ExtPanelheaderComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'glyph', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'position', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'title', 'titleAlign', 'titleRotation', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPanelheader()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'panelheader';
        return _this;
    }
    ExtPanelheaderComponent_1 = ExtPanelheaderComponent;
    ExtPanelheaderComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPanelheaderComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPanelheaderComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPanelheaderComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPanelheaderComponent_1;
    ExtPanelheaderComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPanelheaderComponent = ExtPanelheaderComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPanelheaderComponent);
ExtPanelheaderComponent.ɵfac = function ExtPanelheaderComponent_Factory(t) { return new (t || ExtPanelheaderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPanelheaderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPanelheaderComponent, selectors: [["ExtPanelheader"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", glyph: "glyph", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", position: "position", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", title: "title", titleAlign: "titleAlign", titleRotation: "titleRotation", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPanelheaderComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPanelheaderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPanelheaderComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPanelheader',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'glyph', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'position', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'title', 'titleAlign', 'titleRotation', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPanelheaderComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPanelheaderComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPanelheader()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTimepanelComponent = /** @class */ (function (_super) {
    __extends(ExtTimepanelComponent, _super);
    function ExtTimepanelComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignPMInside', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoAdvance', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'confirmable', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'declineHandler', 'defaultButtons', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'handler', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hourDisplayFormat', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'meridiem', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'mode', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'vertical', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTimepanel()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'timepanel';
        return _this;
    }
    ExtTimepanelComponent_1 = ExtTimepanelComponent;
    ExtTimepanelComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTimepanelComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTimepanelComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTimepanelComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTimepanelComponent_1;
    ExtTimepanelComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTimepanelComponent = ExtTimepanelComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTimepanelComponent);
ExtTimepanelComponent.ɵfac = function ExtTimepanelComponent_Factory(t) { return new (t || ExtTimepanelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTimepanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTimepanelComponent, selectors: [["ExtTimepanel"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignPMInside: "alignPMInside", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoAdvance: "autoAdvance", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", confirmable: "confirmable", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", declineHandler: "declineHandler", defaultButtons: "defaultButtons", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", handler: "handler", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hourDisplayFormat: "hourDisplayFormat", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", meridiem: "meridiem", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", mode: "mode", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", vertical: "vertical", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTimepanelComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTimepanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTimepanelComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTimepanel',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignPMInside', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoAdvance', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'confirmable', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'declineHandler', 'defaultButtons', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'handler', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hourDisplayFormat', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'meridiem', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'mode', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'vertical', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTimepanelComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTimepanelComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTimepanel()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPaneltitleComponent = /** @class */ (function (_super) {
    __extends(ExtPaneltitleComponent, _super);
    function ExtPaneltitleComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'glyph', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'rotateIcon', 'rotation', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'text', 'textAlign', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPaneltitle()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'paneltitle';
        return _this;
    }
    ExtPaneltitleComponent_1 = ExtPaneltitleComponent;
    ExtPaneltitleComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPaneltitleComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPaneltitleComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPaneltitleComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPaneltitleComponent_1;
    ExtPaneltitleComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPaneltitleComponent = ExtPaneltitleComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPaneltitleComponent);
ExtPaneltitleComponent.ɵfac = function ExtPaneltitleComponent_Factory(t) { return new (t || ExtPaneltitleComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPaneltitleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPaneltitleComponent, selectors: [["ExtPaneltitle"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", glyph: "glyph", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", rotateIcon: "rotateIcon", rotation: "rotation", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", text: "text", textAlign: "textAlign", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPaneltitleComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPaneltitleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPaneltitleComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPaneltitle',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'glyph', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'rotateIcon', 'rotation', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'text', 'textAlign', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPaneltitleComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPaneltitleComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPaneltitle()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtYearpickerComponent = /** @class */ (function (_super) {
    __extends(ExtYearpickerComponent, _super);
    function ExtYearpickerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'bufferSize', 'cardSwitchAnimation', 'centered', 'cls', 'collapseDefaults', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'disclosureProperty', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'grouped', 'groupFooter', 'groupHeader', 'grouping', 'groupPlaceholder', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'horizontalOverflow', 'html', 'id', 'inactiveChildTabIndex', 'indexBar', 'infinite', 'inline', 'innerCls', 'innerCtHeight', 'innerWidth', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemConfig', 'itemContentCls', 'itemDataMap', 'itemId', 'itemInnerCls', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'maintainChildNodes', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxItemCache', 'maxWidth', 'minHeight', 'minimumBufferDistance', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'onItemDisclosure', 'padding', 'pinFooters', 'pinHeaders', 'pinnedFooter', 'pinnedFooterHeight', 'pinnedHeader', 'pinnedHeaderHeight', 'plugins', 'pressedDelay', 'preventSelectionOnDisclose', 'preventSelectionOnTool', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'rowLines', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'striped', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'topRenderedIndex', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'undefined', 'variableHeights', 'verticalOverflow', 'viewModel', 'visibleHeight', 'visibleLeft', 'visibleTop', 'visibleWidth', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCYearpicker()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforegroupcollapse', 'beforegroupexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'disclose', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'groupcollapse', 'groupexpand', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemaction', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'yearpicker';
        return _this;
    }
    ExtYearpickerComponent_1 = ExtYearpickerComponent;
    ExtYearpickerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtYearpickerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtYearpickerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtYearpickerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtYearpickerComponent_1;
    ExtYearpickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtYearpickerComponent = ExtYearpickerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtYearpickerComponent);
ExtYearpickerComponent.ɵfac = function ExtYearpickerComponent_Factory(t) { return new (t || ExtYearpickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtYearpickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtYearpickerComponent, selectors: [["ExtYearpicker"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", associatedData: "associatedData", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", bufferSize: "bufferSize", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", collapseDefaults: "collapseDefaults", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", deferEmptyText: "deferEmptyText", deselectOnContainerClick: "deselectOnContainerClick", disabled: "disabled", disableSelection: "disableSelection", disclosureProperty: "disclosureProperty", displayed: "displayed", docked: "docked", draggable: "draggable", emptyItemText: "emptyItemText", emptyState: "emptyState", emptyText: "emptyText", emptyTextDefaults: "emptyTextDefaults", emptyTextProperty: "emptyTextProperty", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", grouped: "grouped", groupFooter: "groupFooter", groupHeader: "groupHeader", grouping: "grouping", groupPlaceholder: "groupPlaceholder", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", horizontalOverflow: "horizontalOverflow", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", indexBar: "indexBar", infinite: "infinite", inline: "inline", innerCls: "innerCls", innerCtHeight: "innerCtHeight", innerWidth: "innerWidth", instanceCls: "instanceCls", itemButtonMode: "itemButtonMode", itemCls: "itemCls", itemConfig: "itemConfig", itemContentCls: "itemContentCls", itemDataMap: "itemDataMap", itemId: "itemId", itemInnerCls: "itemInnerCls", itemRipple: "itemRipple", items: "items", itemsFocusable: "itemsFocusable", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", loadingHeight: "loadingHeight", loadingText: "loadingText", maintainChildNodes: "maintainChildNodes", manageBorders: "manageBorders", margin: "margin", markDirty: "markDirty", masked: "masked", maxHeight: "maxHeight", maxItemCache: "maxItemCache", maxWidth: "maxWidth", minHeight: "minHeight", minimumBufferDistance: "minimumBufferDistance", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", onItemDisclosure: "onItemDisclosure", padding: "padding", pinFooters: "pinFooters", pinHeaders: "pinHeaders", pinnedFooter: "pinnedFooter", pinnedFooterHeight: "pinnedFooterHeight", pinnedHeader: "pinnedHeader", pinnedHeaderHeight: "pinnedHeaderHeight", pressedDelay: "pressedDelay", preventSelectionOnDisclose: "preventSelectionOnDisclose", preventSelectionOnTool: "preventSelectionOnTool", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", rowLines: "rowLines", scrollable: "scrollable", scrollDock: "scrollDock", scrollToTopOnRefresh: "scrollToTopOnRefresh", selectable: "selectable", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", striped: "striped", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", topRenderedIndex: "topRenderedIndex", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggerCtEvent: "triggerCtEvent", triggerEvent: "triggerEvent", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", variableHeights: "variableHeights", verticalOverflow: "verticalOverflow", viewModel: "viewModel", visibleHeight: "visibleHeight", visibleLeft: "visibleLeft", visibleTop: "visibleTop", visibleWidth: "visibleWidth", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforegroupcollapse: "beforegroupcollapse", beforegroupexpand: "beforegroupexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforestorechange: "beforestorechange", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", childdoubletap: "childdoubletap", childlongpress: "childlongpress", childmouseenter: "childmouseenter", childmouseleave: "childmouseleave", childsingletap: "childsingletap", childtap: "childtap", childtaphold: "childtaphold", childtouchcancel: "childtouchcancel", childtouchend: "childtouchend", childtouchmove: "childtouchmove", childtouchstart: "childtouchstart", deactivate: "deactivate", deselect: "deselect", destroy: "destroy", disabledchange: "disabledchange", disclose: "disclose", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", groupcollapse: "groupcollapse", groupexpand: "groupexpand", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemaction: "itemaction", itemdoubletap: "itemdoubletap", itemlongpress: "itemlongpress", itemmouseenter: "itemmouseenter", itemmouseleave: "itemmouseleave", itemsingletap: "itemsingletap", itemswipe: "itemswipe", itemtap: "itemtap", itemtaphold: "itemtaphold", itemtouchcancel: "itemtouchcancel", itemtouchend: "itemtouchend", itemtouchmove: "itemtouchmove", itemtouchstart: "itemtouchstart", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", navigate: "navigate", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", select: "select", show: "show", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtYearpickerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtYearpickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtYearpickerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtYearpicker',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'bufferSize', 'cardSwitchAnimation', 'centered', 'cls', 'collapseDefaults', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'disclosureProperty', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'grouped', 'groupFooter', 'groupHeader', 'grouping', 'groupPlaceholder', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'horizontalOverflow', 'html', 'id', 'inactiveChildTabIndex', 'indexBar', 'infinite', 'inline', 'innerCls', 'innerCtHeight', 'innerWidth', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemConfig', 'itemContentCls', 'itemDataMap', 'itemId', 'itemInnerCls', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'maintainChildNodes', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxItemCache', 'maxWidth', 'minHeight', 'minimumBufferDistance', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'onItemDisclosure', 'padding', 'pinFooters', 'pinHeaders', 'pinnedFooter', 'pinnedFooterHeight', 'pinnedHeader', 'pinnedHeaderHeight', 'plugins', 'pressedDelay', 'preventSelectionOnDisclose', 'preventSelectionOnTool', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'rowLines', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'store', 'striped', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'topRenderedIndex', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'undefined', 'variableHeights', 'verticalOverflow', 'viewModel', 'visibleHeight', 'visibleLeft', 'visibleTop', 'visibleWidth', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforegroupcollapse', 'beforegroupexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'disclose', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'groupcollapse', 'groupexpand', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemaction', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'show', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtYearpickerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtYearpickerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCYearpicker()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtDatepickerComponent = /** @class */ (function (_super) {
    __extends(ExtDatepickerComponent, _super);
    function ExtDatepickerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cancelButton', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'cover', 'data', 'dayText', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'doneButton', 'draggable', 'enter', 'undefined', 'undefined', 'exit', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'monthText', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'reveal', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'side', 'slotOrder', 'slots', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'stretchX', 'stretchY', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolbar', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'useTitles', 'value', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'yearFrom', 'yearText', 'yearTo', 'zIndex',], (new EWCDatepicker()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'cancel', 'centeredchange', 'change', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'pick', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'datepicker';
        return _this;
    }
    ExtDatepickerComponent_1 = ExtDatepickerComponent;
    ExtDatepickerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtDatepickerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtDatepickerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtDatepickerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtDatepickerComponent_1;
    ExtDatepickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtDatepickerComponent = ExtDatepickerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtDatepickerComponent);
ExtDatepickerComponent.ɵfac = function ExtDatepickerComponent_Factory(t) { return new (t || ExtDatepickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtDatepickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtDatepickerComponent, selectors: [["ExtDatepicker"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cancelButton: "cancelButton", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", cover: "cover", data: "data", dayText: "dayText", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", doneButton: "doneButton", draggable: "draggable", enter: "enter", undefined: "undefined", exit: "exit", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", monthText: "monthText", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", reveal: "reveal", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", side: "side", slotOrder: "slotOrder", slots: "slots", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stretchX: "stretchX", stretchY: "stretchY", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolbar: "toolbar", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", useTitles: "useTitles", value: "value", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", yearFrom: "yearFrom", yearText: "yearText", yearTo: "yearTo", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", cancel: "cancel", centeredchange: "centeredchange", change: "change", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", pick: "pick", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatepickerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtDatepickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtDatepickerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtDatepicker',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cancelButton', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'cover', 'data', 'dayText', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'doneButton', 'draggable', 'enter', 'undefined', 'undefined', 'exit', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'monthText', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'reveal', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'side', 'slotOrder', 'slots', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'stretchX', 'stretchY', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolbar', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'useTitles', 'value', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'yearFrom', 'yearText', 'yearTo', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'cancel', 'centeredchange', 'change', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'pick', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtDatepickerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtDatepickerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCDatepicker()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPickerComponent = /** @class */ (function (_super) {
    __extends(ExtPickerComponent, _super);
    function ExtPickerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cancelButton', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'cover', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'doneButton', 'draggable', 'enter', 'undefined', 'undefined', 'exit', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'reveal', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'side', 'slots', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'stretchX', 'stretchY', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolbar', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'useTitles', 'value', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPicker()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'cancel', 'centeredchange', 'change', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'pick', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'picker';
        return _this;
    }
    ExtPickerComponent_1 = ExtPickerComponent;
    ExtPickerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPickerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPickerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPickerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPickerComponent_1;
    ExtPickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPickerComponent = ExtPickerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPickerComponent);
ExtPickerComponent.ɵfac = function ExtPickerComponent_Factory(t) { return new (t || ExtPickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPickerComponent, selectors: [["ExtPicker"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cancelButton: "cancelButton", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", cover: "cover", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", doneButton: "doneButton", draggable: "draggable", enter: "enter", undefined: "undefined", exit: "exit", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", reveal: "reveal", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", side: "side", slots: "slots", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stretchX: "stretchX", stretchY: "stretchY", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolbar: "toolbar", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", useTitles: "useTitles", value: "value", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", cancel: "cancel", centeredchange: "centeredchange", change: "change", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", pick: "pick", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPickerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPickerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPicker',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cancelButton', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'cover', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'doneButton', 'draggable', 'enter', 'undefined', 'undefined', 'exit', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'reveal', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'side', 'slots', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'stretchX', 'stretchY', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolbar', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'useTitles', 'value', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'cancel', 'centeredchange', 'change', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'pick', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPickerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPickerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPicker()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSelectpickerComponent = /** @class */ (function (_super) {
    __extends(ExtSelectpickerComponent, _super);
    function ExtSelectpickerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cancelButton', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'cover', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'doneButton', 'draggable', 'enter', 'undefined', 'undefined', 'exit', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'reveal', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'side', 'slots', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'stretchX', 'stretchY', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolbar', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'useTitles', 'value', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSelectpicker()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'cancel', 'centeredchange', 'change', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'pick', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'selectpicker';
        return _this;
    }
    ExtSelectpickerComponent_1 = ExtSelectpickerComponent;
    ExtSelectpickerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSelectpickerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSelectpickerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSelectpickerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSelectpickerComponent_1;
    ExtSelectpickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSelectpickerComponent = ExtSelectpickerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSelectpickerComponent);
ExtSelectpickerComponent.ɵfac = function ExtSelectpickerComponent_Factory(t) { return new (t || ExtSelectpickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSelectpickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSelectpickerComponent, selectors: [["ExtSelectpicker"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cancelButton: "cancelButton", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", cover: "cover", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", doneButton: "doneButton", draggable: "draggable", enter: "enter", undefined: "undefined", exit: "exit", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", reveal: "reveal", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", side: "side", slots: "slots", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stretchX: "stretchX", stretchY: "stretchY", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolbar: "toolbar", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", useTitles: "useTitles", value: "value", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", cancel: "cancel", centeredchange: "centeredchange", change: "change", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", pick: "pick", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSelectpickerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSelectpickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSelectpickerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSelectpicker',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cancelButton', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'cover', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'doneButton', 'draggable', 'enter', 'undefined', 'undefined', 'exit', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'reveal', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'side', 'slots', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'stretchX', 'stretchY', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolbar', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'useTitles', 'value', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'cancel', 'centeredchange', 'change', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'pick', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSelectpickerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSelectpickerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSelectpicker()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPickerslotComponent = /** @class */ (function (_super) {
    __extends(ExtPickerslotComponent, _super);
    function ExtPickerslotComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'displayed', 'displayField', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'inline', 'innerCls', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemId', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastSelected', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'pressedDelay', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selected', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showTitle', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'valueField', 'verticallyCenterItems', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPickerslot()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'rowselection', 'scrollablechange', 'select', 'selectionchange', 'show', 'slotpick', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'pickerslot';
        return _this;
    }
    ExtPickerslotComponent_1 = ExtPickerslotComponent;
    ExtPickerslotComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPickerslotComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPickerslotComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPickerslotComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPickerslotComponent_1;
    ExtPickerslotComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPickerslotComponent = ExtPickerslotComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPickerslotComponent);
ExtPickerslotComponent.ɵfac = function ExtPickerslotComponent_Factory(t) { return new (t || ExtPickerslotComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPickerslotComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPickerslotComponent, selectors: [["ExtPickerslot"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", associatedData: "associatedData", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", deferEmptyText: "deferEmptyText", deselectOnContainerClick: "deselectOnContainerClick", disabled: "disabled", disableSelection: "disableSelection", displayed: "displayed", displayField: "displayField", docked: "docked", draggable: "draggable", emptyItemText: "emptyItemText", emptyState: "emptyState", emptyText: "emptyText", emptyTextDefaults: "emptyTextDefaults", emptyTextProperty: "emptyTextProperty", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", inline: "inline", innerCls: "innerCls", instanceCls: "instanceCls", itemButtonMode: "itemButtonMode", itemCls: "itemCls", itemId: "itemId", itemRipple: "itemRipple", items: "items", itemsFocusable: "itemsFocusable", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", lastSelected: "lastSelected", layout: "layout", left: "left", listeners: "listeners", loadingHeight: "loadingHeight", loadingText: "loadingText", manageBorders: "manageBorders", margin: "margin", markDirty: "markDirty", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", pressedDelay: "pressedDelay", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", scrollDock: "scrollDock", scrollToTopOnRefresh: "scrollToTopOnRefresh", selectable: "selectable", selected: "selected", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", showTitle: "showTitle", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", title: "title", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggerCtEvent: "triggerCtEvent", triggerEvent: "triggerEvent", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", valueField: "valueField", verticallyCenterItems: "verticallyCenterItems", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforestorechange: "beforestorechange", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", childdoubletap: "childdoubletap", childlongpress: "childlongpress", childmouseenter: "childmouseenter", childmouseleave: "childmouseleave", childsingletap: "childsingletap", childtap: "childtap", childtaphold: "childtaphold", childtouchcancel: "childtouchcancel", childtouchend: "childtouchend", childtouchmove: "childtouchmove", childtouchstart: "childtouchstart", deactivate: "deactivate", deselect: "deselect", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemdoubletap: "itemdoubletap", itemlongpress: "itemlongpress", itemmouseenter: "itemmouseenter", itemmouseleave: "itemmouseleave", itemsingletap: "itemsingletap", itemswipe: "itemswipe", itemtap: "itemtap", itemtaphold: "itemtaphold", itemtouchcancel: "itemtouchcancel", itemtouchend: "itemtouchend", itemtouchmove: "itemtouchmove", itemtouchstart: "itemtouchstart", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", navigate: "navigate", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", rowselection: "rowselection", scrollablechange: "scrollablechange", select: "select", selectionchange: "selectionchange", show: "show", slotpick: "slotpick", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPickerslotComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPickerslotComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPickerslotComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPickerslot',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'displayed', 'displayField', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'inline', 'innerCls', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemId', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'lastSelected', 'layout', 'left', 'listeners', 'loadingHeight', 'loadingText', 'manageBorders', 'margin', 'markDirty', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'pressedDelay', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selected', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showTitle', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'valueField', 'verticallyCenterItems', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'rowselection', 'scrollablechange', 'select', 'selectionchange', 'show', 'slotpick', 'storechange', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPickerslotComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPickerslotComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPickerslot()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTabletpickerComponent = /** @class */ (function (_super) {
    __extends(ExtTabletpickerComponent, _super);
    function ExtTabletpickerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTabletpicker()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'tabletpicker';
        return _this;
    }
    ExtTabletpickerComponent_1 = ExtTabletpickerComponent;
    ExtTabletpickerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTabletpickerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTabletpickerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTabletpickerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTabletpickerComponent_1;
    ExtTabletpickerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTabletpickerComponent = ExtTabletpickerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTabletpickerComponent);
ExtTabletpickerComponent.ɵfac = function ExtTabletpickerComponent_Factory(t) { return new (t || ExtTabletpickerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTabletpickerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTabletpickerComponent, selectors: [["ExtTabletpicker"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTabletpickerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTabletpickerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTabletpickerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTabletpicker',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTabletpickerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTabletpickerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTabletpicker()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPivotgridcellComponent = /** @class */ (function (_super) {
    __extends(ExtPivotgridcellComponent, _super);
    function ExtPivotgridcellComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'formatter', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderer', 'renderTo', 'ripple', 'scope', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'tpl', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',], (new EWCPivotgridcell()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'pivotgridcell';
        return _this;
    }
    ExtPivotgridcellComponent_1 = ExtPivotgridcellComponent;
    ExtPivotgridcellComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPivotgridcellComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPivotgridcellComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPivotgridcellComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPivotgridcellComponent_1;
    ExtPivotgridcellComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPivotgridcellComponent = ExtPivotgridcellComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPivotgridcellComponent);
ExtPivotgridcellComponent.ɵfac = function ExtPivotgridcellComponent_Factory(t) { return new (t || ExtPivotgridcellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPivotgridcellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPivotgridcellComponent, selectors: [["ExtPivotgridcell"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", bodyCls: "bodyCls", bodyStyle: "bodyStyle", border: "border", cellCls: "cellCls", cls: "cls", column: "column", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", encodeHtml: "encodeHtml", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", formatter: "formatter", height: "height", hidden: "hidden", hideMode: "hideMode", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", rawValue: "rawValue", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", ripple: "ripple", scope: "scope", selectable: "selectable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", style: "style", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", touchAction: "touchAction", tpl: "tpl", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", value: "value", viewModel: "viewModel", width: "width", x: "x", y: "y", zeroValue: "zeroValue" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotgridcellComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPivotgridcellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPivotgridcellComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPivotgridcell',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'formatter', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderer', 'renderTo', 'ripple', 'scope', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'tpl', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotgridcellComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPivotgridcellComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPivotgridcell()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPivotgridgroupcellComponent = /** @class */ (function (_super) {
    __extends(ExtPivotgridgroupcellComponent, _super);
    function ExtPivotgridgroupcellComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'formatter', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderer', 'renderTo', 'ripple', 'scope', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'tpl', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',], (new EWCPivotgridgroupcell()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'pivotgridgroupcell';
        return _this;
    }
    ExtPivotgridgroupcellComponent_1 = ExtPivotgridgroupcellComponent;
    ExtPivotgridgroupcellComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPivotgridgroupcellComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPivotgridgroupcellComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPivotgridgroupcellComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPivotgridgroupcellComponent_1;
    ExtPivotgridgroupcellComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPivotgridgroupcellComponent = ExtPivotgridgroupcellComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPivotgridgroupcellComponent);
ExtPivotgridgroupcellComponent.ɵfac = function ExtPivotgridgroupcellComponent_Factory(t) { return new (t || ExtPivotgridgroupcellComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPivotgridgroupcellComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPivotgridgroupcellComponent, selectors: [["ExtPivotgridgroupcell"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", bodyCls: "bodyCls", bodyStyle: "bodyStyle", border: "border", cellCls: "cellCls", cls: "cls", column: "column", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", defaultToolWeights: "defaultToolWeights", disabled: "disabled", encodeHtml: "encodeHtml", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", formatter: "formatter", height: "height", hidden: "hidden", hideMode: "hideMode", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", rawValue: "rawValue", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", ripple: "ripple", scope: "scope", selectable: "selectable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", style: "style", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", touchAction: "touchAction", tpl: "tpl", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", value: "value", viewModel: "viewModel", width: "width", x: "x", y: "y", zeroValue: "zeroValue" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotgridgroupcellComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPivotgridgroupcellComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPivotgridgroupcellComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPivotgridgroupcell',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'align', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'bodyCls', 'bodyStyle', 'border', 'cellCls', 'cls', 'column', 'constrainAlign', 'controller', 'defaultListenerScope', 'defaultToolWeights', 'disabled', 'encodeHtml', 'undefined', 'flex', 'floated', 'focusCls', 'formatter', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'rawValue', 'record', 'reference', 'relative', 'renderer', 'renderTo', 'ripple', 'scope', 'selectable', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'toolDefaults', 'tools', 'touchAction', 'tpl', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'value', 'viewModel', 'width', 'x', 'y', 'zeroValue',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotgridgroupcellComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPivotgridgroupcellComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPivotgridgroupcell()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPivotd3containerComponent = /** @class */ (function (_super) {
    __extends(ExtPivotd3containerComponent, _super);
    function ExtPivotd3containerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'configurator', 'drawing', 'matrix',], (new EWCPivotd3container()).events, ['ready',], vc) || this;
        _this.xtype = 'pivotd3container';
        return _this;
    }
    ExtPivotd3containerComponent_1 = ExtPivotd3containerComponent;
    ExtPivotd3containerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPivotd3containerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPivotd3containerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPivotd3containerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPivotd3containerComponent_1;
    ExtPivotd3containerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPivotd3containerComponent = ExtPivotd3containerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPivotd3containerComponent);
ExtPivotd3containerComponent.ɵfac = function ExtPivotd3containerComponent_Factory(t) { return new (t || ExtPivotd3containerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPivotd3containerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPivotd3containerComponent, selectors: [["ExtPivotd3container"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", configurator: "configurator", drawing: "drawing", matrix: "matrix" }, outputs: { ready: "ready" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotd3containerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPivotd3containerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPivotd3containerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPivotd3container',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'configurator', 'drawing', 'matrix',],
                outputs: ['ready',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotd3containerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPivotd3containerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPivotd3container()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPivotheatmapComponent = /** @class */ (function (_super) {
    __extends(ExtPivotheatmapComponent, _super);
    function ExtPivotheatmapComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultFormatter', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'labels', 'left', 'legend', 'listeners', 'margin', 'matrix', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tiles', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xAxis', 'xtype', 'y', 'yAxis', 'zIndex',], (new EWCPivotheatmap()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'pivotheatmap';
        return _this;
    }
    ExtPivotheatmapComponent_1 = ExtPivotheatmapComponent;
    ExtPivotheatmapComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPivotheatmapComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPivotheatmapComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPivotheatmapComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPivotheatmapComponent_1;
    ExtPivotheatmapComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPivotheatmapComponent = ExtPivotheatmapComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPivotheatmapComponent);
ExtPivotheatmapComponent.ɵfac = function ExtPivotheatmapComponent_Factory(t) { return new (t || ExtPivotheatmapComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPivotheatmapComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPivotheatmapComponent, selectors: [["ExtPivotheatmap"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", clipScene: "clipScene", cls: "cls", colorAxis: "colorAxis", componentCls: "componentCls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultFormatter: "defaultFormatter", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labels: "labels", left: "left", legend: "legend", listeners: "listeners", margin: "margin", matrix: "matrix", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", size: "size", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", tiles: "tiles", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", transitions: "transitions", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xAxis: "xAxis", xtype: "xtype", y: "y", yAxis: "yAxis", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", sceneresize: "sceneresize", scenesetup: "scenesetup", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotheatmapComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPivotheatmapComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPivotheatmapComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPivotheatmap',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultFormatter', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'labels', 'left', 'legend', 'listeners', 'margin', 'matrix', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tiles', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xAxis', 'xtype', 'y', 'yAxis', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotheatmapComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPivotheatmapComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPivotheatmap()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPivottreemapComponent = /** @class */ (function (_super) {
    __extends(ExtPivottreemapComponent, _super);
    function ExtPivottreemapComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoExpand', 'axisLock', 'bind', 'border', 'bottom', 'busyLayoutText', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandEventName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hierarchyCls', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'leafTile', 'left', 'linkKey', 'listeners', 'margin', 'matrix', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nodeChildren', 'nodeClass', 'nodeKey', 'nodeText', 'nodeTransform', 'nodeValue', 'noParentValue', 'noSizeLayout', 'padding', 'parentTile', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderLinks', 'renderTo', 'right', 'ripple', 'rootVisible', 'scaleLabels', 'scrollable', 'selectEventName', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tiling', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPivottreemap()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'pivottreemap';
        return _this;
    }
    ExtPivottreemapComponent_1 = ExtPivottreemapComponent;
    ExtPivottreemapComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPivottreemapComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPivottreemapComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPivottreemapComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPivottreemapComponent_1;
    ExtPivottreemapComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPivottreemapComponent = ExtPivottreemapComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPivottreemapComponent);
ExtPivottreemapComponent.ɵfac = function ExtPivottreemapComponent_Factory(t) { return new (t || ExtPivottreemapComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPivottreemapComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPivottreemapComponent, selectors: [["ExtPivottreemap"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoExpand: "autoExpand", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", busyLayoutText: "busyLayoutText", centered: "centered", clipScene: "clipScene", cls: "cls", colorAxis: "colorAxis", componentCls: "componentCls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", expandEventName: "expandEventName", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hierarchyCls: "hierarchyCls", html: "html", id: "id", instanceCls: "instanceCls", interactions: "interactions", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", leafTile: "leafTile", left: "left", linkKey: "linkKey", listeners: "listeners", margin: "margin", matrix: "matrix", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nodeChildren: "nodeChildren", nodeClass: "nodeClass", nodeKey: "nodeKey", nodeText: "nodeText", nodeTransform: "nodeTransform", nodeValue: "nodeValue", noParentValue: "noParentValue", noSizeLayout: "noSizeLayout", padding: "padding", parentTile: "parentTile", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderLinks: "renderLinks", renderTo: "renderTo", right: "right", ripple: "ripple", rootVisible: "rootVisible", scaleLabels: "scaleLabels", scrollable: "scrollable", selectEventName: "selectEventName", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", size: "size", sorter: "sorter", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", style: "style", tabIndex: "tabIndex", tiling: "tiling", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", transitions: "transitions", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", layout: "layout", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", sceneresize: "sceneresize", scenesetup: "scenesetup", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivottreemapComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPivottreemapComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPivottreemapComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPivottreemap',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoExpand', 'axisLock', 'bind', 'border', 'bottom', 'busyLayoutText', 'centered', 'clipScene', 'cls', 'colorAxis', 'componentCls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandEventName', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hierarchyCls', 'html', 'id', 'instanceCls', 'interactions', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'leafTile', 'left', 'linkKey', 'listeners', 'margin', 'matrix', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nodeChildren', 'nodeClass', 'nodeKey', 'nodeText', 'nodeTransform', 'nodeValue', 'noParentValue', 'noSizeLayout', 'padding', 'parentTile', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderLinks', 'renderTo', 'right', 'ripple', 'rootVisible', 'scaleLabels', 'scrollable', 'selectEventName', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'size', 'sorter', 'stateful', 'statefulDefaults', 'stateId', 'store', 'style', 'tabIndex', 'tiling', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'transitions', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'layout', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'sceneresize', 'scenesetup', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivottreemapComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPivottreemapComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPivottreemap()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPivotgridComponent = /** @class */ (function (_super) {
    __extends(ExtPivotgridComponent, _super);
    function ExtPivotgridComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'bufferSize', 'cardSwitchAnimation', 'centered', 'cls', 'clsGrandTotal', 'clsGroupTotal', 'collapseDefaults', 'collapsible', 'columnLines', 'columnMenu', 'columnResize', 'columns', 'columnsMenuItem', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'disclosureProperty', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'enableColumnMove', 'enableColumnSort', 'enableLoadMask', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'grouped', 'groupFooter', 'groupHeader', 'grouping', 'groupPlaceholder', 'height', 'hidden', 'hideAnimation', 'hideHeaders', 'hideMode', 'hideOnMaskTap', 'hideScrollbar', 'horizontalOverflow', 'html', 'id', 'inactiveChildTabIndex', 'indexBar', 'infinite', 'inline', 'innerCls', 'innerCtHeight', 'innerWidth', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemConfig', 'itemContentCls', 'itemDataMap', 'itemId', 'itemInnerCls', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'leftAxisCellConfig', 'listeners', 'loadingHeight', 'loadingText', 'maintainChildNodes', 'manageBorders', 'margin', 'markDirty', 'masked', 'matrix', 'maxHeight', 'maxItemCache', 'maxWidth', 'minHeight', 'minimumBufferDistance', 'minWidth', 'modal', 'modelValidation', 'multiColumnSort', 'name', 'nameable', 'nameHolder', 'onItemDisclosure', 'padding', 'pinFooters', 'pinHeaders', 'pinnedFooter', 'pinnedFooterHeight', 'pinnedHeader', 'pinnedHeaderHeight', 'plugins', 'pressedDelay', 'preventSelectionOnDisclose', 'preventSelectionOnTool', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'right', 'ripple', 'rowLines', 'rowNumbers', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'startColGroupsCollapsed', 'startRowGroupsCollapsed', 'stateful', 'statefulDefaults', 'stateId', 'store', 'striped', 'style', 'tabIndex', 'title', 'titleBar', 'toFrontOnShow', 'tooltip', 'top', 'topAxisCellConfig', 'topRenderedIndex', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'undefined', 'variableHeights', 'verticalOverflow', 'viewModel', 'visibleHeight', 'visibleLeft', 'visibleTop', 'visibleWidth', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPivotgrid()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecomplete', 'beforedisabledchange', 'beforedockedchange', 'beforeedit', 'beforegroupcollapse', 'beforegroupexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeselectionextend', 'beforeshow', 'beforestartedit', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'canceledit', 'cellselection', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'columnadd', 'columnhide', 'columnmenucreated', 'columnmove', 'columnremove', 'columnresize', 'columnselection', 'columnshow', 'columnsort', 'complete', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'disclose', 'dockedchange', 'edit', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'groupcollapse', 'groupexpand', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemaction', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'pivotbeforereconfigure', 'pivotbeforerequest', 'pivotbuildtotals', 'pivotcolumnsbuilt', 'pivotdone', 'pivotgroupcelldoubletap', 'pivotgroupcelltap', 'pivotgroupcelltaphold', 'pivotgroupcollapse', 'pivotgroupdoubletap', 'pivotgroupexpand', 'pivotgrouptap', 'pivotgrouptaphold', 'pivotitemcelldoubletap', 'pivotitemcelltap', 'pivotitemcelltaphold', 'pivotitemdoubletap', 'pivotitemtap', 'pivotitemtaphold', 'pivotmodelbuilt', 'pivotprogress', 'pivotreconfigure', 'pivotrecordbuilt', 'pivotrequestexception', 'pivotstart', 'pivotstorebuilt', 'pivottotalcelldoubletap', 'pivottotalcelltap', 'pivottotalcelltaphold', 'pivottotaldoubletap', 'pivottotaltap', 'pivottotaltaphold', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'selectionextenderdrag', 'show', 'specialkey', 'startedit', 'storechange', 'tofront', 'topchange', 'updatedata', 'validateedit', 'widthchange',], vc) || this;
        _this.xtype = 'pivotgrid';
        return _this;
    }
    ExtPivotgridComponent_1 = ExtPivotgridComponent;
    ExtPivotgridComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPivotgridComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPivotgridComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPivotgridComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPivotgridComponent_1;
    ExtPivotgridComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPivotgridComponent = ExtPivotgridComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPivotgridComponent);
ExtPivotgridComponent.ɵfac = function ExtPivotgridComponent_Factory(t) { return new (t || ExtPivotgridComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPivotgridComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPivotgridComponent, selectors: [["ExtPivotgrid"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", associatedData: "associatedData", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", bufferSize: "bufferSize", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", clsGrandTotal: "clsGrandTotal", clsGroupTotal: "clsGroupTotal", collapseDefaults: "collapseDefaults", collapsible: "collapsible", columnLines: "columnLines", columnMenu: "columnMenu", columnResize: "columnResize", columns: "columns", columnsMenuItem: "columnsMenuItem", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", deferEmptyText: "deferEmptyText", deselectOnContainerClick: "deselectOnContainerClick", disabled: "disabled", disableSelection: "disableSelection", disclosureProperty: "disclosureProperty", displayed: "displayed", docked: "docked", draggable: "draggable", emptyItemText: "emptyItemText", emptyState: "emptyState", emptyText: "emptyText", emptyTextDefaults: "emptyTextDefaults", emptyTextProperty: "emptyTextProperty", enableColumnMove: "enableColumnMove", enableColumnSort: "enableColumnSort", enableLoadMask: "enableLoadMask", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", grouped: "grouped", groupFooter: "groupFooter", groupHeader: "groupHeader", grouping: "grouping", groupPlaceholder: "groupPlaceholder", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideHeaders: "hideHeaders", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideScrollbar: "hideScrollbar", horizontalOverflow: "horizontalOverflow", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", indexBar: "indexBar", infinite: "infinite", inline: "inline", innerCls: "innerCls", innerCtHeight: "innerCtHeight", innerWidth: "innerWidth", instanceCls: "instanceCls", itemButtonMode: "itemButtonMode", itemCls: "itemCls", itemConfig: "itemConfig", itemContentCls: "itemContentCls", itemDataMap: "itemDataMap", itemId: "itemId", itemInnerCls: "itemInnerCls", itemRipple: "itemRipple", items: "items", itemsFocusable: "itemsFocusable", itemTpl: "itemTpl", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", leftAxisCellConfig: "leftAxisCellConfig", listeners: "listeners", loadingHeight: "loadingHeight", loadingText: "loadingText", maintainChildNodes: "maintainChildNodes", manageBorders: "manageBorders", margin: "margin", markDirty: "markDirty", masked: "masked", matrix: "matrix", maxHeight: "maxHeight", maxItemCache: "maxItemCache", maxWidth: "maxWidth", minHeight: "minHeight", minimumBufferDistance: "minimumBufferDistance", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multiColumnSort: "multiColumnSort", name: "name", nameable: "nameable", nameHolder: "nameHolder", onItemDisclosure: "onItemDisclosure", padding: "padding", pinFooters: "pinFooters", pinHeaders: "pinHeaders", pinnedFooter: "pinnedFooter", pinnedFooterHeight: "pinnedFooterHeight", pinnedHeader: "pinnedHeader", pinnedHeaderHeight: "pinnedHeaderHeight", pressedDelay: "pressedDelay", preventSelectionOnDisclose: "preventSelectionOnDisclose", preventSelectionOnTool: "preventSelectionOnTool", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", reserveScrollbar: "reserveScrollbar", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", rowLines: "rowLines", rowNumbers: "rowNumbers", scrollable: "scrollable", scrollDock: "scrollDock", scrollToTopOnRefresh: "scrollToTopOnRefresh", selectable: "selectable", selection: "selection", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sortable: "sortable", startColGroupsCollapsed: "startColGroupsCollapsed", startRowGroupsCollapsed: "startRowGroupsCollapsed", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", store: "store", striped: "striped", style: "style", tabIndex: "tabIndex", title: "title", titleBar: "titleBar", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", topAxisCellConfig: "topAxisCellConfig", topRenderedIndex: "topRenderedIndex", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggerCtEvent: "triggerCtEvent", triggerEvent: "triggerEvent", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", variableHeights: "variableHeights", verticalOverflow: "verticalOverflow", viewModel: "viewModel", visibleHeight: "visibleHeight", visibleLeft: "visibleLeft", visibleTop: "visibleTop", visibleWidth: "visibleWidth", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecomplete: "beforecomplete", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeedit: "beforeedit", beforegroupcollapse: "beforegroupcollapse", beforegroupexpand: "beforegroupexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeselectionextend: "beforeselectionextend", beforeshow: "beforeshow", beforestartedit: "beforestartedit", beforestorechange: "beforestorechange", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", canceledit: "canceledit", cellselection: "cellselection", centeredchange: "centeredchange", childdoubletap: "childdoubletap", childlongpress: "childlongpress", childmouseenter: "childmouseenter", childmouseleave: "childmouseleave", childsingletap: "childsingletap", childtap: "childtap", childtaphold: "childtaphold", childtouchcancel: "childtouchcancel", childtouchend: "childtouchend", childtouchmove: "childtouchmove", childtouchstart: "childtouchstart", columnadd: "columnadd", columnhide: "columnhide", columnmenucreated: "columnmenucreated", columnmove: "columnmove", columnremove: "columnremove", columnresize: "columnresize", columnselection: "columnselection", columnshow: "columnshow", columnsort: "columnsort", complete: "complete", deactivate: "deactivate", deselect: "deselect", destroy: "destroy", disabledchange: "disabledchange", disclose: "disclose", dockedchange: "dockedchange", edit: "edit", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", groupcollapse: "groupcollapse", groupexpand: "groupexpand", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", itemaction: "itemaction", itemdoubletap: "itemdoubletap", itemlongpress: "itemlongpress", itemmouseenter: "itemmouseenter", itemmouseleave: "itemmouseleave", itemsingletap: "itemsingletap", itemswipe: "itemswipe", itemtap: "itemtap", itemtaphold: "itemtaphold", itemtouchcancel: "itemtouchcancel", itemtouchend: "itemtouchend", itemtouchmove: "itemtouchmove", itemtouchstart: "itemtouchstart", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", navigate: "navigate", orientationchange: "orientationchange", painted: "painted", pivotbeforereconfigure: "pivotbeforereconfigure", pivotbeforerequest: "pivotbeforerequest", pivotbuildtotals: "pivotbuildtotals", pivotcolumnsbuilt: "pivotcolumnsbuilt", pivotdone: "pivotdone", pivotgroupcelldoubletap: "pivotgroupcelldoubletap", pivotgroupcelltap: "pivotgroupcelltap", pivotgroupcelltaphold: "pivotgroupcelltaphold", pivotgroupcollapse: "pivotgroupcollapse", pivotgroupdoubletap: "pivotgroupdoubletap", pivotgroupexpand: "pivotgroupexpand", pivotgrouptap: "pivotgrouptap", pivotgrouptaphold: "pivotgrouptaphold", pivotitemcelldoubletap: "pivotitemcelldoubletap", pivotitemcelltap: "pivotitemcelltap", pivotitemcelltaphold: "pivotitemcelltaphold", pivotitemdoubletap: "pivotitemdoubletap", pivotitemtap: "pivotitemtap", pivotitemtaphold: "pivotitemtaphold", pivotmodelbuilt: "pivotmodelbuilt", pivotprogress: "pivotprogress", pivotreconfigure: "pivotreconfigure", pivotrecordbuilt: "pivotrecordbuilt", pivotrequestexception: "pivotrequestexception", pivotstart: "pivotstart", pivotstorebuilt: "pivotstorebuilt", pivottotalcelldoubletap: "pivottotalcelldoubletap", pivottotalcelltap: "pivottotalcelltap", pivottotalcelltaphold: "pivottotalcelltaphold", pivottotaldoubletap: "pivottotaldoubletap", pivottotaltap: "pivottotaltap", pivottotaltaphold: "pivottotaltaphold", positionedchange: "positionedchange", refresh: "refresh", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", select: "select", selectionextenderdrag: "selectionextenderdrag", show: "show", specialkey: "specialkey", startedit: "startedit", storechange: "storechange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", validateedit: "validateedit", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotgridComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPivotgridComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPivotgridComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPivotgrid',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'associatedData', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'bufferSize', 'cardSwitchAnimation', 'centered', 'cls', 'clsGrandTotal', 'clsGroupTotal', 'collapseDefaults', 'collapsible', 'columnLines', 'columnMenu', 'columnResize', 'columns', 'columnsMenuItem', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'deferEmptyText', 'deselectOnContainerClick', 'disabled', 'disableSelection', 'disclosureProperty', 'displayed', 'docked', 'draggable', 'emptyItemText', 'emptyState', 'emptyText', 'emptyTextDefaults', 'emptyTextProperty', 'enableColumnMove', 'enableColumnSort', 'enableLoadMask', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'grouped', 'groupFooter', 'groupHeader', 'grouping', 'groupPlaceholder', 'height', 'hidden', 'hideAnimation', 'hideHeaders', 'hideMode', 'hideOnMaskTap', 'hideScrollbar', 'horizontalOverflow', 'html', 'id', 'inactiveChildTabIndex', 'indexBar', 'infinite', 'inline', 'innerCls', 'innerCtHeight', 'innerWidth', 'instanceCls', 'itemButtonMode', 'itemCls', 'itemConfig', 'itemContentCls', 'itemDataMap', 'itemId', 'itemInnerCls', 'itemRipple', 'items', 'itemsFocusable', 'itemTpl', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'leftAxisCellConfig', 'listeners', 'loadingHeight', 'loadingText', 'maintainChildNodes', 'manageBorders', 'margin', 'markDirty', 'masked', 'matrix', 'maxHeight', 'maxItemCache', 'maxWidth', 'minHeight', 'minimumBufferDistance', 'minWidth', 'modal', 'modelValidation', 'multiColumnSort', 'name', 'nameable', 'nameHolder', 'onItemDisclosure', 'padding', 'pinFooters', 'pinHeaders', 'pinnedFooter', 'pinnedFooterHeight', 'pinnedHeader', 'pinnedHeaderHeight', 'plugins', 'pressedDelay', 'preventSelectionOnDisclose', 'preventSelectionOnTool', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'reserveScrollbar', 'resetFocusPosition', 'right', 'ripple', 'rowLines', 'rowNumbers', 'scrollable', 'scrollDock', 'scrollToTopOnRefresh', 'selectable', 'selection', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sortable', 'startColGroupsCollapsed', 'startRowGroupsCollapsed', 'stateful', 'statefulDefaults', 'stateId', 'store', 'striped', 'style', 'tabIndex', 'title', 'titleBar', 'toFrontOnShow', 'tooltip', 'top', 'topAxisCellConfig', 'topRenderedIndex', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggerCtEvent', 'triggerEvent', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'undefined', 'variableHeights', 'verticalOverflow', 'viewModel', 'visibleHeight', 'visibleLeft', 'visibleTop', 'visibleWidth', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecomplete', 'beforedisabledchange', 'beforedockedchange', 'beforeedit', 'beforegroupcollapse', 'beforegroupexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeselectionextend', 'beforeshow', 'beforestartedit', 'beforestorechange', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'canceledit', 'cellselection', 'centeredchange', 'childdoubletap', 'childlongpress', 'childmouseenter', 'childmouseleave', 'childsingletap', 'childtap', 'childtaphold', 'childtouchcancel', 'childtouchend', 'childtouchmove', 'childtouchstart', 'columnadd', 'columnhide', 'columnmenucreated', 'columnmove', 'columnremove', 'columnresize', 'columnselection', 'columnshow', 'columnsort', 'complete', 'deactivate', 'deselect', 'destroy', 'disabledchange', 'disclose', 'dockedchange', 'edit', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'groupcollapse', 'groupexpand', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'itemaction', 'itemdoubletap', 'itemlongpress', 'itemmouseenter', 'itemmouseleave', 'itemsingletap', 'itemswipe', 'itemtap', 'itemtaphold', 'itemtouchcancel', 'itemtouchend', 'itemtouchmove', 'itemtouchstart', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'navigate', 'orientationchange', 'painted', 'pivotbeforereconfigure', 'pivotbeforerequest', 'pivotbuildtotals', 'pivotcolumnsbuilt', 'pivotdone', 'pivotgroupcelldoubletap', 'pivotgroupcelltap', 'pivotgroupcelltaphold', 'pivotgroupcollapse', 'pivotgroupdoubletap', 'pivotgroupexpand', 'pivotgrouptap', 'pivotgrouptaphold', 'pivotitemcelldoubletap', 'pivotitemcelltap', 'pivotitemcelltaphold', 'pivotitemdoubletap', 'pivotitemtap', 'pivotitemtaphold', 'pivotmodelbuilt', 'pivotprogress', 'pivotreconfigure', 'pivotrecordbuilt', 'pivotrequestexception', 'pivotstart', 'pivotstorebuilt', 'pivottotalcelldoubletap', 'pivottotalcelltap', 'pivottotalcelltaphold', 'pivottotaldoubletap', 'pivottotaltap', 'pivottotaltaphold', 'positionedchange', 'refresh', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'select', 'selectionextenderdrag', 'show', 'specialkey', 'startedit', 'storechange', 'tofront', 'topchange', 'updatedata', 'validateedit', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotgridComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPivotgridComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPivotgrid()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPivotconfigfieldComponent = /** @class */ (function (_super) {
    __extends(ExtPivotconfigfieldComponent, _super);
    function ExtPivotconfigfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataMap', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPivotconfigfield()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'pivotconfigfield';
        return _this;
    }
    ExtPivotconfigfieldComponent_1 = ExtPivotconfigfieldComponent;
    ExtPivotconfigfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPivotconfigfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPivotconfigfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPivotconfigfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPivotconfigfieldComponent_1;
    ExtPivotconfigfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPivotconfigfieldComponent = ExtPivotconfigfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPivotconfigfieldComponent);
ExtPivotconfigfieldComponent.ɵfac = function ExtPivotconfigfieldComponent_Factory(t) { return new (t || ExtPivotconfigfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPivotconfigfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPivotconfigfieldComponent, selectors: [["ExtPivotconfigfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", dataMap: "dataMap", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemCls: "itemCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", pinned: "pinned", publishes: "publishes", record: "record", recordIndex: "recordIndex", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotconfigfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPivotconfigfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPivotconfigfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPivotconfigfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'dataMap', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotconfigfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPivotconfigfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPivotconfigfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPivotconfigcontainerComponent = /** @class */ (function (_super) {
    __extends(ExtPivotconfigcontainerComponent, _super);
    function ExtPivotconfigcontainerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'fieldType', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPivotconfigcontainer()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'pivotconfigcontainer';
        return _this;
    }
    ExtPivotconfigcontainerComponent_1 = ExtPivotconfigcontainerComponent;
    ExtPivotconfigcontainerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPivotconfigcontainerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPivotconfigcontainerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPivotconfigcontainerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPivotconfigcontainerComponent_1;
    ExtPivotconfigcontainerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPivotconfigcontainerComponent = ExtPivotconfigcontainerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPivotconfigcontainerComponent);
ExtPivotconfigcontainerComponent.ɵfac = function ExtPivotconfigcontainerComponent_Factory(t) { return new (t || ExtPivotconfigcontainerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPivotconfigcontainerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPivotconfigcontainerComponent, selectors: [["ExtPivotconfigcontainer"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", fieldType: "fieldType", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotconfigcontainerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPivotconfigcontainerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPivotconfigcontainerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPivotconfigcontainer',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'fieldType', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotconfigcontainerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPivotconfigcontainerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPivotconfigcontainer()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPivotconfigformComponent = /** @class */ (function (_super) {
    __extends(ExtPivotconfigformComponent, _super);
    function ExtPivotconfigformComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'api', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'baseParams', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'bubbleDirty', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'enableSubmissionForm', 'enctype', 'undefined', 'undefined', 'undefined', 'fieldDefaults', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'itemId', 'items', 'jsonSubmit', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'method', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multipartDetection', 'name', 'nameable', 'nameHolder', 'padding', 'paramOrder', 'paramsAsHash', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'standardSubmit', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submitOnAction', 'tabIndex', 'tbar', 'timeout', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackResetOnLoad', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPivotconfigform()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforesubmit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'exception', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'submit', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'pivotconfigform';
        return _this;
    }
    ExtPivotconfigformComponent_1 = ExtPivotconfigformComponent;
    ExtPivotconfigformComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPivotconfigformComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPivotconfigformComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPivotconfigformComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPivotconfigformComponent_1;
    ExtPivotconfigformComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPivotconfigformComponent = ExtPivotconfigformComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPivotconfigformComponent);
ExtPivotconfigformComponent.ɵfac = function ExtPivotconfigformComponent_Factory(t) { return new (t || ExtPivotconfigformComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPivotconfigformComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPivotconfigformComponent, selectors: [["ExtPivotconfigform"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", api: "api", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", baseParams: "baseParams", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", enableSubmissionForm: "enableSubmissionForm", enctype: "enctype", undefined: "undefined", fieldDefaults: "fieldDefaults", fieldSeparators: "fieldSeparators", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", inputBorders: "inputBorders", instanceCls: "instanceCls", itemId: "itemId", items: "items", jsonSubmit: "jsonSubmit", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", method: "method", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multipartDetection: "multipartDetection", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", paramOrder: "paramOrder", paramsAsHash: "paramsAsHash", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", standardSubmit: "standardSubmit", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", submitOnAction: "submitOnAction", tabIndex: "tabIndex", tbar: "tbar", timeout: "timeout", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", trackResetOnLoad: "trackResetOnLoad", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", url: "url", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforesubmit: "beforesubmit", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", exception: "exception", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", submit: "submit", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotconfigformComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPivotconfigformComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPivotconfigformComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPivotconfigform',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'api', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'baseParams', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'bubbleDirty', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'enableSubmissionForm', 'enctype', 'undefined', 'undefined', 'undefined', 'fieldDefaults', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'itemId', 'items', 'jsonSubmit', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'method', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multipartDetection', 'name', 'nameable', 'nameHolder', 'padding', 'paramOrder', 'paramsAsHash', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'standardSubmit', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submitOnAction', 'tabIndex', 'tbar', 'timeout', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackResetOnLoad', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforesubmit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'exception', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'submit', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotconfigformComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPivotconfigformComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPivotconfigform()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPivotconfigpanelComponent = /** @class */ (function (_super) {
    __extends(ExtPivotconfigpanelComponent, _super);
    function ExtPivotconfigpanelComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'panelAggFieldsText', 'panelAggFieldsTitle', 'panelAllFieldsText', 'panelAllFieldsTitle', 'panelLeftFieldsText', 'panelLeftFieldsTitle', 'panelTopFieldsText', 'panelTopFieldsTitle', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPivotconfigpanel()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'pivotconfigpanel';
        return _this;
    }
    ExtPivotconfigpanelComponent_1 = ExtPivotconfigpanelComponent;
    ExtPivotconfigpanelComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPivotconfigpanelComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPivotconfigpanelComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPivotconfigpanelComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPivotconfigpanelComponent_1;
    ExtPivotconfigpanelComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPivotconfigpanelComponent = ExtPivotconfigpanelComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPivotconfigpanelComponent);
ExtPivotconfigpanelComponent.ɵfac = function ExtPivotconfigpanelComponent_Factory(t) { return new (t || ExtPivotconfigpanelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPivotconfigpanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPivotconfigpanelComponent, selectors: [["ExtPivotconfigpanel"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", panelAggFieldsText: "panelAggFieldsText", panelAggFieldsTitle: "panelAggFieldsTitle", panelAllFieldsText: "panelAllFieldsText", panelAllFieldsTitle: "panelAllFieldsTitle", panelLeftFieldsText: "panelLeftFieldsText", panelLeftFieldsTitle: "panelLeftFieldsTitle", panelTopFieldsText: "panelTopFieldsText", panelTopFieldsTitle: "panelTopFieldsTitle", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotconfigpanelComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPivotconfigpanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPivotconfigpanelComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPivotconfigpanel',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'panelAggFieldsText', 'panelAggFieldsTitle', 'panelAllFieldsText', 'panelAllFieldsTitle', 'panelLeftFieldsText', 'panelLeftFieldsTitle', 'panelTopFieldsText', 'panelTopFieldsTitle', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotconfigpanelComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPivotconfigpanelComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPivotconfigpanel()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPivotsettingsComponent = /** @class */ (function (_super) {
    __extends(ExtPivotsettingsComponent, _super);
    function ExtPivotsettingsComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'api', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'baseParams', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'bubbleDirty', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'enableSubmissionForm', 'enctype', 'undefined', 'undefined', 'undefined', 'fieldDefaults', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'itemId', 'items', 'jsonSubmit', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'method', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multipartDetection', 'name', 'nameable', 'nameHolder', 'padding', 'paramOrder', 'paramsAsHash', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'standardSubmit', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submitOnAction', 'tabIndex', 'tbar', 'timeout', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackResetOnLoad', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPivotsettings()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforesubmit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'exception', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'submit', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'pivotsettings';
        return _this;
    }
    ExtPivotsettingsComponent_1 = ExtPivotsettingsComponent;
    ExtPivotsettingsComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPivotsettingsComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPivotsettingsComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPivotsettingsComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPivotsettingsComponent_1;
    ExtPivotsettingsComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPivotsettingsComponent = ExtPivotsettingsComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPivotsettingsComponent);
ExtPivotsettingsComponent.ɵfac = function ExtPivotsettingsComponent_Factory(t) { return new (t || ExtPivotsettingsComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPivotsettingsComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPivotsettingsComponent, selectors: [["ExtPivotsettings"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", api: "api", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", baseParams: "baseParams", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", enableSubmissionForm: "enableSubmissionForm", enctype: "enctype", undefined: "undefined", fieldDefaults: "fieldDefaults", fieldSeparators: "fieldSeparators", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", inputBorders: "inputBorders", instanceCls: "instanceCls", itemId: "itemId", items: "items", jsonSubmit: "jsonSubmit", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", method: "method", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multipartDetection: "multipartDetection", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", paramOrder: "paramOrder", paramsAsHash: "paramsAsHash", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", standardSubmit: "standardSubmit", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", submitOnAction: "submitOnAction", tabIndex: "tabIndex", tbar: "tbar", timeout: "timeout", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", trackResetOnLoad: "trackResetOnLoad", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", url: "url", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforesubmit: "beforesubmit", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", exception: "exception", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", submit: "submit", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotsettingsComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPivotsettingsComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPivotsettingsComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPivotsettings',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'api', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'baseParams', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'bubbleDirty', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'enableSubmissionForm', 'enctype', 'undefined', 'undefined', 'undefined', 'fieldDefaults', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'itemId', 'items', 'jsonSubmit', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'method', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multipartDetection', 'name', 'nameable', 'nameHolder', 'padding', 'paramOrder', 'paramsAsHash', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'standardSubmit', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submitOnAction', 'tabIndex', 'tbar', 'timeout', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackResetOnLoad', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforesubmit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'exception', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'submit', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotsettingsComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPivotsettingsComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPivotsettings()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPivotrangeeditorComponent = /** @class */ (function (_super) {
    __extends(ExtPivotrangeeditorComponent, _super);
    function ExtPivotrangeeditorComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'api', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'baseParams', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'bubbleDirty', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'enableSubmissionForm', 'enctype', 'undefined', 'undefined', 'undefined', 'fieldDefaults', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'itemId', 'items', 'jsonSubmit', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'method', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multipartDetection', 'name', 'nameable', 'nameHolder', 'padding', 'paramOrder', 'paramsAsHash', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'standardSubmit', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submitOnAction', 'tabIndex', 'tbar', 'timeout', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackResetOnLoad', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPivotrangeeditor()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforesubmit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'exception', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'submit', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'pivotrangeeditor';
        return _this;
    }
    ExtPivotrangeeditorComponent_1 = ExtPivotrangeeditorComponent;
    ExtPivotrangeeditorComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPivotrangeeditorComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPivotrangeeditorComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPivotrangeeditorComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPivotrangeeditorComponent_1;
    ExtPivotrangeeditorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPivotrangeeditorComponent = ExtPivotrangeeditorComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPivotrangeeditorComponent);
ExtPivotrangeeditorComponent.ɵfac = function ExtPivotrangeeditorComponent_Factory(t) { return new (t || ExtPivotrangeeditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPivotrangeeditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPivotrangeeditorComponent, selectors: [["ExtPivotrangeeditor"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", api: "api", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", baseParams: "baseParams", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", enableSubmissionForm: "enableSubmissionForm", enctype: "enctype", undefined: "undefined", fieldDefaults: "fieldDefaults", fieldSeparators: "fieldSeparators", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", inputBorders: "inputBorders", instanceCls: "instanceCls", itemId: "itemId", items: "items", jsonSubmit: "jsonSubmit", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", method: "method", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", multipartDetection: "multipartDetection", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", paramOrder: "paramOrder", paramsAsHash: "paramsAsHash", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", standardButtons: "standardButtons", standardSubmit: "standardSubmit", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", submitOnAction: "submitOnAction", tabIndex: "tabIndex", tbar: "tbar", timeout: "timeout", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", trackResetOnLoad: "trackResetOnLoad", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", url: "url", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforesubmit: "beforesubmit", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", exception: "exception", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", submit: "submit", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotrangeeditorComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPivotrangeeditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPivotrangeeditorComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPivotrangeeditor',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'api', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'baseParams', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'bubbleDirty', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'enableSubmissionForm', 'enctype', 'undefined', 'undefined', 'undefined', 'fieldDefaults', 'fieldSeparators', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'inputBorders', 'instanceCls', 'itemId', 'items', 'jsonSubmit', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'method', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'multipartDetection', 'name', 'nameable', 'nameHolder', 'padding', 'paramOrder', 'paramsAsHash', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'standardButtons', 'standardSubmit', 'stateful', 'statefulDefaults', 'stateId', 'style', 'submitOnAction', 'tabIndex', 'tbar', 'timeout', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackResetOnLoad', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforesubmit', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'exception', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'submit', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotrangeeditorComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPivotrangeeditorComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPivotrangeeditor()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPivotgridrowComponent = /** @class */ (function (_super) {
    __extends(ExtPivotgridrowComponent, _super);
    function ExtPivotgridrowComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'body', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultCellUI', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandedField', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stickyVisibility', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPivotgridrow()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'pivotgridrow';
        return _this;
    }
    ExtPivotgridrowComponent_1 = ExtPivotgridrowComponent;
    ExtPivotgridrowComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPivotgridrowComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPivotgridrowComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPivotgridrowComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPivotgridrowComponent_1;
    ExtPivotgridrowComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPivotgridrowComponent = ExtPivotgridrowComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPivotgridrowComponent);
ExtPivotgridrowComponent.ɵfac = function ExtPivotgridrowComponent_Factory(t) { return new (t || ExtPivotgridrowComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPivotgridrowComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPivotgridrowComponent, selectors: [["ExtPivotgridrow"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", body: "body", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultCellUI: "defaultCellUI", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", expandedField: "expandedField", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", pinned: "pinned", publishes: "publishes", record: "record", recordIndex: "recordIndex", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stickyVisibility: "stickyVisibility", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotgridrowComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPivotgridrowComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPivotgridrowComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPivotgridrow',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'body', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultCellUI', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'expandedField', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'pinned', 'plugins', 'publishes', 'record', 'recordIndex', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stickyVisibility', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPivotgridrowComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPivotgridrowComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPivotgridrow()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtProgressComponent = /** @class */ (function (_super) {
    __extends(ExtProgressComponent, _super);
    function ExtProgressComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animate', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'text', 'textTpl', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCProgress()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'progress';
        return _this;
    }
    ExtProgressComponent_1 = ExtProgressComponent;
    ExtProgressComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtProgressComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtProgressComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtProgressComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtProgressComponent_1;
    ExtProgressComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtProgressComponent = ExtProgressComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtProgressComponent);
ExtProgressComponent.ɵfac = function ExtProgressComponent_Factory(t) { return new (t || ExtProgressComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtProgressComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtProgressComponent, selectors: [["ExtProgress"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", animate: "animate", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", text: "text", textTpl: "textTpl", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtProgressComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtProgressComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtProgressComponent, [{
        type: Component,
        args: [{
                selector: 'ExtProgress',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animate', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'text', 'textTpl', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtProgressComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtProgressComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCProgress()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtProgressbarwidgetComponent = /** @class */ (function (_super) {
    __extends(ExtProgressbarwidgetComponent, _super);
    function ExtProgressbarwidgetComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animate', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'text', 'textTpl', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCProgressbarwidget()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'progressbarwidget';
        return _this;
    }
    ExtProgressbarwidgetComponent_1 = ExtProgressbarwidgetComponent;
    ExtProgressbarwidgetComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtProgressbarwidgetComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtProgressbarwidgetComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtProgressbarwidgetComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtProgressbarwidgetComponent_1;
    ExtProgressbarwidgetComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtProgressbarwidgetComponent = ExtProgressbarwidgetComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtProgressbarwidgetComponent);
ExtProgressbarwidgetComponent.ɵfac = function ExtProgressbarwidgetComponent_Factory(t) { return new (t || ExtProgressbarwidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtProgressbarwidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtProgressbarwidgetComponent, selectors: [["ExtProgressbarwidget"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", animate: "animate", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", text: "text", textTpl: "textTpl", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtProgressbarwidgetComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtProgressbarwidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtProgressbarwidgetComponent, [{
        type: Component,
        args: [{
                selector: 'ExtProgressbarwidget',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animate', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'text', 'textTpl', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtProgressbarwidgetComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtProgressbarwidgetComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCProgressbarwidget()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSegmentedbuttonComponent = /** @class */ (function (_super) {
    __extends(ExtSegmentedbuttonComponent, _super);
    function ExtSegmentedbuttonComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowDepress', 'allowFocusingDisabledChildren', 'allowMultiple', 'allowToggle', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'defaultUI', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'forceSelection', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'pressedButtons', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'vertical', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSegmentedbutton()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'toggle', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'segmentedbutton';
        return _this;
    }
    ExtSegmentedbuttonComponent_1 = ExtSegmentedbuttonComponent;
    ExtSegmentedbuttonComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSegmentedbuttonComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSegmentedbuttonComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSegmentedbuttonComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSegmentedbuttonComponent_1;
    ExtSegmentedbuttonComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSegmentedbuttonComponent = ExtSegmentedbuttonComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSegmentedbuttonComponent);
ExtSegmentedbuttonComponent.ɵfac = function ExtSegmentedbuttonComponent_Factory(t) { return new (t || ExtSegmentedbuttonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSegmentedbuttonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSegmentedbuttonComponent, selectors: [["ExtSegmentedbutton"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowDepress: "allowDepress", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", allowMultiple: "allowMultiple", allowToggle: "allowToggle", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", defaultUI: "defaultUI", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", forceSelection: "forceSelection", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", pressedButtons: "pressedButtons", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", vertical: "vertical", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", toggle: "toggle", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSegmentedbuttonComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSegmentedbuttonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSegmentedbuttonComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSegmentedbutton',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowDepress', 'allowFocusingDisabledChildren', 'allowMultiple', 'allowToggle', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'defaultUI', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'forceSelection', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'pressedButtons', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'vertical', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'toggle', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSegmentedbuttonComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSegmentedbuttonComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSegmentedbutton()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSheetComponent = /** @class */ (function (_super) {
    __extends(ExtSheetComponent, _super);
    function ExtSheetComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'cover', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'enter', 'undefined', 'undefined', 'exit', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'reveal', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'side', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'stretchX', 'stretchY', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSheet()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'sheet';
        return _this;
    }
    ExtSheetComponent_1 = ExtSheetComponent;
    ExtSheetComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSheetComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSheetComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSheetComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSheetComponent_1;
    ExtSheetComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSheetComponent = ExtSheetComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSheetComponent);
ExtSheetComponent.ɵfac = function ExtSheetComponent_Factory(t) { return new (t || ExtSheetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSheetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSheetComponent, selectors: [["ExtSheet"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", cover: "cover", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", enter: "enter", undefined: "undefined", exit: "exit", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", reveal: "reveal", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", side: "side", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stretchX: "stretchX", stretchY: "stretchY", style: "style", tabIndex: "tabIndex", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSheetComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSheetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSheetComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSheet',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'anchor', 'anchorPosition', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'cover', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'enter', 'undefined', 'undefined', 'exit', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'reveal', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'side', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'stretchX', 'stretchY', 'style', 'tabIndex', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSheetComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSheetComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSheet()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSliderComponent = /** @class */ (function (_super) {
    __extends(ExtSliderComponent, _super);
    function ExtSliderComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'allowThumbsOverlapping', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'increment', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxValue', 'maxWidth', 'minHeight', 'minValue', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'thumbDefaults', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'valueIsArray', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSlider()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'destroy', 'disabledchange', 'dockedchange', 'drag', 'dragend', 'dragstart', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'slider';
        return _this;
    }
    ExtSliderComponent_1 = ExtSliderComponent;
    ExtSliderComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSliderComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSliderComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSliderComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSliderComponent_1;
    ExtSliderComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSliderComponent = ExtSliderComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSliderComponent);
ExtSliderComponent.ɵfac = function ExtSliderComponent_Factory(t) { return new (t || ExtSliderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSliderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSliderComponent, selectors: [["ExtSlider"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", allowThumbsOverlapping: "allowThumbsOverlapping", alwaysOnTop: "alwaysOnTop", animation: "animation", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", increment: "increment", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxValue: "maxValue", maxWidth: "maxWidth", minHeight: "minHeight", minValue: "minValue", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", thumbDefaults: "thumbDefaults", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", valueIsArray: "valueIsArray", values: "values", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drag: "drag", dragend: "dragend", dragstart: "dragstart", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSliderComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSliderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSliderComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSlider',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'allowThumbsOverlapping', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'increment', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxValue', 'maxWidth', 'minHeight', 'minValue', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'thumbDefaults', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'valueIsArray', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'destroy', 'disabledchange', 'dockedchange', 'drag', 'dragend', 'dragstart', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSliderComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSliderComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSlider()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtThumbComponent = /** @class */ (function (_super) {
    __extends(ExtThumbComponent, _super);
    function ExtThumbComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'fillCls', 'fillTrack', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCThumb()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'thumb';
        return _this;
    }
    ExtThumbComponent_1 = ExtThumbComponent;
    ExtThumbComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtThumbComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtThumbComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtThumbComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtThumbComponent_1;
    ExtThumbComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtThumbComponent = ExtThumbComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtThumbComponent);
ExtThumbComponent.ɵfac = function ExtThumbComponent_Factory(t) { return new (t || ExtThumbComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtThumbComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtThumbComponent, selectors: [["ExtThumb"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", fillCls: "fillCls", fillTrack: "fillTrack", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtThumbComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtThumbComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtThumbComponent, [{
        type: Component,
        args: [{
                selector: 'ExtThumb',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'fillCls', 'fillTrack', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtThumbComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtThumbComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCThumb()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTogglesliderComponent = /** @class */ (function (_super) {
    __extends(ExtTogglesliderComponent, _super);
    function ExtTogglesliderComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'allowThumbsOverlapping', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'increment', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxValue', 'maxWidth', 'minHeight', 'minValue', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'thumbDefaults', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'valueIsArray', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCToggleslider()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'destroy', 'disabledchange', 'dockedchange', 'drag', 'dragend', 'dragstart', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'toggleslider';
        return _this;
    }
    ExtTogglesliderComponent_1 = ExtTogglesliderComponent;
    ExtTogglesliderComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTogglesliderComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTogglesliderComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTogglesliderComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTogglesliderComponent_1;
    ExtTogglesliderComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTogglesliderComponent = ExtTogglesliderComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTogglesliderComponent);
ExtTogglesliderComponent.ɵfac = function ExtTogglesliderComponent_Factory(t) { return new (t || ExtTogglesliderComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTogglesliderComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTogglesliderComponent, selectors: [["ExtToggleslider"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", allowThumbsOverlapping: "allowThumbsOverlapping", alwaysOnTop: "alwaysOnTop", animation: "animation", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", increment: "increment", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxValue: "maxValue", maxWidth: "maxWidth", minHeight: "minHeight", minValue: "minValue", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", thumbDefaults: "thumbDefaults", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", valueIsArray: "valueIsArray", values: "values", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drag: "drag", dragend: "dragend", dragstart: "dragstart", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTogglesliderComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTogglesliderComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTogglesliderComponent, [{
        type: Component,
        args: [{
                selector: 'ExtToggleslider',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'allowThumbsOverlapping', 'alwaysOnTop', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'increment', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxValue', 'maxWidth', 'minHeight', 'minValue', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'thumbDefaults', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'valueIsArray', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'destroy', 'disabledchange', 'dockedchange', 'drag', 'dragend', 'dragstart', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTogglesliderComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTogglesliderComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCToggleslider()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSpacerComponent = /** @class */ (function (_super) {
    __extends(ExtSpacerComponent, _super);
    function ExtSpacerComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSpacer()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'spacer';
        return _this;
    }
    ExtSpacerComponent_1 = ExtSpacerComponent;
    ExtSpacerComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSpacerComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSpacerComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSpacerComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSpacerComponent_1;
    ExtSpacerComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSpacerComponent = ExtSpacerComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSpacerComponent);
ExtSpacerComponent.ɵfac = function ExtSpacerComponent_Factory(t) { return new (t || ExtSpacerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSpacerComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSpacerComponent, selectors: [["ExtSpacer"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSpacerComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSpacerComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSpacerComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSpacer',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSpacerComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSpacerComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSpacer()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSparklinebarComponent = /** @class */ (function (_super) {
    __extends(ExtSparklinebarComponent, _super);
    function ExtSparklinebarComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'barColor', 'barSpacing', 'barWidth', 'bind', 'border', 'bottom', 'centered', 'chartRangeClip', 'chartRangeMax', 'chartRangeMin', 'cls', 'colorMap', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'negBarColor', 'nullColor', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stackedBarColor', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zeroAxis', 'zeroColor', 'zIndex',], (new EWCSparklinebar()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'sparklinebar';
        return _this;
    }
    ExtSparklinebarComponent_1 = ExtSparklinebarComponent;
    ExtSparklinebarComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSparklinebarComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSparklinebarComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSparklinebarComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSparklinebarComponent_1;
    ExtSparklinebarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSparklinebarComponent = ExtSparklinebarComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSparklinebarComponent);
ExtSparklinebarComponent.ɵfac = function ExtSparklinebarComponent_Factory(t) { return new (t || ExtSparklinebarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSparklinebarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSparklinebarComponent, selectors: [["ExtSparklinebar"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", barColor: "barColor", barSpacing: "barSpacing", barWidth: "barWidth", bind: "bind", border: "border", bottom: "bottom", centered: "centered", chartRangeClip: "chartRangeClip", chartRangeMax: "chartRangeMax", chartRangeMin: "chartRangeMin", cls: "cls", colorMap: "colorMap", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", disableTooltips: "disableTooltips", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightColor: "highlightColor", highlightLighten: "highlightLighten", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", lineColor: "lineColor", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", negBarColor: "negBarColor", nullColor: "nullColor", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stackedBarColor: "stackedBarColor", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipTpl: "tipTpl", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", tooltipPrefix: "tooltipPrefix", tooltipSkipNull: "tooltipSkipNull", tooltipSuffix: "tooltipSuffix", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", values: "values", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zeroAxis: "zeroAxis", zeroColor: "zeroColor", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklinebarComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSparklinebarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSparklinebarComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSparklinebar',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'barColor', 'barSpacing', 'barWidth', 'bind', 'border', 'bottom', 'centered', 'chartRangeClip', 'chartRangeMax', 'chartRangeMin', 'cls', 'colorMap', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'negBarColor', 'nullColor', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stackedBarColor', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zeroAxis', 'zeroColor', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklinebarComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSparklinebarComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSparklinebar()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSparklineComponent = /** @class */ (function (_super) {
    __extends(ExtSparklineComponent, _super);
    function ExtSparklineComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSparkline()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'sparkline';
        return _this;
    }
    ExtSparklineComponent_1 = ExtSparklineComponent;
    ExtSparklineComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSparklineComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSparklineComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSparklineComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSparklineComponent_1;
    ExtSparklineComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSparklineComponent = ExtSparklineComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSparklineComponent);
ExtSparklineComponent.ɵfac = function ExtSparklineComponent_Factory(t) { return new (t || ExtSparklineComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSparklineComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSparklineComponent, selectors: [["ExtSparkline"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", disableTooltips: "disableTooltips", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightColor: "highlightColor", highlightLighten: "highlightLighten", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", lineColor: "lineColor", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipTpl: "tipTpl", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", tooltipPrefix: "tooltipPrefix", tooltipSkipNull: "tooltipSkipNull", tooltipSuffix: "tooltipSuffix", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", values: "values", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklineComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSparklineComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSparklineComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSparkline',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklineComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSparklineComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSparkline()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSparklineboxComponent = /** @class */ (function (_super) {
    __extends(ExtSparklineboxComponent, _super);
    function ExtSparklineboxComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'boxFillColor', 'boxLineColor', 'centered', 'chartRangeMax', 'chartRangeMin', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'medianColor', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'outlierFillColor', 'outlierIQR', 'outlierLineColor', 'padding', 'plugins', 'publishes', 'raw', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showOutliers', 'spotRadius', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'target', 'targetColor', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'viewModel', 'weight', 'whiskerColor', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSparklinebox()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'sparklinebox';
        return _this;
    }
    ExtSparklineboxComponent_1 = ExtSparklineboxComponent;
    ExtSparklineboxComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSparklineboxComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSparklineboxComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSparklineboxComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSparklineboxComponent_1;
    ExtSparklineboxComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSparklineboxComponent = ExtSparklineboxComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSparklineboxComponent);
ExtSparklineboxComponent.ɵfac = function ExtSparklineboxComponent_Factory(t) { return new (t || ExtSparklineboxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSparklineboxComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSparklineboxComponent, selectors: [["ExtSparklinebox"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", boxFillColor: "boxFillColor", boxLineColor: "boxLineColor", centered: "centered", chartRangeMax: "chartRangeMax", chartRangeMin: "chartRangeMin", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", disableTooltips: "disableTooltips", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightColor: "highlightColor", highlightLighten: "highlightLighten", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", lineColor: "lineColor", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", medianColor: "medianColor", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", outlierFillColor: "outlierFillColor", outlierIQR: "outlierIQR", outlierLineColor: "outlierLineColor", padding: "padding", publishes: "publishes", raw: "raw", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", showOutliers: "showOutliers", spotRadius: "spotRadius", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", target: "target", targetColor: "targetColor", tipTpl: "tipTpl", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", tooltipPrefix: "tooltipPrefix", tooltipSkipNull: "tooltipSkipNull", tooltipSuffix: "tooltipSuffix", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", values: "values", viewModel: "viewModel", weight: "weight", whiskerColor: "whiskerColor", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklineboxComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSparklineboxComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSparklineboxComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSparklinebox',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'boxFillColor', 'boxLineColor', 'centered', 'chartRangeMax', 'chartRangeMin', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'medianColor', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'outlierFillColor', 'outlierIQR', 'outlierLineColor', 'padding', 'plugins', 'publishes', 'raw', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showOutliers', 'spotRadius', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'target', 'targetColor', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'viewModel', 'weight', 'whiskerColor', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklineboxComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSparklineboxComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSparklinebox()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSparklinebulletComponent = /** @class */ (function (_super) {
    __extends(ExtSparklinebulletComponent, _super);
    function ExtSparklinebulletComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'base', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'performanceColor', 'plugins', 'publishes', 'rangeColors', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'targetColor', 'targetWidth', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSparklinebullet()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'sparklinebullet';
        return _this;
    }
    ExtSparklinebulletComponent_1 = ExtSparklinebulletComponent;
    ExtSparklinebulletComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSparklinebulletComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSparklinebulletComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSparklinebulletComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSparklinebulletComponent_1;
    ExtSparklinebulletComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSparklinebulletComponent = ExtSparklinebulletComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSparklinebulletComponent);
ExtSparklinebulletComponent.ɵfac = function ExtSparklinebulletComponent_Factory(t) { return new (t || ExtSparklinebulletComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSparklinebulletComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSparklinebulletComponent, selectors: [["ExtSparklinebullet"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", base: "base", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", disableTooltips: "disableTooltips", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightColor: "highlightColor", highlightLighten: "highlightLighten", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", lineColor: "lineColor", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", performanceColor: "performanceColor", publishes: "publishes", rangeColors: "rangeColors", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", targetColor: "targetColor", targetWidth: "targetWidth", tipTpl: "tipTpl", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", tooltipPrefix: "tooltipPrefix", tooltipSkipNull: "tooltipSkipNull", tooltipSuffix: "tooltipSuffix", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", values: "values", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklinebulletComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSparklinebulletComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSparklinebulletComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSparklinebullet',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'base', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'performanceColor', 'plugins', 'publishes', 'rangeColors', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'targetColor', 'targetWidth', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklinebulletComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSparklinebulletComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSparklinebullet()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSparklinediscreteComponent = /** @class */ (function (_super) {
    __extends(ExtSparklinediscreteComponent, _super);
    function ExtSparklinediscreteComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'chartRangeClip', 'chartRangeMax', 'chartRangeMin', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'lineHeight', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'thresholdColor', 'thresholdValue', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSparklinediscrete()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'sparklinediscrete';
        return _this;
    }
    ExtSparklinediscreteComponent_1 = ExtSparklinediscreteComponent;
    ExtSparklinediscreteComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSparklinediscreteComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSparklinediscreteComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSparklinediscreteComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSparklinediscreteComponent_1;
    ExtSparklinediscreteComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSparklinediscreteComponent = ExtSparklinediscreteComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSparklinediscreteComponent);
ExtSparklinediscreteComponent.ɵfac = function ExtSparklinediscreteComponent_Factory(t) { return new (t || ExtSparklinediscreteComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSparklinediscreteComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSparklinediscreteComponent, selectors: [["ExtSparklinediscrete"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", chartRangeClip: "chartRangeClip", chartRangeMax: "chartRangeMax", chartRangeMin: "chartRangeMin", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", disableTooltips: "disableTooltips", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightColor: "highlightColor", highlightLighten: "highlightLighten", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", lineColor: "lineColor", lineHeight: "lineHeight", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", thresholdColor: "thresholdColor", thresholdValue: "thresholdValue", tipTpl: "tipTpl", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", tooltipPrefix: "tooltipPrefix", tooltipSkipNull: "tooltipSkipNull", tooltipSuffix: "tooltipSuffix", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", values: "values", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklinediscreteComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSparklinediscreteComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSparklinediscreteComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSparklinediscrete',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'chartRangeClip', 'chartRangeMax', 'chartRangeMin', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'lineHeight', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'thresholdColor', 'thresholdValue', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklinediscreteComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSparklinediscreteComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSparklinediscrete()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSparklinelineComponent = /** @class */ (function (_super) {
    __extends(ExtSparklinelineComponent, _super);
    function ExtSparklinelineComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'chartRangeMax', 'chartRangeMaxX', 'chartRangeMin', 'chartRangeMinX', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'drawNormalOnTop', 'undefined', 'undefined', 'undefined', 'fillColor', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'highlightLineColor', 'highlightSpotColor', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'lineWidth', 'listeners', 'margin', 'maxHeight', 'maxSpotColor', 'maxWidth', 'minHeight', 'minSpotColor', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'normalRangeColor', 'normalRangeMax', 'normalRangeMin', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'spotColor', 'spotRadius', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'valueSpots', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSparklineline()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'sparklineline';
        return _this;
    }
    ExtSparklinelineComponent_1 = ExtSparklinelineComponent;
    ExtSparklinelineComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSparklinelineComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSparklinelineComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSparklinelineComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSparklinelineComponent_1;
    ExtSparklinelineComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSparklinelineComponent = ExtSparklinelineComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSparklinelineComponent);
ExtSparklinelineComponent.ɵfac = function ExtSparklinelineComponent_Factory(t) { return new (t || ExtSparklinelineComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSparklinelineComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSparklinelineComponent, selectors: [["ExtSparklineline"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", chartRangeMax: "chartRangeMax", chartRangeMaxX: "chartRangeMaxX", chartRangeMin: "chartRangeMin", chartRangeMinX: "chartRangeMinX", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", disableTooltips: "disableTooltips", displayed: "displayed", docked: "docked", draggable: "draggable", drawNormalOnTop: "drawNormalOnTop", undefined: "undefined", fillColor: "fillColor", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightColor: "highlightColor", highlightLighten: "highlightLighten", highlightLineColor: "highlightLineColor", highlightSpotColor: "highlightSpotColor", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", lineColor: "lineColor", lineWidth: "lineWidth", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxSpotColor: "maxSpotColor", maxWidth: "maxWidth", minHeight: "minHeight", minSpotColor: "minSpotColor", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", normalRangeColor: "normalRangeColor", normalRangeMax: "normalRangeMax", normalRangeMin: "normalRangeMin", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", spotColor: "spotColor", spotRadius: "spotRadius", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipTpl: "tipTpl", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", tooltipPrefix: "tooltipPrefix", tooltipSkipNull: "tooltipSkipNull", tooltipSuffix: "tooltipSuffix", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", values: "values", valueSpots: "valueSpots", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklinelineComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSparklinelineComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSparklinelineComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSparklineline',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'chartRangeMax', 'chartRangeMaxX', 'chartRangeMin', 'chartRangeMinX', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'drawNormalOnTop', 'undefined', 'undefined', 'undefined', 'fillColor', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'highlightLineColor', 'highlightSpotColor', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'lineWidth', 'listeners', 'margin', 'maxHeight', 'maxSpotColor', 'maxWidth', 'minHeight', 'minSpotColor', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'normalRangeColor', 'normalRangeMax', 'normalRangeMin', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'spotColor', 'spotRadius', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'valueSpots', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklinelineComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSparklinelineComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSparklineline()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSparklinepieComponent = /** @class */ (function (_super) {
    __extends(ExtSparklinepieComponent, _super);
    function ExtSparklinepieComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'borderColor', 'borderWidth', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'offset', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sliceColors', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSparklinepie()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'sparklinepie';
        return _this;
    }
    ExtSparklinepieComponent_1 = ExtSparklinepieComponent;
    ExtSparklinepieComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSparklinepieComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSparklinepieComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSparklinepieComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSparklinepieComponent_1;
    ExtSparklinepieComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSparklinepieComponent = ExtSparklinepieComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSparklinepieComponent);
ExtSparklinepieComponent.ɵfac = function ExtSparklinepieComponent_Factory(t) { return new (t || ExtSparklinepieComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSparklinepieComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSparklinepieComponent, selectors: [["ExtSparklinepie"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", borderColor: "borderColor", borderWidth: "borderWidth", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", disableTooltips: "disableTooltips", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightColor: "highlightColor", highlightLighten: "highlightLighten", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", lineColor: "lineColor", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", offset: "offset", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sliceColors: "sliceColors", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipTpl: "tipTpl", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", tooltipPrefix: "tooltipPrefix", tooltipSkipNull: "tooltipSkipNull", tooltipSuffix: "tooltipSuffix", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", values: "values", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklinepieComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSparklinepieComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSparklinepieComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSparklinepie',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'borderColor', 'borderWidth', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'offset', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sliceColors', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklinepieComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSparklinepieComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSparklinepie()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSparklinetristateComponent = /** @class */ (function (_super) {
    __extends(ExtSparklinetristateComponent, _super);
    function ExtSparklinetristateComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'barSpacing', 'barWidth', 'bind', 'border', 'bottom', 'centered', 'cls', 'colorMap', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'negBarColor', 'padding', 'plugins', 'posBarColor', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zeroBarColor', 'zIndex',], (new EWCSparklinetristate()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'sparklinetristate';
        return _this;
    }
    ExtSparklinetristateComponent_1 = ExtSparklinetristateComponent;
    ExtSparklinetristateComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSparklinetristateComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSparklinetristateComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSparklinetristateComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSparklinetristateComponent_1;
    ExtSparklinetristateComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSparklinetristateComponent = ExtSparklinetristateComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSparklinetristateComponent);
ExtSparklinetristateComponent.ɵfac = function ExtSparklinetristateComponent_Factory(t) { return new (t || ExtSparklinetristateComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSparklinetristateComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSparklinetristateComponent, selectors: [["ExtSparklinetristate"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", barSpacing: "barSpacing", barWidth: "barWidth", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", colorMap: "colorMap", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", disableTooltips: "disableTooltips", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", highlightColor: "highlightColor", highlightLighten: "highlightLighten", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", lineColor: "lineColor", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", negBarColor: "negBarColor", padding: "padding", posBarColor: "posBarColor", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tipTpl: "tipTpl", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", tooltipPrefix: "tooltipPrefix", tooltipSkipNull: "tooltipSkipNull", tooltipSuffix: "tooltipSuffix", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", values: "values", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zeroBarColor: "zeroBarColor", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklinetristateComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSparklinetristateComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSparklinetristateComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSparklinetristate',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'barSpacing', 'barWidth', 'bind', 'border', 'bottom', 'centered', 'cls', 'colorMap', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'disableTooltips', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'highlightColor', 'highlightLighten', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'lineColor', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'negBarColor', 'padding', 'plugins', 'posBarColor', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tipTpl', 'toFrontOnShow', 'tooltip', 'tooltipPrefix', 'tooltipSkipNull', 'tooltipSuffix', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'values', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zeroBarColor', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSparklinetristateComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSparklinetristateComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSparklinetristate()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtSplitbuttonComponent = /** @class */ (function (_super) {
    __extends(ExtSplitbuttonComponent, _super);
    function ExtSplitbuttonComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'allowDepress', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'arrow', 'arrowAlign', 'arrowHandler', 'autoEvent', 'axisLock', 'badgeText', 'bind', 'border', 'bottom', 'buttonType', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'enableToggle', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'pressed', 'pressedDelay', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stretchMenu', 'style', 'tabIndex', 'text', 'textAlign', 'toFrontOnShow', 'toggleHandler', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCSplitbutton()).events, ['ready', 'added', 'arrowclick', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforepressedchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'pressedchange', 'release', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'splitbutton';
        return _this;
    }
    ExtSplitbuttonComponent_1 = ExtSplitbuttonComponent;
    ExtSplitbuttonComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtSplitbuttonComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtSplitbuttonComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtSplitbuttonComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtSplitbuttonComponent_1;
    ExtSplitbuttonComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtSplitbuttonComponent = ExtSplitbuttonComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtSplitbuttonComponent);
ExtSplitbuttonComponent.ɵfac = function ExtSplitbuttonComponent_Factory(t) { return new (t || ExtSplitbuttonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtSplitbuttonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtSplitbuttonComponent, selectors: [["ExtSplitbutton"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", allowDepress: "allowDepress", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", arrow: "arrow", arrowAlign: "arrowAlign", arrowHandler: "arrowHandler", autoEvent: "autoEvent", axisLock: "axisLock", badgeText: "badgeText", bind: "bind", border: "border", bottom: "bottom", buttonType: "buttonType", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", destroyMenu: "destroyMenu", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", enableToggle: "enableToggle", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", handler: "handler", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuAlign: "menuAlign", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", pressed: "pressed", pressedDelay: "pressedDelay", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stretchMenu: "stretchMenu", style: "style", tabIndex: "tabIndex", text: "text", textAlign: "textAlign", toFrontOnShow: "toFrontOnShow", toggleHandler: "toggleHandler", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", arrowclick: "arrowclick", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforepressedchange: "beforepressedchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", pressedchange: "pressedchange", release: "release", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tap: "tap", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtSplitbuttonComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtSplitbuttonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtSplitbuttonComponent, [{
        type: Component,
        args: [{
                selector: 'ExtSplitbutton',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'allowDepress', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'arrow', 'arrowAlign', 'arrowHandler', 'autoEvent', 'axisLock', 'badgeText', 'bind', 'border', 'bottom', 'buttonType', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'enableToggle', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'pressed', 'pressedDelay', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stretchMenu', 'style', 'tabIndex', 'text', 'textAlign', 'toFrontOnShow', 'toggleHandler', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'arrowclick', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforepressedchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'pressedchange', 'release', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtSplitbuttonComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtSplitbuttonComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCSplitbutton()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTabbarComponent = /** @class */ (function (_super) {
    __extends(ExtTabbarComponent, _super);
    function ExtTabbarComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'activeTab', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'animateIndicator', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultButtonUI', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultTabUI', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tabRotation', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTabbar()).events, ['ready', 'activate', 'activeItemchange', 'activeTabchange', 'add', 'added', 'beforeactiveItemchange', 'beforeactiveTabchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tabchange', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'tabbar';
        return _this;
    }
    ExtTabbarComponent_1 = ExtTabbarComponent;
    ExtTabbarComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTabbarComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTabbarComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTabbarComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTabbarComponent_1;
    ExtTabbarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTabbarComponent = ExtTabbarComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTabbarComponent);
ExtTabbarComponent.ɵfac = function ExtTabbarComponent_Factory(t) { return new (t || ExtTabbarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTabbarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTabbarComponent, selectors: [["ExtTabbar"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", activeTab: "activeTab", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", animateIndicator: "animateIndicator", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultButtonUI: "defaultButtonUI", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultTabUI: "defaultTabUI", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tabRotation: "tabRotation", title: "title", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", activeTabchange: "activeTabchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforeactiveTabchange: "beforeactiveTabchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tabchange: "tabchange", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTabbarComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTabbarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTabbarComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTabbar',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'activeTab', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'animateIndicator', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultButtonUI', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultTabUI', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tabRotation', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'activeTabchange', 'add', 'added', 'beforeactiveItemchange', 'beforeactiveTabchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tabchange', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTabbarComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTabbarComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTabbar()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTabpanelComponent = /** @class */ (function (_super) {
    __extends(ExtTabpanelComponent, _super);
    function ExtTabpanelComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoOrientAnimation', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scroll', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabBar', 'tabBarPosition', 'tabIndex', 'tabRotation', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTabpanel()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'tabpanel';
        return _this;
    }
    ExtTabpanelComponent_1 = ExtTabpanelComponent;
    ExtTabpanelComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTabpanelComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTabpanelComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTabpanelComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTabpanelComponent_1;
    ExtTabpanelComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTabpanelComponent = ExtTabpanelComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTabpanelComponent);
ExtTabpanelComponent.ɵfac = function ExtTabpanelComponent_Factory(t) { return new (t || ExtTabpanelComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTabpanelComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTabpanelComponent, selectors: [["ExtTabpanel"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoOrientAnimation: "autoOrientAnimation", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scroll: "scroll", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabBar: "tabBar", tabBarPosition: "tabBarPosition", tabIndex: "tabIndex", tabRotation: "tabRotation", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTabpanelComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTabpanelComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTabpanelComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTabpanel',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoOrientAnimation', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scroll', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabBar', 'tabBarPosition', 'tabIndex', 'tabRotation', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTabpanelComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTabpanelComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTabpanel()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTabComponent = /** @class */ (function (_super) {
    __extends(ExtTabComponent, _super);
    function ExtTabComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'active', 'alignSelf', 'allowDepress', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'arrow', 'arrowAlign', 'autoEvent', 'axisLock', 'badgeText', 'bind', 'border', 'bottom', 'buttonType', 'centered', 'closable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'enableToggle', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'pressed', 'pressedDelay', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'rotation', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stretchMenu', 'style', 'tabIndex', 'tabPosition', 'text', 'textAlign', 'title', 'toFrontOnShow', 'toggleHandler', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTab()).events, ['ready', 'activate', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforepressedchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'pressedchange', 'release', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'tab';
        return _this;
    }
    ExtTabComponent_1 = ExtTabComponent;
    ExtTabComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTabComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTabComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTabComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTabComponent_1;
    ExtTabComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTabComponent = ExtTabComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTabComponent);
ExtTabComponent.ɵfac = function ExtTabComponent_Factory(t) { return new (t || ExtTabComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTabComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTabComponent, selectors: [["ExtTab"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", active: "active", alignSelf: "alignSelf", allowDepress: "allowDepress", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", arrow: "arrow", arrowAlign: "arrowAlign", autoEvent: "autoEvent", axisLock: "axisLock", badgeText: "badgeText", bind: "bind", border: "border", bottom: "bottom", buttonType: "buttonType", centered: "centered", closable: "closable", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", destroyMenu: "destroyMenu", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", enableToggle: "enableToggle", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", handler: "handler", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", menu: "menu", menuAlign: "menuAlign", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", pressed: "pressed", pressedDelay: "pressedDelay", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", rotation: "rotation", scope: "scope", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stretchMenu: "stretchMenu", style: "style", tabIndex: "tabIndex", tabPosition: "tabPosition", text: "text", textAlign: "textAlign", title: "title", toFrontOnShow: "toFrontOnShow", toggleHandler: "toggleHandler", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforepressedchange: "beforepressedchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", pressedchange: "pressedchange", release: "release", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tap: "tap", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTabComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTabComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTabComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTab',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'active', 'alignSelf', 'allowDepress', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'arrow', 'arrowAlign', 'autoEvent', 'axisLock', 'badgeText', 'bind', 'border', 'bottom', 'buttonType', 'centered', 'closable', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'destroyMenu', 'disabled', 'displayed', 'docked', 'draggable', 'enableToggle', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'menu', 'menuAlign', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'pressed', 'pressedDelay', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'rotation', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stretchMenu', 'style', 'tabIndex', 'tabPosition', 'text', 'textAlign', 'title', 'toFrontOnShow', 'toggleHandler', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforepressedchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'pressedchange', 'release', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tap', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTabComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTabComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTab()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTooltipComponent = /** @class */ (function (_super) {
    __extends(ExtTooltipComponent, _super);
    function ExtTooltipComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignDelegate', 'alignSelf', 'allowFocusingDisabledChildren', 'allowOver', 'alwaysOnTop', 'anchor', 'anchorPosition', 'anchorToTarget', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoHide', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'delegate', 'disabled', 'dismissDelay', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideDelay', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'mouseOffset', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'quickShowInterval', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showDelay', 'showOnTap', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'target', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackMouse', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTooltip()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'tooltip';
        return _this;
    }
    ExtTooltipComponent_1 = ExtTooltipComponent;
    ExtTooltipComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTooltipComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTooltipComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTooltipComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTooltipComponent_1;
    ExtTooltipComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTooltipComponent = ExtTooltipComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTooltipComponent);
ExtTooltipComponent.ɵfac = function ExtTooltipComponent_Factory(t) { return new (t || ExtTooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTooltipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTooltipComponent, selectors: [["ExtTooltip"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignDelegate: "alignDelegate", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", allowOver: "allowOver", alwaysOnTop: "alwaysOnTop", anchor: "anchor", anchorPosition: "anchorPosition", anchorToTarget: "anchorToTarget", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoHide: "autoHide", autoSize: "autoSize", axisLock: "axisLock", bbar: "bbar", bind: "bind", bodyBorder: "bodyBorder", bodyCls: "bodyCls", bodyPadding: "bodyPadding", bodyStyle: "bodyStyle", border: "border", bottom: "bottom", buttonAlign: "buttonAlign", buttons: "buttons", buttonToolbar: "buttonToolbar", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", closable: "closable", closeAction: "closeAction", closeToolText: "closeToolText", cls: "cls", collapsed: "collapsed", collapsible: "collapsible", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultToolWeights: "defaultToolWeights", defaultType: "defaultType", delegate: "delegate", disabled: "disabled", dismissDelay: "dismissDelay", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", headerPosition: "headerPosition", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideDelay: "hideDelay", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", icon: "icon", iconAlign: "iconAlign", iconCls: "iconCls", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", lbar: "lbar", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minButtonWidth: "minButtonWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", mouseOffset: "mouseOffset", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", quickShowInterval: "quickShowInterval", rbar: "rbar", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", resizable: "resizable", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", showDelay: "showDelay", showOnTap: "showOnTap", standardButtons: "standardButtons", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", target: "target", tbar: "tbar", title: "title", titleAlign: "titleAlign", titleCollapse: "titleCollapse", toFrontOnShow: "toFrontOnShow", toolDefaults: "toolDefaults", tools: "tools", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", trackMouse: "trackMouse", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforecollapse: "beforecollapse", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeexpand: "beforeexpand", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforeresizedragstart: "beforeresizedragstart", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", collapse: "collapse", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", drawerhide: "drawerhide", drawershow: "drawershow", erased: "erased", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", resizedrag: "resizedrag", resizedragcancel: "resizedragcancel", resizedragend: "resizedragend", resizedragstart: "resizedragstart", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTooltipComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTooltipComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTooltipComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTooltip',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'align', 'alignDelegate', 'alignSelf', 'allowFocusingDisabledChildren', 'allowOver', 'alwaysOnTop', 'anchor', 'anchorPosition', 'anchorToTarget', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoHide', 'autoSize', 'axisLock', 'bbar', 'bind', 'bodyBorder', 'bodyCls', 'bodyPadding', 'bodyStyle', 'border', 'bottom', 'buttonAlign', 'buttons', 'buttonToolbar', 'cardSwitchAnimation', 'centered', 'closable', 'closeAction', 'closeToolText', 'cls', 'collapsed', 'collapsible', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultToolWeights', 'defaultType', 'delegate', 'disabled', 'dismissDelay', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'header', 'headerPosition', 'height', 'hidden', 'hideAnimation', 'hideDelay', 'hideMode', 'hideOnMaskTap', 'html', 'icon', 'iconAlign', 'iconCls', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'lbar', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minButtonWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'mouseOffset', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'quickShowInterval', 'rbar', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'resizable', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showDelay', 'showOnTap', 'standardButtons', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'target', 'tbar', 'title', 'titleAlign', 'titleCollapse', 'toFrontOnShow', 'toolDefaults', 'tools', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackMouse', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforecollapse', 'beforedisabledchange', 'beforedockedchange', 'beforeexpand', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforeresizedragstart', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'collapse', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'drawerhide', 'drawershow', 'erased', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'resizedrag', 'resizedragcancel', 'resizedragend', 'resizedragstart', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTooltipComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTooltipComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTooltip()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTitleComponent = /** @class */ (function (_super) {
    __extends(ExtTitleComponent, _super);
    function ExtTitleComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTitle()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'title';
        return _this;
    }
    ExtTitleComponent_1 = ExtTitleComponent;
    ExtTitleComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTitleComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTitleComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTitleComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTitleComponent_1;
    ExtTitleComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTitleComponent = ExtTitleComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTitleComponent);
ExtTitleComponent.ɵfac = function ExtTitleComponent_Factory(t) { return new (t || ExtTitleComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTitleComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTitleComponent, selectors: [["ExtTitle"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", title: "title", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTitleComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTitleComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTitleComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTitle',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTitleComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTitleComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTitle()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtTitlebarComponent = /** @class */ (function (_super) {
    __extends(ExtTitlebarComponent, _super);
    function ExtTitlebarComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultButtonUI', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxButtonWidth', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'title', 'titleAlign', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTitlebar()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'titlebar';
        return _this;
    }
    ExtTitlebarComponent_1 = ExtTitlebarComponent;
    ExtTitlebarComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtTitlebarComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtTitlebarComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtTitlebarComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtTitlebarComponent_1;
    ExtTitlebarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtTitlebarComponent = ExtTitlebarComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtTitlebarComponent);
ExtTitlebarComponent.ɵfac = function ExtTitlebarComponent_Factory(t) { return new (t || ExtTitlebarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtTitlebarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtTitlebarComponent, selectors: [["ExtTitlebar"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultButtonUI: "defaultButtonUI", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxButtonWidth: "maxButtonWidth", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", title: "title", titleAlign: "titleAlign", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtTitlebarComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtTitlebarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtTitlebarComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTitlebar',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultButtonUI', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxButtonWidth', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'title', 'titleAlign', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtTitlebarComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtTitlebarComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTitlebar()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtToolComponent = /** @class */ (function (_super) {
    __extends(ExtToolComponent, _super);
    function ExtToolComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'passive', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stopEvent', 'style', 'tabIndex', 'toFrontOnShow', 'toolOwner', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'type', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCTool()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'click', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'tool';
        return _this;
    }
    ExtToolComponent_1 = ExtToolComponent;
    ExtToolComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtToolComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtToolComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtToolComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtToolComponent_1;
    ExtToolComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtToolComponent = ExtToolComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtToolComponent);
ExtToolComponent.ɵfac = function ExtToolComponent_Factory(t) { return new (t || ExtToolComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtToolComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtToolComponent, selectors: [["ExtTool"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", handler: "handler", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", passive: "passive", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stopEvent: "stopEvent", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", toolOwner: "toolOwner", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", type: "type", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", click: "click", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtToolComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtToolComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtToolComponent, [{
        type: Component,
        args: [{
                selector: 'ExtTool',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'passive', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stopEvent', 'style', 'tabIndex', 'toFrontOnShow', 'toolOwner', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'type', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'click', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtToolComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtToolComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCTool()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtPaneltoolComponent = /** @class */ (function (_super) {
    __extends(ExtPaneltoolComponent, _super);
    function ExtPaneltoolComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'passive', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stopEvent', 'style', 'tabIndex', 'toFrontOnShow', 'toolOwner', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'type', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCPaneltool()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'click', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'paneltool';
        return _this;
    }
    ExtPaneltoolComponent_1 = ExtPaneltoolComponent;
    ExtPaneltoolComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtPaneltoolComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtPaneltoolComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtPaneltoolComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtPaneltoolComponent_1;
    ExtPaneltoolComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtPaneltoolComponent = ExtPaneltoolComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtPaneltoolComponent);
ExtPaneltoolComponent.ɵfac = function ExtPaneltoolComponent_Factory(t) { return new (t || ExtPaneltoolComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtPaneltoolComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtPaneltoolComponent, selectors: [["ExtPaneltool"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", handler: "handler", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", iconCls: "iconCls", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", passive: "passive", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scope: "scope", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stopEvent: "stopEvent", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", toolOwner: "toolOwner", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", type: "type", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", click: "click", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtPaneltoolComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtPaneltoolComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtPaneltoolComponent, [{
        type: Component,
        args: [{
                selector: 'ExtPaneltool',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'handler', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'iconCls', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'passive', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scope', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'stopEvent', 'style', 'tabIndex', 'toFrontOnShow', 'toolOwner', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'type', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'click', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtPaneltoolComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtPaneltoolComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCPaneltool()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtToolbarComponent = /** @class */ (function (_super) {
    __extends(ExtToolbarComponent, _super);
    function ExtToolbarComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultButtonUI', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCToolbar()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'toolbar';
        return _this;
    }
    ExtToolbarComponent_1 = ExtToolbarComponent;
    ExtToolbarComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtToolbarComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtToolbarComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtToolbarComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtToolbarComponent_1;
    ExtToolbarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtToolbarComponent = ExtToolbarComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtToolbarComponent);
ExtToolbarComponent.ɵfac = function ExtToolbarComponent_Factory(t) { return new (t || ExtToolbarComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtToolbarComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtToolbarComponent, selectors: [["ExtToolbar"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultButtonUI: "defaultButtonUI", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", title: "title", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtToolbarComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtToolbarComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtToolbarComponent, [{
        type: Component,
        args: [{
                selector: 'ExtToolbar',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultButtonUI', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'title', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtToolbarComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtToolbarComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCToolbar()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtColorbuttonComponent = /** @class */ (function (_super) {
    __extends(ExtColorbuttonComponent, _super);
    function ExtColorbuttonComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alphaDecimalFormat', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'color', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'format', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'popup', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCColorbutton()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'colorbutton';
        return _this;
    }
    ExtColorbuttonComponent_1 = ExtColorbuttonComponent;
    ExtColorbuttonComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtColorbuttonComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtColorbuttonComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtColorbuttonComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtColorbuttonComponent_1;
    ExtColorbuttonComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtColorbuttonComponent = ExtColorbuttonComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtColorbuttonComponent);
ExtColorbuttonComponent.ɵfac = function ExtColorbuttonComponent_Factory(t) { return new (t || ExtColorbuttonComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtColorbuttonComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtColorbuttonComponent, selectors: [["ExtColorbutton"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alphaDecimalFormat: "alphaDecimalFormat", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", color: "color", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", format: "format", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", popup: "popup", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtColorbuttonComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtColorbuttonComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtColorbuttonComponent, [{
        type: Component,
        args: [{
                selector: 'ExtColorbutton',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alphaDecimalFormat', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'color', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'format', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'popup', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtColorbuttonComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtColorbuttonComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCColorbutton()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtColorpickercolorpreviewComponent = /** @class */ (function (_super) {
    __extends(ExtColorpickercolorpreviewComponent, _super);
    function ExtColorpickercolorpreviewComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCColorpickercolorpreview()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'colorpickercolorpreview';
        return _this;
    }
    ExtColorpickercolorpreviewComponent_1 = ExtColorpickercolorpreviewComponent;
    ExtColorpickercolorpreviewComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtColorpickercolorpreviewComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtColorpickercolorpreviewComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtColorpickercolorpreviewComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtColorpickercolorpreviewComponent_1;
    ExtColorpickercolorpreviewComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtColorpickercolorpreviewComponent = ExtColorpickercolorpreviewComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtColorpickercolorpreviewComponent);
ExtColorpickercolorpreviewComponent.ɵfac = function ExtColorpickercolorpreviewComponent_Factory(t) { return new (t || ExtColorpickercolorpreviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtColorpickercolorpreviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtColorpickercolorpreviewComponent, selectors: [["ExtColorpickercolorpreview"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtColorpickercolorpreviewComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtColorpickercolorpreviewComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtColorpickercolorpreviewComponent, [{
        type: Component,
        args: [{
                selector: 'ExtColorpickercolorpreview',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtColorpickercolorpreviewComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtColorpickercolorpreviewComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCColorpickercolorpreview()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtColorfieldComponent = /** @class */ (function (_super) {
    __extends(ExtColorfieldComponent, _super);
    function ExtColorfieldComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'alphaDecimalFormat', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'color', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'format', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'popup', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCColorfield()).events, ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'colorfield';
        return _this;
    }
    ExtColorfieldComponent_1 = ExtColorfieldComponent;
    ExtColorfieldComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtColorfieldComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtColorfieldComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtColorfieldComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtColorfieldComponent_1;
    ExtColorfieldComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtColorfieldComponent = ExtColorfieldComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtColorfieldComponent);
ExtColorfieldComponent.ɵfac = function ExtColorfieldComponent_Factory(t) { return new (t || ExtColorfieldComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtColorfieldComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtColorfieldComponent, selectors: [["ExtColorfield"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alignTarget: "alignTarget", alphaDecimalFormat: "alphaDecimalFormat", alwaysOnTop: "alwaysOnTop", animateUnderline: "animateUnderline", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoCapitalize: "autoCapitalize", autoComplete: "autoComplete", autoCorrect: "autoCorrect", autoFitErrors: "autoFitErrors", autoHideInputMask: "autoHideInputMask", axisLock: "axisLock", badFormatMessage: "badFormatMessage", bind: "bind", bodyAlign: "bodyAlign", border: "border", bottom: "bottom", bubbleDirty: "bubbleDirty", centered: "centered", clearable: "clearable", cls: "cls", color: "color", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", dataType: "dataType", defaultListenerScope: "defaultListenerScope", dirty: "dirty", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", edgePicker: "edgePicker", editable: "editable", undefined: "undefined", error: "error", errorMessage: "errorMessage", errorTarget: "errorTarget", errorTip: "errorTip", errorTpl: "errorTpl", flex: "flex", floated: "floated", floatedPicker: "floatedPicker", floatedPickerAlign: "floatedPickerAlign", focusCls: "focusCls", focusTrap: "focusTrap", format: "format", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", hideTrigger: "hideTrigger", html: "html", id: "id", inline: "inline", inputMask: "inputMask", inputType: "inputType", inputValue: "inputValue", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", labelAlign: "labelAlign", labelCls: "labelCls", labelInPlaceholder: "labelInPlaceholder", labelMinWidth: "labelMinWidth", labelTextAlign: "labelTextAlign", labelWidth: "labelWidth", labelWrap: "labelWrap", left: "left", listeners: "listeners", margin: "margin", matchFieldWidth: "matchFieldWidth", maxHeight: "maxHeight", maxLength: "maxLength", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", padding: "padding", parseValidator: "parseValidator", pattern: "pattern", picker: "picker", pickerSlotAlign: "pickerSlotAlign", placeholder: "placeholder", popup: "popup", publishes: "publishes", readOnly: "readOnly", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", required: "required", requiredMessage: "requiredMessage", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", sideError: "sideError", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", stripCharsRe: "stripCharsRe", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", tipError: "tipError", titleError: "titleError", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", triggers: "triggers", twoWayBindable: "twoWayBindable", ui: "ui", underError: "underError", userCls: "userCls", userSelectable: "userSelectable", validateDisabled: "validateDisabled", validationMessage: "validationMessage", validators: "validators", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", action: "action", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", change: "change", clearicontap: "clearicontap", click: "click", collapse: "collapse", destroy: "destroy", dirtychange: "dirtychange", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", errorchange: "errorchange", expand: "expand", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", keydown: "keydown", keyup: "keyup", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", mousedown: "mousedown", moved: "moved", orientationchange: "orientationchange", painted: "painted", paste: "paste", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtColorfieldComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtColorfieldComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtColorfieldComponent, [{
        type: Component,
        args: [{
                selector: 'ExtColorfield',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alignTarget', 'alphaDecimalFormat', 'alwaysOnTop', 'animateUnderline', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoCapitalize', 'autoComplete', 'autoCorrect', 'autoFitErrors', 'autoHideInputMask', 'axisLock', 'badFormatMessage', 'bind', 'bodyAlign', 'border', 'bottom', 'bubbleDirty', 'centered', 'clearable', 'cls', 'color', 'constrainAlign', 'contentEl', 'controller', 'data', 'dataType', 'defaultListenerScope', 'dirty', 'disabled', 'displayed', 'docked', 'draggable', 'edgePicker', 'editable', 'undefined', 'error', 'errorMessage', 'errorTarget', 'errorTip', 'errorTpl', 'undefined', 'undefined', 'flex', 'floated', 'floatedPicker', 'floatedPickerAlign', 'focusCls', 'focusTrap', 'format', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'hideTrigger', 'html', 'id', 'inline', 'undefined', 'inputMask', 'inputType', 'inputValue', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'label', 'labelAlign', 'labelCls', 'labelInPlaceholder', 'labelMinWidth', 'labelTextAlign', 'labelWidth', 'labelWrap', 'left', 'listeners', 'margin', 'matchFieldWidth', 'maxHeight', 'maxLength', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'padding', 'parseValidator', 'pattern', 'picker', 'pickerSlotAlign', 'placeholder', 'undefined', 'plugins', 'popup', 'publishes', 'readOnly', 'record', 'reference', 'relative', 'renderTo', 'required', 'requiredMessage', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'sideError', 'stateful', 'statefulDefaults', 'stateId', 'stripCharsRe', 'style', 'tabIndex', 'textAlign', 'tipError', 'titleError', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'triggers', 'twoWayBindable', 'ui', 'underError', 'userCls', 'userSelectable', 'validateDisabled', 'validationMessage', 'validators', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'action', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'change', 'clearicontap', 'click', 'collapse', 'destroy', 'dirtychange', 'disabledchange', 'dockedchange', 'erased', 'errorchange', 'expand', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'keydown', 'keyup', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'mousedown', 'moved', 'orientationchange', 'painted', 'paste', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtColorfieldComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtColorfieldComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCColorfield()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtColorselectorComponent = /** @class */ (function (_super) {
    __extends(ExtColorselectorComponent, _super);
    function ExtColorselectorComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alphaDecimalFormat', 'cancelButtonText', 'color', 'fieldPad', 'fieldWidth', 'format', 'okButtonText', 'showOkCancelButtons', 'showPreviousColor', 'value',], (new EWCColorselector()).events, ['ready', 'cancel', 'change', 'ok',], vc) || this;
        _this.xtype = 'colorselector';
        return _this;
    }
    ExtColorselectorComponent_1 = ExtColorselectorComponent;
    ExtColorselectorComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtColorselectorComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtColorselectorComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtColorselectorComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtColorselectorComponent_1;
    ExtColorselectorComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtColorselectorComponent = ExtColorselectorComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtColorselectorComponent);
ExtColorselectorComponent.ɵfac = function ExtColorselectorComponent_Factory(t) { return new (t || ExtColorselectorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtColorselectorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtColorselectorComponent, selectors: [["ExtColorselector"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alphaDecimalFormat: "alphaDecimalFormat", cancelButtonText: "cancelButtonText", color: "color", fieldPad: "fieldPad", fieldWidth: "fieldWidth", format: "format", okButtonText: "okButtonText", showOkCancelButtons: "showOkCancelButtons", showPreviousColor: "showPreviousColor", value: "value" }, outputs: { ready: "ready", cancel: "cancel", change: "change", ok: "ok" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtColorselectorComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtColorselectorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtColorselectorComponent, [{
        type: Component,
        args: [{
                selector: 'ExtColorselector',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alphaDecimalFormat', 'cancelButtonText', 'color', 'fieldPad', 'fieldWidth', 'format', 'okButtonText', 'showOkCancelButtons', 'showPreviousColor', 'value',],
                outputs: ['ready', 'cancel', 'change', 'ok',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtColorselectorComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtColorselectorComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCColorselector()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtGaugeComponent = /** @class */ (function (_super) {
    __extends(ExtGaugeComponent, _super);
    function ExtGaugeComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'angleOffset', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clockwise', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxValue', 'maxWidth', 'minHeight', 'minValue', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'needle', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'textAlign', 'textOffset', 'textTpl', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackLength', 'trackStart', 'trackStyle', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'valueStyle', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCGauge()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'gauge';
        return _this;
    }
    ExtGaugeComponent_1 = ExtGaugeComponent;
    ExtGaugeComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtGaugeComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtGaugeComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtGaugeComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtGaugeComponent_1;
    ExtGaugeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtGaugeComponent = ExtGaugeComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtGaugeComponent);
ExtGaugeComponent.ɵfac = function ExtGaugeComponent_Factory(t) { return new (t || ExtGaugeComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtGaugeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtGaugeComponent, selectors: [["ExtGauge"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", angleOffset: "angleOffset", animation: "animation", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", clockwise: "clockwise", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxValue: "maxValue", maxWidth: "maxWidth", minHeight: "minHeight", minValue: "minValue", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", needle: "needle", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", textAlign: "textAlign", textOffset: "textOffset", textTpl: "textTpl", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", trackLength: "trackLength", trackStart: "trackStart", trackStyle: "trackStyle", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", valueStyle: "valueStyle", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtGaugeComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtGaugeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtGaugeComponent, [{
        type: Component,
        args: [{
                selector: 'ExtGauge',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'angleOffset', 'animation', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'clockwise', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'margin', 'maxHeight', 'maxValue', 'maxWidth', 'minHeight', 'minValue', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'needle', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'textAlign', 'textOffset', 'textTpl', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackLength', 'trackStart', 'trackStyle', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'valueStyle', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtGaugeComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtGaugeComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCGauge()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtMapComponent = /** @class */ (function (_super) {
    __extends(ExtMapComponent, _super);
    function ExtMapComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'geo', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'map', 'mapListeners', 'mapOptions', 'margin', 'markers', 'markerTemplate', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'requiredScripts', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'useCurrentLocation', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCMap()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centerchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maprender', 'markerclick', 'markerdblclick', 'markerdrag', 'markerdragend', 'markerdragstart', 'markermousedown', 'markermouseout', 'markermouseover', 'markermouseup', 'markerrightclick', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'typechange', 'updatedata', 'widthchange', 'zoomchange',], vc) || this;
        _this.xtype = 'map';
        return _this;
    }
    ExtMapComponent_1 = ExtMapComponent;
    ExtMapComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtMapComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtMapComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtMapComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtMapComponent_1;
    ExtMapComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtMapComponent = ExtMapComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtMapComponent);
ExtMapComponent.ɵfac = function ExtMapComponent_Factory(t) { return new (t || ExtMapComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtMapComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtMapComponent, selectors: [["ExtMap"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", geo: "geo", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", map: "map", mapListeners: "mapListeners", mapOptions: "mapOptions", margin: "margin", markers: "markers", markerTemplate: "markerTemplate", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", requiredScripts: "requiredScripts", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", useCurrentLocation: "useCurrentLocation", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centerchange: "centerchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maprender: "maprender", markerclick: "markerclick", markerdblclick: "markerdblclick", markerdrag: "markerdrag", markerdragend: "markerdragend", markerdragstart: "markerdragstart", markermousedown: "markermousedown", markermouseout: "markermouseout", markermouseover: "markermouseover", markermouseup: "markermouseup", markerrightclick: "markerrightclick", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", typechange: "typechange", updatedata: "updatedata", widthchange: "widthchange", zoomchange: "zoomchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtMapComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtMapComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtMapComponent, [{
        type: Component,
        args: [{
                selector: 'ExtMap',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'geo', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'map', 'mapListeners', 'mapOptions', 'margin', 'markers', 'markerTemplate', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'requiredScripts', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'useCurrentLocation', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centerchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maprender', 'markerclick', 'markerdblclick', 'markerdrag', 'markerdragend', 'markerdragstart', 'markermousedown', 'markermouseout', 'markermouseover', 'markermouseup', 'markerrightclick', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'typechange', 'updatedata', 'widthchange', 'zoomchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtMapComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtMapComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCMap()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtGoogle_mapComponent = /** @class */ (function (_super) {
    __extends(ExtGoogle_mapComponent, _super);
    function ExtGoogle_mapComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'geo', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'map', 'mapListeners', 'mapOptions', 'margin', 'markers', 'markerTemplate', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'requiredScripts', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'useCurrentLocation', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCGoogle_map()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centerchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maprender', 'markerclick', 'markerdblclick', 'markerdrag', 'markerdragend', 'markerdragstart', 'markermousedown', 'markermouseout', 'markermouseover', 'markermouseup', 'markerrightclick', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'typechange', 'updatedata', 'widthchange', 'zoomchange',], vc) || this;
        _this.xtype = 'google-map';
        return _this;
    }
    ExtGoogle_mapComponent_1 = ExtGoogle_mapComponent;
    ExtGoogle_mapComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtGoogle_mapComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtGoogle_mapComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtGoogle_mapComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtGoogle_mapComponent_1;
    ExtGoogle_mapComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtGoogle_mapComponent = ExtGoogle_mapComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtGoogle_mapComponent);
ExtGoogle_mapComponent.ɵfac = function ExtGoogle_mapComponent_Factory(t) { return new (t || ExtGoogle_mapComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtGoogle_mapComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtGoogle_mapComponent, selectors: [["ExtGoogle_map"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoDestroy: "autoDestroy", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", geo: "geo", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", map: "map", mapListeners: "mapListeners", mapOptions: "mapOptions", margin: "margin", markers: "markers", markerTemplate: "markerTemplate", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", padding: "padding", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", requiredScripts: "requiredScripts", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", useCurrentLocation: "useCurrentLocation", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centerchange: "centerchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maprender: "maprender", markerclick: "markerclick", markerdblclick: "markerdblclick", markerdrag: "markerdrag", markerdragend: "markerdragend", markerdragstart: "markerdragstart", markermousedown: "markermousedown", markermouseout: "markermouseout", markermouseover: "markermouseover", markermouseup: "markermouseup", markerrightclick: "markerrightclick", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", typechange: "typechange", updatedata: "updatedata", widthchange: "widthchange", zoomchange: "zoomchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtGoogle_mapComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtGoogle_mapComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtGoogle_mapComponent, [{
        type: Component,
        args: [{
                selector: 'ExtGoogle_map',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoDestroy', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'geo', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'map', 'mapListeners', 'mapOptions', 'margin', 'markers', 'markerTemplate', 'masked', 'maxHeight', 'maxWidth', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'padding', 'plugins', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'requiredScripts', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'useCurrentLocation', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centerchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maprender', 'markerclick', 'markerdblclick', 'markerdrag', 'markerdragend', 'markerdragstart', 'markermousedown', 'markermouseout', 'markermouseover', 'markermouseup', 'markerrightclick', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'typechange', 'updatedata', 'widthchange', 'zoomchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtGoogle_mapComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtGoogle_mapComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCGoogle_map()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtRatingComponent = /** @class */ (function (_super) {
    __extends(ExtRatingComponent, _super);
    function ExtRatingComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animate', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'family', 'flex', 'floated', 'focusCls', 'fullscreen', 'glyphs', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'limit', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minimum', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'overStyle', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'rounding', 'scale', 'scrollable', 'selectedStyle', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tip', 'toFrontOnShow', 'tooltip', 'tooltipText', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackingValue', 'trackOver', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCRating()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'rating';
        return _this;
    }
    ExtRatingComponent_1 = ExtRatingComponent;
    ExtRatingComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtRatingComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtRatingComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtRatingComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtRatingComponent_1;
    ExtRatingComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtRatingComponent = ExtRatingComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtRatingComponent);
ExtRatingComponent.ɵfac = function ExtRatingComponent_Factory(t) { return new (t || ExtRatingComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtRatingComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtRatingComponent, selectors: [["ExtRating"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", animate: "animate", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", family: "family", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", glyphs: "glyphs", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", limit: "limit", listeners: "listeners", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minimum: "minimum", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", overStyle: "overStyle", padding: "padding", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", rounding: "rounding", scale: "scale", scrollable: "scrollable", selectedStyle: "selectedStyle", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", tip: "tip", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", tooltipText: "tooltipText", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", trackingValue: "trackingValue", trackOver: "trackOver", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", value: "value", viewModel: "viewModel", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtRatingComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtRatingComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtRatingComponent, [{
        type: Component,
        args: [{
                selector: 'ExtRating',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'animate', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'family', 'flex', 'floated', 'focusCls', 'fullscreen', 'glyphs', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'limit', 'listeners', 'margin', 'maxHeight', 'maxWidth', 'minHeight', 'minimum', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'overStyle', 'padding', 'plugins', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'rounding', 'scale', 'scrollable', 'selectedStyle', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'tip', 'toFrontOnShow', 'tooltip', 'tooltipText', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'trackingValue', 'trackOver', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'value', 'viewModel', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'orientationchange', 'painted', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtRatingComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtRatingComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCRating()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtVideoComponent = /** @class */ (function (_super) {
    __extends(ExtVideoComponent, _super);
    function ExtVideoComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoPause', 'autoResume', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'controls', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'loop', 'margin', 'maxHeight', 'maxWidth', 'media', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'muted', 'name', 'nameable', 'padding', 'plugins', 'posterUrl', 'preload', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showPosterOnPause', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'volume', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCVideo()).events, ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'ended', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'mutedchange', 'orientationchange', 'painted', 'pause', 'play', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'stop', 'timeupdate', 'tofront', 'topchange', 'updatedata', 'volumechange', 'widthchange',], vc) || this;
        _this.xtype = 'video';
        return _this;
    }
    ExtVideoComponent_1 = ExtVideoComponent;
    ExtVideoComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtVideoComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtVideoComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtVideoComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtVideoComponent_1;
    ExtVideoComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtVideoComponent = ExtVideoComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtVideoComponent);
ExtVideoComponent.ɵfac = function ExtVideoComponent_Factory(t) { return new (t || ExtVideoComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtVideoComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtVideoComponent, selectors: [["ExtVideo"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoPause: "autoPause", autoResume: "autoResume", axisLock: "axisLock", bind: "bind", border: "border", bottom: "bottom", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", controller: "controller", controls: "controls", data: "data", defaultListenerScope: "defaultListenerScope", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", left: "left", listeners: "listeners", loop: "loop", margin: "margin", maxHeight: "maxHeight", maxWidth: "maxWidth", media: "media", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", muted: "muted", name: "name", nameable: "nameable", padding: "padding", posterUrl: "posterUrl", preload: "preload", publishes: "publishes", record: "record", reference: "reference", relative: "relative", renderTo: "renderTo", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", showPosterOnPause: "showPosterOnPause", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", url: "url", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", volume: "volume", weight: "weight", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", added: "added", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", ended: "ended", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", moved: "moved", mutedchange: "mutedchange", orientationchange: "orientationchange", painted: "painted", pause: "pause", play: "play", positionedchange: "positionedchange", removed: "removed", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", stop: "stop", timeupdate: "timeupdate", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", volumechange: "volumechange", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtVideoComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtVideoComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtVideoComponent, [{
        type: Component,
        args: [{
                selector: 'ExtVideo',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoPause', 'autoResume', 'axisLock', 'bind', 'border', 'bottom', 'centered', 'cls', 'constrainAlign', 'contentEl', 'controller', 'controls', 'data', 'defaultListenerScope', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'left', 'listeners', 'loop', 'margin', 'maxHeight', 'maxWidth', 'media', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'muted', 'name', 'nameable', 'padding', 'plugins', 'posterUrl', 'preload', 'publishes', 'record', 'reference', 'relative', 'renderTo', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'showPosterOnPause', 'stateful', 'statefulDefaults', 'stateId', 'style', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'url', 'userCls', 'userSelectable', 'viewModel', 'volume', 'weight', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'added', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'destroy', 'disabledchange', 'dockedchange', 'ended', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'moved', 'mutedchange', 'orientationchange', 'painted', 'pause', 'play', 'positionedchange', 'removed', 'resize', 'rightchange', 'scrollablechange', 'show', 'stop', 'timeupdate', 'tofront', 'topchange', 'updatedata', 'volumechange', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtVideoComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtVideoComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCVideo()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtViewportComponent = /** @class */ (function (_super) {
    __extends(ExtViewportComponent, _super);
    function ExtViewportComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoBlurInput', 'autoDestroy', 'autoMaximize', 'autoRender', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menus', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'orientation', 'padding', 'plugins', 'preventZooming', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'swipeThreshold', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',], (new EWCViewport()).events, ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maximize', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'ready', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',], vc) || this;
        _this.xtype = 'viewport';
        return _this;
    }
    ExtViewportComponent_1 = ExtViewportComponent;
    ExtViewportComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtViewportComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtViewportComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtViewportComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtViewportComponent_1;
    ExtViewportComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtViewportComponent = ExtViewportComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtViewportComponent);
ExtViewportComponent.ɵfac = function ExtViewportComponent_Factory(t) { return new (t || ExtViewportComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtViewportComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtViewportComponent, selectors: [["ExtViewport"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", activeChildTabIndex: "activeChildTabIndex", activeItem: "activeItem", alignSelf: "alignSelf", allowFocusingDisabledChildren: "allowFocusingDisabledChildren", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", autoBlurInput: "autoBlurInput", autoDestroy: "autoDestroy", autoMaximize: "autoMaximize", autoRender: "autoRender", autoSize: "autoSize", axisLock: "axisLock", bind: "bind", bodyCls: "bodyCls", border: "border", bottom: "bottom", cardSwitchAnimation: "cardSwitchAnimation", centered: "centered", cls: "cls", constrainAlign: "constrainAlign", contentEl: "contentEl", control: "control", controller: "controller", data: "data", defaultFocus: "defaultFocus", defaultListenerScope: "defaultListenerScope", defaults: "defaults", defaultType: "defaultType", disabled: "disabled", displayed: "displayed", docked: "docked", draggable: "draggable", undefined: "undefined", flex: "flex", floated: "floated", focusableContainer: "focusableContainer", focusCls: "focusCls", fullscreen: "fullscreen", height: "height", hidden: "hidden", hideAnimation: "hideAnimation", hideMode: "hideMode", hideOnMaskTap: "hideOnMaskTap", html: "html", id: "id", inactiveChildTabIndex: "inactiveChildTabIndex", innerCls: "innerCls", instanceCls: "instanceCls", itemId: "itemId", items: "items", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", layout: "layout", left: "left", listeners: "listeners", manageBorders: "manageBorders", margin: "margin", masked: "masked", maxHeight: "maxHeight", maxWidth: "maxWidth", menus: "menus", minHeight: "minHeight", minWidth: "minWidth", modal: "modal", modelValidation: "modelValidation", name: "name", nameable: "nameable", nameHolder: "nameHolder", orientation: "orientation", padding: "padding", preventZooming: "preventZooming", publishes: "publishes", record: "record", reference: "reference", referenceHolder: "referenceHolder", relative: "relative", renderTo: "renderTo", resetFocusPosition: "resetFocusPosition", right: "right", ripple: "ripple", scrollable: "scrollable", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", showAnimation: "showAnimation", stateful: "stateful", statefulDefaults: "statefulDefaults", stateId: "stateId", style: "style", swipeThreshold: "swipeThreshold", tabIndex: "tabIndex", toFrontOnShow: "toFrontOnShow", tooltip: "tooltip", top: "top", touchAction: "touchAction", tpl: "tpl", tplWriteMode: "tplWriteMode", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", userSelectable: "userSelectable", viewModel: "viewModel", weight: "weight", weighted: "weighted", width: "width", x: "x", xtype: "xtype", y: "y", zIndex: "zIndex" }, outputs: { ready: "ready", activate: "activate", activeItemchange: "activeItemchange", add: "add", added: "added", beforeactiveItemchange: "beforeactiveItemchange", beforebottomchange: "beforebottomchange", beforecenteredchange: "beforecenteredchange", beforedisabledchange: "beforedisabledchange", beforedockedchange: "beforedockedchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforehide: "beforehide", beforeleftchange: "beforeleftchange", beforemaxHeightchange: "beforemaxHeightchange", beforemaxWidthchange: "beforemaxWidthchange", beforeminHeightchange: "beforeminHeightchange", beforeminWidthchange: "beforeminWidthchange", beforeorientationchange: "beforeorientationchange", beforerightchange: "beforerightchange", beforescrollablechange: "beforescrollablechange", beforeshow: "beforeshow", beforetofront: "beforetofront", beforetopchange: "beforetopchange", beforewidthchange: "beforewidthchange", blur: "blur", bottomchange: "bottomchange", centeredchange: "centeredchange", deactivate: "deactivate", destroy: "destroy", disabledchange: "disabledchange", dockedchange: "dockedchange", erased: "erased", floatingchange: "floatingchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", fullscreen: "fullscreen", heightchange: "heightchange", hiddenchange: "hiddenchange", hide: "hide", initialize: "initialize", leftchange: "leftchange", maxHeightchange: "maxHeightchange", maximize: "maximize", maxWidthchange: "maxWidthchange", minHeightchange: "minHeightchange", minWidthchange: "minWidthchange", move: "move", moved: "moved", orientationchange: "orientationchange", painted: "painted", positionedchange: "positionedchange", remove: "remove", removed: "removed", renderedchange: "renderedchange", resize: "resize", rightchange: "rightchange", scrollablechange: "scrollablechange", show: "show", tofront: "tofront", topchange: "topchange", updatedata: "updatedata", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtViewportComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtViewportComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtViewportComponent, [{
        type: Component,
        args: [{
                selector: 'ExtViewport',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'activeChildTabIndex', 'activeItem', 'alignSelf', 'allowFocusingDisabledChildren', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'autoBlurInput', 'autoDestroy', 'autoMaximize', 'autoRender', 'autoSize', 'axisLock', 'bind', 'bodyCls', 'border', 'bottom', 'cardSwitchAnimation', 'centered', 'cls', 'constrainAlign', 'contentEl', 'control', 'controller', 'data', 'defaultFocus', 'defaultListenerScope', 'defaults', 'defaultType', 'disabled', 'displayed', 'docked', 'draggable', 'undefined', 'undefined', 'undefined', 'flex', 'floated', 'focusableContainer', 'focusCls', 'fullscreen', 'height', 'hidden', 'hideAnimation', 'hideMode', 'hideOnMaskTap', 'html', 'id', 'inactiveChildTabIndex', 'innerCls', 'instanceCls', 'itemId', 'items', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'layout', 'left', 'listeners', 'manageBorders', 'margin', 'masked', 'maxHeight', 'maxWidth', 'menus', 'minHeight', 'minWidth', 'modal', 'modelValidation', 'name', 'nameable', 'nameHolder', 'orientation', 'padding', 'plugins', 'preventZooming', 'publishes', 'record', 'reference', 'referenceHolder', 'relative', 'renderTo', 'resetFocusPosition', 'right', 'ripple', 'scrollable', 'session', 'shadow', 'shareableName', 'shim', 'showAnimation', 'stateful', 'statefulDefaults', 'stateId', 'style', 'swipeThreshold', 'tabIndex', 'toFrontOnShow', 'tooltip', 'top', 'touchAction', 'tpl', 'tplWriteMode', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'userSelectable', 'viewModel', 'weight', 'weighted', 'width', 'x', 'xtype', 'y', 'zIndex',],
                outputs: ['ready', 'activate', 'activeItemchange', 'add', 'added', 'beforeactiveItemchange', 'beforebottomchange', 'beforecenteredchange', 'beforedisabledchange', 'beforedockedchange', 'beforeheightchange', 'beforehiddenchange', 'beforehide', 'beforeleftchange', 'beforemaxHeightchange', 'beforemaxWidthchange', 'beforeminHeightchange', 'beforeminWidthchange', 'beforeorientationchange', 'beforerightchange', 'beforescrollablechange', 'beforeshow', 'beforetofront', 'beforetopchange', 'beforewidthchange', 'blur', 'bottomchange', 'centeredchange', 'deactivate', 'destroy', 'disabledchange', 'dockedchange', 'erased', 'floatingchange', 'focus', 'focusenter', 'focusleave', 'fullscreen', 'heightchange', 'hiddenchange', 'hide', 'initialize', 'leftchange', 'maxHeightchange', 'maximize', 'maxWidthchange', 'minHeightchange', 'minWidthchange', 'move', 'moved', 'orientationchange', 'painted', 'positionedchange', 'ready', 'remove', 'removed', 'renderedchange', 'resize', 'rightchange', 'scrollablechange', 'show', 'tofront', 'topchange', 'updatedata', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtViewportComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtViewportComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCViewport()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var ExtWidgetComponent = /** @class */ (function (_super) {
    __extends(ExtWidgetComponent, _super);
    function ExtWidgetComponent(eRef, hostComponent, vc) {
        var _this = _super.call(this, eRef, hostComponent, ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'flex', 'floated', 'focusCls', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'ripple', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',], (new EWCWidget()).events, ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',], vc) || this;
        _this.xtype = 'widget';
        return _this;
    }
    ExtWidgetComponent_1 = ExtWidgetComponent;
    ExtWidgetComponent.prototype.ngOnInit = function () {
        this.baseOnInit();
    };
    ExtWidgetComponent.prototype.ngAfterViewInit = function () {
        this.baseAfterViewInit();
    };
    ExtWidgetComponent.prototype.ngOnChanges = function (changes) {
        this.baseOnChanges(changes);
    };
    ExtWidgetComponent.prototype.ngOnDestroy = function () {
        this.baseOnDestroy();
    };
    var ExtWidgetComponent_1;
    ExtWidgetComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: EngBase, decorators: [{ type: Host }, { type: Optional }, { type: SkipSelf }] },
        { type: ViewContainerRef }
    ]; };
    ExtWidgetComponent = ExtWidgetComponent_1 = __decorate([ __param(1, Host()), __param(1, Optional()), __param(1, SkipSelf())
    ], ExtWidgetComponent);
ExtWidgetComponent.ɵfac = function ExtWidgetComponent_Factory(t) { return new (t || ExtWidgetComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(EngBase, 13), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ExtWidgetComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ExtWidgetComponent, selectors: [["ExtWidget"]], inputs: { aMe: "aMe", header: "header", renderer: "renderer", label: "label", fitToParent: "fitToParent", tab: "tab", config: "config", platformConfig: "platformConfig", extname: "extname", viewport: "viewport", align: "align", plugins: "plugins", responsiveConfig: "responsiveConfig", responsiveFormulas: "responsiveFormulas", alignSelf: "alignSelf", alwaysOnTop: "alwaysOnTop", ariaAttributes: "ariaAttributes", ariaDescribedBy: "ariaDescribedBy", ariaLabel: "ariaLabel", ariaLabelledBy: "ariaLabelledBy", bind: "bind", border: "border", cls: "cls", constrainAlign: "constrainAlign", controller: "controller", defaultListenerScope: "defaultListenerScope", disabled: "disabled", undefined: "undefined", flex: "flex", floated: "floated", focusCls: "focusCls", height: "height", hidden: "hidden", hideMode: "hideMode", id: "id", instanceCls: "instanceCls", itemId: "itemId", keyMap: "keyMap", keyMapEnabled: "keyMapEnabled", keyMapTarget: "keyMapTarget", listeners: "listeners", margin: "margin", name: "name", nameable: "nameable", publishes: "publishes", reference: "reference", relative: "relative", renderTo: "renderTo", ripple: "ripple", session: "session", shadow: "shadow", shareableName: "shareableName", shim: "shim", style: "style", toFrontOnShow: "toFrontOnShow", touchAction: "touchAction", translatable: "translatable", twoWayBindable: "twoWayBindable", ui: "ui", userCls: "userCls", viewModel: "viewModel", width: "width", x: "x", y: "y" }, outputs: { ready: "ready", beforedisabledchange: "beforedisabledchange", beforeheightchange: "beforeheightchange", beforehiddenchange: "beforehiddenchange", beforetofront: "beforetofront", beforewidthchange: "beforewidthchange", blur: "blur", disabledchange: "disabledchange", focus: "focus", focusenter: "focusenter", focusleave: "focusleave", heightchange: "heightchange", hiddenchange: "hiddenchange", tofront: "tofront", widthchange: "widthchange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: EngBase, useExisting: forwardRef(function () { return ExtWidgetComponent_1; }) }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c1, decls: 1, vars: 0, template: function ExtWidgetComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtWidgetComponent, [{
        type: Component,
        args: [{
                selector: 'ExtWidget',
                inputs: ['aMe', 'header', 'renderer', 'label', 'fitToParent', 'tab', 'config', 'platformConfig', 'extname', 'viewport', 'align', 'plugins', 'responsiveConfig', 'responsiveFormulas', 'alignSelf', 'alwaysOnTop', 'ariaAttributes', 'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', 'bind', 'border', 'cls', 'constrainAlign', 'controller', 'defaultListenerScope', 'disabled', 'undefined', 'flex', 'floated', 'focusCls', 'height', 'hidden', 'hideMode', 'id', 'instanceCls', 'itemId', 'keyMap', 'keyMapEnabled', 'keyMapTarget', 'listeners', 'margin', 'name', 'nameable', 'plugins', 'publishes', 'reference', 'relative', 'renderTo', 'ripple', 'session', 'shadow', 'shareableName', 'shim', 'style', 'toFrontOnShow', 'touchAction', 'translatable', 'twoWayBindable', 'ui', 'userCls', 'viewModel', 'width', 'x', 'y',],
                outputs: ['ready', 'beforedisabledchange', 'beforeheightchange', 'beforehiddenchange', 'beforetofront', 'beforewidthchange', 'blur', 'disabledchange', 'focus', 'focusenter', 'focusleave', 'heightchange', 'hiddenchange', 'tofront', 'widthchange',],
                providers: [{ provide: EngBase, useExisting: forwardRef(function () { return ExtWidgetComponent_1; }) }],
                template: '<ng-content></ng-content>'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: EngBase, decorators: [{
                type: Host
            }, {
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();
    return ExtWidgetComponent;
}(EngBase));
// function toPascalCase(s) {
//     return s.match(/[a-z]+/gi)
//         .map(function (word) {
//             return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase()
//         })
//         .join('')
// }
// var pascalName = toPascalCase(tagName)
//var events = (new EWCWidget()).eventnames;
//var eventnamesall = [];
//events.forEach( (event: any, n: any) => {
//    eventnamesall.push(event.name)
//})
//const distinct = (value, index, self) => {
//    //return true
//    return self.indexOf(value) === index;
//}
//var eventnames = eventnamesall.filter(distinct);

var Ext$1 = window['Ext'];
function extLaunchFactory() {
    var x = function () {
        //console.log('Hi from exported function');
        return new Promise(function (resolve, reject) {
            //console.log("Loading Ext JS...");
            Ext$1.onReady(function () {
                //console.log("Ext has loaded...");
                resolve();
            });
        });
    };
    return x;
}
// var extLaunchFactory = () => {
//   return () => new Promise<void>((resolve, reject) => {
//       console.log("Loading Ext JS...");
//       Ext.onReady(function () {
//         console.log("Ext has loaded...");
//         resolve();
//       });
//   });
// }
//var ExtAppInitLaunchProvider = { provide: APP_INITIALIZER, useFactory: extLaunchFactory, deps: [], multi: true };
var ExtAngularModernModule = /** @class */ (function () {
    function ExtAngularModernModule() {
    }
ExtAngularModernModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ExtAngularModernModule });
ExtAngularModernModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ExtAngularModernModule_Factory(t) { return new (t || ExtAngularModernModule)(); }, providers: [
        { provide: APP_INITIALIZER, useFactory: extLaunchFactory, deps: [], multi: true }
    ], imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ExtAngularModernModule, { declarations: [ExtActionsheetComponent,
        ExtAudioComponent,
        ExtBreadcrumbbarComponent,
        ExtButtonComponent,
        ExtCalendar_eventComponent,
        ExtCalendar_form_addComponent,
        ExtCalendar_calendar_pickerComponent,
        ExtCalendar_form_editComponent,
        ExtCalendar_timefieldComponent,
        ExtCalendar_daysheaderComponent,
        ExtCalendar_weeksheaderComponent,
        ExtCalendar_listComponent,
        ExtCalendar_dayComponent,
        ExtCalendar_daysComponent,
        ExtCalendar_monthComponent,
        ExtCalendarComponent,
        ExtCalendar_weekComponent,
        ExtCalendar_weeksComponent,
        ExtCalendar_dayviewComponent,
        ExtCalendar_daysviewComponent,
        ExtCalendar_monthviewComponent,
        ExtCalendar_multiviewComponent,
        ExtCalendar_weekviewComponent,
        ExtCalendar_weeksviewComponent,
        ExtCarouselComponent, ExtCarouselComponent,
        ExtCartesianComponent,
        ExtChartComponent,
        ExtCartesianComponent,
        ExtChartComponent,
        ExtLegendComponent, ExtLegendComponent,
        ExtChartnavigatorComponent,
        ExtPolarComponent,
        ExtSpacefillingComponent,
        ExtChipComponent,
        ExtComponentComponent, ExtComponentComponent, ExtComponentComponent,
        ExtContainerComponent, ExtContainerComponent, ExtContainerComponent,
        ExtD3_canvasComponent,
        ExtD3_heatmapComponent,
        ExtD3_packComponent,
        ExtD3_partitionComponent,
        ExtD3_sunburstComponent,
        ExtD3_treeComponent,
        ExtD3_horizontal_treeComponent,
        ExtD3_treemapComponent,
        ExtD3_svgComponent,
        ExtD3Component,
        ExtBoundlistComponent,
        ExtChipviewComponent,
        ExtComponentdataviewComponent,
        ExtDataitemComponent, ExtDataitemComponent,
        ExtDataviewComponent, ExtDataviewComponent,
        ExtEmptytextComponent,
        ExtIndexbarComponent, ExtIndexbarComponent,
        ExtItemheaderComponent,
        ExtListComponent, ExtListComponent,
        ExtListitemComponent, ExtListitemComponent,
        ExtListitemplaceholderComponent,
        ExtListswiperitemComponent,
        ExtListswiperstepperComponent,
        ExtNestedlistComponent, ExtNestedlistComponent,
        ExtPullrefreshbarComponent,
        ExtPullrefreshspinnerComponent,
        ExtSimplelistitemComponent, ExtSimplelistitemComponent,
        ExtDialogComponent,
        ExtWindowComponent,
        ExtDialogComponent,
        ExtWindowComponent,
        ExtDialogComponent,
        ExtWindowComponent,
        ExtDrawComponent, ExtDrawComponent,
        ExtSurfaceComponent,
        ExtEditorComponent,
        ExtCheckboxComponent,
        ExtCheckboxfieldComponent,
        ExtCheckboxComponent,
        ExtCheckboxfieldComponent,
        ExtCheckboxgroupComponent,
        ExtComboboxComponent,
        ExtComboboxfieldComponent,
        ExtComboboxComponent,
        ExtComboboxfieldComponent,
        ExtContainerfieldComponent,
        ExtFieldcontainerComponent,
        ExtDatefieldComponent,
        ExtDatepickerfieldComponent,
        ExtDatefieldComponent,
        ExtDatepickerfieldComponent,
        ExtDatefieldComponent,
        ExtDatepickerfieldComponent,
        ExtDatepickernativefieldComponent, ExtDatepickernativefieldComponent,
        ExtDisplayfieldComponent, ExtDisplayfieldComponent,
        ExtEmailfieldComponent, ExtEmailfieldComponent,
        ExtFieldComponent, ExtFieldComponent,
        ExtGroupcontainerComponent,
        ExtFilefieldComponent,
        ExtFilebuttonComponent,
        ExtHiddenfieldComponent, ExtHiddenfieldComponent,
        ExtInputfieldComponent,
        ExtNumberfieldComponent, ExtNumberfieldComponent,
        ExtFieldpanelComponent,
        ExtPasswordfieldComponent, ExtPasswordfieldComponent,
        ExtPickerfieldComponent,
        ExtRadioComponent,
        ExtRadiofieldComponent,
        ExtRadioComponent,
        ExtRadiofieldComponent,
        ExtRadiogroupComponent,
        ExtSearchfieldComponent, ExtSearchfieldComponent,
        ExtSelectfieldComponent, ExtSelectfieldComponent,
        ExtSinglesliderfieldComponent,
        ExtSliderfieldComponent, ExtSliderfieldComponent,
        ExtSpinnerfieldComponent, ExtSpinnerfieldComponent,
        ExtTextfieldComponent, ExtTextfieldComponent,
        ExtTextareafieldComponent, ExtTextareafieldComponent,
        ExtTimefieldComponent,
        ExtTogglefieldComponent, ExtTogglefieldComponent,
        ExtCleartriggerComponent,
        ExtDatetriggerComponent,
        ExtExpandtriggerComponent,
        ExtMenutriggerComponent,
        ExtRevealtriggerComponent,
        ExtSpindowntriggerComponent,
        ExtSpinuptriggerComponent,
        ExtTimetriggerComponent,
        ExtTriggerComponent,
        ExtUrlfieldComponent, ExtUrlfieldComponent,
        ExtFieldsetComponent,
        ExtFormpanelComponent, ExtFormpanelComponent,
        ExtFroalaeditorComponent,
        ExtFroalaeditorfieldComponent,
        ExtGridcellbaseComponent,
        ExtBooleancellComponent,
        ExtGridcellComponent,
        ExtCheckcellComponent,
        ExtDatecellComponent,
        ExtNumbercellComponent,
        ExtRownumberercellComponent,
        ExtTextcellComponent,
        ExtTreecellComponent,
        ExtWidgetcellComponent,
        ExtCelleditorComponent,
        ExtBooleancolumnComponent,
        ExtCheckcolumnComponent,
        ExtGridcolumnComponent,
        ExtColumnComponent,
        ExtTemplatecolumnComponent,
        ExtGridcolumnComponent,
        ExtColumnComponent,
        ExtTemplatecolumnComponent,
        ExtDatecolumnComponent,
        ExtDragcolumnComponent,
        ExtNumbercolumnComponent,
        ExtRownumbererComponent,
        ExtSelectioncolumnComponent,
        ExtTextcolumnComponent,
        ExtTreecolumnComponent,
        ExtGridComponent,
        ExtHeadercontainerComponent,
        ExtLockedgridComponent, ExtLockedgridComponent,
        ExtLockedgridregionComponent, ExtLockedgridregionComponent,
        ExtGridcolumnsmenuComponent,
        ExtGridgroupbythismenuitemComponent,
        ExtGridshowingroupsmenuitemComponent,
        ExtGridsortascmenuitemComponent,
        ExtGridsortdescmenuitemComponent,
        ExtPagingtoolbarComponent,
        ExtGridrowComponent,
        ExtRowbodyComponent,
        ExtRoweditorbarComponent,
        ExtRoweditorcellComponent,
        ExtRoweditorComponent,
        ExtRoweditorgapComponent,
        ExtRowheaderComponent,
        ExtGridsummaryrowComponent,
        ExtTreeComponent, ExtTreeComponent,
        ExtImageComponent,
        ExtImgComponent,
        ExtImageComponent,
        ExtImgComponent,
        ExtIndicatorComponent,
        ExtLabelComponent,
        ExtTreelistComponent,
        ExtTreelistitemComponent,
        ExtLoadmaskComponent,
        ExtMaskComponent,
        ExtMediaComponent,
        ExtMenucheckitemComponent,
        ExtMenuitemComponent, ExtMenuitemComponent,
        ExtMenuComponent,
        ExtMenuradioitemComponent,
        ExtMenuseparatorComponent,
        ExtMessageboxComponent,
        ExtNavigationviewComponent, ExtNavigationviewComponent,
        ExtPanelComponent, ExtPanelComponent,
        ExtAccordionComponent,
        ExtDatepanelComponent,
        ExtDatetitleComponent,
        ExtPanelheaderComponent,
        ExtTimepanelComponent,
        ExtPaneltitleComponent,
        ExtYearpickerComponent,
        ExtDatepickerComponent, ExtDatepickerComponent,
        ExtPickerComponent, ExtPickerComponent,
        ExtSelectpickerComponent,
        ExtPickerslotComponent,
        ExtTabletpickerComponent,
        ExtPivotgridcellComponent,
        ExtPivotgridgroupcellComponent,
        ExtPivotd3containerComponent,
        ExtPivotheatmapComponent,
        ExtPivottreemapComponent,
        ExtPivotgridComponent,
        ExtPivotconfigfieldComponent,
        ExtPivotconfigcontainerComponent,
        ExtPivotconfigformComponent,
        ExtPivotconfigpanelComponent,
        ExtPivotsettingsComponent,
        ExtPivotrangeeditorComponent,
        ExtPivotgridrowComponent,
        ExtProgressComponent,
        ExtProgressbarwidgetComponent,
        ExtProgressComponent,
        ExtProgressbarwidgetComponent,
        ExtSegmentedbuttonComponent, ExtSegmentedbuttonComponent,
        ExtSheetComponent,
        ExtSliderComponent,
        ExtThumbComponent,
        ExtTogglesliderComponent,
        ExtSpacerComponent,
        ExtSparklinebarComponent,
        ExtSparklineComponent,
        ExtSparklineboxComponent,
        ExtSparklinebulletComponent,
        ExtSparklinediscreteComponent,
        ExtSparklinelineComponent,
        ExtSparklinepieComponent,
        ExtSparklinetristateComponent,
        ExtSplitbuttonComponent,
        ExtTabbarComponent, ExtTabbarComponent,
        ExtTabpanelComponent, ExtTabpanelComponent,
        ExtTabComponent, ExtTabComponent,
        ExtTooltipComponent,
        ExtTitleComponent,
        ExtTitlebarComponent,
        ExtToolComponent,
        ExtPaneltoolComponent,
        ExtToolComponent,
        ExtPaneltoolComponent,
        ExtToolbarComponent,
        ExtColorbuttonComponent,
        ExtColorpickercolorpreviewComponent,
        ExtColorfieldComponent,
        ExtColorselectorComponent,
        ExtGaugeComponent, ExtGaugeComponent,
        ExtMapComponent,
        ExtGoogle_mapComponent,
        ExtMapComponent,
        ExtGoogle_mapComponent,
        ExtRatingComponent,
        ExtVideoComponent,
        ExtViewportComponent,
        ExtWidgetComponent, ExtWidgetComponent], exports: [ExtActionsheetComponent,
        ExtAudioComponent,
        ExtBreadcrumbbarComponent,
        ExtButtonComponent,
        ExtCalendar_eventComponent,
        ExtCalendar_form_addComponent,
        ExtCalendar_calendar_pickerComponent,
        ExtCalendar_form_editComponent,
        ExtCalendar_timefieldComponent,
        ExtCalendar_daysheaderComponent,
        ExtCalendar_weeksheaderComponent,
        ExtCalendar_listComponent,
        ExtCalendar_dayComponent,
        ExtCalendar_daysComponent,
        ExtCalendar_monthComponent,
        ExtCalendarComponent,
        ExtCalendar_weekComponent,
        ExtCalendar_weeksComponent,
        ExtCalendar_dayviewComponent,
        ExtCalendar_daysviewComponent,
        ExtCalendar_monthviewComponent,
        ExtCalendar_multiviewComponent,
        ExtCalendar_weekviewComponent,
        ExtCalendar_weeksviewComponent,
        ExtCarouselComponent, ExtCarouselComponent,
        ExtCartesianComponent,
        ExtChartComponent,
        ExtCartesianComponent,
        ExtChartComponent,
        ExtLegendComponent, ExtLegendComponent,
        ExtChartnavigatorComponent,
        ExtPolarComponent,
        ExtSpacefillingComponent,
        ExtChipComponent,
        ExtComponentComponent, ExtComponentComponent, ExtComponentComponent,
        ExtContainerComponent, ExtContainerComponent, ExtContainerComponent,
        ExtD3_canvasComponent,
        ExtD3_heatmapComponent,
        ExtD3_packComponent,
        ExtD3_partitionComponent,
        ExtD3_sunburstComponent,
        ExtD3_treeComponent,
        ExtD3_horizontal_treeComponent,
        ExtD3_treemapComponent,
        ExtD3_svgComponent,
        ExtD3Component,
        ExtBoundlistComponent,
        ExtChipviewComponent,
        ExtComponentdataviewComponent,
        ExtDataitemComponent, ExtDataitemComponent,
        ExtDataviewComponent, ExtDataviewComponent,
        ExtEmptytextComponent,
        ExtIndexbarComponent, ExtIndexbarComponent,
        ExtItemheaderComponent,
        ExtListComponent, ExtListComponent,
        ExtListitemComponent, ExtListitemComponent,
        ExtListitemplaceholderComponent,
        ExtListswiperitemComponent,
        ExtListswiperstepperComponent,
        ExtNestedlistComponent, ExtNestedlistComponent,
        ExtPullrefreshbarComponent,
        ExtPullrefreshspinnerComponent,
        ExtSimplelistitemComponent, ExtSimplelistitemComponent,
        ExtDialogComponent,
        ExtWindowComponent,
        ExtDialogComponent,
        ExtWindowComponent,
        ExtDialogComponent,
        ExtWindowComponent,
        ExtDrawComponent, ExtDrawComponent,
        ExtSurfaceComponent,
        ExtEditorComponent,
        ExtCheckboxComponent,
        ExtCheckboxfieldComponent,
        ExtCheckboxComponent,
        ExtCheckboxfieldComponent,
        ExtCheckboxgroupComponent,
        ExtComboboxComponent,
        ExtComboboxfieldComponent,
        ExtComboboxComponent,
        ExtComboboxfieldComponent,
        ExtContainerfieldComponent,
        ExtFieldcontainerComponent,
        ExtDatefieldComponent,
        ExtDatepickerfieldComponent,
        ExtDatefieldComponent,
        ExtDatepickerfieldComponent,
        ExtDatefieldComponent,
        ExtDatepickerfieldComponent,
        ExtDatepickernativefieldComponent, ExtDatepickernativefieldComponent,
        ExtDisplayfieldComponent, ExtDisplayfieldComponent,
        ExtEmailfieldComponent, ExtEmailfieldComponent,
        ExtFieldComponent, ExtFieldComponent,
        ExtGroupcontainerComponent,
        ExtFilefieldComponent,
        ExtFilebuttonComponent,
        ExtHiddenfieldComponent, ExtHiddenfieldComponent,
        ExtInputfieldComponent,
        ExtNumberfieldComponent, ExtNumberfieldComponent,
        ExtFieldpanelComponent,
        ExtPasswordfieldComponent, ExtPasswordfieldComponent,
        ExtPickerfieldComponent,
        ExtRadioComponent,
        ExtRadiofieldComponent,
        ExtRadioComponent,
        ExtRadiofieldComponent,
        ExtRadiogroupComponent,
        ExtSearchfieldComponent, ExtSearchfieldComponent,
        ExtSelectfieldComponent, ExtSelectfieldComponent,
        ExtSinglesliderfieldComponent,
        ExtSliderfieldComponent, ExtSliderfieldComponent,
        ExtSpinnerfieldComponent, ExtSpinnerfieldComponent,
        ExtTextfieldComponent, ExtTextfieldComponent,
        ExtTextareafieldComponent, ExtTextareafieldComponent,
        ExtTimefieldComponent,
        ExtTogglefieldComponent, ExtTogglefieldComponent,
        ExtCleartriggerComponent,
        ExtDatetriggerComponent,
        ExtExpandtriggerComponent,
        ExtMenutriggerComponent,
        ExtRevealtriggerComponent,
        ExtSpindowntriggerComponent,
        ExtSpinuptriggerComponent,
        ExtTimetriggerComponent,
        ExtTriggerComponent,
        ExtUrlfieldComponent, ExtUrlfieldComponent,
        ExtFieldsetComponent,
        ExtFormpanelComponent, ExtFormpanelComponent,
        ExtFroalaeditorComponent,
        ExtFroalaeditorfieldComponent,
        ExtGridcellbaseComponent,
        ExtBooleancellComponent,
        ExtGridcellComponent,
        ExtCheckcellComponent,
        ExtDatecellComponent,
        ExtNumbercellComponent,
        ExtRownumberercellComponent,
        ExtTextcellComponent,
        ExtTreecellComponent,
        ExtWidgetcellComponent,
        ExtCelleditorComponent,
        ExtBooleancolumnComponent,
        ExtCheckcolumnComponent,
        ExtGridcolumnComponent,
        ExtColumnComponent,
        ExtTemplatecolumnComponent,
        ExtGridcolumnComponent,
        ExtColumnComponent,
        ExtTemplatecolumnComponent,
        ExtDatecolumnComponent,
        ExtDragcolumnComponent,
        ExtNumbercolumnComponent,
        ExtRownumbererComponent,
        ExtSelectioncolumnComponent,
        ExtTextcolumnComponent,
        ExtTreecolumnComponent,
        ExtGridComponent,
        ExtHeadercontainerComponent,
        ExtLockedgridComponent, ExtLockedgridComponent,
        ExtLockedgridregionComponent, ExtLockedgridregionComponent,
        ExtGridcolumnsmenuComponent,
        ExtGridgroupbythismenuitemComponent,
        ExtGridshowingroupsmenuitemComponent,
        ExtGridsortascmenuitemComponent,
        ExtGridsortdescmenuitemComponent,
        ExtPagingtoolbarComponent,
        ExtGridrowComponent,
        ExtRowbodyComponent,
        ExtRoweditorbarComponent,
        ExtRoweditorcellComponent,
        ExtRoweditorComponent,
        ExtRoweditorgapComponent,
        ExtRowheaderComponent,
        ExtGridsummaryrowComponent,
        ExtTreeComponent, ExtTreeComponent,
        ExtImageComponent,
        ExtImgComponent,
        ExtImageComponent,
        ExtImgComponent,
        ExtIndicatorComponent,
        ExtLabelComponent,
        ExtTreelistComponent,
        ExtTreelistitemComponent,
        ExtLoadmaskComponent,
        ExtMaskComponent,
        ExtMediaComponent,
        ExtMenucheckitemComponent,
        ExtMenuitemComponent, ExtMenuitemComponent,
        ExtMenuComponent,
        ExtMenuradioitemComponent,
        ExtMenuseparatorComponent,
        ExtMessageboxComponent,
        ExtNavigationviewComponent, ExtNavigationviewComponent,
        ExtPanelComponent, ExtPanelComponent,
        ExtAccordionComponent,
        ExtDatepanelComponent,
        ExtDatetitleComponent,
        ExtPanelheaderComponent,
        ExtTimepanelComponent,
        ExtPaneltitleComponent,
        ExtYearpickerComponent,
        ExtDatepickerComponent, ExtDatepickerComponent,
        ExtPickerComponent, ExtPickerComponent,
        ExtSelectpickerComponent,
        ExtPickerslotComponent,
        ExtTabletpickerComponent,
        ExtPivotgridcellComponent,
        ExtPivotgridgroupcellComponent,
        ExtPivotd3containerComponent,
        ExtPivotheatmapComponent,
        ExtPivottreemapComponent,
        ExtPivotgridComponent,
        ExtPivotconfigfieldComponent,
        ExtPivotconfigcontainerComponent,
        ExtPivotconfigformComponent,
        ExtPivotconfigpanelComponent,
        ExtPivotsettingsComponent,
        ExtPivotrangeeditorComponent,
        ExtPivotgridrowComponent,
        ExtProgressComponent,
        ExtProgressbarwidgetComponent,
        ExtProgressComponent,
        ExtProgressbarwidgetComponent,
        ExtSegmentedbuttonComponent, ExtSegmentedbuttonComponent,
        ExtSheetComponent,
        ExtSliderComponent,
        ExtThumbComponent,
        ExtTogglesliderComponent,
        ExtSpacerComponent,
        ExtSparklinebarComponent,
        ExtSparklineComponent,
        ExtSparklineboxComponent,
        ExtSparklinebulletComponent,
        ExtSparklinediscreteComponent,
        ExtSparklinelineComponent,
        ExtSparklinepieComponent,
        ExtSparklinetristateComponent,
        ExtSplitbuttonComponent,
        ExtTabbarComponent, ExtTabbarComponent,
        ExtTabpanelComponent, ExtTabpanelComponent,
        ExtTabComponent, ExtTabComponent,
        ExtTooltipComponent,
        ExtTitleComponent,
        ExtTitlebarComponent,
        ExtToolComponent,
        ExtPaneltoolComponent,
        ExtToolComponent,
        ExtPaneltoolComponent,
        ExtToolbarComponent,
        ExtColorbuttonComponent,
        ExtColorpickercolorpreviewComponent,
        ExtColorfieldComponent,
        ExtColorselectorComponent,
        ExtGaugeComponent, ExtGaugeComponent,
        ExtMapComponent,
        ExtGoogle_mapComponent,
        ExtMapComponent,
        ExtGoogle_mapComponent,
        ExtRatingComponent,
        ExtVideoComponent,
        ExtViewportComponent,
        ExtWidgetComponent, ExtWidgetComponent] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ExtAngularModernModule, [{
        type: NgModule,
        args: [{
                imports: [],
                declarations: [
                    ExtActionsheetComponent,
                    ExtAudioComponent,
                    ExtBreadcrumbbarComponent,
                    ExtButtonComponent,
                    ExtCalendar_eventComponent,
                    ExtCalendar_form_addComponent,
                    ExtCalendar_calendar_pickerComponent,
                    ExtCalendar_form_editComponent,
                    ExtCalendar_timefieldComponent,
                    ExtCalendar_daysheaderComponent,
                    ExtCalendar_weeksheaderComponent,
                    ExtCalendar_listComponent,
                    ExtCalendar_dayComponent,
                    ExtCalendar_daysComponent,
                    ExtCalendar_monthComponent,
                    ExtCalendarComponent,
                    ExtCalendar_weekComponent,
                    ExtCalendar_weeksComponent,
                    ExtCalendar_dayviewComponent,
                    ExtCalendar_daysviewComponent,
                    ExtCalendar_monthviewComponent,
                    ExtCalendar_multiviewComponent,
                    ExtCalendar_weekviewComponent,
                    ExtCalendar_weeksviewComponent,
                    ExtCarouselComponent,
                    ExtCarouselComponent,
                    ExtCartesianComponent,
                    ExtChartComponent,
                    ExtCartesianComponent,
                    ExtChartComponent,
                    ExtLegendComponent,
                    ExtLegendComponent,
                    ExtChartnavigatorComponent,
                    ExtPolarComponent,
                    ExtSpacefillingComponent,
                    ExtChipComponent,
                    ExtComponentComponent,
                    ExtComponentComponent,
                    ExtComponentComponent,
                    ExtContainerComponent,
                    ExtContainerComponent,
                    ExtContainerComponent,
                    ExtD3_canvasComponent,
                    ExtD3_heatmapComponent,
                    ExtD3_packComponent,
                    ExtD3_partitionComponent,
                    ExtD3_sunburstComponent,
                    ExtD3_treeComponent,
                    ExtD3_horizontal_treeComponent,
                    ExtD3_treemapComponent,
                    ExtD3_svgComponent,
                    ExtD3Component,
                    ExtBoundlistComponent,
                    ExtChipviewComponent,
                    ExtComponentdataviewComponent,
                    ExtDataitemComponent,
                    ExtDataitemComponent,
                    ExtDataviewComponent,
                    ExtDataviewComponent,
                    ExtEmptytextComponent,
                    ExtIndexbarComponent,
                    ExtIndexbarComponent,
                    ExtItemheaderComponent,
                    ExtListComponent,
                    ExtListComponent,
                    ExtListitemComponent,
                    ExtListitemComponent,
                    ExtListitemplaceholderComponent,
                    ExtListswiperitemComponent,
                    ExtListswiperstepperComponent,
                    ExtNestedlistComponent,
                    ExtNestedlistComponent,
                    ExtPullrefreshbarComponent,
                    ExtPullrefreshspinnerComponent,
                    ExtSimplelistitemComponent,
                    ExtSimplelistitemComponent,
                    ExtDialogComponent,
                    ExtWindowComponent,
                    ExtDialogComponent,
                    ExtWindowComponent,
                    ExtDialogComponent,
                    ExtWindowComponent,
                    ExtDrawComponent,
                    ExtDrawComponent,
                    ExtSurfaceComponent,
                    ExtEditorComponent,
                    ExtCheckboxComponent,
                    ExtCheckboxfieldComponent,
                    ExtCheckboxComponent,
                    ExtCheckboxfieldComponent,
                    ExtCheckboxgroupComponent,
                    ExtComboboxComponent,
                    ExtComboboxfieldComponent,
                    ExtComboboxComponent,
                    ExtComboboxfieldComponent,
                    ExtContainerfieldComponent,
                    ExtFieldcontainerComponent,
                    ExtDatefieldComponent,
                    ExtDatepickerfieldComponent,
                    ExtDatefieldComponent,
                    ExtDatepickerfieldComponent,
                    ExtDatefieldComponent,
                    ExtDatepickerfieldComponent,
                    ExtDatepickernativefieldComponent,
                    ExtDatepickernativefieldComponent,
                    ExtDisplayfieldComponent,
                    ExtDisplayfieldComponent,
                    ExtEmailfieldComponent,
                    ExtEmailfieldComponent,
                    ExtFieldComponent,
                    ExtFieldComponent,
                    ExtGroupcontainerComponent,
                    ExtFilefieldComponent,
                    ExtFilebuttonComponent,
                    ExtHiddenfieldComponent,
                    ExtHiddenfieldComponent,
                    ExtInputfieldComponent,
                    ExtNumberfieldComponent,
                    ExtNumberfieldComponent,
                    ExtFieldpanelComponent,
                    ExtPasswordfieldComponent,
                    ExtPasswordfieldComponent,
                    ExtPickerfieldComponent,
                    ExtRadioComponent,
                    ExtRadiofieldComponent,
                    ExtRadioComponent,
                    ExtRadiofieldComponent,
                    ExtRadiogroupComponent,
                    ExtSearchfieldComponent,
                    ExtSearchfieldComponent,
                    ExtSelectfieldComponent,
                    ExtSelectfieldComponent,
                    ExtSinglesliderfieldComponent,
                    ExtSliderfieldComponent,
                    ExtSliderfieldComponent,
                    ExtSpinnerfieldComponent,
                    ExtSpinnerfieldComponent,
                    ExtTextfieldComponent,
                    ExtTextfieldComponent,
                    ExtTextareafieldComponent,
                    ExtTextareafieldComponent,
                    ExtTimefieldComponent,
                    ExtTogglefieldComponent,
                    ExtTogglefieldComponent,
                    ExtCleartriggerComponent,
                    ExtDatetriggerComponent,
                    ExtExpandtriggerComponent,
                    ExtMenutriggerComponent,
                    ExtRevealtriggerComponent,
                    ExtSpindowntriggerComponent,
                    ExtSpinuptriggerComponent,
                    ExtTimetriggerComponent,
                    ExtTriggerComponent,
                    ExtUrlfieldComponent,
                    ExtUrlfieldComponent,
                    ExtFieldsetComponent,
                    ExtFormpanelComponent,
                    ExtFormpanelComponent,
                    ExtFroalaeditorComponent,
                    ExtFroalaeditorfieldComponent,
                    ExtGridcellbaseComponent,
                    ExtBooleancellComponent,
                    ExtGridcellComponent,
                    ExtCheckcellComponent,
                    ExtDatecellComponent,
                    ExtNumbercellComponent,
                    ExtRownumberercellComponent,
                    ExtTextcellComponent,
                    ExtTreecellComponent,
                    ExtWidgetcellComponent,
                    ExtCelleditorComponent,
                    ExtBooleancolumnComponent,
                    ExtCheckcolumnComponent,
                    ExtGridcolumnComponent,
                    ExtColumnComponent,
                    ExtTemplatecolumnComponent,
                    ExtGridcolumnComponent,
                    ExtColumnComponent,
                    ExtTemplatecolumnComponent,
                    ExtDatecolumnComponent,
                    ExtDragcolumnComponent,
                    ExtNumbercolumnComponent,
                    ExtRownumbererComponent,
                    ExtSelectioncolumnComponent,
                    ExtTextcolumnComponent,
                    ExtTreecolumnComponent,
                    ExtGridComponent,
                    ExtHeadercontainerComponent,
                    ExtLockedgridComponent,
                    ExtLockedgridComponent,
                    ExtLockedgridregionComponent,
                    ExtLockedgridregionComponent,
                    ExtGridcolumnsmenuComponent,
                    ExtGridgroupbythismenuitemComponent,
                    ExtGridshowingroupsmenuitemComponent,
                    ExtGridsortascmenuitemComponent,
                    ExtGridsortdescmenuitemComponent,
                    ExtPagingtoolbarComponent,
                    ExtGridrowComponent,
                    ExtRowbodyComponent,
                    ExtRoweditorbarComponent,
                    ExtRoweditorcellComponent,
                    ExtRoweditorComponent,
                    ExtRoweditorgapComponent,
                    ExtRowheaderComponent,
                    ExtGridsummaryrowComponent,
                    ExtTreeComponent,
                    ExtTreeComponent,
                    ExtImageComponent,
                    ExtImgComponent,
                    ExtImageComponent,
                    ExtImgComponent,
                    ExtIndicatorComponent,
                    ExtLabelComponent,
                    ExtTreelistComponent,
                    ExtTreelistitemComponent,
                    ExtLoadmaskComponent,
                    ExtMaskComponent,
                    ExtMediaComponent,
                    ExtMenucheckitemComponent,
                    ExtMenuitemComponent,
                    ExtMenuitemComponent,
                    ExtMenuComponent,
                    ExtMenuradioitemComponent,
                    ExtMenuseparatorComponent,
                    ExtMessageboxComponent,
                    ExtNavigationviewComponent,
                    ExtNavigationviewComponent,
                    ExtPanelComponent,
                    ExtPanelComponent,
                    ExtAccordionComponent,
                    ExtDatepanelComponent,
                    ExtDatetitleComponent,
                    ExtPanelheaderComponent,
                    ExtTimepanelComponent,
                    ExtPaneltitleComponent,
                    ExtYearpickerComponent,
                    ExtDatepickerComponent,
                    ExtDatepickerComponent,
                    ExtPickerComponent,
                    ExtPickerComponent,
                    ExtSelectpickerComponent,
                    ExtPickerslotComponent,
                    ExtTabletpickerComponent,
                    ExtPivotgridcellComponent,
                    ExtPivotgridgroupcellComponent,
                    ExtPivotd3containerComponent,
                    ExtPivotheatmapComponent,
                    ExtPivottreemapComponent,
                    ExtPivotgridComponent,
                    ExtPivotconfigfieldComponent,
                    ExtPivotconfigcontainerComponent,
                    ExtPivotconfigformComponent,
                    ExtPivotconfigpanelComponent,
                    ExtPivotsettingsComponent,
                    ExtPivotrangeeditorComponent,
                    ExtPivotgridrowComponent,
                    ExtProgressComponent,
                    ExtProgressbarwidgetComponent,
                    ExtProgressComponent,
                    ExtProgressbarwidgetComponent,
                    ExtSegmentedbuttonComponent,
                    ExtSegmentedbuttonComponent,
                    ExtSheetComponent,
                    ExtSliderComponent,
                    ExtThumbComponent,
                    ExtTogglesliderComponent,
                    ExtSpacerComponent,
                    ExtSparklinebarComponent,
                    ExtSparklineComponent,
                    ExtSparklineboxComponent,
                    ExtSparklinebulletComponent,
                    ExtSparklinediscreteComponent,
                    ExtSparklinelineComponent,
                    ExtSparklinepieComponent,
                    ExtSparklinetristateComponent,
                    ExtSplitbuttonComponent,
                    ExtTabbarComponent,
                    ExtTabbarComponent,
                    ExtTabpanelComponent,
                    ExtTabpanelComponent,
                    ExtTabComponent,
                    ExtTabComponent,
                    ExtTooltipComponent,
                    ExtTitleComponent,
                    ExtTitlebarComponent,
                    ExtToolComponent,
                    ExtPaneltoolComponent,
                    ExtToolComponent,
                    ExtPaneltoolComponent,
                    ExtToolbarComponent,
                    ExtColorbuttonComponent,
                    ExtColorpickercolorpreviewComponent,
                    ExtColorfieldComponent,
                    ExtColorselectorComponent,
                    ExtGaugeComponent,
                    ExtGaugeComponent,
                    ExtMapComponent,
                    ExtGoogle_mapComponent,
                    ExtMapComponent,
                    ExtGoogle_mapComponent,
                    ExtRatingComponent,
                    ExtVideoComponent,
                    ExtViewportComponent,
                    ExtWidgetComponent,
                    ExtWidgetComponent,
                ],
                providers: [
                    { provide: APP_INITIALIZER, useFactory: extLaunchFactory, deps: [], multi: true }
                ],
                entryComponents: [],
                exports: [
                    ExtActionsheetComponent,
                    ExtAudioComponent,
                    ExtBreadcrumbbarComponent,
                    ExtButtonComponent,
                    ExtCalendar_eventComponent,
                    ExtCalendar_form_addComponent,
                    ExtCalendar_calendar_pickerComponent,
                    ExtCalendar_form_editComponent,
                    ExtCalendar_timefieldComponent,
                    ExtCalendar_daysheaderComponent,
                    ExtCalendar_weeksheaderComponent,
                    ExtCalendar_listComponent,
                    ExtCalendar_dayComponent,
                    ExtCalendar_daysComponent,
                    ExtCalendar_monthComponent,
                    ExtCalendarComponent,
                    ExtCalendar_weekComponent,
                    ExtCalendar_weeksComponent,
                    ExtCalendar_dayviewComponent,
                    ExtCalendar_daysviewComponent,
                    ExtCalendar_monthviewComponent,
                    ExtCalendar_multiviewComponent,
                    ExtCalendar_weekviewComponent,
                    ExtCalendar_weeksviewComponent,
                    ExtCarouselComponent,
                    ExtCarouselComponent,
                    ExtCartesianComponent,
                    ExtChartComponent,
                    ExtCartesianComponent,
                    ExtChartComponent,
                    ExtLegendComponent,
                    ExtLegendComponent,
                    ExtChartnavigatorComponent,
                    ExtPolarComponent,
                    ExtSpacefillingComponent,
                    ExtChipComponent,
                    ExtComponentComponent,
                    ExtComponentComponent,
                    ExtComponentComponent,
                    ExtContainerComponent,
                    ExtContainerComponent,
                    ExtContainerComponent,
                    ExtD3_canvasComponent,
                    ExtD3_heatmapComponent,
                    ExtD3_packComponent,
                    ExtD3_partitionComponent,
                    ExtD3_sunburstComponent,
                    ExtD3_treeComponent,
                    ExtD3_horizontal_treeComponent,
                    ExtD3_treemapComponent,
                    ExtD3_svgComponent,
                    ExtD3Component,
                    ExtBoundlistComponent,
                    ExtChipviewComponent,
                    ExtComponentdataviewComponent,
                    ExtDataitemComponent,
                    ExtDataitemComponent,
                    ExtDataviewComponent,
                    ExtDataviewComponent,
                    ExtEmptytextComponent,
                    ExtIndexbarComponent,
                    ExtIndexbarComponent,
                    ExtItemheaderComponent,
                    ExtListComponent,
                    ExtListComponent,
                    ExtListitemComponent,
                    ExtListitemComponent,
                    ExtListitemplaceholderComponent,
                    ExtListswiperitemComponent,
                    ExtListswiperstepperComponent,
                    ExtNestedlistComponent,
                    ExtNestedlistComponent,
                    ExtPullrefreshbarComponent,
                    ExtPullrefreshspinnerComponent,
                    ExtSimplelistitemComponent,
                    ExtSimplelistitemComponent,
                    ExtDialogComponent,
                    ExtWindowComponent,
                    ExtDialogComponent,
                    ExtWindowComponent,
                    ExtDialogComponent,
                    ExtWindowComponent,
                    ExtDrawComponent,
                    ExtDrawComponent,
                    ExtSurfaceComponent,
                    ExtEditorComponent,
                    ExtCheckboxComponent,
                    ExtCheckboxfieldComponent,
                    ExtCheckboxComponent,
                    ExtCheckboxfieldComponent,
                    ExtCheckboxgroupComponent,
                    ExtComboboxComponent,
                    ExtComboboxfieldComponent,
                    ExtComboboxComponent,
                    ExtComboboxfieldComponent,
                    ExtContainerfieldComponent,
                    ExtFieldcontainerComponent,
                    ExtDatefieldComponent,
                    ExtDatepickerfieldComponent,
                    ExtDatefieldComponent,
                    ExtDatepickerfieldComponent,
                    ExtDatefieldComponent,
                    ExtDatepickerfieldComponent,
                    ExtDatepickernativefieldComponent,
                    ExtDatepickernativefieldComponent,
                    ExtDisplayfieldComponent,
                    ExtDisplayfieldComponent,
                    ExtEmailfieldComponent,
                    ExtEmailfieldComponent,
                    ExtFieldComponent,
                    ExtFieldComponent,
                    ExtGroupcontainerComponent,
                    ExtFilefieldComponent,
                    ExtFilebuttonComponent,
                    ExtHiddenfieldComponent,
                    ExtHiddenfieldComponent,
                    ExtInputfieldComponent,
                    ExtNumberfieldComponent,
                    ExtNumberfieldComponent,
                    ExtFieldpanelComponent,
                    ExtPasswordfieldComponent,
                    ExtPasswordfieldComponent,
                    ExtPickerfieldComponent,
                    ExtRadioComponent,
                    ExtRadiofieldComponent,
                    ExtRadioComponent,
                    ExtRadiofieldComponent,
                    ExtRadiogroupComponent,
                    ExtSearchfieldComponent,
                    ExtSearchfieldComponent,
                    ExtSelectfieldComponent,
                    ExtSelectfieldComponent,
                    ExtSinglesliderfieldComponent,
                    ExtSliderfieldComponent,
                    ExtSliderfieldComponent,
                    ExtSpinnerfieldComponent,
                    ExtSpinnerfieldComponent,
                    ExtTextfieldComponent,
                    ExtTextfieldComponent,
                    ExtTextareafieldComponent,
                    ExtTextareafieldComponent,
                    ExtTimefieldComponent,
                    ExtTogglefieldComponent,
                    ExtTogglefieldComponent,
                    ExtCleartriggerComponent,
                    ExtDatetriggerComponent,
                    ExtExpandtriggerComponent,
                    ExtMenutriggerComponent,
                    ExtRevealtriggerComponent,
                    ExtSpindowntriggerComponent,
                    ExtSpinuptriggerComponent,
                    ExtTimetriggerComponent,
                    ExtTriggerComponent,
                    ExtUrlfieldComponent,
                    ExtUrlfieldComponent,
                    ExtFieldsetComponent,
                    ExtFormpanelComponent,
                    ExtFormpanelComponent,
                    ExtFroalaeditorComponent,
                    ExtFroalaeditorfieldComponent,
                    ExtGridcellbaseComponent,
                    ExtBooleancellComponent,
                    ExtGridcellComponent,
                    ExtCheckcellComponent,
                    ExtDatecellComponent,
                    ExtNumbercellComponent,
                    ExtRownumberercellComponent,
                    ExtTextcellComponent,
                    ExtTreecellComponent,
                    ExtWidgetcellComponent,
                    ExtCelleditorComponent,
                    ExtBooleancolumnComponent,
                    ExtCheckcolumnComponent,
                    ExtGridcolumnComponent,
                    ExtColumnComponent,
                    ExtTemplatecolumnComponent,
                    ExtGridcolumnComponent,
                    ExtColumnComponent,
                    ExtTemplatecolumnComponent,
                    ExtDatecolumnComponent,
                    ExtDragcolumnComponent,
                    ExtNumbercolumnComponent,
                    ExtRownumbererComponent,
                    ExtSelectioncolumnComponent,
                    ExtTextcolumnComponent,
                    ExtTreecolumnComponent,
                    ExtGridComponent,
                    ExtHeadercontainerComponent,
                    ExtLockedgridComponent,
                    ExtLockedgridComponent,
                    ExtLockedgridregionComponent,
                    ExtLockedgridregionComponent,
                    ExtGridcolumnsmenuComponent,
                    ExtGridgroupbythismenuitemComponent,
                    ExtGridshowingroupsmenuitemComponent,
                    ExtGridsortascmenuitemComponent,
                    ExtGridsortdescmenuitemComponent,
                    ExtPagingtoolbarComponent,
                    ExtGridrowComponent,
                    ExtRowbodyComponent,
                    ExtRoweditorbarComponent,
                    ExtRoweditorcellComponent,
                    ExtRoweditorComponent,
                    ExtRoweditorgapComponent,
                    ExtRowheaderComponent,
                    ExtGridsummaryrowComponent,
                    ExtTreeComponent,
                    ExtTreeComponent,
                    ExtImageComponent,
                    ExtImgComponent,
                    ExtImageComponent,
                    ExtImgComponent,
                    ExtIndicatorComponent,
                    ExtLabelComponent,
                    ExtTreelistComponent,
                    ExtTreelistitemComponent,
                    ExtLoadmaskComponent,
                    ExtMaskComponent,
                    ExtMediaComponent,
                    ExtMenucheckitemComponent,
                    ExtMenuitemComponent,
                    ExtMenuitemComponent,
                    ExtMenuComponent,
                    ExtMenuradioitemComponent,
                    ExtMenuseparatorComponent,
                    ExtMessageboxComponent,
                    ExtNavigationviewComponent,
                    ExtNavigationviewComponent,
                    ExtPanelComponent,
                    ExtPanelComponent,
                    ExtAccordionComponent,
                    ExtDatepanelComponent,
                    ExtDatetitleComponent,
                    ExtPanelheaderComponent,
                    ExtTimepanelComponent,
                    ExtPaneltitleComponent,
                    ExtYearpickerComponent,
                    ExtDatepickerComponent,
                    ExtDatepickerComponent,
                    ExtPickerComponent,
                    ExtPickerComponent,
                    ExtSelectpickerComponent,
                    ExtPickerslotComponent,
                    ExtTabletpickerComponent,
                    ExtPivotgridcellComponent,
                    ExtPivotgridgroupcellComponent,
                    ExtPivotd3containerComponent,
                    ExtPivotheatmapComponent,
                    ExtPivottreemapComponent,
                    ExtPivotgridComponent,
                    ExtPivotconfigfieldComponent,
                    ExtPivotconfigcontainerComponent,
                    ExtPivotconfigformComponent,
                    ExtPivotconfigpanelComponent,
                    ExtPivotsettingsComponent,
                    ExtPivotrangeeditorComponent,
                    ExtPivotgridrowComponent,
                    ExtProgressComponent,
                    ExtProgressbarwidgetComponent,
                    ExtProgressComponent,
                    ExtProgressbarwidgetComponent,
                    ExtSegmentedbuttonComponent,
                    ExtSegmentedbuttonComponent,
                    ExtSheetComponent,
                    ExtSliderComponent,
                    ExtThumbComponent,
                    ExtTogglesliderComponent,
                    ExtSpacerComponent,
                    ExtSparklinebarComponent,
                    ExtSparklineComponent,
                    ExtSparklineboxComponent,
                    ExtSparklinebulletComponent,
                    ExtSparklinediscreteComponent,
                    ExtSparklinelineComponent,
                    ExtSparklinepieComponent,
                    ExtSparklinetristateComponent,
                    ExtSplitbuttonComponent,
                    ExtTabbarComponent,
                    ExtTabbarComponent,
                    ExtTabpanelComponent,
                    ExtTabpanelComponent,
                    ExtTabComponent,
                    ExtTabComponent,
                    ExtTooltipComponent,
                    ExtTitleComponent,
                    ExtTitlebarComponent,
                    ExtToolComponent,
                    ExtPaneltoolComponent,
                    ExtToolComponent,
                    ExtPaneltoolComponent,
                    ExtToolbarComponent,
                    ExtColorbuttonComponent,
                    ExtColorpickercolorpreviewComponent,
                    ExtColorfieldComponent,
                    ExtColorselectorComponent,
                    ExtGaugeComponent,
                    ExtGaugeComponent,
                    ExtMapComponent,
                    ExtGoogle_mapComponent,
                    ExtMapComponent,
                    ExtGoogle_mapComponent,
                    ExtRatingComponent,
                    ExtVideoComponent,
                    ExtViewportComponent,
                    ExtWidgetComponent,
                    ExtWidgetComponent,
                ]
            }]
    }], function () { return []; }, null); })();
    return ExtAngularModernModule;
}());

/*
 * Public API Surface of ext-angular
 */

/**
 * Generated bundle index. Do not edit.
 */

export { ExtAngularModernModule, extLaunchFactory, ExtActionsheetComponent as ɵa, EngBase as ɵb, ExtCartesianComponent as ɵba, ExtChartComponent as ɵbb, ExtLegendComponent as ɵbc, ExtChartnavigatorComponent as ɵbd, ExtPolarComponent as ɵbe, ExtSpacefillingComponent as ɵbf, ExtChipComponent as ɵbg, ExtComponentComponent as ɵbh, ExtContainerComponent as ɵbi, ExtD3_canvasComponent as ɵbj, ExtD3_heatmapComponent as ɵbk, ExtD3_packComponent as ɵbl, ExtD3_partitionComponent as ɵbm, ExtD3_sunburstComponent as ɵbn, ExtD3_treeComponent as ɵbo, ExtD3_horizontal_treeComponent as ɵbp, ExtD3_treemapComponent as ɵbq, ExtD3_svgComponent as ɵbr, ExtD3Component as ɵbs, ExtBoundlistComponent as ɵbt, ExtChipviewComponent as ɵbu, ExtComponentdataviewComponent as ɵbv, ExtDataitemComponent as ɵbw, ExtDataviewComponent as ɵbx, ExtEmptytextComponent as ɵby, ExtIndexbarComponent as ɵbz, ExtAudioComponent as ɵc, ExtItemheaderComponent as ɵca, ExtListComponent as ɵcb, ExtListitemComponent as ɵcc, ExtListitemplaceholderComponent as ɵcd, ExtListswiperitemComponent as ɵce, ExtListswiperstepperComponent as ɵcf, ExtNestedlistComponent as ɵcg, ExtPullrefreshbarComponent as ɵch, ExtPullrefreshspinnerComponent as ɵci, ExtSimplelistitemComponent as ɵcj, ExtDialogComponent as ɵck, ExtWindowComponent as ɵcl, ExtDrawComponent as ɵcm, ExtSurfaceComponent as ɵcn, ExtEditorComponent as ɵco, ExtCheckboxComponent as ɵcp, ExtCheckboxfieldComponent as ɵcq, ExtCheckboxgroupComponent as ɵcr, ExtComboboxComponent as ɵcs, ExtComboboxfieldComponent as ɵct, ExtContainerfieldComponent as ɵcu, ExtFieldcontainerComponent as ɵcv, ExtDatefieldComponent as ɵcw, ExtDatepickerfieldComponent as ɵcx, ExtDatepickernativefieldComponent as ɵcy, ExtDisplayfieldComponent as ɵcz, ExtBreadcrumbbarComponent as ɵd, ExtEmailfieldComponent as ɵda, ExtFieldComponent as ɵdb, ExtGroupcontainerComponent as ɵdc, ExtFilefieldComponent as ɵdd, ExtFilebuttonComponent as ɵde, ExtHiddenfieldComponent as ɵdf, ExtInputfieldComponent as ɵdg, ExtNumberfieldComponent as ɵdh, ExtFieldpanelComponent as ɵdi, ExtPasswordfieldComponent as ɵdj, ExtPickerfieldComponent as ɵdk, ExtRadioComponent as ɵdl, ExtRadiofieldComponent as ɵdm, ExtRadiogroupComponent as ɵdn, ExtSearchfieldComponent as ɵdo, ExtSelectfieldComponent as ɵdp, ExtSinglesliderfieldComponent as ɵdq, ExtSliderfieldComponent as ɵdr, ExtSpinnerfieldComponent as ɵds, ExtTextfieldComponent as ɵdt, ExtTextareafieldComponent as ɵdu, ExtTimefieldComponent as ɵdv, ExtTogglefieldComponent as ɵdw, ExtCleartriggerComponent as ɵdx, ExtDatetriggerComponent as ɵdy, ExtExpandtriggerComponent as ɵdz, ExtButtonComponent as ɵe, ExtMenutriggerComponent as ɵea, ExtRevealtriggerComponent as ɵeb, ExtSpindowntriggerComponent as ɵec, ExtSpinuptriggerComponent as ɵed, ExtTimetriggerComponent as ɵee, ExtTriggerComponent as ɵef, ExtUrlfieldComponent as ɵeg, ExtFieldsetComponent as ɵeh, ExtFormpanelComponent as ɵei, ExtFroalaeditorComponent as ɵej, ExtFroalaeditorfieldComponent as ɵek, ExtGridcellbaseComponent as ɵel, ExtBooleancellComponent as ɵem, ExtGridcellComponent as ɵen, ExtCheckcellComponent as ɵeo, ExtDatecellComponent as ɵep, ExtNumbercellComponent as ɵeq, ExtRownumberercellComponent as ɵer, ExtTextcellComponent as ɵes, ExtTreecellComponent as ɵet, ExtWidgetcellComponent as ɵeu, ExtCelleditorComponent as ɵev, ExtBooleancolumnComponent as ɵew, ExtCheckcolumnComponent as ɵex, ExtGridcolumnComponent as ɵey, ExtColumnComponent as ɵez, ExtCalendar_eventComponent as ɵf, ExtTemplatecolumnComponent as ɵfa, ExtDatecolumnComponent as ɵfb, ExtDragcolumnComponent as ɵfc, ExtNumbercolumnComponent as ɵfd, ExtRownumbererComponent as ɵfe, ExtSelectioncolumnComponent as ɵff, ExtTextcolumnComponent as ɵfg, ExtTreecolumnComponent as ɵfh, ExtGridComponent as ɵfi, ExtHeadercontainerComponent as ɵfj, ExtLockedgridComponent as ɵfk, ExtLockedgridregionComponent as ɵfl, ExtGridcolumnsmenuComponent as ɵfm, ExtGridgroupbythismenuitemComponent as ɵfn, ExtGridshowingroupsmenuitemComponent as ɵfo, ExtGridsortascmenuitemComponent as ɵfp, ExtGridsortdescmenuitemComponent as ɵfq, ExtPagingtoolbarComponent as ɵfr, ExtGridrowComponent as ɵfs, ExtRowbodyComponent as ɵft, ExtRoweditorbarComponent as ɵfu, ExtRoweditorcellComponent as ɵfv, ExtRoweditorComponent as ɵfw, ExtRoweditorgapComponent as ɵfx, ExtRowheaderComponent as ɵfy, ExtGridsummaryrowComponent as ɵfz, ExtCalendar_form_addComponent as ɵg, ExtTreeComponent as ɵga, ExtImageComponent as ɵgb, ExtImgComponent as ɵgc, ExtIndicatorComponent as ɵgd, ExtLabelComponent as ɵge, ExtTreelistComponent as ɵgf, ExtTreelistitemComponent as ɵgg, ExtLoadmaskComponent as ɵgh, ExtMaskComponent as ɵgi, ExtMediaComponent as ɵgj, ExtMenucheckitemComponent as ɵgk, ExtMenuitemComponent as ɵgl, ExtMenuComponent as ɵgm, ExtMenuradioitemComponent as ɵgn, ExtMenuseparatorComponent as ɵgo, ExtMessageboxComponent as ɵgp, ExtNavigationviewComponent as ɵgq, ExtPanelComponent as ɵgr, ExtAccordionComponent as ɵgs, ExtDatepanelComponent as ɵgt, ExtDatetitleComponent as ɵgu, ExtPanelheaderComponent as ɵgv, ExtTimepanelComponent as ɵgw, ExtPaneltitleComponent as ɵgx, ExtYearpickerComponent as ɵgy, ExtDatepickerComponent as ɵgz, ExtCalendar_calendar_pickerComponent as ɵh, ExtPickerComponent as ɵha, ExtSelectpickerComponent as ɵhb, ExtPickerslotComponent as ɵhc, ExtTabletpickerComponent as ɵhd, ExtPivotgridcellComponent as ɵhe, ExtPivotgridgroupcellComponent as ɵhf, ExtPivotd3containerComponent as ɵhg, ExtPivotheatmapComponent as ɵhh, ExtPivottreemapComponent as ɵhi, ExtPivotgridComponent as ɵhj, ExtPivotconfigfieldComponent as ɵhk, ExtPivotconfigcontainerComponent as ɵhl, ExtPivotconfigformComponent as ɵhm, ExtPivotconfigpanelComponent as ɵhn, ExtPivotsettingsComponent as ɵho, ExtPivotrangeeditorComponent as ɵhp, ExtPivotgridrowComponent as ɵhq, ExtProgressComponent as ɵhr, ExtProgressbarwidgetComponent as ɵhs, ExtSegmentedbuttonComponent as ɵht, ExtSheetComponent as ɵhu, ExtSliderComponent as ɵhv, ExtThumbComponent as ɵhw, ExtTogglesliderComponent as ɵhx, ExtSpacerComponent as ɵhy, ExtSparklinebarComponent as ɵhz, ExtCalendar_form_editComponent as ɵi, ExtSparklineComponent as ɵia, ExtSparklineboxComponent as ɵib, ExtSparklinebulletComponent as ɵic, ExtSparklinediscreteComponent as ɵid, ExtSparklinelineComponent as ɵie, ExtSparklinepieComponent as ɵif, ExtSparklinetristateComponent as ɵig, ExtSplitbuttonComponent as ɵih, ExtTabbarComponent as ɵii, ExtTabpanelComponent as ɵij, ExtTabComponent as ɵik, ExtTooltipComponent as ɵil, ExtTitleComponent as ɵim, ExtTitlebarComponent as ɵin, ExtToolComponent as ɵio, ExtPaneltoolComponent as ɵip, ExtToolbarComponent as ɵiq, ExtColorbuttonComponent as ɵir, ExtColorpickercolorpreviewComponent as ɵis, ExtColorfieldComponent as ɵit, ExtColorselectorComponent as ɵiu, ExtGaugeComponent as ɵiv, ExtMapComponent as ɵiw, ExtGoogle_mapComponent as ɵix, ExtRatingComponent as ɵiy, ExtVideoComponent as ɵiz, ExtCalendar_timefieldComponent as ɵj, ExtViewportComponent as ɵja, ExtWidgetComponent as ɵjb, ExtCalendar_daysheaderComponent as ɵk, ExtCalendar_weeksheaderComponent as ɵl, ExtCalendar_listComponent as ɵm, ExtCalendar_dayComponent as ɵn, ExtCalendar_daysComponent as ɵo, ExtCalendar_monthComponent as ɵp, ExtCalendarComponent as ɵq, ExtCalendar_weekComponent as ɵr, ExtCalendar_weeksComponent as ɵs, ExtCalendar_dayviewComponent as ɵt, ExtCalendar_daysviewComponent as ɵu, ExtCalendar_monthviewComponent as ɵv, ExtCalendar_multiviewComponent as ɵw, ExtCalendar_weekviewComponent as ɵx, ExtCalendar_weeksviewComponent as ɵy, ExtCarouselComponent as ɵz };

//# sourceMappingURL=sencha-ext-angular-modern.js.map