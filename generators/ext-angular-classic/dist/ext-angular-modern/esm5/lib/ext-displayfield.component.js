/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef } from '@angular/core';
import { base } from './base';
var displayfieldMetaData = /** @class */ (function () {
    function displayfieldMetaData() {
    }
    displayfieldMetaData.XTYPE = 'displayfield';
    displayfieldMetaData.PROPERTIESOBJECT = {
        "activeCounter": "Number",
        "activeError": "String",
        "activeErrorsTpl": "String/String[]/Ext.XTemplate",
        "afterBodyEl": "String/Array/Ext.XTemplate",
        "afterLabelTextTpl": "String/Array/Ext.XTemplate",
        "afterLabelTpl": "String/Array/Ext.XTemplate",
        "afterSubTpl": "String/Array/Ext.XTemplate",
        "alignOnScroll": "Boolean",
        "alignTarget": "String",
        "alwaysOnTop": "Boolean/Number",
        "anchor": "String",
        "animateShadow": "Boolean",
        "ariaAttributes": "Object",
        "ariaDescribedBy": "String",
        "ariaErrorText": "String",
        "ariaHelp": "String",
        "ariaLabel": "String",
        "ariaLabelledBy": "String",
        "autoEl": "String/Object",
        "autoFitErrors": "Boolean",
        "autoRender": "Boolean/String/HTMLElement/Ext.dom.Element",
        "autoScroll": "Boolean",
        "autoShow": "Boolean",
        "baseBodyCls": "String",
        "baseCls": "String",
        "beforeBodyEl": "String/Array/Ext.XTemplate",
        "beforeLabelTextTpl": "String/Array/Ext.XTemplate",
        "beforeLabelTpl": "String/Array/Ext.XTemplate",
        "beforeSubTpl": "String/Array/Ext.XTemplate",
        "bind": "Object/String",
        "border": "Number/String/Boolean",
        "checkChangeBuffer": "Number",
        "checkChangeEvents": "Number",
        "childEls": "Object/String[]/Object[]",
        "cls": "String/String[]",
        "columnWidth": "Number",
        "componentCls": "String",
        "componentLayout": "String/Object",
        "constrain": "Boolean",
        "constraintInsets": "Object/String",
        "constrainTo": "Ext.util.Region/Ext.dom.Element",
        "contentEl": "String",
        "controller": "String/Object/Ext.app.ViewController",
        "data": "Object",
        "defaultAlign": "String",
        "defaultListenerScope": "Boolean",
        "dirtyCls": "String",
        "disabled": "Boolean",
        "disabledCls": "String",
        "dock": "'top'/'bottom'/'left'/'right'",
        "draggable": "Boolean/Object",
        "errorMsgCls": "String",
        "fieldBodyCls": "String",
        "fieldCls": "String",
        "fieldLabel": "String",
        "fieldStyle": "String",
        "fieldSubTpl": "Ext.XTemplate",
        "fixed": "Boolean",
        "flex": "Number",
        "floating": "Boolean",
        "focusCls": "String",
        "focusOnToFront": "Boolean",
        "formatText": "String",
        "formBind": "Boolean",
        "formItemCls": "String",
        "frame": "Boolean",
        "height": "Number|String",
        "hidden": "Boolean",
        "hideEmptyLabel": "Boolean",
        "hideLabel": "Boolean",
        "hideMode": "String",
        "html": "String/Object",
        "htmlEncode": "Boolean",
        "id": "String",
        "inputAttrTpl": "String/Array/Ext.XTemplate",
        "inputId": "String",
        "inputType": "String",
        "invalidCls": "String",
        "invalidText": "String",
        "isTextInput": "Boolean",
        "itemId": "String",
        "keyMap": "Object",
        "keyMapEnabled": "Boolean",
        "keyMapTarget": "String",
        "labelableRenderTpl": "String/String[]/Ext.XTemplate",
        "labelAlign": "String",
        "labelAttrTpl": "String/Array/Ext.XTemplate",
        "labelCls": "String",
        "labelClsExtra": "String",
        "labelPad": "Number",
        "labelSeparator": "String",
        "labelStyle": "String",
        "labelWidth": "Number",
        "liquidLayout": "Boolean",
        "listeners": "Object",
        "liveDrag": "Boolean",
        "loader": "Ext.ComponentLoader/Object",
        "margin": "Number/String",
        "maskDefaults": "Object",
        "maskElement": "String",
        "maxHeight": "Number",
        "maxWidth": "Number",
        "minHeight": "Number",
        "minWidth": "Number",
        "modal": "Boolean",
        "modelValidation": "Boolean",
        "msgTarget": "String",
        "name": "String",
        "nameable": "Boolean",
        "overCls": "String",
        "overflowX": "String",
        "overflowY": "String",
        "padding": "Number/String",
        "plugins": "Array/Ext.enums.Plugin/Object/Ext.plugin.Abstract",
        "preventMark": "Boolean",
        "publishes": "String/String[]/Object",
        "readOnly": "Boolean",
        "readOnlyCls": "String",
        "reference": "String",
        "region": "'north'/'south'/'east'/'west'/'center'",
        "renderConfig": "Object",
        "renderData": "Object",
        "renderer": "Function/String",
        "renderSelectors": "Object",
        "renderTo": "String/HTMLElement/Ext.dom.Element",
        "renderTpl": "Ext.XTemplate/String/String[]",
        "resizable": "Boolean/Object",
        "resizeHandles": "String",
        "saveDelay": "Number",
        "scope": "Object",
        "scrollable": "Boolean/String/Object",
        "session": "Boolean/Object/Ext.data.Session",
        "shadow": "String/Boolean",
        "shadowOffset": "Number",
        "shareableName": "Boolean",
        "shim": "Boolean",
        "shrinkWrap": "Boolean/Number",
        "stateEvents": "String[]",
        "stateful": "Boolean/Object",
        "stateId": "String",
        "style": "String/Object",
        "submitValue": "Boolean",
        "tabIndex": "Number",
        "toFrontOnShow": "Boolean",
        "touchAction": "Object",
        "tpl": "Ext.XTemplate/Ext.Template/String/String[]",
        "tplWriteMode": "String",
        "twoWayBindable": "String/String[]/Object",
        "ui": "String",
        "uiCls": "String[]",
        "userCls": "String/String[]",
        "validateOnBlur": "Boolean",
        "validateOnChange": "Boolean",
        "validateOnFocusLeave": "Boolean",
        "validation": "Boolean/String",
        "validationField": "Ext.data.Field",
        "value": "Object",
        "valuePublishEvent": "String[]/String",
        "viewModel": "String/Object/Ext.app.ViewModel",
        "weight": "Number",
        "width": "Number|String",
        "xtype": "Ext.enums.Widget",
        "platformConfig": "Object",
        "fitToParent": "Boolean",
        "config": "Object",
    };
    displayfieldMetaData.PROPERTIES = [
        'activeCounter',
        'activeError',
        'activeErrorsTpl',
        'afterBodyEl',
        'afterLabelTextTpl',
        'afterLabelTpl',
        'afterSubTpl',
        'alignOnScroll',
        'alignTarget',
        'alwaysOnTop',
        'anchor',
        'animateShadow',
        'ariaAttributes',
        'ariaDescribedBy',
        'ariaErrorText',
        'ariaHelp',
        'ariaLabel',
        'ariaLabelledBy',
        'autoEl',
        'autoFitErrors',
        'autoRender',
        'autoScroll',
        'autoShow',
        'baseBodyCls',
        'baseCls',
        'beforeBodyEl',
        'beforeLabelTextTpl',
        'beforeLabelTpl',
        'beforeSubTpl',
        'bind',
        'border',
        'checkChangeBuffer',
        'checkChangeEvents',
        'childEls',
        'cls',
        'columnWidth',
        'componentCls',
        'componentLayout',
        'constrain',
        'constraintInsets',
        'constrainTo',
        'contentEl',
        'controller',
        'data',
        'defaultAlign',
        'defaultListenerScope',
        'dirtyCls',
        'disabled',
        'disabledCls',
        'dock',
        'draggable',
        'errorMsgCls',
        'fieldBodyCls',
        'fieldCls',
        'fieldLabel',
        'fieldStyle',
        'fieldSubTpl',
        'fixed',
        'flex',
        'floating',
        'focusCls',
        'focusOnToFront',
        'formatText',
        'formBind',
        'formItemCls',
        'frame',
        'height',
        'hidden',
        'hideEmptyLabel',
        'hideLabel',
        'hideMode',
        'html',
        'htmlEncode',
        'id',
        'inputAttrTpl',
        'inputId',
        'inputType',
        'invalidCls',
        'invalidText',
        'isTextInput',
        'itemId',
        'keyMap',
        'keyMapEnabled',
        'keyMapTarget',
        'labelableRenderTpl',
        'labelAlign',
        'labelAttrTpl',
        'labelCls',
        'labelClsExtra',
        'labelPad',
        'labelSeparator',
        'labelStyle',
        'labelWidth',
        'liquidLayout',
        'listeners',
        'liveDrag',
        'loader',
        'margin',
        'maskDefaults',
        'maskElement',
        'maxHeight',
        'maxWidth',
        'minHeight',
        'minWidth',
        'modal',
        'modelValidation',
        'msgTarget',
        'name',
        'nameable',
        'overCls',
        'overflowX',
        'overflowY',
        'padding',
        'plugins',
        'preventMark',
        'publishes',
        'readOnly',
        'readOnlyCls',
        'reference',
        'region',
        'renderConfig',
        'renderData',
        'renderer',
        'renderSelectors',
        'renderTo',
        'renderTpl',
        'resizable',
        'resizeHandles',
        'saveDelay',
        'scope',
        'scrollable',
        'session',
        'shadow',
        'shadowOffset',
        'shareableName',
        'shim',
        'shrinkWrap',
        'stateEvents',
        'stateful',
        'stateId',
        'style',
        'submitValue',
        'tabIndex',
        'toFrontOnShow',
        'touchAction',
        'tpl',
        'tplWriteMode',
        'twoWayBindable',
        'ui',
        'uiCls',
        'userCls',
        'validateOnBlur',
        'validateOnChange',
        'validateOnFocusLeave',
        'validation',
        'validationField',
        'value',
        'valuePublishEvent',
        'viewModel',
        'weight',
        'width',
        'xtype',
        'platformConfig',
        'fitToParent',
        'config'
    ];
    displayfieldMetaData.EVENTS = [
        { name: 'activate', parameters: 'displayfield' },
        { name: 'added', parameters: 'displayfield,container,pos' },
        { name: 'afterlayoutanimation', parameters: 'displayfield' },
        { name: 'afterrender', parameters: 'displayfield' },
        { name: 'beforeactivate', parameters: 'displayfield' },
        { name: 'beforedeactivate', parameters: 'displayfield' },
        { name: 'beforedestroy', parameters: 'displayfield' },
        { name: 'beforehide', parameters: 'displayfield' },
        { name: 'beforerender', parameters: 'displayfield' },
        { name: 'beforeshow', parameters: 'displayfield' },
        { name: 'beforestaterestore', parameters: 'displayfield,state' },
        { name: 'beforestatesave', parameters: 'displayfield,state' },
        { name: 'blur', parameters: 'displayfield,event' },
        { name: 'boxready', parameters: 'displayfield,width,height' },
        { name: 'change', parameters: 'displayfield,newValue,oldValue' },
        { name: 'deactivate', parameters: 'displayfield' },
        { name: 'destroy', parameters: 'displayfield' },
        { name: 'dirtychange', parameters: 'displayfield,isDirty' },
        { name: 'disable', parameters: 'displayfield' },
        { name: 'enable', parameters: 'displayfield' },
        { name: 'errorchange', parameters: 'displayfield,error' },
        { name: 'focus', parameters: 'displayfield,event' },
        { name: 'focusenter', parameters: 'displayfield,event' },
        { name: 'focusleave', parameters: 'displayfield,event' },
        { name: 'hide', parameters: 'displayfield' },
        { name: 'move', parameters: 'displayfield,x,y' },
        { name: 'removed', parameters: 'displayfield,ownerCt' },
        { name: 'render', parameters: 'displayfield' },
        { name: 'resize', parameters: 'displayfield,width,height,oldWidth,oldHeight' },
        { name: 'show', parameters: 'displayfield' },
        { name: 'specialkey', parameters: 'displayfield,e' },
        { name: 'staterestore', parameters: 'displayfield,state' },
        { name: 'statesave', parameters: 'displayfield,state' },
        { name: 'validitychange', parameters: 'displayfield,isValid' },
        { name: 'writeablechange', parameters: 'displayfield,Read' },
        { name: 'ready', parameters: '' }
    ];
    displayfieldMetaData.EVENTNAMES = [
        'activate',
        'added',
        'afterlayoutanimation',
        'afterrender',
        'beforeactivate',
        'beforedeactivate',
        'beforedestroy',
        'beforehide',
        'beforerender',
        'beforeshow',
        'beforestaterestore',
        'beforestatesave',
        'blur',
        'boxready',
        'change',
        'deactivate',
        'destroy',
        'dirtychange',
        'disable',
        'enable',
        'errorchange',
        'focus',
        'focusenter',
        'focusleave',
        'hide',
        'move',
        'removed',
        'render',
        'resize',
        'show',
        'specialkey',
        'staterestore',
        'statesave',
        'validitychange',
        'writeablechange',
        'ready'
    ];
    return displayfieldMetaData;
}());
export { displayfieldMetaData };
if (false) {
    /** @type {?} */
    displayfieldMetaData.XTYPE;
    /** @type {?} */
    displayfieldMetaData.PROPERTIESOBJECT;
    /** @type {?} */
    displayfieldMetaData.PROPERTIES;
    /** @type {?} */
    displayfieldMetaData.EVENTS;
    /** @type {?} */
    displayfieldMetaData.EVENTNAMES;
}
var ExtDisplayfieldComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ExtDisplayfieldComponent, _super);
    function ExtDisplayfieldComponent(eRef) {
        return _super.call(this, eRef, displayfieldMetaData) || this;
    }
    /**
     * @return {?}
     */
    ExtDisplayfieldComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { this.baseOnInit(displayfieldMetaData); };
    //public ngOnChanges(changes: SimpleChanges) {this.baseOnChanges(changes)}
    //public ngOnChanges(changes: SimpleChanges) {this.baseOnChanges(changes)}
    /**
     * @return {?}
     */
    ExtDisplayfieldComponent.prototype.ngAfterContentInit = 
    //public ngOnChanges(changes: SimpleChanges) {this.baseOnChanges(changes)}
    /**
     * @return {?}
     */
    function () {
        this.baseAfterContentInit();
        this['ready'].emit(this);
    };
    ExtDisplayfieldComponent.decorators = [
        { type: Component, args: [{
                    selector: 'displayfield',
                    inputs: displayfieldMetaData.PROPERTIES,
                    outputs: displayfieldMetaData.EVENTNAMES,
                    providers: [{ provide: base, useExisting: forwardRef(function () { return ExtDisplayfieldComponent; }) }],
                    template: '<ng-template #dynamic></ng-template>'
                }] }
    ];
    /** @nocollapse */
    ExtDisplayfieldComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ExtDisplayfieldComponent;
}(base));
export { ExtDisplayfieldComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXh0LWRpc3BsYXlmaWVsZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac2VuY2hhL2V4dC1hbmd1bGFyLW1vZGVybi8iLCJzb3VyY2VzIjpbImxpYi9leHQtZGlzcGxheWZpZWxkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFLTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFVBQVUsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQzlCO0lBQUE7SUE0WkEsQ0FBQztJQTNaZSwwQkFBSyxHQUFXLGNBQWMsQ0FBQztJQUMvQixxQ0FBZ0IsR0FBUTtRQUNwQyxlQUFlLEVBQUUsUUFBUTtRQUN6QixhQUFhLEVBQUUsUUFBUTtRQUN2QixpQkFBaUIsRUFBRSwrQkFBK0I7UUFDbEQsYUFBYSxFQUFFLDRCQUE0QjtRQUMzQyxtQkFBbUIsRUFBRSw0QkFBNEI7UUFDakQsZUFBZSxFQUFFLDRCQUE0QjtRQUM3QyxhQUFhLEVBQUUsNEJBQTRCO1FBQzNDLGVBQWUsRUFBRSxTQUFTO1FBQzFCLGFBQWEsRUFBRSxRQUFRO1FBQ3ZCLGFBQWEsRUFBRSxnQkFBZ0I7UUFDL0IsUUFBUSxFQUFFLFFBQVE7UUFDbEIsZUFBZSxFQUFFLFNBQVM7UUFDMUIsZ0JBQWdCLEVBQUUsUUFBUTtRQUMxQixpQkFBaUIsRUFBRSxRQUFRO1FBQzNCLGVBQWUsRUFBRSxRQUFRO1FBQ3pCLFVBQVUsRUFBRSxRQUFRO1FBQ3BCLFdBQVcsRUFBRSxRQUFRO1FBQ3JCLGdCQUFnQixFQUFFLFFBQVE7UUFDMUIsUUFBUSxFQUFFLGVBQWU7UUFDekIsZUFBZSxFQUFFLFNBQVM7UUFDMUIsWUFBWSxFQUFFLDRDQUE0QztRQUMxRCxZQUFZLEVBQUUsU0FBUztRQUN2QixVQUFVLEVBQUUsU0FBUztRQUNyQixhQUFhLEVBQUUsUUFBUTtRQUN2QixTQUFTLEVBQUUsUUFBUTtRQUNuQixj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Q0EsZ0NBc0tBOztJQUNBLDRCQXFDQTs7SUFDQSxnQ0FxQ0E7O0FBRUY7SUFPOEMsb0RBQUk7SUFDaEQsa0NBQVksSUFBZTtlQUFHLGtCQUFNLElBQUksRUFBQyxvQkFBb0IsQ0FBQztJQUFBLENBQUM7Ozs7SUFDeEQsMkNBQVE7OztJQUFmLGNBQW1CLElBQUksQ0FBQyxVQUFVLENBQUMsb0JBQW9CLENBQUMsQ0FBQSxDQUFBLENBQUM7SUFDekQsMEVBQTBFOzs7OztJQUNuRSxxREFBa0I7Ozs7O0lBQXpCO1FBQ0UsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUE7UUFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN4QixDQUFDOztnQkFkSixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLE1BQU0sRUFBRSxvQkFBb0IsQ0FBQyxVQUFVO29CQUN2QyxPQUFPLEVBQUUsb0JBQW9CLENBQUMsVUFBVTtvQkFDeEMsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsY0FBTSxPQUFBLHdCQUF3QixFQUF4QixDQUF3QixDQUFDLEVBQUMsQ0FBQztvQkFDckYsUUFBUSxFQUFFLHNDQUFzQztpQkFDakQ7Ozs7Z0JBdmFDLFVBQVU7O0lBZ2JaLCtCQUFDO0NBQUEsQUFmRCxDQU84QyxJQUFJLEdBUWpEO1NBUlksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgT3V0cHV0LFxuICBPbkluaXQsXG4gIEFmdGVyQ29udGVudEluaXQsXG4gIE9uQ2hhbmdlcyxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBmb3J3YXJkUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgYmFzZSB9IGZyb20gJy4vYmFzZSc7XG5leHBvcnQgY2xhc3MgZGlzcGxheWZpZWxkTWV0YURhdGEge1xuICBwdWJsaWMgc3RhdGljIFhUWVBFOiBzdHJpbmcgPSAnZGlzcGxheWZpZWxkJztcbiAgcHVibGljIHN0YXRpYyBQUk9QRVJUSUVTT0JKRUNUOiBhbnkgPSB7XG4gICAgXCJhY3RpdmVDb3VudGVyXCI6IFwiTnVtYmVyXCIsXG4gICAgXCJhY3RpdmVFcnJvclwiOiBcIlN0cmluZ1wiLFxuICAgIFwiYWN0aXZlRXJyb3JzVHBsXCI6IFwiU3RyaW5nL1N0cmluZ1tdL0V4dC5YVGVtcGxhdGVcIixcbiAgICBcImFmdGVyQm9keUVsXCI6IFwiU3RyaW5nL0FycmF5L0V4dC5YVGVtcGxhdGVcIixcbiAgICBcImFmdGVyTGFiZWxUZXh0VHBsXCI6IFwiU3RyaW5nL0FycmF5L0V4dC5YVGVtcGxhdGVcIixcbiAgICBcImFmdGVyTGFiZWxUcGxcIjogXCJTdHJpbmcvQXJyYXkvRXh0LlhUZW1wbGF0ZVwiLFxuICAgIFwiYWZ0ZXJTdWJUcGxcIjogXCJTdHJpbmcvQXJyYXkvRXh0LlhUZW1wbGF0ZVwiLFxuICAgIFwiYWxpZ25PblNjcm9sbFwiOiBcIkJvb2xlYW5cIixcbiAgICBcImFsaWduVGFyZ2V0XCI6IFwiU3RyaW5nXCIsXG4gICAgXCJhbHdheXNPblRvcFwiOiBcIkJvb2xlYW4vTnVtYmVyXCIsXG4gICAgXCJhbmNob3JcIjogXCJTdHJpbmdcIixcbiAgICBcImFuaW1hdGVTaGFkb3dcIjogXCJCb29sZWFuXCIsXG4gICAgXCJhcmlhQXR0cmlidXRlc1wiOiBcIk9iamVjdFwiLFxuICAgIFwiYXJpYURlc2NyaWJlZEJ5XCI6IFwiU3RyaW5nXCIsXG4gICAgXCJhcmlhRXJyb3JUZXh0XCI6IFwiU3RyaW5nXCIsXG4gICAgXCJhcmlhSGVscFwiOiBcIlN0cmluZ1wiLFxuICAgIFwiYXJpYUxhYmVsXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJhcmlhTGFiZWxsZWRCeVwiOiBcIlN0cmluZ1wiLFxuICAgIFwiYXV0b0VsXCI6IFwiU3RyaW5nL09iamVjdFwiLFxuICAgIFwiYXV0b0ZpdEVycm9yc1wiOiBcIkJvb2xlYW5cIixcbiAgICBcImF1dG9SZW5kZXJcIjogXCJCb29sZWFuL1N0cmluZy9IVE1MRWxlbWVudC9FeHQuZG9tLkVsZW1lbnRcIixcbiAgICBcImF1dG9TY3JvbGxcIjogXCJCb29sZWFuXCIsXG4gICAgXCJhdXRvU2hvd1wiOiBcIkJvb2xlYW5cIixcbiAgICBcImJhc2VCb2R5Q2xzXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJiYXNlQ2xzXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJiZWZvcmVCb2R5RWxcIjogXCJTdHJpbmcvQXJyYXkvRXh0LlhUZW1wbGF0ZVwiLFxuICAgIFwiYmVmb3JlTGFiZWxUZXh0VHBsXCI6IFwiU3RyaW5nL0FycmF5L0V4dC5YVGVtcGxhdGVcIixcbiAgICBcImJlZm9yZUxhYmVsVHBsXCI6IFwiU3RyaW5nL0FycmF5L0V4dC5YVGVtcGxhdGVcIixcbiAgICBcImJlZm9yZVN1YlRwbFwiOiBcIlN0cmluZy9BcnJheS9FeHQuWFRlbXBsYXRlXCIsXG4gICAgXCJiaW5kXCI6IFwiT2JqZWN0L1N0cmluZ1wiLFxuICAgIFwiYm9yZGVyXCI6IFwiTnVtYmVyL1N0cmluZy9Cb29sZWFuXCIsXG4gICAgXCJjaGVja0NoYW5nZUJ1ZmZlclwiOiBcIk51bWJlclwiLFxuICAgIFwiY2hlY2tDaGFuZ2VFdmVudHNcIjogXCJOdW1iZXJcIixcbiAgICBcImNoaWxkRWxzXCI6IFwiT2JqZWN0L1N0cmluZ1tdL09iamVjdFtdXCIsXG4gICAgXCJjbHNcIjogXCJTdHJpbmcvU3RyaW5nW11cIixcbiAgICBcImNvbHVtbldpZHRoXCI6IFwiTnVtYmVyXCIsXG4gICAgXCJjb21wb25lbnRDbHNcIjogXCJTdHJpbmdcIixcbiAgICBcImNvbXBvbmVudExheW91dFwiOiBcIlN0cmluZy9PYmplY3RcIixcbiAgICBcImNvbnN0cmFpblwiOiBcIkJvb2xlYW5cIixcbiAgICBcImNvbnN0cmFpbnRJbnNldHNcIjogXCJPYmplY3QvU3RyaW5nXCIsXG4gICAgXCJjb25zdHJhaW5Ub1wiOiBcIkV4dC51dGlsLlJlZ2lvbi9FeHQuZG9tLkVsZW1lbnRcIixcbiAgICBcImNvbnRlbnRFbFwiOiBcIlN0cmluZ1wiLFxuICAgIFwiY29udHJvbGxlclwiOiBcIlN0cmluZy9PYmplY3QvRXh0LmFwcC5WaWV3Q29udHJvbGxlclwiLFxuICAgIFwiZGF0YVwiOiBcIk9iamVjdFwiLFxuICAgIFwiZGVmYXVsdEFsaWduXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJkZWZhdWx0TGlzdGVuZXJTY29wZVwiOiBcIkJvb2xlYW5cIixcbiAgICBcImRpcnR5Q2xzXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJkaXNhYmxlZFwiOiBcIkJvb2xlYW5cIixcbiAgICBcImRpc2FibGVkQ2xzXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJkb2NrXCI6IFwiJ3RvcCcvJ2JvdHRvbScvJ2xlZnQnLydyaWdodCdcIixcbiAgICBcImRyYWdnYWJsZVwiOiBcIkJvb2xlYW4vT2JqZWN0XCIsXG4gICAgXCJlcnJvck1zZ0Nsc1wiOiBcIlN0cmluZ1wiLFxuICAgIFwiZmllbGRCb2R5Q2xzXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJmaWVsZENsc1wiOiBcIlN0cmluZ1wiLFxuICAgIFwiZmllbGRMYWJlbFwiOiBcIlN0cmluZ1wiLFxuICAgIFwiZmllbGRTdHlsZVwiOiBcIlN0cmluZ1wiLFxuICAgIFwiZmllbGRTdWJUcGxcIjogXCJFeHQuWFRlbXBsYXRlXCIsXG4gICAgXCJmaXhlZFwiOiBcIkJvb2xlYW5cIixcbiAgICBcImZsZXhcIjogXCJOdW1iZXJcIixcbiAgICBcImZsb2F0aW5nXCI6IFwiQm9vbGVhblwiLFxuICAgIFwiZm9jdXNDbHNcIjogXCJTdHJpbmdcIixcbiAgICBcImZvY3VzT25Ub0Zyb250XCI6IFwiQm9vbGVhblwiLFxuICAgIFwiZm9ybWF0VGV4dFwiOiBcIlN0cmluZ1wiLFxuICAgIFwiZm9ybUJpbmRcIjogXCJCb29sZWFuXCIsXG4gICAgXCJmb3JtSXRlbUNsc1wiOiBcIlN0cmluZ1wiLFxuICAgIFwiZnJhbWVcIjogXCJCb29sZWFuXCIsXG4gICAgXCJoZWlnaHRcIjogXCJOdW1iZXJ8U3RyaW5nXCIsXG4gICAgXCJoaWRkZW5cIjogXCJCb29sZWFuXCIsXG4gICAgXCJoaWRlRW1wdHlMYWJlbFwiOiBcIkJvb2xlYW5cIixcbiAgICBcImhpZGVMYWJlbFwiOiBcIkJvb2xlYW5cIixcbiAgICBcImhpZGVNb2RlXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJodG1sXCI6IFwiU3RyaW5nL09iamVjdFwiLFxuICAgIFwiaHRtbEVuY29kZVwiOiBcIkJvb2xlYW5cIixcbiAgICBcImlkXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJpbnB1dEF0dHJUcGxcIjogXCJTdHJpbmcvQXJyYXkvRXh0LlhUZW1wbGF0ZVwiLFxuICAgIFwiaW5wdXRJZFwiOiBcIlN0cmluZ1wiLFxuICAgIFwiaW5wdXRUeXBlXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJpbnZhbGlkQ2xzXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJpbnZhbGlkVGV4dFwiOiBcIlN0cmluZ1wiLFxuICAgIFwiaXNUZXh0SW5wdXRcIjogXCJCb29sZWFuXCIsXG4gICAgXCJpdGVtSWRcIjogXCJTdHJpbmdcIixcbiAgICBcImtleU1hcFwiOiBcIk9iamVjdFwiLFxuICAgIFwia2V5TWFwRW5hYmxlZFwiOiBcIkJvb2xlYW5cIixcbiAgICBcImtleU1hcFRhcmdldFwiOiBcIlN0cmluZ1wiLFxuICAgIFwibGFiZWxhYmxlUmVuZGVyVHBsXCI6IFwiU3RyaW5nL1N0cmluZ1tdL0V4dC5YVGVtcGxhdGVcIixcbiAgICBcImxhYmVsQWxpZ25cIjogXCJTdHJpbmdcIixcbiAgICBcImxhYmVsQXR0clRwbFwiOiBcIlN0cmluZy9BcnJheS9FeHQuWFRlbXBsYXRlXCIsXG4gICAgXCJsYWJlbENsc1wiOiBcIlN0cmluZ1wiLFxuICAgIFwibGFiZWxDbHNFeHRyYVwiOiBcIlN0cmluZ1wiLFxuICAgIFwibGFiZWxQYWRcIjogXCJOdW1iZXJcIixcbiAgICBcImxhYmVsU2VwYXJhdG9yXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJsYWJlbFN0eWxlXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJsYWJlbFdpZHRoXCI6IFwiTnVtYmVyXCIsXG4gICAgXCJsaXF1aWRMYXlvdXRcIjogXCJCb29sZWFuXCIsXG4gICAgXCJsaXN0ZW5lcnNcIjogXCJPYmplY3RcIixcbiAgICBcImxpdmVEcmFnXCI6IFwiQm9vbGVhblwiLFxuICAgIFwibG9hZGVyXCI6IFwiRXh0LkNvbXBvbmVudExvYWRlci9PYmplY3RcIixcbiAgICBcIm1hcmdpblwiOiBcIk51bWJlci9TdHJpbmdcIixcbiAgICBcIm1hc2tEZWZhdWx0c1wiOiBcIk9iamVjdFwiLFxuICAgIFwibWFza0VsZW1lbnRcIjogXCJTdHJpbmdcIixcbiAgICBcIm1heEhlaWdodFwiOiBcIk51bWJlclwiLFxuICAgIFwibWF4V2lkdGhcIjogXCJOdW1iZXJcIixcbiAgICBcIm1pbkhlaWdodFwiOiBcIk51bWJlclwiLFxuICAgIFwibWluV2lkdGhcIjogXCJOdW1iZXJcIixcbiAgICBcIm1vZGFsXCI6IFwiQm9vbGVhblwiLFxuICAgIFwibW9kZWxWYWxpZGF0aW9uXCI6IFwiQm9vbGVhblwiLFxuICAgIFwibXNnVGFyZ2V0XCI6IFwiU3RyaW5nXCIsXG4gICAgXCJuYW1lXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJuYW1lYWJsZVwiOiBcIkJvb2xlYW5cIixcbiAgICBcIm92ZXJDbHNcIjogXCJTdHJpbmdcIixcbiAgICBcIm92ZXJmbG93WFwiOiBcIlN0cmluZ1wiLFxuICAgIFwib3ZlcmZsb3dZXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJwYWRkaW5nXCI6IFwiTnVtYmVyL1N0cmluZ1wiLFxuICAgIFwicGx1Z2luc1wiOiBcIkFycmF5L0V4dC5lbnVtcy5QbHVnaW4vT2JqZWN0L0V4dC5wbHVnaW4uQWJzdHJhY3RcIixcbiAgICBcInByZXZlbnRNYXJrXCI6IFwiQm9vbGVhblwiLFxuICAgIFwicHVibGlzaGVzXCI6IFwiU3RyaW5nL1N0cmluZ1tdL09iamVjdFwiLFxuICAgIFwicmVhZE9ubHlcIjogXCJCb29sZWFuXCIsXG4gICAgXCJyZWFkT25seUNsc1wiOiBcIlN0cmluZ1wiLFxuICAgIFwicmVmZXJlbmNlXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJyZWdpb25cIjogXCInbm9ydGgnLydzb3V0aCcvJ2Vhc3QnLyd3ZXN0Jy8nY2VudGVyJ1wiLFxuICAgIFwicmVuZGVyQ29uZmlnXCI6IFwiT2JqZWN0XCIsXG4gICAgXCJyZW5kZXJEYXRhXCI6IFwiT2JqZWN0XCIsXG4gICAgXCJyZW5kZXJlclwiOiBcIkZ1bmN0aW9uL1N0cmluZ1wiLFxuICAgIFwicmVuZGVyU2VsZWN0b3JzXCI6IFwiT2JqZWN0XCIsXG4gICAgXCJyZW5kZXJUb1wiOiBcIlN0cmluZy9IVE1MRWxlbWVudC9FeHQuZG9tLkVsZW1lbnRcIixcbiAgICBcInJlbmRlclRwbFwiOiBcIkV4dC5YVGVtcGxhdGUvU3RyaW5nL1N0cmluZ1tdXCIsXG4gICAgXCJyZXNpemFibGVcIjogXCJCb29sZWFuL09iamVjdFwiLFxuICAgIFwicmVzaXplSGFuZGxlc1wiOiBcIlN0cmluZ1wiLFxuICAgIFwic2F2ZURlbGF5XCI6IFwiTnVtYmVyXCIsXG4gICAgXCJzY29wZVwiOiBcIk9iamVjdFwiLFxuICAgIFwic2Nyb2xsYWJsZVwiOiBcIkJvb2xlYW4vU3RyaW5nL09iamVjdFwiLFxuICAgIFwic2Vzc2lvblwiOiBcIkJvb2xlYW4vT2JqZWN0L0V4dC5kYXRhLlNlc3Npb25cIixcbiAgICBcInNoYWRvd1wiOiBcIlN0cmluZy9Cb29sZWFuXCIsXG4gICAgXCJzaGFkb3dPZmZzZXRcIjogXCJOdW1iZXJcIixcbiAgICBcInNoYXJlYWJsZU5hbWVcIjogXCJCb29sZWFuXCIsXG4gICAgXCJzaGltXCI6IFwiQm9vbGVhblwiLFxuICAgIFwic2hyaW5rV3JhcFwiOiBcIkJvb2xlYW4vTnVtYmVyXCIsXG4gICAgXCJzdGF0ZUV2ZW50c1wiOiBcIlN0cmluZ1tdXCIsXG4gICAgXCJzdGF0ZWZ1bFwiOiBcIkJvb2xlYW4vT2JqZWN0XCIsXG4gICAgXCJzdGF0ZUlkXCI6IFwiU3RyaW5nXCIsXG4gICAgXCJzdHlsZVwiOiBcIlN0cmluZy9PYmplY3RcIixcbiAgICBcInN1Ym1pdFZhbHVlXCI6IFwiQm9vbGVhblwiLFxuICAgIFwidGFiSW5kZXhcIjogXCJOdW1iZXJcIixcbiAgICBcInRvRnJvbnRPblNob3dcIjogXCJCb29sZWFuXCIsXG4gICAgXCJ0b3VjaEFjdGlvblwiOiBcIk9iamVjdFwiLFxuICAgIFwidHBsXCI6IFwiRXh0LlhUZW1wbGF0ZS9FeHQuVGVtcGxhdGUvU3RyaW5nL1N0cmluZ1tdXCIsXG4gICAgXCJ0cGxXcml0ZU1vZGVcIjogXCJTdHJpbmdcIixcbiAgICBcInR3b1dheUJpbmRhYmxlXCI6IFwiU3RyaW5nL1N0cmluZ1tdL09iamVjdFwiLFxuICAgIFwidWlcIjogXCJTdHJpbmdcIixcbiAgICBcInVpQ2xzXCI6IFwiU3RyaW5nW11cIixcbiAgICBcInVzZXJDbHNcIjogXCJTdHJpbmcvU3RyaW5nW11cIixcbiAgICBcInZhbGlkYXRlT25CbHVyXCI6IFwiQm9vbGVhblwiLFxuICAgIFwidmFsaWRhdGVPbkNoYW5nZVwiOiBcIkJvb2xlYW5cIixcbiAgICBcInZhbGlkYXRlT25Gb2N1c0xlYXZlXCI6IFwiQm9vbGVhblwiLFxuICAgIFwidmFsaWRhdGlvblwiOiBcIkJvb2xlYW4vU3RyaW5nXCIsXG4gICAgXCJ2YWxpZGF0aW9uRmllbGRcIjogXCJFeHQuZGF0YS5GaWVsZFwiLFxuICAgIFwidmFsdWVcIjogXCJPYmplY3RcIixcbiAgICBcInZhbHVlUHVibGlzaEV2ZW50XCI6IFwiU3RyaW5nW10vU3RyaW5nXCIsXG4gICAgXCJ2aWV3TW9kZWxcIjogXCJTdHJpbmcvT2JqZWN0L0V4dC5hcHAuVmlld01vZGVsXCIsXG4gICAgXCJ3ZWlnaHRcIjogXCJOdW1iZXJcIixcbiAgICBcIndpZHRoXCI6IFwiTnVtYmVyfFN0cmluZ1wiLFxuICAgIFwieHR5cGVcIjogXCJFeHQuZW51bXMuV2lkZ2V0XCIsXG4gICAgXCJwbGF0Zm9ybUNvbmZpZ1wiOiBcIk9iamVjdFwiLFxuICAgIFwiZml0VG9QYXJlbnRcIjogXCJCb29sZWFuXCIsXG4gICAgXCJjb25maWdcIjogXCJPYmplY3RcIixcbn07XG4gIHB1YmxpYyBzdGF0aWMgUFJPUEVSVElFUzogc3RyaW5nW10gPSBbXG4gICAgJ2FjdGl2ZUNvdW50ZXInLFxuICAgICdhY3RpdmVFcnJvcicsXG4gICAgJ2FjdGl2ZUVycm9yc1RwbCcsXG4gICAgJ2FmdGVyQm9keUVsJyxcbiAgICAnYWZ0ZXJMYWJlbFRleHRUcGwnLFxuICAgICdhZnRlckxhYmVsVHBsJyxcbiAgICAnYWZ0ZXJTdWJUcGwnLFxuICAgICdhbGlnbk9uU2Nyb2xsJyxcbiAgICAnYWxpZ25UYXJnZXQnLFxuICAgICdhbHdheXNPblRvcCcsXG4gICAgJ2FuY2hvcicsXG4gICAgJ2FuaW1hdGVTaGFkb3cnLFxuICAgICdhcmlhQXR0cmlidXRlcycsXG4gICAgJ2FyaWFEZXNjcmliZWRCeScsXG4gICAgJ2FyaWFFcnJvclRleHQnLFxuICAgICdhcmlhSGVscCcsXG4gICAgJ2FyaWFMYWJlbCcsXG4gICAgJ2FyaWFMYWJlbGxlZEJ5JyxcbiAgICAnYXV0b0VsJyxcbiAgICAnYXV0b0ZpdEVycm9ycycsXG4gICAgJ2F1dG9SZW5kZXInLFxuICAgICdhdXRvU2Nyb2xsJyxcbiAgICAnYXV0b1Nob3cnLFxuICAgICdiYXNlQm9keUNscycsXG4gICAgJ2Jhc2VDbHMnLFxuICAgICdiZWZvcmVCb2R5RWwnLFxuICAgICdiZWZvcmVMYWJlbFRleHRUcGwnLFxuICAgICdiZWZvcmVMYWJlbFRwbCcsXG4gICAgJ2JlZm9yZVN1YlRwbCcsXG4gICAgJ2JpbmQnLFxuICAgICdib3JkZXInLFxuICAgICdjaGVja0NoYW5nZUJ1ZmZlcicsXG4gICAgJ2NoZWNrQ2hhbmdlRXZlbnRzJyxcbiAgICAnY2hpbGRFbHMnLFxuICAgICdjbHMnLFxuICAgICdjb2x1bW5XaWR0aCcsXG4gICAgJ2NvbXBvbmVudENscycsXG4gICAgJ2NvbXBvbmVudExheW91dCcsXG4gICAgJ2NvbnN0cmFpbicsXG4gICAgJ2NvbnN0cmFpbnRJbnNldHMnLFxuICAgICdjb25zdHJhaW5UbycsXG4gICAgJ2NvbnRlbnRFbCcsXG4gICAgJ2NvbnRyb2xsZXInLFxuICAgICdkYXRhJyxcbiAgICAnZGVmYXVsdEFsaWduJyxcbiAgICAnZGVmYXVsdExpc3RlbmVyU2NvcGUnLFxuICAgICdkaXJ0eUNscycsXG4gICAgJ2Rpc2FibGVkJyxcbiAgICAnZGlzYWJsZWRDbHMnLFxuICAgICdkb2NrJyxcbiAgICAnZHJhZ2dhYmxlJyxcbiAgICAnZXJyb3JNc2dDbHMnLFxuICAgICdmaWVsZEJvZHlDbHMnLFxuICAgICdmaWVsZENscycsXG4gICAgJ2ZpZWxkTGFiZWwnLFxuICAgICdmaWVsZFN0eWxlJyxcbiAgICAnZmllbGRTdWJUcGwnLFxuICAgICdmaXhlZCcsXG4gICAgJ2ZsZXgnLFxuICAgICdmbG9hdGluZycsXG4gICAgJ2ZvY3VzQ2xzJyxcbiAgICAnZm9jdXNPblRvRnJvbnQnLFxuICAgICdmb3JtYXRUZXh0JyxcbiAgICAnZm9ybUJpbmQnLFxuICAgICdmb3JtSXRlbUNscycsXG4gICAgJ2ZyYW1lJyxcbiAgICAnaGVpZ2h0JyxcbiAgICAnaGlkZGVuJyxcbiAgICAnaGlkZUVtcHR5TGFiZWwnLFxuICAgICdoaWRlTGFiZWwnLFxuICAgICdoaWRlTW9kZScsXG4gICAgJ2h0bWwnLFxuICAgICdodG1sRW5jb2RlJyxcbiAgICAnaWQnLFxuICAgICdpbnB1dEF0dHJUcGwnLFxuICAgICdpbnB1dElkJyxcbiAgICAnaW5wdXRUeXBlJyxcbiAgICAnaW52YWxpZENscycsXG4gICAgJ2ludmFsaWRUZXh0JyxcbiAgICAnaXNUZXh0SW5wdXQnLFxuICAgICdpdGVtSWQnLFxuICAgICdrZXlNYXAnLFxuICAgICdrZXlNYXBFbmFibGVkJyxcbiAgICAna2V5TWFwVGFyZ2V0JyxcbiAgICAnbGFiZWxhYmxlUmVuZGVyVHBsJyxcbiAgICAnbGFiZWxBbGlnbicsXG4gICAgJ2xhYmVsQXR0clRwbCcsXG4gICAgJ2xhYmVsQ2xzJyxcbiAgICAnbGFiZWxDbHNFeHRyYScsXG4gICAgJ2xhYmVsUGFkJyxcbiAgICAnbGFiZWxTZXBhcmF0b3InLFxuICAgICdsYWJlbFN0eWxlJyxcbiAgICAnbGFiZWxXaWR0aCcsXG4gICAgJ2xpcXVpZExheW91dCcsXG4gICAgJ2xpc3RlbmVycycsXG4gICAgJ2xpdmVEcmFnJyxcbiAgICAnbG9hZGVyJyxcbiAgICAnbWFyZ2luJyxcbiAgICAnbWFza0RlZmF1bHRzJyxcbiAgICAnbWFza0VsZW1lbnQnLFxuICAgICdtYXhIZWlnaHQnLFxuICAgICdtYXhXaWR0aCcsXG4gICAgJ21pbkhlaWdodCcsXG4gICAgJ21pbldpZHRoJyxcbiAgICAnbW9kYWwnLFxuICAgICdtb2RlbFZhbGlkYXRpb24nLFxuICAgICdtc2dUYXJnZXQnLFxuICAgICduYW1lJyxcbiAgICAnbmFtZWFibGUnLFxuICAgICdvdmVyQ2xzJyxcbiAgICAnb3ZlcmZsb3dYJyxcbiAgICAnb3ZlcmZsb3dZJyxcbiAgICAncGFkZGluZycsXG4gICAgJ3BsdWdpbnMnLFxuICAgICdwcmV2ZW50TWFyaycsXG4gICAgJ3B1Ymxpc2hlcycsXG4gICAgJ3JlYWRPbmx5JyxcbiAgICAncmVhZE9ubHlDbHMnLFxuICAgICdyZWZlcmVuY2UnLFxuICAgICdyZWdpb24nLFxuICAgICdyZW5kZXJDb25maWcnLFxuICAgICdyZW5kZXJEYXRhJyxcbiAgICAncmVuZGVyZXInLFxuICAgICdyZW5kZXJTZWxlY3RvcnMnLFxuICAgICdyZW5kZXJUbycsXG4gICAgJ3JlbmRlclRwbCcsXG4gICAgJ3Jlc2l6YWJsZScsXG4gICAgJ3Jlc2l6ZUhhbmRsZXMnLFxuICAgICdzYXZlRGVsYXknLFxuICAgICdzY29wZScsXG4gICAgJ3Njcm9sbGFibGUnLFxuICAgICdzZXNzaW9uJyxcbiAgICAnc2hhZG93JyxcbiAgICAnc2hhZG93T2Zmc2V0JyxcbiAgICAnc2hhcmVhYmxlTmFtZScsXG4gICAgJ3NoaW0nLFxuICAgICdzaHJpbmtXcmFwJyxcbiAgICAnc3RhdGVFdmVudHMnLFxuICAgICdzdGF0ZWZ1bCcsXG4gICAgJ3N0YXRlSWQnLFxuICAgICdzdHlsZScsXG4gICAgJ3N1Ym1pdFZhbHVlJyxcbiAgICAndGFiSW5kZXgnLFxuICAgICd0b0Zyb250T25TaG93JyxcbiAgICAndG91Y2hBY3Rpb24nLFxuICAgICd0cGwnLFxuICAgICd0cGxXcml0ZU1vZGUnLFxuICAgICd0d29XYXlCaW5kYWJsZScsXG4gICAgJ3VpJyxcbiAgICAndWlDbHMnLFxuICAgICd1c2VyQ2xzJyxcbiAgICAndmFsaWRhdGVPbkJsdXInLFxuICAgICd2YWxpZGF0ZU9uQ2hhbmdlJyxcbiAgICAndmFsaWRhdGVPbkZvY3VzTGVhdmUnLFxuICAgICd2YWxpZGF0aW9uJyxcbiAgICAndmFsaWRhdGlvbkZpZWxkJyxcbiAgICAndmFsdWUnLFxuICAgICd2YWx1ZVB1Ymxpc2hFdmVudCcsXG4gICAgJ3ZpZXdNb2RlbCcsXG4gICAgJ3dlaWdodCcsXG4gICAgJ3dpZHRoJyxcbiAgICAneHR5cGUnLFxuICAgICdwbGF0Zm9ybUNvbmZpZycsXG4gICAgJ2ZpdFRvUGFyZW50JyxcbiAgICAnY29uZmlnJ1xuXTtcbiAgcHVibGljIHN0YXRpYyBFVkVOVFM6IGFueVtdID0gW1xuXHRcdHtuYW1lOidhY3RpdmF0ZScscGFyYW1ldGVyczonZGlzcGxheWZpZWxkJ30sXG5cdFx0e25hbWU6J2FkZGVkJyxwYXJhbWV0ZXJzOidkaXNwbGF5ZmllbGQsY29udGFpbmVyLHBvcyd9LFxuXHRcdHtuYW1lOidhZnRlcmxheW91dGFuaW1hdGlvbicscGFyYW1ldGVyczonZGlzcGxheWZpZWxkJ30sXG5cdFx0e25hbWU6J2FmdGVycmVuZGVyJyxwYXJhbWV0ZXJzOidkaXNwbGF5ZmllbGQnfSxcblx0XHR7bmFtZTonYmVmb3JlYWN0aXZhdGUnLHBhcmFtZXRlcnM6J2Rpc3BsYXlmaWVsZCd9LFxuXHRcdHtuYW1lOidiZWZvcmVkZWFjdGl2YXRlJyxwYXJhbWV0ZXJzOidkaXNwbGF5ZmllbGQnfSxcblx0XHR7bmFtZTonYmVmb3JlZGVzdHJveScscGFyYW1ldGVyczonZGlzcGxheWZpZWxkJ30sXG5cdFx0e25hbWU6J2JlZm9yZWhpZGUnLHBhcmFtZXRlcnM6J2Rpc3BsYXlmaWVsZCd9LFxuXHRcdHtuYW1lOidiZWZvcmVyZW5kZXInLHBhcmFtZXRlcnM6J2Rpc3BsYXlmaWVsZCd9LFxuXHRcdHtuYW1lOidiZWZvcmVzaG93JyxwYXJhbWV0ZXJzOidkaXNwbGF5ZmllbGQnfSxcblx0XHR7bmFtZTonYmVmb3Jlc3RhdGVyZXN0b3JlJyxwYXJhbWV0ZXJzOidkaXNwbGF5ZmllbGQsc3RhdGUnfSxcblx0XHR7bmFtZTonYmVmb3Jlc3RhdGVzYXZlJyxwYXJhbWV0ZXJzOidkaXNwbGF5ZmllbGQsc3RhdGUnfSxcblx0XHR7bmFtZTonYmx1cicscGFyYW1ldGVyczonZGlzcGxheWZpZWxkLGV2ZW50J30sXG5cdFx0e25hbWU6J2JveHJlYWR5JyxwYXJhbWV0ZXJzOidkaXNwbGF5ZmllbGQsd2lkdGgsaGVpZ2h0J30sXG5cdFx0e25hbWU6J2NoYW5nZScscGFyYW1ldGVyczonZGlzcGxheWZpZWxkLG5ld1ZhbHVlLG9sZFZhbHVlJ30sXG5cdFx0e25hbWU6J2RlYWN0aXZhdGUnLHBhcmFtZXRlcnM6J2Rpc3BsYXlmaWVsZCd9LFxuXHRcdHtuYW1lOidkZXN0cm95JyxwYXJhbWV0ZXJzOidkaXNwbGF5ZmllbGQnfSxcblx0XHR7bmFtZTonZGlydHljaGFuZ2UnLHBhcmFtZXRlcnM6J2Rpc3BsYXlmaWVsZCxpc0RpcnR5J30sXG5cdFx0e25hbWU6J2Rpc2FibGUnLHBhcmFtZXRlcnM6J2Rpc3BsYXlmaWVsZCd9LFxuXHRcdHtuYW1lOidlbmFibGUnLHBhcmFtZXRlcnM6J2Rpc3BsYXlmaWVsZCd9LFxuXHRcdHtuYW1lOidlcnJvcmNoYW5nZScscGFyYW1ldGVyczonZGlzcGxheWZpZWxkLGVycm9yJ30sXG5cdFx0e25hbWU6J2ZvY3VzJyxwYXJhbWV0ZXJzOidkaXNwbGF5ZmllbGQsZXZlbnQnfSxcblx0XHR7bmFtZTonZm9jdXNlbnRlcicscGFyYW1ldGVyczonZGlzcGxheWZpZWxkLGV2ZW50J30sXG5cdFx0e25hbWU6J2ZvY3VzbGVhdmUnLHBhcmFtZXRlcnM6J2Rpc3BsYXlmaWVsZCxldmVudCd9LFxuXHRcdHtuYW1lOidoaWRlJyxwYXJhbWV0ZXJzOidkaXNwbGF5ZmllbGQnfSxcblx0XHR7bmFtZTonbW92ZScscGFyYW1ldGVyczonZGlzcGxheWZpZWxkLHgseSd9LFxuXHRcdHtuYW1lOidyZW1vdmVkJyxwYXJhbWV0ZXJzOidkaXNwbGF5ZmllbGQsb3duZXJDdCd9LFxuXHRcdHtuYW1lOidyZW5kZXInLHBhcmFtZXRlcnM6J2Rpc3BsYXlmaWVsZCd9LFxuXHRcdHtuYW1lOidyZXNpemUnLHBhcmFtZXRlcnM6J2Rpc3BsYXlmaWVsZCx3aWR0aCxoZWlnaHQsb2xkV2lkdGgsb2xkSGVpZ2h0J30sXG5cdFx0e25hbWU6J3Nob3cnLHBhcmFtZXRlcnM6J2Rpc3BsYXlmaWVsZCd9LFxuXHRcdHtuYW1lOidzcGVjaWFsa2V5JyxwYXJhbWV0ZXJzOidkaXNwbGF5ZmllbGQsZSd9LFxuXHRcdHtuYW1lOidzdGF0ZXJlc3RvcmUnLHBhcmFtZXRlcnM6J2Rpc3BsYXlmaWVsZCxzdGF0ZSd9LFxuXHRcdHtuYW1lOidzdGF0ZXNhdmUnLHBhcmFtZXRlcnM6J2Rpc3BsYXlmaWVsZCxzdGF0ZSd9LFxuXHRcdHtuYW1lOid2YWxpZGl0eWNoYW5nZScscGFyYW1ldGVyczonZGlzcGxheWZpZWxkLGlzVmFsaWQnfSxcblx0XHR7bmFtZTond3JpdGVhYmxlY2hhbmdlJyxwYXJhbWV0ZXJzOidkaXNwbGF5ZmllbGQsUmVhZCd9LFxuXHRcdHtuYW1lOidyZWFkeScscGFyYW1ldGVyczonJ31cbl07XG4gIHB1YmxpYyBzdGF0aWMgRVZFTlROQU1FUzogc3RyaW5nW10gPSBbXG5cdFx0J2FjdGl2YXRlJyxcblx0XHQnYWRkZWQnLFxuXHRcdCdhZnRlcmxheW91dGFuaW1hdGlvbicsXG5cdFx0J2FmdGVycmVuZGVyJyxcblx0XHQnYmVmb3JlYWN0aXZhdGUnLFxuXHRcdCdiZWZvcmVkZWFjdGl2YXRlJyxcblx0XHQnYmVmb3JlZGVzdHJveScsXG5cdFx0J2JlZm9yZWhpZGUnLFxuXHRcdCdiZWZvcmVyZW5kZXInLFxuXHRcdCdiZWZvcmVzaG93Jyxcblx0XHQnYmVmb3Jlc3RhdGVyZXN0b3JlJyxcblx0XHQnYmVmb3Jlc3RhdGVzYXZlJyxcblx0XHQnYmx1cicsXG5cdFx0J2JveHJlYWR5Jyxcblx0XHQnY2hhbmdlJyxcblx0XHQnZGVhY3RpdmF0ZScsXG5cdFx0J2Rlc3Ryb3knLFxuXHRcdCdkaXJ0eWNoYW5nZScsXG5cdFx0J2Rpc2FibGUnLFxuXHRcdCdlbmFibGUnLFxuXHRcdCdlcnJvcmNoYW5nZScsXG5cdFx0J2ZvY3VzJyxcblx0XHQnZm9jdXNlbnRlcicsXG5cdFx0J2ZvY3VzbGVhdmUnLFxuXHRcdCdoaWRlJyxcblx0XHQnbW92ZScsXG5cdFx0J3JlbW92ZWQnLFxuXHRcdCdyZW5kZXInLFxuXHRcdCdyZXNpemUnLFxuXHRcdCdzaG93Jyxcblx0XHQnc3BlY2lhbGtleScsXG5cdFx0J3N0YXRlcmVzdG9yZScsXG5cdFx0J3N0YXRlc2F2ZScsXG5cdFx0J3ZhbGlkaXR5Y2hhbmdlJyxcblx0XHQnd3JpdGVhYmxlY2hhbmdlJyxcblx0XHQncmVhZHknXG5dO1xufVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZGlzcGxheWZpZWxkJywgXG4gIGlucHV0czogZGlzcGxheWZpZWxkTWV0YURhdGEuUFJPUEVSVElFUyxcbiAgb3V0cHV0czogZGlzcGxheWZpZWxkTWV0YURhdGEuRVZFTlROQU1FUyxcbiAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IGJhc2UsIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEV4dERpc3BsYXlmaWVsZENvbXBvbmVudCl9XSxcbiAgdGVtcGxhdGU6ICc8bmctdGVtcGxhdGUgI2R5bmFtaWM+PC9uZy10ZW1wbGF0ZT4nXG59KVxuZXhwb3J0IGNsYXNzIEV4dERpc3BsYXlmaWVsZENvbXBvbmVudCBleHRlbmRzIGJhc2UgaW1wbGVtZW50cyBPbkluaXQsQWZ0ZXJDb250ZW50SW5pdCxPbkNoYW5nZXMge1xuICBjb25zdHJ1Y3RvcihlUmVmOkVsZW1lbnRSZWYpIHtzdXBlcihlUmVmLGRpc3BsYXlmaWVsZE1ldGFEYXRhKX1cbiAgcHVibGljIG5nT25Jbml0KCkge3RoaXMuYmFzZU9uSW5pdChkaXNwbGF5ZmllbGRNZXRhRGF0YSl9XG4gIC8vcHVibGljIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHt0aGlzLmJhc2VPbkNoYW5nZXMoY2hhbmdlcyl9XG4gIHB1YmxpYyBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy5iYXNlQWZ0ZXJDb250ZW50SW5pdCgpXG4gICAgdGhpc1sncmVhZHknXS5lbWl0KHRoaXMpXG4gICAgfVxufSJdfQ==