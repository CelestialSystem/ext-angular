/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef } from '@angular/core';
import { base } from './base';
var calendar_calendar_pickerMetaData = /** @class */ (function () {
    function calendar_calendar_pickerMetaData() {
    }
    calendar_calendar_pickerMetaData.XTYPE = 'calendar-calendar-picker';
    calendar_calendar_pickerMetaData.PROPERTIESOBJECT = {
        "activeCounter": "Number",
        "activeError": "String",
        "activeErrorsTpl": "String/String[]/Ext.XTemplate",
        "afterBodyEl": "String/Array/Ext.XTemplate",
        "afterLabelTextTpl": "String/Array/Ext.XTemplate",
        "afterLabelTpl": "String/Array/Ext.XTemplate",
        "afterSubTpl": "String/Array/Ext.XTemplate",
        "alignOnScroll": "Boolean",
        "alignTarget": "String",
        "allowBlank": "Boolean",
        "allowOnlyWhitespace": "Boolean",
        "allQuery": "String",
        "alwaysOnTop": "Boolean/Number",
        "anchor": "String",
        "animateShadow": "Boolean",
        "anyMatch": "Boolean",
        "ariaAttributes": "Object",
        "ariaDescribedBy": "String",
        "ariaErrorText": "String",
        "ariaHelp": "String",
        "ariaLabel": "String",
        "ariaLabelledBy": "String",
        "autoEl": "String/Object",
        "autoFitErrors": "Boolean",
        "autoHideInputMask": "Boolean",
        "autoLoadOnValue": "Boolean",
        "autoRender": "Boolean/String/HTMLElement/Ext.dom.Element",
        "autoScroll": "Boolean",
        "autoSelect": "Boolean",
        "autoSelectLast": "Boolean",
        "autoShow": "Boolean",
        "baseBodyCls": "String",
        "baseCls": "String",
        "beforeBodyEl": "String/Array/Ext.XTemplate",
        "beforeLabelTextTpl": "String/Array/Ext.XTemplate",
        "beforeLabelTpl": "String/Array/Ext.XTemplate",
        "beforeSubTpl": "String/Array/Ext.XTemplate",
        "bind": "Object/String",
        "blankText": "String",
        "border": "Number/String/Boolean",
        "caseSensitive": "Boolean",
        "checkChangeBuffer": "Number",
        "checkChangeEvents": "String[]",
        "childEls": "Object/String[]/Object[]",
        "clearFilterOnBlur": "Boolean",
        "cls": "String/String[]",
        "collapseOnSelect": "Boolean",
        "columnWidth": "Number",
        "componentCls": "String",
        "componentLayout": "String/Object",
        "constrain": "Boolean",
        "constraintInsets": "Object/String",
        "constrainTo": "Ext.util.Region/Ext.dom.Element",
        "contentEl": "String",
        "controller": "String/Object/Ext.app.ViewController",
        "data": "Object",
        "defaultAlign": "String",
        "defaultListConfig": "Object",
        "defaultListenerScope": "Boolean",
        "delimiter": "String",
        "dirtyCls": "String",
        "disabled": "Boolean",
        "disabledCls": "String",
        "disableKeyFilter": "Boolean",
        "displayField": "String",
        "displayTpl": "String/String[]/Ext.XTemplate",
        "dock": "'top'/'bottom'/'left'/'right'",
        "draggable": "Boolean/Object",
        "editable": "Boolean",
        "emptyCls": "String",
        "emptyText": "String",
        "enableKeyEvents": "Boolean",
        "enableRegEx": "Boolean",
        "enforceMaxLength": "Boolean",
        "errorMsgCls": "String",
        "fieldBodyCls": "String",
        "fieldCls": "String",
        "fieldLabel": "String",
        "fieldStyle": "String",
        "fieldSubTpl": "Ext.XTemplate",
        "fixed": "Boolean",
        "flex": "Number",
        "floating": "Boolean",
        "focusCls": "String",
        "focusOnToFront": "Boolean",
        "forceSelection": "Boolean",
        "formatText": "String",
        "formBind": "Boolean",
        "formItemCls": "String",
        "frame": "Boolean",
        "grow": "Boolean",
        "growMax": "Number",
        "growMin": "Number",
        "growToLongestValue": "Boolean",
        "height": "Number|String",
        "hidden": "Boolean",
        "hiddenDataCls": "String",
        "hiddenName": "String",
        "hideEmptyLabel": "Boolean",
        "hideLabel": "Boolean",
        "hideMode": "String",
        "hideTrigger": "Boolean",
        "html": "String/Object",
        "id": "String",
        "inputAttrTpl": "String/Array/Ext.XTemplate",
        "inputId": "String",
        "inputMask": "String/Ext.field.InputMask",
        "inputType": "String",
        "inputWrapCls": "String",
        "invalidCls": "String",
        "invalidText": "String",
        "isTextInput": "Boolean",
        "itemId": "String",
        "keyMap": "Object",
        "keyMapEnabled": "Boolean",
        "keyMapTarget": "String",
        "labelableRenderTpl": "String/String[]/Ext.XTemplate",
        "labelAlign": "String",
        "labelAttrTpl": "String/Array/Ext.XTemplate",
        "labelCls": "String",
        "labelClsExtra": "String",
        "labelPad": "Number",
        "labelSeparator": "String",
        "labelStyle": "String",
        "labelWidth": "Number",
        "liquidLayout": "Boolean",
        "listConfig": "Object",
        "listeners": "Object",
        "liveDrag": "Boolean",
        "loader": "Ext.ComponentLoader/Object",
        "margin": "Number/String",
        "maskDefaults": "Object",
        "maskElement": "String",
        "maskRe": "RegExp",
        "matchFieldWidth": "Boolean",
        "maxHeight": "Number",
        "maxLength": "Number",
        "maxLengthText": "String",
        "maxWidth": "Number",
        "minChars": "Number",
        "minHeight": "Number",
        "minLength": "Number",
        "minLengthText": "String",
        "minWidth": "Number",
        "modal": "Boolean",
        "modelValidation": "Boolean",
        "msgTarget": "String",
        "multiSelect": "Boolean",
        "name": "String",
        "nameable": "Boolean",
        "openCls": "String",
        "overCls": "String",
        "overflowX": "String",
        "overflowY": "String",
        "padding": "Number/String",
        "pageSize": "Number",
        "pickerAlign": "String",
        "pickerOffset": "Number[]",
        "pinList": "Boolean",
        "plugins": "Array/Ext.enums.Plugin/Object/Ext.plugin.Abstract",
        "preventMark": "Boolean",
        "publishes": "String/String[]/Object",
        "queryCaching": "Boolean",
        "queryDelay": "Number",
        "queryMode": "String",
        "queryParam": "String",
        "readOnly": "Boolean",
        "readOnlyCls": "String",
        "reference": "String",
        "regex": "RegExp",
        "regexText": "String",
        "region": "'north'/'south'/'east'/'west'/'center'",
        "renderConfig": "Object",
        "renderData": "Object",
        "renderSelectors": "Object",
        "renderTo": "String/HTMLElement/Ext.dom.Element",
        "renderTpl": "Ext.XTemplate/String/String[]",
        "repeatTriggerClick": "Boolean",
        "requiredCls": "String",
        "resizable": "Boolean/Object",
        "resizeHandles": "String",
        "saveDelay": "Number",
        "scrollable": "Boolean/String/Object",
        "selection": "Ext.data.Model",
        "selectOnFocus": "Boolean",
        "selectOnTab": "Boolean",
        "session": "Boolean/Object/Ext.data.Session",
        "shadow": "String/Boolean",
        "shadowOffset": "Number",
        "shareableName": "Boolean",
        "shim": "Boolean",
        "shrinkWrap": "Boolean/Number",
        "size": "Number",
        "stateEvents": "String[]",
        "stateful": "Boolean/Object",
        "stateId": "String",
        "store": "Ext.data.Store/String/Array/Object",
        "stripCharsRe": "RegExp",
        "style": "String/Object",
        "submitValue": "Boolean",
        "tabIndex": "Number",
        "toFrontOnShow": "Boolean",
        "touchAction": "Object",
        "tpl": "Ext.XTemplate/Ext.Template/String/String[]",
        "tplWriteMode": "String",
        "transform": "String/HTMLElement/Ext.dom.Element",
        "transformInPlace": "Boolean",
        "triggerAction": "String",
        "triggerCls": "String",
        "triggers": "Object",
        "triggerWrapCls": "String",
        "twoWayBindable": "String/String[]/Object",
        "typeAhead": "Boolean",
        "typeAheadDelay": "Number",
        "ui": "String",
        "uiCls": "String[]",
        "userCls": "String/String[]",
        "validateBlank": "Boolean",
        "validateOnBlur": "Boolean",
        "validateOnChange": "Boolean",
        "validateOnFocusLeave": "Boolean",
        "validation": "Boolean/String",
        "validationField": "Ext.data.Field",
        "validator": "Function",
        "value": "Object",
        "valueField": "String",
        "valueNotFoundText": "String",
        "valuePublishEvent": "String[]/String",
        "viewModel": "String/Object/Ext.app.ViewModel",
        "vtype": "String",
        "vtypeText": "String",
        "weight": "Number",
        "width": "Number|String",
        "xtype": "Ext.enums.Widget",
        "platformConfig": "Object",
        "fitToParent": "Boolean",
        "config": "Object",
    };
    calendar_calendar_pickerMetaData.PROPERTIES = [
        'activeCounter',
        'activeError',
        'activeErrorsTpl',
        'afterBodyEl',
        'afterLabelTextTpl',
        'afterLabelTpl',
        'afterSubTpl',
        'alignOnScroll',
        'alignTarget',
        'allowBlank',
        'allowOnlyWhitespace',
        'allQuery',
        'alwaysOnTop',
        'anchor',
        'animateShadow',
        'anyMatch',
        'ariaAttributes',
        'ariaDescribedBy',
        'ariaErrorText',
        'ariaHelp',
        'ariaLabel',
        'ariaLabelledBy',
        'autoEl',
        'autoFitErrors',
        'autoHideInputMask',
        'autoLoadOnValue',
        'autoRender',
        'autoScroll',
        'autoSelect',
        'autoSelectLast',
        'autoShow',
        'baseBodyCls',
        'baseCls',
        'beforeBodyEl',
        'beforeLabelTextTpl',
        'beforeLabelTpl',
        'beforeSubTpl',
        'bind',
        'blankText',
        'border',
        'caseSensitive',
        'checkChangeBuffer',
        'checkChangeEvents',
        'childEls',
        'clearFilterOnBlur',
        'cls',
        'collapseOnSelect',
        'columnWidth',
        'componentCls',
        'componentLayout',
        'constrain',
        'constraintInsets',
        'constrainTo',
        'contentEl',
        'controller',
        'data',
        'defaultAlign',
        'defaultListConfig',
        'defaultListenerScope',
        'delimiter',
        'dirtyCls',
        'disabled',
        'disabledCls',
        'disableKeyFilter',
        'displayField',
        'displayTpl',
        'dock',
        'draggable',
        'editable',
        'emptyCls',
        'emptyText',
        'enableKeyEvents',
        'enableRegEx',
        'enforceMaxLength',
        'errorMsgCls',
        'fieldBodyCls',
        'fieldCls',
        'fieldLabel',
        'fieldStyle',
        'fieldSubTpl',
        'fixed',
        'flex',
        'floating',
        'focusCls',
        'focusOnToFront',
        'forceSelection',
        'formatText',
        'formBind',
        'formItemCls',
        'frame',
        'grow',
        'growMax',
        'growMin',
        'growToLongestValue',
        'height',
        'hidden',
        'hiddenDataCls',
        'hiddenName',
        'hideEmptyLabel',
        'hideLabel',
        'hideMode',
        'hideTrigger',
        'html',
        'id',
        'inputAttrTpl',
        'inputId',
        'inputMask',
        'inputType',
        'inputWrapCls',
        'invalidCls',
        'invalidText',
        'isTextInput',
        'itemId',
        'keyMap',
        'keyMapEnabled',
        'keyMapTarget',
        'labelableRenderTpl',
        'labelAlign',
        'labelAttrTpl',
        'labelCls',
        'labelClsExtra',
        'labelPad',
        'labelSeparator',
        'labelStyle',
        'labelWidth',
        'liquidLayout',
        'listConfig',
        'listeners',
        'liveDrag',
        'loader',
        'margin',
        'maskDefaults',
        'maskElement',
        'maskRe',
        'matchFieldWidth',
        'maxHeight',
        'maxLength',
        'maxLengthText',
        'maxWidth',
        'minChars',
        'minHeight',
        'minLength',
        'minLengthText',
        'minWidth',
        'modal',
        'modelValidation',
        'msgTarget',
        'multiSelect',
        'name',
        'nameable',
        'openCls',
        'overCls',
        'overflowX',
        'overflowY',
        'padding',
        'pageSize',
        'pickerAlign',
        'pickerOffset',
        'pinList',
        'plugins',
        'preventMark',
        'publishes',
        'queryCaching',
        'queryDelay',
        'queryMode',
        'queryParam',
        'readOnly',
        'readOnlyCls',
        'reference',
        'regex',
        'regexText',
        'region',
        'renderConfig',
        'renderData',
        'renderSelectors',
        'renderTo',
        'renderTpl',
        'repeatTriggerClick',
        'requiredCls',
        'resizable',
        'resizeHandles',
        'saveDelay',
        'scrollable',
        'selection',
        'selectOnFocus',
        'selectOnTab',
        'session',
        'shadow',
        'shadowOffset',
        'shareableName',
        'shim',
        'shrinkWrap',
        'size',
        'stateEvents',
        'stateful',
        'stateId',
        'store',
        'stripCharsRe',
        'style',
        'submitValue',
        'tabIndex',
        'toFrontOnShow',
        'touchAction',
        'tpl',
        'tplWriteMode',
        'transform',
        'transformInPlace',
        'triggerAction',
        'triggerCls',
        'triggers',
        'triggerWrapCls',
        'twoWayBindable',
        'typeAhead',
        'typeAheadDelay',
        'ui',
        'uiCls',
        'userCls',
        'validateBlank',
        'validateOnBlur',
        'validateOnChange',
        'validateOnFocusLeave',
        'validation',
        'validationField',
        'validator',
        'value',
        'valueField',
        'valueNotFoundText',
        'valuePublishEvent',
        'viewModel',
        'vtype',
        'vtypeText',
        'weight',
        'width',
        'xtype',
        'platformConfig',
        'fitToParent',
        'config'
    ];
    calendar_calendar_pickerMetaData.EVENTS = [
        { name: 'activate', parameters: 'calendar-calendar-picker' },
        { name: 'added', parameters: 'calendar-calendar-picker,container,pos' },
        { name: 'afterlayoutanimation', parameters: 'calendar-calendar-picker' },
        { name: 'afterrender', parameters: 'calendar-calendar-picker' },
        { name: 'autosize', parameters: 'calendar-calendar-picker,width' },
        { name: 'beforeactivate', parameters: 'calendar-calendar-picker' },
        { name: 'beforedeactivate', parameters: 'calendar-calendar-picker' },
        { name: 'beforedeselect', parameters: 'combo,record,index' },
        { name: 'beforedestroy', parameters: 'calendar-calendar-picker' },
        { name: 'beforehide', parameters: 'calendar-calendar-picker' },
        { name: 'beforequery', parameters: 'queryPlan' },
        { name: 'beforerender', parameters: 'calendar-calendar-picker' },
        { name: 'beforeselect', parameters: 'combo,record,index' },
        { name: 'beforeshow', parameters: 'calendar-calendar-picker' },
        { name: 'beforestaterestore', parameters: 'calendar-calendar-picker,state' },
        { name: 'beforestatesave', parameters: 'calendar-calendar-picker,state' },
        { name: 'blur', parameters: 'calendar-calendar-picker,event' },
        { name: 'boxready', parameters: 'calendar-calendar-picker,width,height' },
        { name: 'change', parameters: 'calendar-calendar-picker,newValue,oldValue' },
        { name: 'collapse', parameters: 'field' },
        { name: 'deactivate', parameters: 'calendar-calendar-picker' },
        { name: 'destroy', parameters: 'calendar-calendar-picker' },
        { name: 'dirtychange', parameters: 'calendar-calendar-picker,isDirty' },
        { name: 'disable', parameters: 'calendar-calendar-picker' },
        { name: 'enable', parameters: 'calendar-calendar-picker' },
        { name: 'errorchange', parameters: 'calendar-calendar-picker,error' },
        { name: 'expand', parameters: 'field' },
        { name: 'focus', parameters: 'calendar-calendar-picker,event' },
        { name: 'focusenter', parameters: 'calendar-calendar-picker,event' },
        { name: 'focusleave', parameters: 'calendar-calendar-picker,event' },
        { name: 'hide', parameters: 'calendar-calendar-picker' },
        { name: 'keydown', parameters: 'calendar-calendar-picker,e' },
        { name: 'keypress', parameters: 'calendar-calendar-picker,e' },
        { name: 'keyup', parameters: 'calendar-calendar-picker,e' },
        { name: 'move', parameters: 'calendar-calendar-picker,x,y' },
        { name: 'paste', parameters: 'calendar-calendar-picker,e' },
        { name: 'removed', parameters: 'calendar-calendar-picker,ownerCt' },
        { name: 'render', parameters: 'calendar-calendar-picker' },
        { name: 'resize', parameters: 'calendar-calendar-picker,width,height,oldWidth,oldHeight' },
        { name: 'select', parameters: 'combo,record' },
        { name: 'show', parameters: 'calendar-calendar-picker' },
        { name: 'specialkey', parameters: 'calendar-calendar-picker,e' },
        { name: 'staterestore', parameters: 'calendar-calendar-picker,state' },
        { name: 'statesave', parameters: 'calendar-calendar-picker,state' },
        { name: 'validitychange', parameters: 'calendar-calendar-picker,isValid' },
        { name: 'writeablechange', parameters: 'calendar-calendar-picker,Read' },
        { name: 'ready', parameters: '' }
    ];
    calendar_calendar_pickerMetaData.EVENTNAMES = [
        'activate',
        'added',
        'afterlayoutanimation',
        'afterrender',
        'autosize',
        'beforeactivate',
        'beforedeactivate',
        'beforedeselect',
        'beforedestroy',
        'beforehide',
        'beforequery',
        'beforerender',
        'beforeselect',
        'beforeshow',
        'beforestaterestore',
        'beforestatesave',
        'blur',
        'boxready',
        'change',
        'collapse',
        'deactivate',
        'destroy',
        'dirtychange',
        'disable',
        'enable',
        'errorchange',
        'expand',
        'focus',
        'focusenter',
        'focusleave',
        'hide',
        'keydown',
        'keypress',
        'keyup',
        'move',
        'paste',
        'removed',
        'render',
        'resize',
        'select',
        'show',
        'specialkey',
        'staterestore',
        'statesave',
        'validitychange',
        'writeablechange',
        'ready'
    ];
    return calendar_calendar_pickerMetaData;
}());
export { calendar_calendar_pickerMetaData };
if (false) {
    /** @type {?} */
    calendar_calendar_pickerMetaData.XTYPE;
    /** @type {?} */
    calendar_calendar_pickerMetaData.PROPERTIESOBJECT;
    /** @type {?} */
    calendar_calendar_pickerMetaData.PROPERTIES;
    /** @type {?} */
    calendar_calendar_pickerMetaData.EVENTS;
    /** @type {?} */
    calendar_calendar_pickerMetaData.EVENTNAMES;
}
var ExtCalendar_calendar_pickerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ExtCalendar_calendar_pickerComponent, _super);
    function ExtCalendar_calendar_pickerComponent(eRef) {
        return _super.call(this, eRef, calendar_calendar_pickerMetaData) || this;
    }
    /**
     * @return {?}
     */
    ExtCalendar_calendar_pickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { this.baseOnInit(calendar_calendar_pickerMetaData); };
    //public ngOnChanges(changes: SimpleChanges) {this.baseOnChanges(changes)}
    //public ngOnChanges(changes: SimpleChanges) {this.baseOnChanges(changes)}
    /**
     * @return {?}
     */
    ExtCalendar_calendar_pickerComponent.prototype.ngAfterContentInit = 
    //public ngOnChanges(changes: SimpleChanges) {this.baseOnChanges(changes)}
    /**
     * @return {?}
     */
    function () {
        this.baseAfterContentInit();
        this['ready'].emit(this);
    };
    ExtCalendar_calendar_pickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'calendar-calendar-picker',
                    inputs: calendar_calendar_pickerMetaData.PROPERTIES,
                    outputs: calendar_calendar_pickerMetaData.EVENTNAMES,
                    providers: [{ provide: base, useExisting: forwardRef(function () { return ExtCalendar_calendar_pickerComponent; }) }],
                    template: '<ng-template #dynamic></ng-template>'
                }] }
    ];
    /** @nocollapse */
    ExtCalendar_calendar_pickerComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ExtCalendar_calendar_pickerComponent;
}(base));
export { ExtCalendar_calendar_pickerComponent };
//# sourceMappingURL=data:application/json;base64,