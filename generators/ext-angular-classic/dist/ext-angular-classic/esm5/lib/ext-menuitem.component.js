/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, forwardRef } from '@angular/core';
import { base } from './base';
var menuitemMetaData = /** @class */ (function () {
    function menuitemMetaData() {
    }
    menuitemMetaData.XTYPE = 'menuitem';
    menuitemMetaData.PROPERTIESOBJECT = {
        "activeCls": "String",
        "activeCounter": "Number",
        "alignOnScroll": "Boolean",
        "alignTarget": "String",
        "alwaysOnTop": "Boolean/Number",
        "anchor": "String",
        "animateShadow": "Boolean",
        "ariaAttributes": "Object",
        "ariaDescribedBy": "String",
        "ariaLabel": "String",
        "ariaLabelledBy": "String",
        "autoEl": "String/Object",
        "autoRender": "Boolean/String/HTMLElement/Ext.dom.Element",
        "autoScroll": "Boolean",
        "autoShow": "Boolean",
        "baseCls": "String",
        "bind": "Object/String",
        "border": "Number/String/Boolean",
        "canActivate": "Boolean",
        "childEls": "Object/String[]/Object[]",
        "clickHideDelay": "Number",
        "cls": "String/String[]",
        "columnWidth": "Number",
        "componentCls": "String",
        "componentLayout": "String/Object",
        "constrain": "Boolean",
        "constraintInsets": "Object/String",
        "constrainTo": "Ext.util.Region/Ext.dom.Element",
        "contentEl": "String",
        "controller": "String/Object/Ext.app.ViewController",
        "data": "Object",
        "defaultAlign": "String",
        "defaultListenerScope": "Boolean",
        "destroyMenu": "Boolean",
        "disabled": "Boolean",
        "disabledCls": "String",
        "dock": "'top'/'bottom'/'left'/'right'",
        "draggable": "Boolean/Object",
        "fixed": "Boolean",
        "flex": "Number",
        "floating": "Boolean",
        "focusCls": "String",
        "focusOnToFront": "Boolean",
        "formBind": "Boolean",
        "frame": "Boolean",
        "glyph": "Number/String",
        "handler": "Function/String",
        "height": "Number|String",
        "hidden": "Boolean",
        "hideMode": "String",
        "hideOnClick": "Boolean",
        "href": "String",
        "hrefTarget": "String",
        "html": "String/Object",
        "icon": "String",
        "iconCls": "String",
        "id": "String",
        "itemId": "String",
        "keyMap": "Object",
        "keyMapEnabled": "Boolean",
        "keyMapTarget": "String",
        "liquidLayout": "Boolean",
        "listeners": "Object",
        "liveDrag": "Boolean",
        "loader": "Ext.ComponentLoader/Object",
        "margin": "Number/String",
        "maskDefaults": "Object",
        "maskElement": "String",
        "maxHeight": "Number",
        "maxWidth": "Number",
        "menu": "Ext.menu.Menu/Object",
        "menuAlign": "String",
        "menuExpandDelay": "Number",
        "menuHideDelay": "Number",
        "minHeight": "Number",
        "minWidth": "Number",
        "modal": "Boolean",
        "modelValidation": "Boolean",
        "nameable": "Boolean",
        "overCls": "String",
        "overflowX": "String",
        "overflowY": "String",
        "padding": "Number/String",
        "plain": "Boolean",
        "plugins": "Array/Ext.enums.Plugin/Object/Ext.plugin.Abstract",
        "publishes": "String/String[]/Object",
        "reference": "String",
        "region": "'north'/'south'/'east'/'west'/'center'",
        "renderConfig": "Object",
        "renderData": "Object",
        "renderSelectors": "Object",
        "renderTo": "String/HTMLElement/Ext.dom.Element",
        "renderTpl": "Ext.XTemplate/String/String[]",
        "resizable": "Boolean/Object",
        "resizeHandles": "String",
        "saveDelay": "Number",
        "scrollable": "Boolean/String/Object",
        "session": "Boolean/Object/Ext.data.Session",
        "shadow": "String/Boolean",
        "shadowOffset": "Number",
        "shareableName": "Boolean",
        "shim": "Boolean",
        "shrinkWrap": "Boolean/Number",
        "stateEvents": "String[]",
        "stateful": "Boolean/Object",
        "stateId": "String",
        "style": "String/Object",
        "tabIndex": "Number",
        "text": "String",
        "toFrontOnShow": "Boolean",
        "tooltip": "String/Object",
        "tooltipType": "String",
        "touchAction": "Object",
        "tpl": "Ext.XTemplate/Ext.Template/String/String[]",
        "tplWriteMode": "String",
        "twoWayBindable": "String/String[]/Object",
        "ui": "String",
        "uiCls": "String[]",
        "userCls": "String/String[]",
        "viewModel": "String/Object/Ext.app.ViewModel",
        "weight": "Number",
        "width": "Number|String",
        "xtype": "Ext.enums.Widget",
        "platformConfig": "Object",
        "fitToParent": "Boolean",
        "config": "Object",
    };
    menuitemMetaData.PROPERTIES = [
        'activeCls',
        'activeCounter',
        'alignOnScroll',
        'alignTarget',
        'alwaysOnTop',
        'anchor',
        'animateShadow',
        'ariaAttributes',
        'ariaDescribedBy',
        'ariaLabel',
        'ariaLabelledBy',
        'autoEl',
        'autoRender',
        'autoScroll',
        'autoShow',
        'baseCls',
        'bind',
        'border',
        'canActivate',
        'childEls',
        'clickHideDelay',
        'cls',
        'columnWidth',
        'componentCls',
        'componentLayout',
        'constrain',
        'constraintInsets',
        'constrainTo',
        'contentEl',
        'controller',
        'data',
        'defaultAlign',
        'defaultListenerScope',
        'destroyMenu',
        'disabled',
        'disabledCls',
        'dock',
        'draggable',
        'fixed',
        'flex',
        'floating',
        'focusCls',
        'focusOnToFront',
        'formBind',
        'frame',
        'glyph',
        'handler',
        'height',
        'hidden',
        'hideMode',
        'hideOnClick',
        'href',
        'hrefTarget',
        'html',
        'icon',
        'iconCls',
        'id',
        'itemId',
        'keyMap',
        'keyMapEnabled',
        'keyMapTarget',
        'liquidLayout',
        'listeners',
        'liveDrag',
        'loader',
        'margin',
        'maskDefaults',
        'maskElement',
        'maxHeight',
        'maxWidth',
        'menu',
        'menuAlign',
        'menuExpandDelay',
        'menuHideDelay',
        'minHeight',
        'minWidth',
        'modal',
        'modelValidation',
        'nameable',
        'overCls',
        'overflowX',
        'overflowY',
        'padding',
        'plain',
        'plugins',
        'publishes',
        'reference',
        'region',
        'renderConfig',
        'renderData',
        'renderSelectors',
        'renderTo',
        'renderTpl',
        'resizable',
        'resizeHandles',
        'saveDelay',
        'scrollable',
        'session',
        'shadow',
        'shadowOffset',
        'shareableName',
        'shim',
        'shrinkWrap',
        'stateEvents',
        'stateful',
        'stateId',
        'style',
        'tabIndex',
        'text',
        'toFrontOnShow',
        'tooltip',
        'tooltipType',
        'touchAction',
        'tpl',
        'tplWriteMode',
        'twoWayBindable',
        'ui',
        'uiCls',
        'userCls',
        'viewModel',
        'weight',
        'width',
        'xtype',
        'platformConfig',
        'fitToParent',
        'config'
    ];
    menuitemMetaData.EVENTS = [
        { name: 'activate', parameters: 'item' },
        { name: 'added', parameters: 'menuitem,container,pos' },
        { name: 'afterlayoutanimation', parameters: 'menuitem' },
        { name: 'afterrender', parameters: 'menuitem' },
        { name: 'beforeactivate', parameters: 'menuitem' },
        { name: 'beforedeactivate', parameters: 'menuitem' },
        { name: 'beforedestroy', parameters: 'menuitem' },
        { name: 'beforehide', parameters: 'menuitem' },
        { name: 'beforerender', parameters: 'menuitem' },
        { name: 'beforeshow', parameters: 'menuitem' },
        { name: 'beforestaterestore', parameters: 'menuitem,state' },
        { name: 'beforestatesave', parameters: 'menuitem,state' },
        { name: 'blur', parameters: 'menuitem,event' },
        { name: 'boxready', parameters: 'menuitem,width,height' },
        { name: 'click', parameters: 'item,e' },
        { name: 'deactivate', parameters: 'item' },
        { name: 'destroy', parameters: 'menuitem' },
        { name: 'disable', parameters: 'menuitem' },
        { name: 'enable', parameters: 'menuitem' },
        { name: 'focus', parameters: 'menuitem,event' },
        { name: 'focusenter', parameters: 'menuitem,event' },
        { name: 'focusleave', parameters: 'menuitem,event' },
        { name: 'hide', parameters: 'menuitem' },
        { name: 'iconchange', parameters: 'menuitem,oldIcon,newIcon' },
        { name: 'move', parameters: 'menuitem,x,y' },
        { name: 'removed', parameters: 'menuitem,ownerCt' },
        { name: 'render', parameters: 'menuitem' },
        { name: 'resize', parameters: 'menuitem,width,height,oldWidth,oldHeight' },
        { name: 'show', parameters: 'menuitem' },
        { name: 'staterestore', parameters: 'menuitem,state' },
        { name: 'statesave', parameters: 'menuitem,state' },
        { name: 'textchange', parameters: 'menuitem,oldText,newText' },
        { name: 'ready', parameters: '' }
    ];
    menuitemMetaData.EVENTNAMES = [
        'activate',
        'added',
        'afterlayoutanimation',
        'afterrender',
        'beforeactivate',
        'beforedeactivate',
        'beforedestroy',
        'beforehide',
        'beforerender',
        'beforeshow',
        'beforestaterestore',
        'beforestatesave',
        'blur',
        'boxready',
        'click',
        'deactivate',
        'destroy',
        'disable',
        'enable',
        'focus',
        'focusenter',
        'focusleave',
        'hide',
        'iconchange',
        'move',
        'removed',
        'render',
        'resize',
        'show',
        'staterestore',
        'statesave',
        'textchange',
        'ready'
    ];
    return menuitemMetaData;
}());
export { menuitemMetaData };
if (false) {
    /** @type {?} */
    menuitemMetaData.XTYPE;
    /** @type {?} */
    menuitemMetaData.PROPERTIESOBJECT;
    /** @type {?} */
    menuitemMetaData.PROPERTIES;
    /** @type {?} */
    menuitemMetaData.EVENTS;
    /** @type {?} */
    menuitemMetaData.EVENTNAMES;
}
var ExtMenuitemComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ExtMenuitemComponent, _super);
    function ExtMenuitemComponent(eRef) {
        return _super.call(this, eRef, menuitemMetaData) || this;
    }
    /**
     * @return {?}
     */
    ExtMenuitemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { this.baseOnInit(menuitemMetaData); };
    //public ngOnChanges(changes: SimpleChanges) {this.baseOnChanges(changes)}
    //public ngOnChanges(changes: SimpleChanges) {this.baseOnChanges(changes)}
    /**
     * @return {?}
     */
    ExtMenuitemComponent.prototype.ngAfterContentInit = 
    //public ngOnChanges(changes: SimpleChanges) {this.baseOnChanges(changes)}
    /**
     * @return {?}
     */
    function () {
        this.baseAfterContentInit();
        this['ready'].emit(this);
    };
    ExtMenuitemComponent.decorators = [
        { type: Component, args: [{
                    selector: 'menuitem',
                    inputs: menuitemMetaData.PROPERTIES,
                    outputs: menuitemMetaData.EVENTNAMES,
                    providers: [{ provide: base, useExisting: forwardRef(function () { return ExtMenuitemComponent; }) }],
                    template: '<ng-template #dynamic></ng-template>'
                }] }
    ];
    /** @nocollapse */
    ExtMenuitemComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    return ExtMenuitemComponent;
}(base));
export { ExtMenuitemComponent };
//# sourceMappingURL=data:application/json;base64,